#include "mozC02gestsea.h"

NS_IMPL_ISUPPORTS1(mozListenerP0000, nsISOAPResponseListener)

mozListenerP0000::mozListenerP0000(mozC02gestsea* aComponent, const nsAString & aKey)
{
  mComponent = aComponent;
  mKey = aKey;
}
mozListenerP0000::~mozListenerP0000()
{
}

NS_IMETHODIMP mozListenerP0000::HandleResponse(nsISOAPResponse *aResponse, nsISOAPCall *aCall, PRUint32 aStatus, PRBool aLast, PRBool *aReturn)
{
  nsresult rv;
  nsCOMPtr<nsISOAPFault> pFault;
  rv = aResponse->GetFault(getter_AddRefs(pFault));
  NS_ENSURE_SUCCESS(rv, rv);
  if (pFault) {
    nsAutoString pFaute, pDetail, pTitle;
    nsCOMPtr<nsIDOMElement> pTheDetail;
    nsCOMPtr<nsIDOMNode> pNode;
    rv = pFault->GetDetail(getter_AddRefs(pTheDetail));
    NS_ENSURE_SUCCESS(rv,rv);
    rv = pTheDetail->GetFirstChild(getter_AddRefs(pNode));
    NS_ENSURE_SUCCESS(rv,rv);
    if (pNode) {
      nsCOMPtr<nsIDOMNamedNodeMap> pAttributes;
      nsCOMPtr<nsIDOMNode> pAttribute, pFirstNode;
      nsAutoString pNodeValue;
      rv = pNode->GetFirstChild(getter_AddRefs(pFirstNode));
      NS_ENSURE_SUCCESS(rv,rv);
      if (pFirstNode) {
        pFirstNode->GetNodeValue(pNodeValue);
        NS_ENSURE_SUCCESS(rv,rv);
        pDetail  = pNodeValue;
      }
      pNode->GetAttributes(getter_AddRefs(pAttributes));
      NS_ENSURE_SUCCESS(rv,rv);
      pAttributes->GetNamedItem(NS_LITERAL_STRING("code"), getter_AddRefs(pAttribute));
      NS_ENSURE_SUCCESS(rv,rv);
      if (pAttribute) {
        pAttribute->GetNodeValue(pNodeValue);
        NS_ENSURE_SUCCESS(rv,rv);
        pDetail += NS_LITERAL_STRING("\n(Erreur ");
        pDetail += pNodeValue;
        pDetail += NS_LITERAL_STRING(")");
      }
    } else pDetail = NS_LITERAL_STRING("Erreur sans message.");
    pFaute = pDetail;
    rv = pFault->GetFaultString(pTitle);
    NS_ENSURE_SUCCESS(rv,rv);
    nsCOMPtr<nsIPrompt> pPrompt= do_GetService(NS_DEFAULTPROMPT_CONTRACTID, &rv);
    NS_ENSURE_SUCCESS(rv,rv);
    pPrompt->Alert(ToNewUnicode(pTitle), ToNewUnicode(pFaute));
    return NS_ERROR_FAILURE;
  }

  nsISOAPParameter ** pParameters;
  PRUint32 pTotal;
  rv = aResponse->GetParameters(PR_FALSE, &pTotal, &pParameters);
  NS_ENSURE_SUCCESS(rv,rv);
  if (pTotal!=1) {
    nsCOMPtr<nsIPrompt> pPrompt= do_GetService(NS_DEFAULTPROMPT_CONTRACTID, &rv);
    NS_ENSURE_SUCCESS(rv,rv);
    pPrompt->Alert(ToNewUnicode(NS_LITERAL_CSTRING("Erreur système")), ToNewUnicode(NS_LITERAL_CSTRING("Le nombre total de paramètres reçus est incorrect.")));
    return NS_ERROR_FAILURE;
  }

  nsAutoString pText;
  nsCOMArray<nsIVariant> pArray;
  nsCOMPtr<nsIWritableVariant> pVariant;
  PRUint32 pLsize=0, pCsize=0;
  PRUint32 pLineIndex, pColIndex;
  PRUint16 pNodeType;
  nsCOMPtr<nsIDOMElement> pResult;
  nsCOMPtr<nsIDOMNodeList> pLines, pValues;
  nsCOMPtr<nsIDOMNode> pLine, pValue, pContent;
  rv = pParameters[0]->GetElement(getter_AddRefs(pResult));
  NS_ENSURE_SUCCESS(rv,rv);
  rv = pResult->GetChildNodes(getter_AddRefs(pLines));
  NS_ENSURE_SUCCESS(rv,rv);
  pLines->GetLength(&pLsize);
  for (pLineIndex=0;pLineIndex<pLsize;pLineIndex++) {
    do {
      rv = pLines->Item(pLineIndex, getter_AddRefs(pLine));
      NS_ENSURE_SUCCESS(rv,rv);
      pLine->GetNodeType(&pNodeType);
      if (pNodeType!=nsIDOMNode::ELEMENT_NODE) pLineIndex++;
    } while (pLineIndex<pLsize && pNodeType!=nsIDOMNode::ELEMENT_NODE);
    if (pLineIndex>=pLsize) break;
    rv = pLine->GetChildNodes(getter_AddRefs(pValues));
    NS_ENSURE_SUCCESS(rv,rv);
    pValues->GetLength(&pCsize);
    for (pColIndex=0;pColIndex<pCsize;pColIndex++) {
      do {
        rv = pValues->Item(pColIndex, getter_AddRefs(pValue));
        NS_ENSURE_SUCCESS(rv,rv);
        pValue->GetNodeType(&pNodeType);
        if (pNodeType!=nsIDOMNode::ELEMENT_NODE) pColIndex++;
      } while (pColIndex<pCsize && pNodeType!=nsIDOMNode::ELEMENT_NODE);
      if (pColIndex>=pCsize) break;
      rv = pValue->GetFirstChild(getter_AddRefs(pContent));
      NS_ENSURE_SUCCESS(rv,rv);
      pVariant = do_CreateInstance(NS_VARIANT_CONTRACTID, &rv);
      NS_ENSURE_SUCCESS(rv,rv);
      if (pContent) {
        rv = pContent->GetNodeValue(pText);
        NS_ENSURE_SUCCESS(rv,rv);
        pVariant->SetAsAString(pText);
        printf("%s|",ToNewCString(pText));
      } else {
        pVariant->SetAsAString(NS_LITERAL_STRING(""));
      }
      rv = pArray.AppendObject(pVariant);
    }
  }
  rv = mComponent->TreatP0000(pArray, pLsize, pCsize, mKey);
  return rv;
}


/* Generated by Pygmalion */


NS_IMPL_ISUPPORTS1(mozListenerP0001, nsISOAPResponseListener)

mozListenerP0001::mozListenerP0001(mozC02gestsea* aComponent, const nsAString & aKey)
{
  mComponent = aComponent;
  mKey = aKey;
}
mozListenerP0001::~mozListenerP0001()
{
}

NS_IMETHODIMP mozListenerP0001::HandleResponse(nsISOAPResponse *aResponse, nsISOAPCall *aCall, PRUint32 aStatus, PRBool aLast, PRBool *aReturn)
{
  nsresult rv;
  nsCOMPtr<nsISOAPFault> pFault;
  rv = aResponse->GetFault(getter_AddRefs(pFault));
  NS_ENSURE_SUCCESS(rv, rv);
  if (pFault) {
    nsAutoString pFaute, pDetail, pTitle;
    nsCOMPtr<nsIDOMElement> pTheDetail;
    nsCOMPtr<nsIDOMNode> pNode;
    rv = pFault->GetDetail(getter_AddRefs(pTheDetail));
    NS_ENSURE_SUCCESS(rv,rv);
    rv = pTheDetail->GetFirstChild(getter_AddRefs(pNode));
    NS_ENSURE_SUCCESS(rv,rv);
    if (pNode) {
      nsCOMPtr<nsIDOMNamedNodeMap> pAttributes;
      nsCOMPtr<nsIDOMNode> pAttribute, pFirstNode;
      nsAutoString pNodeValue;
      rv = pNode->GetFirstChild(getter_AddRefs(pFirstNode));
      NS_ENSURE_SUCCESS(rv,rv);
      if (pFirstNode) {
        pFirstNode->GetNodeValue(pNodeValue);
        NS_ENSURE_SUCCESS(rv,rv);
        pDetail  = pNodeValue;
      }
      pNode->GetAttributes(getter_AddRefs(pAttributes));
      NS_ENSURE_SUCCESS(rv,rv);
      pAttributes->GetNamedItem(NS_LITERAL_STRING("code"), getter_AddRefs(pAttribute));
      NS_ENSURE_SUCCESS(rv,rv);
      if (pAttribute) {
        pAttribute->GetNodeValue(pNodeValue);
        NS_ENSURE_SUCCESS(rv,rv);
        pDetail += NS_LITERAL_STRING("\n(Erreur ");
        pDetail += pNodeValue;
        pDetail += NS_LITERAL_STRING(")");
      }
    } else pDetail = NS_LITERAL_STRING("Erreur sans message.");
    pFaute = pDetail;
    rv = pFault->GetFaultString(pTitle);
    NS_ENSURE_SUCCESS(rv,rv);
    nsCOMPtr<nsIPrompt> pPrompt= do_GetService(NS_DEFAULTPROMPT_CONTRACTID, &rv);
    NS_ENSURE_SUCCESS(rv,rv);
    pPrompt->Alert(ToNewUnicode(pTitle), ToNewUnicode(pFaute));
    return NS_ERROR_FAILURE;
  }

  nsISOAPParameter ** pParameters;
  PRUint32 pTotal;
  rv = aResponse->GetParameters(PR_FALSE, &pTotal, &pParameters);
  NS_ENSURE_SUCCESS(rv,rv);
  if (pTotal!=1) {
    nsCOMPtr<nsIPrompt> pPrompt= do_GetService(NS_DEFAULTPROMPT_CONTRACTID, &rv);
    NS_ENSURE_SUCCESS(rv,rv);
    pPrompt->Alert(ToNewUnicode(NS_LITERAL_CSTRING("Erreur système")), ToNewUnicode(NS_LITERAL_CSTRING("Le nombre total de paramètres reçus est incorrect.")));
    return NS_ERROR_FAILURE;
  }

  nsAutoString pText;
  nsCOMArray<nsIVariant> pArray;
  nsCOMPtr<nsIWritableVariant> pVariant;
  PRUint32 pLsize=0, pCsize=0;
  PRUint32 pLineIndex, pColIndex;
  PRUint16 pNodeType;
  nsCOMPtr<nsIDOMElement> pResult;
  nsCOMPtr<nsIDOMNodeList> pLines, pValues;
  nsCOMPtr<nsIDOMNode> pLine, pValue, pContent;
  rv = pParameters[0]->GetElement(getter_AddRefs(pResult));
  NS_ENSURE_SUCCESS(rv,rv);
  rv = pResult->GetChildNodes(getter_AddRefs(pLines));
  NS_ENSURE_SUCCESS(rv,rv);
  pLines->GetLength(&pLsize);
  for (pLineIndex=0;pLineIndex<pLsize;pLineIndex++) {
    do {
      rv = pLines->Item(pLineIndex, getter_AddRefs(pLine));
      NS_ENSURE_SUCCESS(rv,rv);
      pLine->GetNodeType(&pNodeType);
      if (pNodeType!=nsIDOMNode::ELEMENT_NODE) pLineIndex++;
    } while (pLineIndex<pLsize && pNodeType!=nsIDOMNode::ELEMENT_NODE);
    if (pLineIndex>=pLsize) break;
    rv = pLine->GetChildNodes(getter_AddRefs(pValues));
    NS_ENSURE_SUCCESS(rv,rv);
    pValues->GetLength(&pCsize);
    for (pColIndex=0;pColIndex<pCsize;pColIndex++) {
      do {
        rv = pValues->Item(pColIndex, getter_AddRefs(pValue));
        NS_ENSURE_SUCCESS(rv,rv);
        pValue->GetNodeType(&pNodeType);
        if (pNodeType!=nsIDOMNode::ELEMENT_NODE) pColIndex++;
      } while (pColIndex<pCsize && pNodeType!=nsIDOMNode::ELEMENT_NODE);
      if (pColIndex>=pCsize) break;
      rv = pValue->GetFirstChild(getter_AddRefs(pContent));
      NS_ENSURE_SUCCESS(rv,rv);
      pVariant = do_CreateInstance(NS_VARIANT_CONTRACTID, &rv);
      NS_ENSURE_SUCCESS(rv,rv);
      if (pContent) {
        rv = pContent->GetNodeValue(pText);
        NS_ENSURE_SUCCESS(rv,rv);
        pVariant->SetAsAString(pText);
        printf("%s|",ToNewCString(pText));
      } else {
        pVariant->SetAsAString(NS_LITERAL_STRING(""));
      }
      rv = pArray.AppendObject(pVariant);
    }
  }
  rv = mComponent->TreatP0001(pArray, pLsize, pCsize, mKey);
  return rv;
}


/* Generated by Pygmalion */


NS_IMPL_ISUPPORTS1(mozListenerP0002, nsISOAPResponseListener)

mozListenerP0002::mozListenerP0002(mozC02gestsea* aComponent, const nsAString & aKey)
{
  mComponent = aComponent;
  mKey = aKey;
}
mozListenerP0002::~mozListenerP0002()
{
}

NS_IMETHODIMP mozListenerP0002::HandleResponse(nsISOAPResponse *aResponse, nsISOAPCall *aCall, PRUint32 aStatus, PRBool aLast, PRBool *aReturn)
{
  nsresult rv;
  nsCOMPtr<nsISOAPFault> pFault;
  rv = aResponse->GetFault(getter_AddRefs(pFault));
  NS_ENSURE_SUCCESS(rv, rv);
  if (pFault) {
    nsAutoString pFaute, pDetail, pTitle;
    nsCOMPtr<nsIDOMElement> pTheDetail;
    nsCOMPtr<nsIDOMNode> pNode;
    rv = pFault->GetDetail(getter_AddRefs(pTheDetail));
    NS_ENSURE_SUCCESS(rv,rv);
    rv = pTheDetail->GetFirstChild(getter_AddRefs(pNode));
    NS_ENSURE_SUCCESS(rv,rv);
    if (pNode) {
      nsCOMPtr<nsIDOMNamedNodeMap> pAttributes;
      nsCOMPtr<nsIDOMNode> pAttribute, pFirstNode;
      nsAutoString pNodeValue;
      rv = pNode->GetFirstChild(getter_AddRefs(pFirstNode));
      NS_ENSURE_SUCCESS(rv,rv);
      if (pFirstNode) {
        pFirstNode->GetNodeValue(pNodeValue);
        NS_ENSURE_SUCCESS(rv,rv);
        pDetail  = pNodeValue;
      }
      pNode->GetAttributes(getter_AddRefs(pAttributes));
      NS_ENSURE_SUCCESS(rv,rv);
      pAttributes->GetNamedItem(NS_LITERAL_STRING("code"), getter_AddRefs(pAttribute));
      NS_ENSURE_SUCCESS(rv,rv);
      if (pAttribute) {
        pAttribute->GetNodeValue(pNodeValue);
        NS_ENSURE_SUCCESS(rv,rv);
        pDetail += NS_LITERAL_STRING("\n(Erreur ");
        pDetail += pNodeValue;
        pDetail += NS_LITERAL_STRING(")");
      }
    } else pDetail = NS_LITERAL_STRING("Erreur sans message.");
    pFaute = pDetail;
    rv = pFault->GetFaultString(pTitle);
    NS_ENSURE_SUCCESS(rv,rv);
    nsCOMPtr<nsIPrompt> pPrompt= do_GetService(NS_DEFAULTPROMPT_CONTRACTID, &rv);
    NS_ENSURE_SUCCESS(rv,rv);
    pPrompt->Alert(ToNewUnicode(pTitle), ToNewUnicode(pFaute));
    return NS_ERROR_FAILURE;
  }

  nsISOAPParameter ** pParameters;
  PRUint32 pTotal;
  rv = aResponse->GetParameters(PR_FALSE, &pTotal, &pParameters);
  NS_ENSURE_SUCCESS(rv,rv);
  if (pTotal!=1) {
    nsCOMPtr<nsIPrompt> pPrompt= do_GetService(NS_DEFAULTPROMPT_CONTRACTID, &rv);
    NS_ENSURE_SUCCESS(rv,rv);
    pPrompt->Alert(ToNewUnicode(NS_LITERAL_CSTRING("Erreur système")), ToNewUnicode(NS_LITERAL_CSTRING("Le nombre total de paramètres reçus est incorrect.")));
    return NS_ERROR_FAILURE;
  }

  nsAutoString pText;
  nsCOMArray<nsIVariant> pArray;
  nsCOMPtr<nsIWritableVariant> pVariant;
  PRUint32 pLsize=0, pCsize=0;
  PRUint32 pLineIndex, pColIndex;
  PRUint16 pNodeType;
  nsCOMPtr<nsIDOMElement> pResult;
  nsCOMPtr<nsIDOMNodeList> pLines, pValues;
  nsCOMPtr<nsIDOMNode> pLine, pValue, pContent;
  rv = pParameters[0]->GetElement(getter_AddRefs(pResult));
  NS_ENSURE_SUCCESS(rv,rv);
  rv = pResult->GetChildNodes(getter_AddRefs(pLines));
  NS_ENSURE_SUCCESS(rv,rv);
  pLines->GetLength(&pLsize);
  for (pLineIndex=0;pLineIndex<pLsize;pLineIndex++) {
    do {
      rv = pLines->Item(pLineIndex, getter_AddRefs(pLine));
      NS_ENSURE_SUCCESS(rv,rv);
      pLine->GetNodeType(&pNodeType);
      if (pNodeType!=nsIDOMNode::ELEMENT_NODE) pLineIndex++;
    } while (pLineIndex<pLsize && pNodeType!=nsIDOMNode::ELEMENT_NODE);
    if (pLineIndex>=pLsize) break;
    rv = pLine->GetChildNodes(getter_AddRefs(pValues));
    NS_ENSURE_SUCCESS(rv,rv);
    pValues->GetLength(&pCsize);
    for (pColIndex=0;pColIndex<pCsize;pColIndex++) {
      do {
        rv = pValues->Item(pColIndex, getter_AddRefs(pValue));
        NS_ENSURE_SUCCESS(rv,rv);
        pValue->GetNodeType(&pNodeType);
        if (pNodeType!=nsIDOMNode::ELEMENT_NODE) pColIndex++;
      } while (pColIndex<pCsize && pNodeType!=nsIDOMNode::ELEMENT_NODE);
      if (pColIndex>=pCsize) break;
      rv = pValue->GetFirstChild(getter_AddRefs(pContent));
      NS_ENSURE_SUCCESS(rv,rv);
      pVariant = do_CreateInstance(NS_VARIANT_CONTRACTID, &rv);
      NS_ENSURE_SUCCESS(rv,rv);
      if (pContent) {
        rv = pContent->GetNodeValue(pText);
        NS_ENSURE_SUCCESS(rv,rv);
        pVariant->SetAsAString(pText);
        printf("%s|",ToNewCString(pText));
      } else {
        pVariant->SetAsAString(NS_LITERAL_STRING(""));
      }
      rv = pArray.AppendObject(pVariant);
    }
  }
  rv = mComponent->TreatP0002(pArray, pLsize, pCsize, mKey);
  return rv;
}


/* Generated by Pygmalion */


NS_IMPL_ISUPPORTS1(mozListenerP0003, nsISOAPResponseListener)

mozListenerP0003::mozListenerP0003(mozC02gestsea* aComponent, const nsAString & aKey)
{
  mComponent = aComponent;
  mKey = aKey;
}
mozListenerP0003::~mozListenerP0003()
{
}

NS_IMETHODIMP mozListenerP0003::HandleResponse(nsISOAPResponse *aResponse, nsISOAPCall *aCall, PRUint32 aStatus, PRBool aLast, PRBool *aReturn)
{
  nsresult rv;
  nsCOMPtr<nsISOAPFault> pFault;
  rv = aResponse->GetFault(getter_AddRefs(pFault));
  NS_ENSURE_SUCCESS(rv, rv);
  if (pFault) {
    nsAutoString pFaute, pDetail, pTitle;
    nsCOMPtr<nsIDOMElement> pTheDetail;
    nsCOMPtr<nsIDOMNode> pNode;
    rv = pFault->GetDetail(getter_AddRefs(pTheDetail));
    NS_ENSURE_SUCCESS(rv,rv);
    rv = pTheDetail->GetFirstChild(getter_AddRefs(pNode));
    NS_ENSURE_SUCCESS(rv,rv);
    if (pNode) {
      nsCOMPtr<nsIDOMNamedNodeMap> pAttributes;
      nsCOMPtr<nsIDOMNode> pAttribute, pFirstNode;
      nsAutoString pNodeValue;
      rv = pNode->GetFirstChild(getter_AddRefs(pFirstNode));
      NS_ENSURE_SUCCESS(rv,rv);
      if (pFirstNode) {
        pFirstNode->GetNodeValue(pNodeValue);
        NS_ENSURE_SUCCESS(rv,rv);
        pDetail  = pNodeValue;
      }
      pNode->GetAttributes(getter_AddRefs(pAttributes));
      NS_ENSURE_SUCCESS(rv,rv);
      pAttributes->GetNamedItem(NS_LITERAL_STRING("code"), getter_AddRefs(pAttribute));
      NS_ENSURE_SUCCESS(rv,rv);
      if (pAttribute) {
        pAttribute->GetNodeValue(pNodeValue);
        NS_ENSURE_SUCCESS(rv,rv);
        pDetail += NS_LITERAL_STRING("\n(Erreur ");
        pDetail += pNodeValue;
        pDetail += NS_LITERAL_STRING(")");
      }
    } else pDetail = NS_LITERAL_STRING("Erreur sans message.");
    pFaute = pDetail;
    rv = pFault->GetFaultString(pTitle);
    NS_ENSURE_SUCCESS(rv,rv);
    nsCOMPtr<nsIPrompt> pPrompt= do_GetService(NS_DEFAULTPROMPT_CONTRACTID, &rv);
    NS_ENSURE_SUCCESS(rv,rv);
    pPrompt->Alert(ToNewUnicode(pTitle), ToNewUnicode(pFaute));
    return NS_ERROR_FAILURE;
  }

  nsISOAPParameter ** pParameters;
  PRUint32 pTotal;
  rv = aResponse->GetParameters(PR_FALSE, &pTotal, &pParameters);
  NS_ENSURE_SUCCESS(rv,rv);
  if (pTotal!=1) {
    nsCOMPtr<nsIPrompt> pPrompt= do_GetService(NS_DEFAULTPROMPT_CONTRACTID, &rv);
    NS_ENSURE_SUCCESS(rv,rv);
    pPrompt->Alert(ToNewUnicode(NS_LITERAL_CSTRING("Erreur système")), ToNewUnicode(NS_LITERAL_CSTRING("Le nombre total de paramètres reçus est incorrect.")));
    return NS_ERROR_FAILURE;
  }

  nsAutoString pText;
  nsCOMArray<nsIVariant> pArray;
  nsCOMPtr<nsIWritableVariant> pVariant;
  PRUint32 pLsize=0, pCsize=0;
  PRUint32 pLineIndex, pColIndex;
  PRUint16 pNodeType;
  nsCOMPtr<nsIDOMElement> pResult;
  nsCOMPtr<nsIDOMNodeList> pLines, pValues;
  nsCOMPtr<nsIDOMNode> pLine, pValue, pContent;
  rv = pParameters[0]->GetElement(getter_AddRefs(pResult));
  NS_ENSURE_SUCCESS(rv,rv);
  rv = pResult->GetChildNodes(getter_AddRefs(pLines));
  NS_ENSURE_SUCCESS(rv,rv);
  pLines->GetLength(&pLsize);
  for (pLineIndex=0;pLineIndex<pLsize;pLineIndex++) {
    do {
      rv = pLines->Item(pLineIndex, getter_AddRefs(pLine));
      NS_ENSURE_SUCCESS(rv,rv);
      pLine->GetNodeType(&pNodeType);
      if (pNodeType!=nsIDOMNode::ELEMENT_NODE) pLineIndex++;
    } while (pLineIndex<pLsize && pNodeType!=nsIDOMNode::ELEMENT_NODE);
    if (pLineIndex>=pLsize) break;
    rv = pLine->GetChildNodes(getter_AddRefs(pValues));
    NS_ENSURE_SUCCESS(rv,rv);
    pValues->GetLength(&pCsize);
    for (pColIndex=0;pColIndex<pCsize;pColIndex++) {
      do {
        rv = pValues->Item(pColIndex, getter_AddRefs(pValue));
        NS_ENSURE_SUCCESS(rv,rv);
        pValue->GetNodeType(&pNodeType);
        if (pNodeType!=nsIDOMNode::ELEMENT_NODE) pColIndex++;
      } while (pColIndex<pCsize && pNodeType!=nsIDOMNode::ELEMENT_NODE);
      if (pColIndex>=pCsize) break;
      rv = pValue->GetFirstChild(getter_AddRefs(pContent));
      NS_ENSURE_SUCCESS(rv,rv);
      pVariant = do_CreateInstance(NS_VARIANT_CONTRACTID, &rv);
      NS_ENSURE_SUCCESS(rv,rv);
      if (pContent) {
        rv = pContent->GetNodeValue(pText);
        NS_ENSURE_SUCCESS(rv,rv);
        pVariant->SetAsAString(pText);
        printf("%s|",ToNewCString(pText));
      } else {
        pVariant->SetAsAString(NS_LITERAL_STRING(""));
      }
      rv = pArray.AppendObject(pVariant);
    }
  }
  rv = mComponent->TreatP0003(pArray, pLsize, pCsize, mKey);
  return rv;
}


/* Generated by Pygmalion */


NS_IMPL_ISUPPORTS1(mozListenerP0004, nsISOAPResponseListener)

mozListenerP0004::mozListenerP0004(mozC02gestsea* aComponent, const nsAString & aKey)
{
  mComponent = aComponent;
  mKey = aKey;
}
mozListenerP0004::~mozListenerP0004()
{
}

NS_IMETHODIMP mozListenerP0004::HandleResponse(nsISOAPResponse *aResponse, nsISOAPCall *aCall, PRUint32 aStatus, PRBool aLast, PRBool *aReturn)
{
  nsresult rv;
  nsCOMPtr<nsISOAPFault> pFault;
  rv = aResponse->GetFault(getter_AddRefs(pFault));
  NS_ENSURE_SUCCESS(rv, rv);
  if (pFault) {
    nsAutoString pFaute, pDetail, pTitle;
    nsCOMPtr<nsIDOMElement> pTheDetail;
    nsCOMPtr<nsIDOMNode> pNode;
    rv = pFault->GetDetail(getter_AddRefs(pTheDetail));
    NS_ENSURE_SUCCESS(rv,rv);
    rv = pTheDetail->GetFirstChild(getter_AddRefs(pNode));
    NS_ENSURE_SUCCESS(rv,rv);
    if (pNode) {
      nsCOMPtr<nsIDOMNamedNodeMap> pAttributes;
      nsCOMPtr<nsIDOMNode> pAttribute, pFirstNode;
      nsAutoString pNodeValue;
      rv = pNode->GetFirstChild(getter_AddRefs(pFirstNode));
      NS_ENSURE_SUCCESS(rv,rv);
      if (pFirstNode) {
        pFirstNode->GetNodeValue(pNodeValue);
        NS_ENSURE_SUCCESS(rv,rv);
        pDetail  = pNodeValue;
      }
      pNode->GetAttributes(getter_AddRefs(pAttributes));
      NS_ENSURE_SUCCESS(rv,rv);
      pAttributes->GetNamedItem(NS_LITERAL_STRING("code"), getter_AddRefs(pAttribute));
      NS_ENSURE_SUCCESS(rv,rv);
      if (pAttribute) {
        pAttribute->GetNodeValue(pNodeValue);
        NS_ENSURE_SUCCESS(rv,rv);
        pDetail += NS_LITERAL_STRING("\n(Erreur ");
        pDetail += pNodeValue;
        pDetail += NS_LITERAL_STRING(")");
      }
    } else pDetail = NS_LITERAL_STRING("Erreur sans message.");
    pFaute = pDetail;
    rv = pFault->GetFaultString(pTitle);
    NS_ENSURE_SUCCESS(rv,rv);
    nsCOMPtr<nsIPrompt> pPrompt= do_GetService(NS_DEFAULTPROMPT_CONTRACTID, &rv);
    NS_ENSURE_SUCCESS(rv,rv);
    pPrompt->Alert(ToNewUnicode(pTitle), ToNewUnicode(pFaute));
    return NS_ERROR_FAILURE;
  }

  nsISOAPParameter ** pParameters;
  PRUint32 pTotal;
  rv = aResponse->GetParameters(PR_FALSE, &pTotal, &pParameters);
  NS_ENSURE_SUCCESS(rv,rv);
  if (pTotal!=1) {
    nsCOMPtr<nsIPrompt> pPrompt= do_GetService(NS_DEFAULTPROMPT_CONTRACTID, &rv);
    NS_ENSURE_SUCCESS(rv,rv);
    pPrompt->Alert(ToNewUnicode(NS_LITERAL_CSTRING("Erreur système")), ToNewUnicode(NS_LITERAL_CSTRING("Le nombre total de paramètres reçus est incorrect.")));
    return NS_ERROR_FAILURE;
  }

  nsAutoString pText;
  nsCOMArray<nsIVariant> pArray;
  nsCOMPtr<nsIWritableVariant> pVariant;
  PRUint32 pLsize=0, pCsize=0;
  PRUint32 pLineIndex, pColIndex;
  PRUint16 pNodeType;
  nsCOMPtr<nsIDOMElement> pResult;
  nsCOMPtr<nsIDOMNodeList> pLines, pValues;
  nsCOMPtr<nsIDOMNode> pLine, pValue, pContent;
  rv = pParameters[0]->GetElement(getter_AddRefs(pResult));
  NS_ENSURE_SUCCESS(rv,rv);
  rv = pResult->GetChildNodes(getter_AddRefs(pLines));
  NS_ENSURE_SUCCESS(rv,rv);
  pLines->GetLength(&pLsize);
  for (pLineIndex=0;pLineIndex<pLsize;pLineIndex++) {
    do {
      rv = pLines->Item(pLineIndex, getter_AddRefs(pLine));
      NS_ENSURE_SUCCESS(rv,rv);
      pLine->GetNodeType(&pNodeType);
      if (pNodeType!=nsIDOMNode::ELEMENT_NODE) pLineIndex++;
    } while (pLineIndex<pLsize && pNodeType!=nsIDOMNode::ELEMENT_NODE);
    if (pLineIndex>=pLsize) break;
    rv = pLine->GetChildNodes(getter_AddRefs(pValues));
    NS_ENSURE_SUCCESS(rv,rv);
    pValues->GetLength(&pCsize);
    for (pColIndex=0;pColIndex<pCsize;pColIndex++) {
      do {
        rv = pValues->Item(pColIndex, getter_AddRefs(pValue));
        NS_ENSURE_SUCCESS(rv,rv);
        pValue->GetNodeType(&pNodeType);
        if (pNodeType!=nsIDOMNode::ELEMENT_NODE) pColIndex++;
      } while (pColIndex<pCsize && pNodeType!=nsIDOMNode::ELEMENT_NODE);
      if (pColIndex>=pCsize) break;
      rv = pValue->GetFirstChild(getter_AddRefs(pContent));
      NS_ENSURE_SUCCESS(rv,rv);
      pVariant = do_CreateInstance(NS_VARIANT_CONTRACTID, &rv);
      NS_ENSURE_SUCCESS(rv,rv);
      if (pContent) {
        rv = pContent->GetNodeValue(pText);
        NS_ENSURE_SUCCESS(rv,rv);
        pVariant->SetAsAString(pText);
        printf("%s|",ToNewCString(pText));
      } else {
        pVariant->SetAsAString(NS_LITERAL_STRING(""));
      }
      rv = pArray.AppendObject(pVariant);
    }
  }
  rv = mComponent->TreatP0004(pArray, pLsize, pCsize, mKey);
  return rv;
}


/* Generated by Pygmalion */


NS_IMPL_ISUPPORTS1(mozListenerP0005, nsISOAPResponseListener)

mozListenerP0005::mozListenerP0005(mozC02gestsea* aComponent, const nsAString & aKey)
{
  mComponent = aComponent;
  mKey = aKey;
}
mozListenerP0005::~mozListenerP0005()
{
}

NS_IMETHODIMP mozListenerP0005::HandleResponse(nsISOAPResponse *aResponse, nsISOAPCall *aCall, PRUint32 aStatus, PRBool aLast, PRBool *aReturn)
{
  nsresult rv;
  nsCOMPtr<nsISOAPFault> pFault;
  rv = aResponse->GetFault(getter_AddRefs(pFault));
  NS_ENSURE_SUCCESS(rv, rv);
  if (pFault) {
    nsAutoString pFaute, pDetail, pTitle;
    nsCOMPtr<nsIDOMElement> pTheDetail;
    nsCOMPtr<nsIDOMNode> pNode;
    rv = pFault->GetDetail(getter_AddRefs(pTheDetail));
    NS_ENSURE_SUCCESS(rv,rv);
    rv = pTheDetail->GetFirstChild(getter_AddRefs(pNode));
    NS_ENSURE_SUCCESS(rv,rv);
    if (pNode) {
      nsCOMPtr<nsIDOMNamedNodeMap> pAttributes;
      nsCOMPtr<nsIDOMNode> pAttribute, pFirstNode;
      nsAutoString pNodeValue;
      rv = pNode->GetFirstChild(getter_AddRefs(pFirstNode));
      NS_ENSURE_SUCCESS(rv,rv);
      if (pFirstNode) {
        pFirstNode->GetNodeValue(pNodeValue);
        NS_ENSURE_SUCCESS(rv,rv);
        pDetail  = pNodeValue;
      }
      pNode->GetAttributes(getter_AddRefs(pAttributes));
      NS_ENSURE_SUCCESS(rv,rv);
      pAttributes->GetNamedItem(NS_LITERAL_STRING("code"), getter_AddRefs(pAttribute));
      NS_ENSURE_SUCCESS(rv,rv);
      if (pAttribute) {
        pAttribute->GetNodeValue(pNodeValue);
        NS_ENSURE_SUCCESS(rv,rv);
        pDetail += NS_LITERAL_STRING("\n(Erreur ");
        pDetail += pNodeValue;
        pDetail += NS_LITERAL_STRING(")");
      }
    } else pDetail = NS_LITERAL_STRING("Erreur sans message.");
    pFaute = pDetail;
    rv = pFault->GetFaultString(pTitle);
    NS_ENSURE_SUCCESS(rv,rv);
    nsCOMPtr<nsIPrompt> pPrompt= do_GetService(NS_DEFAULTPROMPT_CONTRACTID, &rv);
    NS_ENSURE_SUCCESS(rv,rv);
    pPrompt->Alert(ToNewUnicode(pTitle), ToNewUnicode(pFaute));
    return NS_ERROR_FAILURE;
  }

  nsISOAPParameter ** pParameters;
  PRUint32 pTotal;
  rv = aResponse->GetParameters(PR_FALSE, &pTotal, &pParameters);
  NS_ENSURE_SUCCESS(rv,rv);
  if (pTotal!=1) {
    nsCOMPtr<nsIPrompt> pPrompt= do_GetService(NS_DEFAULTPROMPT_CONTRACTID, &rv);
    NS_ENSURE_SUCCESS(rv,rv);
    pPrompt->Alert(ToNewUnicode(NS_LITERAL_CSTRING("Erreur système")), ToNewUnicode(NS_LITERAL_CSTRING("Le nombre total de paramètres reçus est incorrect.")));
    return NS_ERROR_FAILURE;
  }

  nsAutoString pText;
  nsCOMArray<nsIVariant> pArray;
  nsCOMPtr<nsIWritableVariant> pVariant;
  PRUint32 pLsize=0, pCsize=0;
  PRUint32 pLineIndex, pColIndex;
  PRUint16 pNodeType;
  nsCOMPtr<nsIDOMElement> pResult;
  nsCOMPtr<nsIDOMNodeList> pLines, pValues;
  nsCOMPtr<nsIDOMNode> pLine, pValue, pContent;
  rv = pParameters[0]->GetElement(getter_AddRefs(pResult));
  NS_ENSURE_SUCCESS(rv,rv);
  rv = pResult->GetChildNodes(getter_AddRefs(pLines));
  NS_ENSURE_SUCCESS(rv,rv);
  pLines->GetLength(&pLsize);
  for (pLineIndex=0;pLineIndex<pLsize;pLineIndex++) {
    do {
      rv = pLines->Item(pLineIndex, getter_AddRefs(pLine));
      NS_ENSURE_SUCCESS(rv,rv);
      pLine->GetNodeType(&pNodeType);
      if (pNodeType!=nsIDOMNode::ELEMENT_NODE) pLineIndex++;
    } while (pLineIndex<pLsize && pNodeType!=nsIDOMNode::ELEMENT_NODE);
    if (pLineIndex>=pLsize) break;
    rv = pLine->GetChildNodes(getter_AddRefs(pValues));
    NS_ENSURE_SUCCESS(rv,rv);
    pValues->GetLength(&pCsize);
    for (pColIndex=0;pColIndex<pCsize;pColIndex++) {
      do {
        rv = pValues->Item(pColIndex, getter_AddRefs(pValue));
        NS_ENSURE_SUCCESS(rv,rv);
        pValue->GetNodeType(&pNodeType);
        if (pNodeType!=nsIDOMNode::ELEMENT_NODE) pColIndex++;
      } while (pColIndex<pCsize && pNodeType!=nsIDOMNode::ELEMENT_NODE);
      if (pColIndex>=pCsize) break;
      rv = pValue->GetFirstChild(getter_AddRefs(pContent));
      NS_ENSURE_SUCCESS(rv,rv);
      pVariant = do_CreateInstance(NS_VARIANT_CONTRACTID, &rv);
      NS_ENSURE_SUCCESS(rv,rv);
      if (pContent) {
        rv = pContent->GetNodeValue(pText);
        NS_ENSURE_SUCCESS(rv,rv);
        pVariant->SetAsAString(pText);
        printf("%s|",ToNewCString(pText));
      } else {
        pVariant->SetAsAString(NS_LITERAL_STRING(""));
      }
      rv = pArray.AppendObject(pVariant);
    }
  }
  rv = mComponent->TreatP0005(pArray, pLsize, pCsize, mKey);
  return rv;
}


/* Generated by Pygmalion */


NS_IMPL_ISUPPORTS1(mozListenerP0006, nsISOAPResponseListener)

mozListenerP0006::mozListenerP0006(mozC02gestsea* aComponent, const nsAString & aKey)
{
  mComponent = aComponent;
  mKey = aKey;
}
mozListenerP0006::~mozListenerP0006()
{
}

NS_IMETHODIMP mozListenerP0006::HandleResponse(nsISOAPResponse *aResponse, nsISOAPCall *aCall, PRUint32 aStatus, PRBool aLast, PRBool *aReturn)
{
  nsresult rv;
  nsCOMPtr<nsISOAPFault> pFault;
  rv = aResponse->GetFault(getter_AddRefs(pFault));
  NS_ENSURE_SUCCESS(rv, rv);
  if (pFault) {
    nsAutoString pFaute, pDetail, pTitle;
    nsCOMPtr<nsIDOMElement> pTheDetail;
    nsCOMPtr<nsIDOMNode> pNode;
    rv = pFault->GetDetail(getter_AddRefs(pTheDetail));
    NS_ENSURE_SUCCESS(rv,rv);
    rv = pTheDetail->GetFirstChild(getter_AddRefs(pNode));
    NS_ENSURE_SUCCESS(rv,rv);
    if (pNode) {
      nsCOMPtr<nsIDOMNamedNodeMap> pAttributes;
      nsCOMPtr<nsIDOMNode> pAttribute, pFirstNode;
      nsAutoString pNodeValue;
      rv = pNode->GetFirstChild(getter_AddRefs(pFirstNode));
      NS_ENSURE_SUCCESS(rv,rv);
      if (pFirstNode) {
        pFirstNode->GetNodeValue(pNodeValue);
        NS_ENSURE_SUCCESS(rv,rv);
        pDetail  = pNodeValue;
      }
      pNode->GetAttributes(getter_AddRefs(pAttributes));
      NS_ENSURE_SUCCESS(rv,rv);
      pAttributes->GetNamedItem(NS_LITERAL_STRING("code"), getter_AddRefs(pAttribute));
      NS_ENSURE_SUCCESS(rv,rv);
      if (pAttribute) {
        pAttribute->GetNodeValue(pNodeValue);
        NS_ENSURE_SUCCESS(rv,rv);
        pDetail += NS_LITERAL_STRING("\n(Erreur ");
        pDetail += pNodeValue;
        pDetail += NS_LITERAL_STRING(")");
      }
    } else pDetail = NS_LITERAL_STRING("Erreur sans message.");
    pFaute = pDetail;
    rv = pFault->GetFaultString(pTitle);
    NS_ENSURE_SUCCESS(rv,rv);
    nsCOMPtr<nsIPrompt> pPrompt= do_GetService(NS_DEFAULTPROMPT_CONTRACTID, &rv);
    NS_ENSURE_SUCCESS(rv,rv);
    pPrompt->Alert(ToNewUnicode(pTitle), ToNewUnicode(pFaute));
    return NS_ERROR_FAILURE;
  }

  nsISOAPParameter ** pParameters;
  PRUint32 pTotal;
  rv = aResponse->GetParameters(PR_FALSE, &pTotal, &pParameters);
  NS_ENSURE_SUCCESS(rv,rv);
  if (pTotal!=1) {
    nsCOMPtr<nsIPrompt> pPrompt= do_GetService(NS_DEFAULTPROMPT_CONTRACTID, &rv);
    NS_ENSURE_SUCCESS(rv,rv);
    pPrompt->Alert(ToNewUnicode(NS_LITERAL_CSTRING("Erreur système")), ToNewUnicode(NS_LITERAL_CSTRING("Le nombre total de paramètres reçus est incorrect.")));
    return NS_ERROR_FAILURE;
  }

  nsAutoString pText;
  nsCOMArray<nsIVariant> pArray;
  nsCOMPtr<nsIWritableVariant> pVariant;
  PRUint32 pLsize=0, pCsize=0;
  PRUint32 pLineIndex, pColIndex;
  PRUint16 pNodeType;
  nsCOMPtr<nsIDOMElement> pResult;
  nsCOMPtr<nsIDOMNodeList> pLines, pValues;
  nsCOMPtr<nsIDOMNode> pLine, pValue, pContent;
  rv = pParameters[0]->GetElement(getter_AddRefs(pResult));
  NS_ENSURE_SUCCESS(rv,rv);
  rv = pResult->GetChildNodes(getter_AddRefs(pLines));
  NS_ENSURE_SUCCESS(rv,rv);
  pLines->GetLength(&pLsize);
  for (pLineIndex=0;pLineIndex<pLsize;pLineIndex++) {
    do {
      rv = pLines->Item(pLineIndex, getter_AddRefs(pLine));
      NS_ENSURE_SUCCESS(rv,rv);
      pLine->GetNodeType(&pNodeType);
      if (pNodeType!=nsIDOMNode::ELEMENT_NODE) pLineIndex++;
    } while (pLineIndex<pLsize && pNodeType!=nsIDOMNode::ELEMENT_NODE);
    if (pLineIndex>=pLsize) break;
    rv = pLine->GetChildNodes(getter_AddRefs(pValues));
    NS_ENSURE_SUCCESS(rv,rv);
    pValues->GetLength(&pCsize);
    for (pColIndex=0;pColIndex<pCsize;pColIndex++) {
      do {
        rv = pValues->Item(pColIndex, getter_AddRefs(pValue));
        NS_ENSURE_SUCCESS(rv,rv);
        pValue->GetNodeType(&pNodeType);
        if (pNodeType!=nsIDOMNode::ELEMENT_NODE) pColIndex++;
      } while (pColIndex<pCsize && pNodeType!=nsIDOMNode::ELEMENT_NODE);
      if (pColIndex>=pCsize) break;
      rv = pValue->GetFirstChild(getter_AddRefs(pContent));
      NS_ENSURE_SUCCESS(rv,rv);
      pVariant = do_CreateInstance(NS_VARIANT_CONTRACTID, &rv);
      NS_ENSURE_SUCCESS(rv,rv);
      if (pContent) {
        rv = pContent->GetNodeValue(pText);
        NS_ENSURE_SUCCESS(rv,rv);
        pVariant->SetAsAString(pText);
        printf("%s|",ToNewCString(pText));
      } else {
        pVariant->SetAsAString(NS_LITERAL_STRING(""));
      }
      rv = pArray.AppendObject(pVariant);
    }
  }
  rv = mComponent->TreatP0006(pArray, pLsize, pCsize, mKey);
  return rv;
}


/* Generated by Pygmalion */


NS_IMPL_ISUPPORTS1(mozListenerP0007, nsISOAPResponseListener)

mozListenerP0007::mozListenerP0007(mozC02gestsea* aComponent, const nsAString & aKey)
{
  mComponent = aComponent;
  mKey = aKey;
}
mozListenerP0007::~mozListenerP0007()
{
}

NS_IMETHODIMP mozListenerP0007::HandleResponse(nsISOAPResponse *aResponse, nsISOAPCall *aCall, PRUint32 aStatus, PRBool aLast, PRBool *aReturn)
{
  nsresult rv;
  nsCOMPtr<nsISOAPFault> pFault;
  rv = aResponse->GetFault(getter_AddRefs(pFault));
  NS_ENSURE_SUCCESS(rv, rv);
  if (pFault) {
    nsAutoString pFaute, pDetail, pTitle;
    nsCOMPtr<nsIDOMElement> pTheDetail;
    nsCOMPtr<nsIDOMNode> pNode;
    rv = pFault->GetDetail(getter_AddRefs(pTheDetail));
    NS_ENSURE_SUCCESS(rv,rv);
    rv = pTheDetail->GetFirstChild(getter_AddRefs(pNode));
    NS_ENSURE_SUCCESS(rv,rv);
    if (pNode) {
      nsCOMPtr<nsIDOMNamedNodeMap> pAttributes;
      nsCOMPtr<nsIDOMNode> pAttribute, pFirstNode;
      nsAutoString pNodeValue;
      rv = pNode->GetFirstChild(getter_AddRefs(pFirstNode));
      NS_ENSURE_SUCCESS(rv,rv);
      if (pFirstNode) {
        pFirstNode->GetNodeValue(pNodeValue);
        NS_ENSURE_SUCCESS(rv,rv);
        pDetail  = pNodeValue;
      }
      pNode->GetAttributes(getter_AddRefs(pAttributes));
      NS_ENSURE_SUCCESS(rv,rv);
      pAttributes->GetNamedItem(NS_LITERAL_STRING("code"), getter_AddRefs(pAttribute));
      NS_ENSURE_SUCCESS(rv,rv);
      if (pAttribute) {
        pAttribute->GetNodeValue(pNodeValue);
        NS_ENSURE_SUCCESS(rv,rv);
        pDetail += NS_LITERAL_STRING("\n(Erreur ");
        pDetail += pNodeValue;
        pDetail += NS_LITERAL_STRING(")");
      }
    } else pDetail = NS_LITERAL_STRING("Erreur sans message.");
    pFaute = pDetail;
    rv = pFault->GetFaultString(pTitle);
    NS_ENSURE_SUCCESS(rv,rv);
    nsCOMPtr<nsIPrompt> pPrompt= do_GetService(NS_DEFAULTPROMPT_CONTRACTID, &rv);
    NS_ENSURE_SUCCESS(rv,rv);
    pPrompt->Alert(ToNewUnicode(pTitle), ToNewUnicode(pFaute));
    return NS_ERROR_FAILURE;
  }

  nsISOAPParameter ** pParameters;
  PRUint32 pTotal;
  rv = aResponse->GetParameters(PR_FALSE, &pTotal, &pParameters);
  NS_ENSURE_SUCCESS(rv,rv);
  if (pTotal!=1) {
    nsCOMPtr<nsIPrompt> pPrompt= do_GetService(NS_DEFAULTPROMPT_CONTRACTID, &rv);
    NS_ENSURE_SUCCESS(rv,rv);
    pPrompt->Alert(ToNewUnicode(NS_LITERAL_CSTRING("Erreur système")), ToNewUnicode(NS_LITERAL_CSTRING("Le nombre total de paramètres reçus est incorrect.")));
    return NS_ERROR_FAILURE;
  }

  nsAutoString pText;
  nsCOMArray<nsIVariant> pArray;
  nsCOMPtr<nsIWritableVariant> pVariant;
  PRUint32 pLsize=0, pCsize=0;
  PRUint32 pLineIndex, pColIndex;
  PRUint16 pNodeType;
  nsCOMPtr<nsIDOMElement> pResult;
  nsCOMPtr<nsIDOMNodeList> pLines, pValues;
  nsCOMPtr<nsIDOMNode> pLine, pValue, pContent;
  rv = pParameters[0]->GetElement(getter_AddRefs(pResult));
  NS_ENSURE_SUCCESS(rv,rv);
  rv = pResult->GetChildNodes(getter_AddRefs(pLines));
  NS_ENSURE_SUCCESS(rv,rv);
  pLines->GetLength(&pLsize);
  for (pLineIndex=0;pLineIndex<pLsize;pLineIndex++) {
    do {
      rv = pLines->Item(pLineIndex, getter_AddRefs(pLine));
      NS_ENSURE_SUCCESS(rv,rv);
      pLine->GetNodeType(&pNodeType);
      if (pNodeType!=nsIDOMNode::ELEMENT_NODE) pLineIndex++;
    } while (pLineIndex<pLsize && pNodeType!=nsIDOMNode::ELEMENT_NODE);
    if (pLineIndex>=pLsize) break;
    rv = pLine->GetChildNodes(getter_AddRefs(pValues));
    NS_ENSURE_SUCCESS(rv,rv);
    pValues->GetLength(&pCsize);
    for (pColIndex=0;pColIndex<pCsize;pColIndex++) {
      do {
        rv = pValues->Item(pColIndex, getter_AddRefs(pValue));
        NS_ENSURE_SUCCESS(rv,rv);
        pValue->GetNodeType(&pNodeType);
        if (pNodeType!=nsIDOMNode::ELEMENT_NODE) pColIndex++;
      } while (pColIndex<pCsize && pNodeType!=nsIDOMNode::ELEMENT_NODE);
      if (pColIndex>=pCsize) break;
      rv = pValue->GetFirstChild(getter_AddRefs(pContent));
      NS_ENSURE_SUCCESS(rv,rv);
      pVariant = do_CreateInstance(NS_VARIANT_CONTRACTID, &rv);
      NS_ENSURE_SUCCESS(rv,rv);
      if (pContent) {
        rv = pContent->GetNodeValue(pText);
        NS_ENSURE_SUCCESS(rv,rv);
        pVariant->SetAsAString(pText);
        printf("%s|",ToNewCString(pText));
      } else {
        pVariant->SetAsAString(NS_LITERAL_STRING(""));
      }
      rv = pArray.AppendObject(pVariant);
    }
  }
  rv = mComponent->TreatP0007(pArray, pLsize, pCsize, mKey);
  return rv;
}


/* Generated by Pygmalion */


NS_IMPL_ISUPPORTS1(mozListenerP0008, nsISOAPResponseListener)

mozListenerP0008::mozListenerP0008(mozC02gestsea* aComponent, const nsACString & aSearch)
{
  mComponent = aComponent;
  mSearch = aSearch;
}
mozListenerP0008::~mozListenerP0008()
{
}

NS_IMETHODIMP mozListenerP0008::HandleResponse(nsISOAPResponse *aResponse, nsISOAPCall *aCall, PRUint32 aStatus, PRBool aLast, PRBool *aReturn)
{
  nsresult rv;
  nsCOMPtr<nsISOAPFault> pFault;
  rv = aResponse->GetFault(getter_AddRefs(pFault));
  NS_ENSURE_SUCCESS(rv, rv);
  if (pFault) {
    nsAutoString pFaute, pDetail, pTitle;
    nsCOMPtr<nsIDOMElement> pTheDetail;
    nsCOMPtr<nsIDOMNode> pNode;
    rv = pFault->GetDetail(getter_AddRefs(pTheDetail));
    NS_ENSURE_SUCCESS(rv,rv);
    rv = pTheDetail->GetFirstChild(getter_AddRefs(pNode));
    NS_ENSURE_SUCCESS(rv,rv);
    if (pNode) {
      nsCOMPtr<nsIDOMNamedNodeMap> pAttributes;
      nsCOMPtr<nsIDOMNode> pAttribute, pFirstNode;
      nsAutoString pNodeValue;
      rv = pNode->GetFirstChild(getter_AddRefs(pFirstNode));
      NS_ENSURE_SUCCESS(rv,rv);
      if (pFirstNode) {
        pFirstNode->GetNodeValue(pNodeValue);
        NS_ENSURE_SUCCESS(rv,rv);
        pDetail  = pNodeValue;
      }
      pNode->GetAttributes(getter_AddRefs(pAttributes));
      NS_ENSURE_SUCCESS(rv,rv);
      pAttributes->GetNamedItem(NS_LITERAL_STRING("code"), getter_AddRefs(pAttribute));
      NS_ENSURE_SUCCESS(rv,rv);
      if (pAttribute) {
        pAttribute->GetNodeValue(pNodeValue);
        NS_ENSURE_SUCCESS(rv,rv);
        pDetail += NS_LITERAL_STRING("\n(Erreur ");
        pDetail += pNodeValue;
        pDetail += NS_LITERAL_STRING(")");
      }
    } else pDetail = NS_LITERAL_STRING("Erreur sans message.");
    pFaute = pDetail;
    rv = pFault->GetFaultString(pTitle);
    NS_ENSURE_SUCCESS(rv,rv);
    nsCOMPtr<nsIPrompt> pPrompt= do_GetService(NS_DEFAULTPROMPT_CONTRACTID, &rv);
    NS_ENSURE_SUCCESS(rv,rv);
    pPrompt->Alert(ToNewUnicode(pTitle), ToNewUnicode(pFaute));
    return NS_ERROR_FAILURE;
  }

  nsISOAPParameter ** pParameters;
  PRUint32 pTotal;
  rv = aResponse->GetParameters(PR_FALSE, &pTotal, &pParameters);
  NS_ENSURE_SUCCESS(rv,rv);
  if (pTotal!=1) {
    nsCOMPtr<nsIPrompt> pPrompt= do_GetService(NS_DEFAULTPROMPT_CONTRACTID, &rv);
    NS_ENSURE_SUCCESS(rv,rv);
    pPrompt->Alert(ToNewUnicode(NS_LITERAL_CSTRING("Erreur système")), ToNewUnicode(NS_LITERAL_CSTRING("Le nombre total de paramètres reçus est incorrect.")));
    return NS_ERROR_FAILURE;
  }

  nsAutoString pText;
  nsCOMArray<nsIVariant> pArray;
  nsCOMPtr<nsIWritableVariant> pVariant;
  PRUint32 pLsize=0, pCsize=0;
  PRUint32 pLineIndex, pColIndex;
  PRUint16 pNodeType;
  nsCOMPtr<nsIDOMElement> pResult;
  nsCOMPtr<nsIDOMNodeList> pLines, pValues;
  nsCOMPtr<nsIDOMNode> pLine, pValue, pContent;
  rv = pParameters[0]->GetElement(getter_AddRefs(pResult));
  NS_ENSURE_SUCCESS(rv,rv);
  rv = pResult->GetChildNodes(getter_AddRefs(pLines));
  NS_ENSURE_SUCCESS(rv,rv);
  pLines->GetLength(&pLsize);
  for (pLineIndex=0;pLineIndex<pLsize;pLineIndex++) {
    do {
      rv = pLines->Item(pLineIndex, getter_AddRefs(pLine));
      NS_ENSURE_SUCCESS(rv,rv);
      pLine->GetNodeType(&pNodeType);
      if (pNodeType!=nsIDOMNode::ELEMENT_NODE) pLineIndex++;
    } while (pLineIndex<pLsize && pNodeType!=nsIDOMNode::ELEMENT_NODE);
    if (pLineIndex>=pLsize) break;
    rv = pLine->GetChildNodes(getter_AddRefs(pValues));
    NS_ENSURE_SUCCESS(rv,rv);
    pValues->GetLength(&pCsize);
    for (pColIndex=0;pColIndex<pCsize;pColIndex++) {
      do {
        rv = pValues->Item(pColIndex, getter_AddRefs(pValue));
        NS_ENSURE_SUCCESS(rv,rv);
        pValue->GetNodeType(&pNodeType);
        if (pNodeType!=nsIDOMNode::ELEMENT_NODE) pColIndex++;
      } while (pColIndex<pCsize && pNodeType!=nsIDOMNode::ELEMENT_NODE);
      if (pColIndex>=pCsize) break;
      rv = pValue->GetFirstChild(getter_AddRefs(pContent));
      NS_ENSURE_SUCCESS(rv,rv);
      pVariant = do_CreateInstance(NS_VARIANT_CONTRACTID, &rv);
      NS_ENSURE_SUCCESS(rv,rv);
      if (pContent) {
        rv = pContent->GetNodeValue(pText);
        NS_ENSURE_SUCCESS(rv,rv);
        pVariant->SetAsAString(pText);
        printf("%s|",ToNewCString(pText));
      } else {
        pVariant->SetAsAString(NS_LITERAL_STRING(""));
      }
      rv = pArray.AppendObject(pVariant);
    }
  }
  rv = mComponent->TreatP0008(pArray, pLsize, pCsize, mSearch);
  return rv;
}


/* Generated by Pygmalion */


NS_IMPL_ISUPPORTS1(mozListenerP0009, nsISOAPResponseListener)

mozListenerP0009::mozListenerP0009(mozC02gestsea* aComponent, const nsACString & aSearch)
{
  mComponent = aComponent;
  mSearch = aSearch;
}
mozListenerP0009::~mozListenerP0009()
{
}

NS_IMETHODIMP mozListenerP0009::HandleResponse(nsISOAPResponse *aResponse, nsISOAPCall *aCall, PRUint32 aStatus, PRBool aLast, PRBool *aReturn)
{
  nsresult rv;
  nsCOMPtr<nsISOAPFault> pFault;
  rv = aResponse->GetFault(getter_AddRefs(pFault));
  NS_ENSURE_SUCCESS(rv, rv);
  if (pFault) {
    nsAutoString pFaute, pDetail, pTitle;
    nsCOMPtr<nsIDOMElement> pTheDetail;
    nsCOMPtr<nsIDOMNode> pNode;
    rv = pFault->GetDetail(getter_AddRefs(pTheDetail));
    NS_ENSURE_SUCCESS(rv,rv);
    rv = pTheDetail->GetFirstChild(getter_AddRefs(pNode));
    NS_ENSURE_SUCCESS(rv,rv);
    if (pNode) {
      nsCOMPtr<nsIDOMNamedNodeMap> pAttributes;
      nsCOMPtr<nsIDOMNode> pAttribute, pFirstNode;
      nsAutoString pNodeValue;
      rv = pNode->GetFirstChild(getter_AddRefs(pFirstNode));
      NS_ENSURE_SUCCESS(rv,rv);
      if (pFirstNode) {
        pFirstNode->GetNodeValue(pNodeValue);
        NS_ENSURE_SUCCESS(rv,rv);
        pDetail  = pNodeValue;
      }
      pNode->GetAttributes(getter_AddRefs(pAttributes));
      NS_ENSURE_SUCCESS(rv,rv);
      pAttributes->GetNamedItem(NS_LITERAL_STRING("code"), getter_AddRefs(pAttribute));
      NS_ENSURE_SUCCESS(rv,rv);
      if (pAttribute) {
        pAttribute->GetNodeValue(pNodeValue);
        NS_ENSURE_SUCCESS(rv,rv);
        pDetail += NS_LITERAL_STRING("\n(Erreur ");
        pDetail += pNodeValue;
        pDetail += NS_LITERAL_STRING(")");
      }
    } else pDetail = NS_LITERAL_STRING("Erreur sans message.");
    pFaute = pDetail;
    rv = pFault->GetFaultString(pTitle);
    NS_ENSURE_SUCCESS(rv,rv);
    nsCOMPtr<nsIPrompt> pPrompt= do_GetService(NS_DEFAULTPROMPT_CONTRACTID, &rv);
    NS_ENSURE_SUCCESS(rv,rv);
    pPrompt->Alert(ToNewUnicode(pTitle), ToNewUnicode(pFaute));
    return NS_ERROR_FAILURE;
  }

  nsISOAPParameter ** pParameters;
  PRUint32 pTotal;
  rv = aResponse->GetParameters(PR_FALSE, &pTotal, &pParameters);
  NS_ENSURE_SUCCESS(rv,rv);
  if (pTotal!=1) {
    nsCOMPtr<nsIPrompt> pPrompt= do_GetService(NS_DEFAULTPROMPT_CONTRACTID, &rv);
    NS_ENSURE_SUCCESS(rv,rv);
    pPrompt->Alert(ToNewUnicode(NS_LITERAL_CSTRING("Erreur système")), ToNewUnicode(NS_LITERAL_CSTRING("Le nombre total de paramètres reçus est incorrect.")));
    return NS_ERROR_FAILURE;
  }

  nsAutoString pText;
  nsCOMArray<nsIVariant> pArray;
  nsCOMPtr<nsIWritableVariant> pVariant;
  PRUint32 pLsize=0, pCsize=0;
  PRUint32 pLineIndex, pColIndex;
  PRUint16 pNodeType;
  nsCOMPtr<nsIDOMElement> pResult;
  nsCOMPtr<nsIDOMNodeList> pLines, pValues;
  nsCOMPtr<nsIDOMNode> pLine, pValue, pContent;
  rv = pParameters[0]->GetElement(getter_AddRefs(pResult));
  NS_ENSURE_SUCCESS(rv,rv);
  rv = pResult->GetChildNodes(getter_AddRefs(pLines));
  NS_ENSURE_SUCCESS(rv,rv);
  pLines->GetLength(&pLsize);
  for (pLineIndex=0;pLineIndex<pLsize;pLineIndex++) {
    do {
      rv = pLines->Item(pLineIndex, getter_AddRefs(pLine));
      NS_ENSURE_SUCCESS(rv,rv);
      pLine->GetNodeType(&pNodeType);
      if (pNodeType!=nsIDOMNode::ELEMENT_NODE) pLineIndex++;
    } while (pLineIndex<pLsize && pNodeType!=nsIDOMNode::ELEMENT_NODE);
    if (pLineIndex>=pLsize) break;
    rv = pLine->GetChildNodes(getter_AddRefs(pValues));
    NS_ENSURE_SUCCESS(rv,rv);
    pValues->GetLength(&pCsize);
    for (pColIndex=0;pColIndex<pCsize;pColIndex++) {
      do {
        rv = pValues->Item(pColIndex, getter_AddRefs(pValue));
        NS_ENSURE_SUCCESS(rv,rv);
        pValue->GetNodeType(&pNodeType);
        if (pNodeType!=nsIDOMNode::ELEMENT_NODE) pColIndex++;
      } while (pColIndex<pCsize && pNodeType!=nsIDOMNode::ELEMENT_NODE);
      if (pColIndex>=pCsize) break;
      rv = pValue->GetFirstChild(getter_AddRefs(pContent));
      NS_ENSURE_SUCCESS(rv,rv);
      pVariant = do_CreateInstance(NS_VARIANT_CONTRACTID, &rv);
      NS_ENSURE_SUCCESS(rv,rv);
      if (pContent) {
        rv = pContent->GetNodeValue(pText);
        NS_ENSURE_SUCCESS(rv,rv);
        pVariant->SetAsAString(pText);
        printf("%s|",ToNewCString(pText));
      } else {
        pVariant->SetAsAString(NS_LITERAL_STRING(""));
      }
      rv = pArray.AppendObject(pVariant);
    }
  }
  rv = mComponent->TreatP0009(pArray, pLsize, pCsize, mSearch);
  return rv;
}


/* Generated by Pygmalion */


NS_IMPL_ISUPPORTS1(mozListenerP000A, nsISOAPResponseListener)

mozListenerP000A::mozListenerP000A(mozC02gestsea* aComponent, const nsAString & aKey)
{
  mComponent = aComponent;
  mKey = aKey;
}
mozListenerP000A::~mozListenerP000A()
{
}

NS_IMETHODIMP mozListenerP000A::HandleResponse(nsISOAPResponse *aResponse, nsISOAPCall *aCall, PRUint32 aStatus, PRBool aLast, PRBool *aReturn)
{
  nsresult rv;
  nsCOMPtr<nsISOAPFault> pFault;
  rv = aResponse->GetFault(getter_AddRefs(pFault));
  NS_ENSURE_SUCCESS(rv, rv);
  if (pFault) {
    nsAutoString pFaute, pDetail, pTitle;
    nsCOMPtr<nsIDOMElement> pTheDetail;
    nsCOMPtr<nsIDOMNode> pNode;
    rv = pFault->GetDetail(getter_AddRefs(pTheDetail));
    NS_ENSURE_SUCCESS(rv,rv);
    rv = pTheDetail->GetFirstChild(getter_AddRefs(pNode));
    NS_ENSURE_SUCCESS(rv,rv);
    if (pNode) {
      nsCOMPtr<nsIDOMNamedNodeMap> pAttributes;
      nsCOMPtr<nsIDOMNode> pAttribute, pFirstNode;
      nsAutoString pNodeValue;
      rv = pNode->GetFirstChild(getter_AddRefs(pFirstNode));
      NS_ENSURE_SUCCESS(rv,rv);
      if (pFirstNode) {
        pFirstNode->GetNodeValue(pNodeValue);
        NS_ENSURE_SUCCESS(rv,rv);
        pDetail  = pNodeValue;
      }
      pNode->GetAttributes(getter_AddRefs(pAttributes));
      NS_ENSURE_SUCCESS(rv,rv);
      pAttributes->GetNamedItem(NS_LITERAL_STRING("code"), getter_AddRefs(pAttribute));
      NS_ENSURE_SUCCESS(rv,rv);
      if (pAttribute) {
        pAttribute->GetNodeValue(pNodeValue);
        NS_ENSURE_SUCCESS(rv,rv);
        pDetail += NS_LITERAL_STRING("\n(Erreur ");
        pDetail += pNodeValue;
        pDetail += NS_LITERAL_STRING(")");
      }
    } else pDetail = NS_LITERAL_STRING("Erreur sans message.");
    pFaute = pDetail;
    rv = pFault->GetFaultString(pTitle);
    NS_ENSURE_SUCCESS(rv,rv);
    nsCOMPtr<nsIPrompt> pPrompt= do_GetService(NS_DEFAULTPROMPT_CONTRACTID, &rv);
    NS_ENSURE_SUCCESS(rv,rv);
    pPrompt->Alert(ToNewUnicode(pTitle), ToNewUnicode(pFaute));
    return NS_ERROR_FAILURE;
  }

  nsISOAPParameter ** pParameters;
  PRUint32 pTotal;
  rv = aResponse->GetParameters(PR_FALSE, &pTotal, &pParameters);
  NS_ENSURE_SUCCESS(rv,rv);
  if (pTotal!=1) {
    nsCOMPtr<nsIPrompt> pPrompt= do_GetService(NS_DEFAULTPROMPT_CONTRACTID, &rv);
    NS_ENSURE_SUCCESS(rv,rv);
    pPrompt->Alert(ToNewUnicode(NS_LITERAL_CSTRING("Erreur système")), ToNewUnicode(NS_LITERAL_CSTRING("Le nombre total de paramètres reçus est incorrect.")));
    return NS_ERROR_FAILURE;
  }

  nsAutoString pText;
  nsCOMArray<nsIVariant> pArray;
  nsCOMPtr<nsIWritableVariant> pVariant;
  PRUint32 pLsize=0, pCsize=0;
  PRUint32 pLineIndex, pColIndex;
  PRUint16 pNodeType;
  nsCOMPtr<nsIDOMElement> pResult;
  nsCOMPtr<nsIDOMNodeList> pLines, pValues;
  nsCOMPtr<nsIDOMNode> pLine, pValue, pContent;
  rv = pParameters[0]->GetElement(getter_AddRefs(pResult));
  NS_ENSURE_SUCCESS(rv,rv);
  rv = pResult->GetChildNodes(getter_AddRefs(pLines));
  NS_ENSURE_SUCCESS(rv,rv);
  pLines->GetLength(&pLsize);
  for (pLineIndex=0;pLineIndex<pLsize;pLineIndex++) {
    do {
      rv = pLines->Item(pLineIndex, getter_AddRefs(pLine));
      NS_ENSURE_SUCCESS(rv,rv);
      pLine->GetNodeType(&pNodeType);
      if (pNodeType!=nsIDOMNode::ELEMENT_NODE) pLineIndex++;
    } while (pLineIndex<pLsize && pNodeType!=nsIDOMNode::ELEMENT_NODE);
    if (pLineIndex>=pLsize) break;
    rv = pLine->GetChildNodes(getter_AddRefs(pValues));
    NS_ENSURE_SUCCESS(rv,rv);
    pValues->GetLength(&pCsize);
    for (pColIndex=0;pColIndex<pCsize;pColIndex++) {
      do {
        rv = pValues->Item(pColIndex, getter_AddRefs(pValue));
        NS_ENSURE_SUCCESS(rv,rv);
        pValue->GetNodeType(&pNodeType);
        if (pNodeType!=nsIDOMNode::ELEMENT_NODE) pColIndex++;
      } while (pColIndex<pCsize && pNodeType!=nsIDOMNode::ELEMENT_NODE);
      if (pColIndex>=pCsize) break;
      rv = pValue->GetFirstChild(getter_AddRefs(pContent));
      NS_ENSURE_SUCCESS(rv,rv);
      pVariant = do_CreateInstance(NS_VARIANT_CONTRACTID, &rv);
      NS_ENSURE_SUCCESS(rv,rv);
      if (pContent) {
        rv = pContent->GetNodeValue(pText);
        NS_ENSURE_SUCCESS(rv,rv);
        pVariant->SetAsAString(pText);
        printf("%s|",ToNewCString(pText));
      } else {
        pVariant->SetAsAString(NS_LITERAL_STRING(""));
      }
      rv = pArray.AppendObject(pVariant);
    }
  }
  rv = mComponent->TreatP000A(pArray, pLsize, pCsize, mKey);
  return rv;
}


/* Generated by Pygmalion */


NS_IMPL_ISUPPORTS1(mozListenerP000B, nsISOAPResponseListener)

mozListenerP000B::mozListenerP000B(mozC02gestsea* aComponent, const nsACString & aSearch)
{
  mComponent = aComponent;
  mSearch = aSearch;
}
mozListenerP000B::~mozListenerP000B()
{
}

NS_IMETHODIMP mozListenerP000B::HandleResponse(nsISOAPResponse *aResponse, nsISOAPCall *aCall, PRUint32 aStatus, PRBool aLast, PRBool *aReturn)
{
  nsresult rv;
  nsCOMPtr<nsISOAPFault> pFault;
  rv = aResponse->GetFault(getter_AddRefs(pFault));
  NS_ENSURE_SUCCESS(rv, rv);
  if (pFault) {
    nsAutoString pFaute, pDetail, pTitle;
    nsCOMPtr<nsIDOMElement> pTheDetail;
    nsCOMPtr<nsIDOMNode> pNode;
    rv = pFault->GetDetail(getter_AddRefs(pTheDetail));
    NS_ENSURE_SUCCESS(rv,rv);
    rv = pTheDetail->GetFirstChild(getter_AddRefs(pNode));
    NS_ENSURE_SUCCESS(rv,rv);
    if (pNode) {
      nsCOMPtr<nsIDOMNamedNodeMap> pAttributes;
      nsCOMPtr<nsIDOMNode> pAttribute, pFirstNode;
      nsAutoString pNodeValue;
      rv = pNode->GetFirstChild(getter_AddRefs(pFirstNode));
      NS_ENSURE_SUCCESS(rv,rv);
      if (pFirstNode) {
        pFirstNode->GetNodeValue(pNodeValue);
        NS_ENSURE_SUCCESS(rv,rv);
        pDetail  = pNodeValue;
      }
      pNode->GetAttributes(getter_AddRefs(pAttributes));
      NS_ENSURE_SUCCESS(rv,rv);
      pAttributes->GetNamedItem(NS_LITERAL_STRING("code"), getter_AddRefs(pAttribute));
      NS_ENSURE_SUCCESS(rv,rv);
      if (pAttribute) {
        pAttribute->GetNodeValue(pNodeValue);
        NS_ENSURE_SUCCESS(rv,rv);
        pDetail += NS_LITERAL_STRING("\n(Erreur ");
        pDetail += pNodeValue;
        pDetail += NS_LITERAL_STRING(")");
      }
    } else pDetail = NS_LITERAL_STRING("Erreur sans message.");
    pFaute = pDetail;
    rv = pFault->GetFaultString(pTitle);
    NS_ENSURE_SUCCESS(rv,rv);
    nsCOMPtr<nsIPrompt> pPrompt= do_GetService(NS_DEFAULTPROMPT_CONTRACTID, &rv);
    NS_ENSURE_SUCCESS(rv,rv);
    pPrompt->Alert(ToNewUnicode(pTitle), ToNewUnicode(pFaute));
    return NS_ERROR_FAILURE;
  }

  nsISOAPParameter ** pParameters;
  PRUint32 pTotal;
  rv = aResponse->GetParameters(PR_FALSE, &pTotal, &pParameters);
  NS_ENSURE_SUCCESS(rv,rv);
  if (pTotal!=1) {
    nsCOMPtr<nsIPrompt> pPrompt= do_GetService(NS_DEFAULTPROMPT_CONTRACTID, &rv);
    NS_ENSURE_SUCCESS(rv,rv);
    pPrompt->Alert(ToNewUnicode(NS_LITERAL_CSTRING("Erreur système")), ToNewUnicode(NS_LITERAL_CSTRING("Le nombre total de paramètres reçus est incorrect.")));
    return NS_ERROR_FAILURE;
  }

  nsAutoString pText;
  nsCOMArray<nsIVariant> pArray;
  nsCOMPtr<nsIWritableVariant> pVariant;
  PRUint32 pLsize=0, pCsize=0;
  PRUint32 pLineIndex, pColIndex;
  PRUint16 pNodeType;
  nsCOMPtr<nsIDOMElement> pResult;
  nsCOMPtr<nsIDOMNodeList> pLines, pValues;
  nsCOMPtr<nsIDOMNode> pLine, pValue, pContent;
  rv = pParameters[0]->GetElement(getter_AddRefs(pResult));
  NS_ENSURE_SUCCESS(rv,rv);
  rv = pResult->GetChildNodes(getter_AddRefs(pLines));
  NS_ENSURE_SUCCESS(rv,rv);
  pLines->GetLength(&pLsize);
  for (pLineIndex=0;pLineIndex<pLsize;pLineIndex++) {
    do {
      rv = pLines->Item(pLineIndex, getter_AddRefs(pLine));
      NS_ENSURE_SUCCESS(rv,rv);
      pLine->GetNodeType(&pNodeType);
      if (pNodeType!=nsIDOMNode::ELEMENT_NODE) pLineIndex++;
    } while (pLineIndex<pLsize && pNodeType!=nsIDOMNode::ELEMENT_NODE);
    if (pLineIndex>=pLsize) break;
    rv = pLine->GetChildNodes(getter_AddRefs(pValues));
    NS_ENSURE_SUCCESS(rv,rv);
    pValues->GetLength(&pCsize);
    for (pColIndex=0;pColIndex<pCsize;pColIndex++) {
      do {
        rv = pValues->Item(pColIndex, getter_AddRefs(pValue));
        NS_ENSURE_SUCCESS(rv,rv);
        pValue->GetNodeType(&pNodeType);
        if (pNodeType!=nsIDOMNode::ELEMENT_NODE) pColIndex++;
      } while (pColIndex<pCsize && pNodeType!=nsIDOMNode::ELEMENT_NODE);
      if (pColIndex>=pCsize) break;
      rv = pValue->GetFirstChild(getter_AddRefs(pContent));
      NS_ENSURE_SUCCESS(rv,rv);
      pVariant = do_CreateInstance(NS_VARIANT_CONTRACTID, &rv);
      NS_ENSURE_SUCCESS(rv,rv);
      if (pContent) {
        rv = pContent->GetNodeValue(pText);
        NS_ENSURE_SUCCESS(rv,rv);
        pVariant->SetAsAString(pText);
        printf("%s|",ToNewCString(pText));
      } else {
        pVariant->SetAsAString(NS_LITERAL_STRING(""));
      }
      rv = pArray.AppendObject(pVariant);
    }
  }
  rv = mComponent->TreatP000B(pArray, pLsize, pCsize, mSearch);
  return rv;
}


/* Generated by Pygmalion */


NS_IMPL_ISUPPORTS1(mozListenerP000C, nsISOAPResponseListener)

mozListenerP000C::mozListenerP000C(mozC02gestsea* aComponent, const nsACString & aSearch)
{
  mComponent = aComponent;
  mSearch = aSearch;
}
mozListenerP000C::~mozListenerP000C()
{
}

NS_IMETHODIMP mozListenerP000C::HandleResponse(nsISOAPResponse *aResponse, nsISOAPCall *aCall, PRUint32 aStatus, PRBool aLast, PRBool *aReturn)
{
  nsresult rv;
  nsCOMPtr<nsISOAPFault> pFault;
  rv = aResponse->GetFault(getter_AddRefs(pFault));
  NS_ENSURE_SUCCESS(rv, rv);
  if (pFault) {
    nsAutoString pFaute, pDetail, pTitle;
    nsCOMPtr<nsIDOMElement> pTheDetail;
    nsCOMPtr<nsIDOMNode> pNode;
    rv = pFault->GetDetail(getter_AddRefs(pTheDetail));
    NS_ENSURE_SUCCESS(rv,rv);
    rv = pTheDetail->GetFirstChild(getter_AddRefs(pNode));
    NS_ENSURE_SUCCESS(rv,rv);
    if (pNode) {
      nsCOMPtr<nsIDOMNamedNodeMap> pAttributes;
      nsCOMPtr<nsIDOMNode> pAttribute, pFirstNode;
      nsAutoString pNodeValue;
      rv = pNode->GetFirstChild(getter_AddRefs(pFirstNode));
      NS_ENSURE_SUCCESS(rv,rv);
      if (pFirstNode) {
        pFirstNode->GetNodeValue(pNodeValue);
        NS_ENSURE_SUCCESS(rv,rv);
        pDetail  = pNodeValue;
      }
      pNode->GetAttributes(getter_AddRefs(pAttributes));
      NS_ENSURE_SUCCESS(rv,rv);
      pAttributes->GetNamedItem(NS_LITERAL_STRING("code"), getter_AddRefs(pAttribute));
      NS_ENSURE_SUCCESS(rv,rv);
      if (pAttribute) {
        pAttribute->GetNodeValue(pNodeValue);
        NS_ENSURE_SUCCESS(rv,rv);
        pDetail += NS_LITERAL_STRING("\n(Erreur ");
        pDetail += pNodeValue;
        pDetail += NS_LITERAL_STRING(")");
      }
    } else pDetail = NS_LITERAL_STRING("Erreur sans message.");
    pFaute = pDetail;
    rv = pFault->GetFaultString(pTitle);
    NS_ENSURE_SUCCESS(rv,rv);
    nsCOMPtr<nsIPrompt> pPrompt= do_GetService(NS_DEFAULTPROMPT_CONTRACTID, &rv);
    NS_ENSURE_SUCCESS(rv,rv);
    pPrompt->Alert(ToNewUnicode(pTitle), ToNewUnicode(pFaute));
    return NS_ERROR_FAILURE;
  }

  nsISOAPParameter ** pParameters;
  PRUint32 pTotal;
  rv = aResponse->GetParameters(PR_FALSE, &pTotal, &pParameters);
  NS_ENSURE_SUCCESS(rv,rv);
  if (pTotal!=1) {
    nsCOMPtr<nsIPrompt> pPrompt= do_GetService(NS_DEFAULTPROMPT_CONTRACTID, &rv);
    NS_ENSURE_SUCCESS(rv,rv);
    pPrompt->Alert(ToNewUnicode(NS_LITERAL_CSTRING("Erreur système")), ToNewUnicode(NS_LITERAL_CSTRING("Le nombre total de paramètres reçus est incorrect.")));
    return NS_ERROR_FAILURE;
  }

  nsAutoString pText;
  nsCOMArray<nsIVariant> pArray;
  nsCOMPtr<nsIWritableVariant> pVariant;
  PRUint32 pLsize=0, pCsize=0;
  PRUint32 pLineIndex, pColIndex;
  PRUint16 pNodeType;
  nsCOMPtr<nsIDOMElement> pResult;
  nsCOMPtr<nsIDOMNodeList> pLines, pValues;
  nsCOMPtr<nsIDOMNode> pLine, pValue, pContent;
  rv = pParameters[0]->GetElement(getter_AddRefs(pResult));
  NS_ENSURE_SUCCESS(rv,rv);
  rv = pResult->GetChildNodes(getter_AddRefs(pLines));
  NS_ENSURE_SUCCESS(rv,rv);
  pLines->GetLength(&pLsize);
  for (pLineIndex=0;pLineIndex<pLsize;pLineIndex++) {
    do {
      rv = pLines->Item(pLineIndex, getter_AddRefs(pLine));
      NS_ENSURE_SUCCESS(rv,rv);
      pLine->GetNodeType(&pNodeType);
      if (pNodeType!=nsIDOMNode::ELEMENT_NODE) pLineIndex++;
    } while (pLineIndex<pLsize && pNodeType!=nsIDOMNode::ELEMENT_NODE);
    if (pLineIndex>=pLsize) break;
    rv = pLine->GetChildNodes(getter_AddRefs(pValues));
    NS_ENSURE_SUCCESS(rv,rv);
    pValues->GetLength(&pCsize);
    for (pColIndex=0;pColIndex<pCsize;pColIndex++) {
      do {
        rv = pValues->Item(pColIndex, getter_AddRefs(pValue));
        NS_ENSURE_SUCCESS(rv,rv);
        pValue->GetNodeType(&pNodeType);
        if (pNodeType!=nsIDOMNode::ELEMENT_NODE) pColIndex++;
      } while (pColIndex<pCsize && pNodeType!=nsIDOMNode::ELEMENT_NODE);
      if (pColIndex>=pCsize) break;
      rv = pValue->GetFirstChild(getter_AddRefs(pContent));
      NS_ENSURE_SUCCESS(rv,rv);
      pVariant = do_CreateInstance(NS_VARIANT_CONTRACTID, &rv);
      NS_ENSURE_SUCCESS(rv,rv);
      if (pContent) {
        rv = pContent->GetNodeValue(pText);
        NS_ENSURE_SUCCESS(rv,rv);
        pVariant->SetAsAString(pText);
        printf("%s|",ToNewCString(pText));
      } else {
        pVariant->SetAsAString(NS_LITERAL_STRING(""));
      }
      rv = pArray.AppendObject(pVariant);
    }
  }
  rv = mComponent->TreatP000C(pArray, pLsize, pCsize, mSearch);
  return rv;
}


/* Generated by Pygmalion */


NS_IMPL_ISUPPORTS1(mozListenerP000D, nsISOAPResponseListener)

mozListenerP000D::mozListenerP000D(mozC02gestsea* aComponent, const nsAString & aKey)
{
  mComponent = aComponent;
  mKey = aKey;
}
mozListenerP000D::~mozListenerP000D()
{
}

NS_IMETHODIMP mozListenerP000D::HandleResponse(nsISOAPResponse *aResponse, nsISOAPCall *aCall, PRUint32 aStatus, PRBool aLast, PRBool *aReturn)
{
  nsresult rv;
  nsCOMPtr<nsISOAPFault> pFault;
  rv = aResponse->GetFault(getter_AddRefs(pFault));
  NS_ENSURE_SUCCESS(rv, rv);
  if (pFault) {
    nsAutoString pFaute, pDetail, pTitle;
    nsCOMPtr<nsIDOMElement> pTheDetail;
    nsCOMPtr<nsIDOMNode> pNode;
    rv = pFault->GetDetail(getter_AddRefs(pTheDetail));
    NS_ENSURE_SUCCESS(rv,rv);
    rv = pTheDetail->GetFirstChild(getter_AddRefs(pNode));
    NS_ENSURE_SUCCESS(rv,rv);
    if (pNode) {
      nsCOMPtr<nsIDOMNamedNodeMap> pAttributes;
      nsCOMPtr<nsIDOMNode> pAttribute, pFirstNode;
      nsAutoString pNodeValue;
      rv = pNode->GetFirstChild(getter_AddRefs(pFirstNode));
      NS_ENSURE_SUCCESS(rv,rv);
      if (pFirstNode) {
        pFirstNode->GetNodeValue(pNodeValue);
        NS_ENSURE_SUCCESS(rv,rv);
        pDetail  = pNodeValue;
      }
      pNode->GetAttributes(getter_AddRefs(pAttributes));
      NS_ENSURE_SUCCESS(rv,rv);
      pAttributes->GetNamedItem(NS_LITERAL_STRING("code"), getter_AddRefs(pAttribute));
      NS_ENSURE_SUCCESS(rv,rv);
      if (pAttribute) {
        pAttribute->GetNodeValue(pNodeValue);
        NS_ENSURE_SUCCESS(rv,rv);
        pDetail += NS_LITERAL_STRING("\n(Erreur ");
        pDetail += pNodeValue;
        pDetail += NS_LITERAL_STRING(")");
      }
    } else pDetail = NS_LITERAL_STRING("Erreur sans message.");
    pFaute = pDetail;
    rv = pFault->GetFaultString(pTitle);
    NS_ENSURE_SUCCESS(rv,rv);
    nsCOMPtr<nsIPrompt> pPrompt= do_GetService(NS_DEFAULTPROMPT_CONTRACTID, &rv);
    NS_ENSURE_SUCCESS(rv,rv);
    pPrompt->Alert(ToNewUnicode(pTitle), ToNewUnicode(pFaute));
    return NS_ERROR_FAILURE;
  }

  nsISOAPParameter ** pParameters;
  PRUint32 pTotal;
  rv = aResponse->GetParameters(PR_FALSE, &pTotal, &pParameters);
  NS_ENSURE_SUCCESS(rv,rv);
  if (pTotal!=1) {
    nsCOMPtr<nsIPrompt> pPrompt= do_GetService(NS_DEFAULTPROMPT_CONTRACTID, &rv);
    NS_ENSURE_SUCCESS(rv,rv);
    pPrompt->Alert(ToNewUnicode(NS_LITERAL_CSTRING("Erreur système")), ToNewUnicode(NS_LITERAL_CSTRING("Le nombre total de paramètres reçus est incorrect.")));
    return NS_ERROR_FAILURE;
  }

  nsAutoString pText;
  nsCOMArray<nsIVariant> pArray;
  nsCOMPtr<nsIWritableVariant> pVariant;
  PRUint32 pLsize=0, pCsize=0;
  PRUint32 pLineIndex, pColIndex;
  PRUint16 pNodeType;
  nsCOMPtr<nsIDOMElement> pResult;
  nsCOMPtr<nsIDOMNodeList> pLines, pValues;
  nsCOMPtr<nsIDOMNode> pLine, pValue, pContent;
  rv = pParameters[0]->GetElement(getter_AddRefs(pResult));
  NS_ENSURE_SUCCESS(rv,rv);
  rv = pResult->GetChildNodes(getter_AddRefs(pLines));
  NS_ENSURE_SUCCESS(rv,rv);
  pLines->GetLength(&pLsize);
  for (pLineIndex=0;pLineIndex<pLsize;pLineIndex++) {
    do {
      rv = pLines->Item(pLineIndex, getter_AddRefs(pLine));
      NS_ENSURE_SUCCESS(rv,rv);
      pLine->GetNodeType(&pNodeType);
      if (pNodeType!=nsIDOMNode::ELEMENT_NODE) pLineIndex++;
    } while (pLineIndex<pLsize && pNodeType!=nsIDOMNode::ELEMENT_NODE);
    if (pLineIndex>=pLsize) break;
    rv = pLine->GetChildNodes(getter_AddRefs(pValues));
    NS_ENSURE_SUCCESS(rv,rv);
    pValues->GetLength(&pCsize);
    for (pColIndex=0;pColIndex<pCsize;pColIndex++) {
      do {
        rv = pValues->Item(pColIndex, getter_AddRefs(pValue));
        NS_ENSURE_SUCCESS(rv,rv);
        pValue->GetNodeType(&pNodeType);
        if (pNodeType!=nsIDOMNode::ELEMENT_NODE) pColIndex++;
      } while (pColIndex<pCsize && pNodeType!=nsIDOMNode::ELEMENT_NODE);
      if (pColIndex>=pCsize) break;
      rv = pValue->GetFirstChild(getter_AddRefs(pContent));
      NS_ENSURE_SUCCESS(rv,rv);
      pVariant = do_CreateInstance(NS_VARIANT_CONTRACTID, &rv);
      NS_ENSURE_SUCCESS(rv,rv);
      if (pContent) {
        rv = pContent->GetNodeValue(pText);
        NS_ENSURE_SUCCESS(rv,rv);
        pVariant->SetAsAString(pText);
        printf("%s|",ToNewCString(pText));
      } else {
        pVariant->SetAsAString(NS_LITERAL_STRING(""));
      }
      rv = pArray.AppendObject(pVariant);
    }
  }
  rv = mComponent->TreatP000D(pArray, pLsize, pCsize, mKey);
  return rv;
}


/* Generated by Pygmalion */


NS_IMPL_ISUPPORTS1(mozListenerP000E, nsISOAPResponseListener)

mozListenerP000E::mozListenerP000E(mozC02gestsea* aComponent, const nsACString & aSearch)
{
  mComponent = aComponent;
  mSearch = aSearch;
}
mozListenerP000E::~mozListenerP000E()
{
}

NS_IMETHODIMP mozListenerP000E::HandleResponse(nsISOAPResponse *aResponse, nsISOAPCall *aCall, PRUint32 aStatus, PRBool aLast, PRBool *aReturn)
{
  nsresult rv;
  nsCOMPtr<nsISOAPFault> pFault;
  rv = aResponse->GetFault(getter_AddRefs(pFault));
  NS_ENSURE_SUCCESS(rv, rv);
  if (pFault) {
    nsAutoString pFaute, pDetail, pTitle;
    nsCOMPtr<nsIDOMElement> pTheDetail;
    nsCOMPtr<nsIDOMNode> pNode;
    rv = pFault->GetDetail(getter_AddRefs(pTheDetail));
    NS_ENSURE_SUCCESS(rv,rv);
    rv = pTheDetail->GetFirstChild(getter_AddRefs(pNode));
    NS_ENSURE_SUCCESS(rv,rv);
    if (pNode) {
      nsCOMPtr<nsIDOMNamedNodeMap> pAttributes;
      nsCOMPtr<nsIDOMNode> pAttribute, pFirstNode;
      nsAutoString pNodeValue;
      rv = pNode->GetFirstChild(getter_AddRefs(pFirstNode));
      NS_ENSURE_SUCCESS(rv,rv);
      if (pFirstNode) {
        pFirstNode->GetNodeValue(pNodeValue);
        NS_ENSURE_SUCCESS(rv,rv);
        pDetail  = pNodeValue;
      }
      pNode->GetAttributes(getter_AddRefs(pAttributes));
      NS_ENSURE_SUCCESS(rv,rv);
      pAttributes->GetNamedItem(NS_LITERAL_STRING("code"), getter_AddRefs(pAttribute));
      NS_ENSURE_SUCCESS(rv,rv);
      if (pAttribute) {
        pAttribute->GetNodeValue(pNodeValue);
        NS_ENSURE_SUCCESS(rv,rv);
        pDetail += NS_LITERAL_STRING("\n(Erreur ");
        pDetail += pNodeValue;
        pDetail += NS_LITERAL_STRING(")");
      }
    } else pDetail = NS_LITERAL_STRING("Erreur sans message.");
    pFaute = pDetail;
    rv = pFault->GetFaultString(pTitle);
    NS_ENSURE_SUCCESS(rv,rv);
    nsCOMPtr<nsIPrompt> pPrompt= do_GetService(NS_DEFAULTPROMPT_CONTRACTID, &rv);
    NS_ENSURE_SUCCESS(rv,rv);
    pPrompt->Alert(ToNewUnicode(pTitle), ToNewUnicode(pFaute));
    return NS_ERROR_FAILURE;
  }

  nsISOAPParameter ** pParameters;
  PRUint32 pTotal;
  rv = aResponse->GetParameters(PR_FALSE, &pTotal, &pParameters);
  NS_ENSURE_SUCCESS(rv,rv);
  if (pTotal!=1) {
    nsCOMPtr<nsIPrompt> pPrompt= do_GetService(NS_DEFAULTPROMPT_CONTRACTID, &rv);
    NS_ENSURE_SUCCESS(rv,rv);
    pPrompt->Alert(ToNewUnicode(NS_LITERAL_CSTRING("Erreur système")), ToNewUnicode(NS_LITERAL_CSTRING("Le nombre total de paramètres reçus est incorrect.")));
    return NS_ERROR_FAILURE;
  }

  nsAutoString pText;
  nsCOMArray<nsIVariant> pArray;
  nsCOMPtr<nsIWritableVariant> pVariant;
  PRUint32 pLsize=0, pCsize=0;
  PRUint32 pLineIndex, pColIndex;
  PRUint16 pNodeType;
  nsCOMPtr<nsIDOMElement> pResult;
  nsCOMPtr<nsIDOMNodeList> pLines, pValues;
  nsCOMPtr<nsIDOMNode> pLine, pValue, pContent;
  rv = pParameters[0]->GetElement(getter_AddRefs(pResult));
  NS_ENSURE_SUCCESS(rv,rv);
  rv = pResult->GetChildNodes(getter_AddRefs(pLines));
  NS_ENSURE_SUCCESS(rv,rv);
  pLines->GetLength(&pLsize);
  for (pLineIndex=0;pLineIndex<pLsize;pLineIndex++) {
    do {
      rv = pLines->Item(pLineIndex, getter_AddRefs(pLine));
      NS_ENSURE_SUCCESS(rv,rv);
      pLine->GetNodeType(&pNodeType);
      if (pNodeType!=nsIDOMNode::ELEMENT_NODE) pLineIndex++;
    } while (pLineIndex<pLsize && pNodeType!=nsIDOMNode::ELEMENT_NODE);
    if (pLineIndex>=pLsize) break;
    rv = pLine->GetChildNodes(getter_AddRefs(pValues));
    NS_ENSURE_SUCCESS(rv,rv);
    pValues->GetLength(&pCsize);
    for (pColIndex=0;pColIndex<pCsize;pColIndex++) {
      do {
        rv = pValues->Item(pColIndex, getter_AddRefs(pValue));
        NS_ENSURE_SUCCESS(rv,rv);
        pValue->GetNodeType(&pNodeType);
        if (pNodeType!=nsIDOMNode::ELEMENT_NODE) pColIndex++;
      } while (pColIndex<pCsize && pNodeType!=nsIDOMNode::ELEMENT_NODE);
      if (pColIndex>=pCsize) break;
      rv = pValue->GetFirstChild(getter_AddRefs(pContent));
      NS_ENSURE_SUCCESS(rv,rv);
      pVariant = do_CreateInstance(NS_VARIANT_CONTRACTID, &rv);
      NS_ENSURE_SUCCESS(rv,rv);
      if (pContent) {
        rv = pContent->GetNodeValue(pText);
        NS_ENSURE_SUCCESS(rv,rv);
        pVariant->SetAsAString(pText);
        printf("%s|",ToNewCString(pText));
      } else {
        pVariant->SetAsAString(NS_LITERAL_STRING(""));
      }
      rv = pArray.AppendObject(pVariant);
    }
  }
  rv = mComponent->TreatP000E(pArray, pLsize, pCsize, mSearch);
  return rv;
}


/* Generated by Pygmalion */


NS_IMPL_ISUPPORTS1(mozListenerP000F, nsISOAPResponseListener)

mozListenerP000F::mozListenerP000F(mozC02gestsea* aComponent, const nsACString & aSearch)
{
  mComponent = aComponent;
  mSearch = aSearch;
}
mozListenerP000F::~mozListenerP000F()
{
}

NS_IMETHODIMP mozListenerP000F::HandleResponse(nsISOAPResponse *aResponse, nsISOAPCall *aCall, PRUint32 aStatus, PRBool aLast, PRBool *aReturn)
{
  nsresult rv;
  nsCOMPtr<nsISOAPFault> pFault;
  rv = aResponse->GetFault(getter_AddRefs(pFault));
  NS_ENSURE_SUCCESS(rv, rv);
  if (pFault) {
    nsAutoString pFaute, pDetail, pTitle;
    nsCOMPtr<nsIDOMElement> pTheDetail;
    nsCOMPtr<nsIDOMNode> pNode;
    rv = pFault->GetDetail(getter_AddRefs(pTheDetail));
    NS_ENSURE_SUCCESS(rv,rv);
    rv = pTheDetail->GetFirstChild(getter_AddRefs(pNode));
    NS_ENSURE_SUCCESS(rv,rv);
    if (pNode) {
      nsCOMPtr<nsIDOMNamedNodeMap> pAttributes;
      nsCOMPtr<nsIDOMNode> pAttribute, pFirstNode;
      nsAutoString pNodeValue;
      rv = pNode->GetFirstChild(getter_AddRefs(pFirstNode));
      NS_ENSURE_SUCCESS(rv,rv);
      if (pFirstNode) {
        pFirstNode->GetNodeValue(pNodeValue);
        NS_ENSURE_SUCCESS(rv,rv);
        pDetail  = pNodeValue;
      }
      pNode->GetAttributes(getter_AddRefs(pAttributes));
      NS_ENSURE_SUCCESS(rv,rv);
      pAttributes->GetNamedItem(NS_LITERAL_STRING("code"), getter_AddRefs(pAttribute));
      NS_ENSURE_SUCCESS(rv,rv);
      if (pAttribute) {
        pAttribute->GetNodeValue(pNodeValue);
        NS_ENSURE_SUCCESS(rv,rv);
        pDetail += NS_LITERAL_STRING("\n(Erreur ");
        pDetail += pNodeValue;
        pDetail += NS_LITERAL_STRING(")");
      }
    } else pDetail = NS_LITERAL_STRING("Erreur sans message.");
    pFaute = pDetail;
    rv = pFault->GetFaultString(pTitle);
    NS_ENSURE_SUCCESS(rv,rv);
    nsCOMPtr<nsIPrompt> pPrompt= do_GetService(NS_DEFAULTPROMPT_CONTRACTID, &rv);
    NS_ENSURE_SUCCESS(rv,rv);
    pPrompt->Alert(ToNewUnicode(pTitle), ToNewUnicode(pFaute));
    return NS_ERROR_FAILURE;
  }

  nsISOAPParameter ** pParameters;
  PRUint32 pTotal;
  rv = aResponse->GetParameters(PR_FALSE, &pTotal, &pParameters);
  NS_ENSURE_SUCCESS(rv,rv);
  if (pTotal!=1) {
    nsCOMPtr<nsIPrompt> pPrompt= do_GetService(NS_DEFAULTPROMPT_CONTRACTID, &rv);
    NS_ENSURE_SUCCESS(rv,rv);
    pPrompt->Alert(ToNewUnicode(NS_LITERAL_CSTRING("Erreur système")), ToNewUnicode(NS_LITERAL_CSTRING("Le nombre total de paramètres reçus est incorrect.")));
    return NS_ERROR_FAILURE;
  }

  nsAutoString pText;
  nsCOMArray<nsIVariant> pArray;
  nsCOMPtr<nsIWritableVariant> pVariant;
  PRUint32 pLsize=0, pCsize=0;
  PRUint32 pLineIndex, pColIndex;
  PRUint16 pNodeType;
  nsCOMPtr<nsIDOMElement> pResult;
  nsCOMPtr<nsIDOMNodeList> pLines, pValues;
  nsCOMPtr<nsIDOMNode> pLine, pValue, pContent;
  rv = pParameters[0]->GetElement(getter_AddRefs(pResult));
  NS_ENSURE_SUCCESS(rv,rv);
  rv = pResult->GetChildNodes(getter_AddRefs(pLines));
  NS_ENSURE_SUCCESS(rv,rv);
  pLines->GetLength(&pLsize);
  for (pLineIndex=0;pLineIndex<pLsize;pLineIndex++) {
    do {
      rv = pLines->Item(pLineIndex, getter_AddRefs(pLine));
      NS_ENSURE_SUCCESS(rv,rv);
      pLine->GetNodeType(&pNodeType);
      if (pNodeType!=nsIDOMNode::ELEMENT_NODE) pLineIndex++;
    } while (pLineIndex<pLsize && pNodeType!=nsIDOMNode::ELEMENT_NODE);
    if (pLineIndex>=pLsize) break;
    rv = pLine->GetChildNodes(getter_AddRefs(pValues));
    NS_ENSURE_SUCCESS(rv,rv);
    pValues->GetLength(&pCsize);
    for (pColIndex=0;pColIndex<pCsize;pColIndex++) {
      do {
        rv = pValues->Item(pColIndex, getter_AddRefs(pValue));
        NS_ENSURE_SUCCESS(rv,rv);
        pValue->GetNodeType(&pNodeType);
        if (pNodeType!=nsIDOMNode::ELEMENT_NODE) pColIndex++;
      } while (pColIndex<pCsize && pNodeType!=nsIDOMNode::ELEMENT_NODE);
      if (pColIndex>=pCsize) break;
      rv = pValue->GetFirstChild(getter_AddRefs(pContent));
      NS_ENSURE_SUCCESS(rv,rv);
      pVariant = do_CreateInstance(NS_VARIANT_CONTRACTID, &rv);
      NS_ENSURE_SUCCESS(rv,rv);
      if (pContent) {
        rv = pContent->GetNodeValue(pText);
        NS_ENSURE_SUCCESS(rv,rv);
        pVariant->SetAsAString(pText);
        printf("%s|",ToNewCString(pText));
      } else {
        pVariant->SetAsAString(NS_LITERAL_STRING(""));
      }
      rv = pArray.AppendObject(pVariant);
    }
  }
  rv = mComponent->TreatP000F(pArray, pLsize, pCsize, mSearch);
  return rv;
}


/* Generated by Pygmalion */


NS_IMPL_ISUPPORTS1(mozListenerP0010, nsISOAPResponseListener)

mozListenerP0010::mozListenerP0010(mozC02gestsea* aComponent, const nsAString & aKey)
{
  mComponent = aComponent;
  mKey = aKey;
}
mozListenerP0010::~mozListenerP0010()
{
}

NS_IMETHODIMP mozListenerP0010::HandleResponse(nsISOAPResponse *aResponse, nsISOAPCall *aCall, PRUint32 aStatus, PRBool aLast, PRBool *aReturn)
{
  nsresult rv;
  nsCOMPtr<nsISOAPFault> pFault;
  rv = aResponse->GetFault(getter_AddRefs(pFault));
  NS_ENSURE_SUCCESS(rv, rv);
  if (pFault) {
    nsAutoString pFaute, pDetail, pTitle;
    nsCOMPtr<nsIDOMElement> pTheDetail;
    nsCOMPtr<nsIDOMNode> pNode;
    rv = pFault->GetDetail(getter_AddRefs(pTheDetail));
    NS_ENSURE_SUCCESS(rv,rv);
    rv = pTheDetail->GetFirstChild(getter_AddRefs(pNode));
    NS_ENSURE_SUCCESS(rv,rv);
    if (pNode) {
      nsCOMPtr<nsIDOMNamedNodeMap> pAttributes;
      nsCOMPtr<nsIDOMNode> pAttribute, pFirstNode;
      nsAutoString pNodeValue;
      rv = pNode->GetFirstChild(getter_AddRefs(pFirstNode));
      NS_ENSURE_SUCCESS(rv,rv);
      if (pFirstNode) {
        pFirstNode->GetNodeValue(pNodeValue);
        NS_ENSURE_SUCCESS(rv,rv);
        pDetail  = pNodeValue;
      }
      pNode->GetAttributes(getter_AddRefs(pAttributes));
      NS_ENSURE_SUCCESS(rv,rv);
      pAttributes->GetNamedItem(NS_LITERAL_STRING("code"), getter_AddRefs(pAttribute));
      NS_ENSURE_SUCCESS(rv,rv);
      if (pAttribute) {
        pAttribute->GetNodeValue(pNodeValue);
        NS_ENSURE_SUCCESS(rv,rv);
        pDetail += NS_LITERAL_STRING("\n(Erreur ");
        pDetail += pNodeValue;
        pDetail += NS_LITERAL_STRING(")");
      }
    } else pDetail = NS_LITERAL_STRING("Erreur sans message.");
    pFaute = pDetail;
    rv = pFault->GetFaultString(pTitle);
    NS_ENSURE_SUCCESS(rv,rv);
    nsCOMPtr<nsIPrompt> pPrompt= do_GetService(NS_DEFAULTPROMPT_CONTRACTID, &rv);
    NS_ENSURE_SUCCESS(rv,rv);
    pPrompt->Alert(ToNewUnicode(pTitle), ToNewUnicode(pFaute));
    return NS_ERROR_FAILURE;
  }

  nsISOAPParameter ** pParameters;
  PRUint32 pTotal;
  rv = aResponse->GetParameters(PR_FALSE, &pTotal, &pParameters);
  NS_ENSURE_SUCCESS(rv,rv);
  if (pTotal!=1) {
    nsCOMPtr<nsIPrompt> pPrompt= do_GetService(NS_DEFAULTPROMPT_CONTRACTID, &rv);
    NS_ENSURE_SUCCESS(rv,rv);
    pPrompt->Alert(ToNewUnicode(NS_LITERAL_CSTRING("Erreur système")), ToNewUnicode(NS_LITERAL_CSTRING("Le nombre total de paramètres reçus est incorrect.")));
    return NS_ERROR_FAILURE;
  }

  nsAutoString pText;
  nsCOMArray<nsIVariant> pArray;
  nsCOMPtr<nsIWritableVariant> pVariant;
  PRUint32 pLsize=0, pCsize=0;
  PRUint32 pLineIndex, pColIndex;
  PRUint16 pNodeType;
  nsCOMPtr<nsIDOMElement> pResult;
  nsCOMPtr<nsIDOMNodeList> pLines, pValues;
  nsCOMPtr<nsIDOMNode> pLine, pValue, pContent;
  rv = pParameters[0]->GetElement(getter_AddRefs(pResult));
  NS_ENSURE_SUCCESS(rv,rv);
  rv = pResult->GetChildNodes(getter_AddRefs(pLines));
  NS_ENSURE_SUCCESS(rv,rv);
  pLines->GetLength(&pLsize);
  for (pLineIndex=0;pLineIndex<pLsize;pLineIndex++) {
    do {
      rv = pLines->Item(pLineIndex, getter_AddRefs(pLine));
      NS_ENSURE_SUCCESS(rv,rv);
      pLine->GetNodeType(&pNodeType);
      if (pNodeType!=nsIDOMNode::ELEMENT_NODE) pLineIndex++;
    } while (pLineIndex<pLsize && pNodeType!=nsIDOMNode::ELEMENT_NODE);
    if (pLineIndex>=pLsize) break;
    rv = pLine->GetChildNodes(getter_AddRefs(pValues));
    NS_ENSURE_SUCCESS(rv,rv);
    pValues->GetLength(&pCsize);
    for (pColIndex=0;pColIndex<pCsize;pColIndex++) {
      do {
        rv = pValues->Item(pColIndex, getter_AddRefs(pValue));
        NS_ENSURE_SUCCESS(rv,rv);
        pValue->GetNodeType(&pNodeType);
        if (pNodeType!=nsIDOMNode::ELEMENT_NODE) pColIndex++;
      } while (pColIndex<pCsize && pNodeType!=nsIDOMNode::ELEMENT_NODE);
      if (pColIndex>=pCsize) break;
      rv = pValue->GetFirstChild(getter_AddRefs(pContent));
      NS_ENSURE_SUCCESS(rv,rv);
      pVariant = do_CreateInstance(NS_VARIANT_CONTRACTID, &rv);
      NS_ENSURE_SUCCESS(rv,rv);
      if (pContent) {
        rv = pContent->GetNodeValue(pText);
        NS_ENSURE_SUCCESS(rv,rv);
        pVariant->SetAsAString(pText);
        printf("%s|",ToNewCString(pText));
      } else {
        pVariant->SetAsAString(NS_LITERAL_STRING(""));
      }
      rv = pArray.AppendObject(pVariant);
    }
  }
  rv = mComponent->TreatP0010(pArray, pLsize, pCsize, mKey);
  return rv;
}


/* Generated by Pygmalion */


NS_IMPL_ISUPPORTS1(mozListenerP0011, nsISOAPResponseListener)

mozListenerP0011::mozListenerP0011(mozC02gestsea* aComponent, const nsAString & aKey)
{
  mComponent = aComponent;
  mKey = aKey;
}
mozListenerP0011::~mozListenerP0011()
{
}

NS_IMETHODIMP mozListenerP0011::HandleResponse(nsISOAPResponse *aResponse, nsISOAPCall *aCall, PRUint32 aStatus, PRBool aLast, PRBool *aReturn)
{
  nsresult rv;
  nsCOMPtr<nsISOAPFault> pFault;
  rv = aResponse->GetFault(getter_AddRefs(pFault));
  NS_ENSURE_SUCCESS(rv, rv);
  if (pFault) {
    nsAutoString pFaute, pDetail, pTitle;
    nsCOMPtr<nsIDOMElement> pTheDetail;
    nsCOMPtr<nsIDOMNode> pNode;
    rv = pFault->GetDetail(getter_AddRefs(pTheDetail));
    NS_ENSURE_SUCCESS(rv,rv);
    rv = pTheDetail->GetFirstChild(getter_AddRefs(pNode));
    NS_ENSURE_SUCCESS(rv,rv);
    if (pNode) {
      nsCOMPtr<nsIDOMNamedNodeMap> pAttributes;
      nsCOMPtr<nsIDOMNode> pAttribute, pFirstNode;
      nsAutoString pNodeValue;
      rv = pNode->GetFirstChild(getter_AddRefs(pFirstNode));
      NS_ENSURE_SUCCESS(rv,rv);
      if (pFirstNode) {
        pFirstNode->GetNodeValue(pNodeValue);
        NS_ENSURE_SUCCESS(rv,rv);
        pDetail  = pNodeValue;
      }
      pNode->GetAttributes(getter_AddRefs(pAttributes));
      NS_ENSURE_SUCCESS(rv,rv);
      pAttributes->GetNamedItem(NS_LITERAL_STRING("code"), getter_AddRefs(pAttribute));
      NS_ENSURE_SUCCESS(rv,rv);
      if (pAttribute) {
        pAttribute->GetNodeValue(pNodeValue);
        NS_ENSURE_SUCCESS(rv,rv);
        pDetail += NS_LITERAL_STRING("\n(Erreur ");
        pDetail += pNodeValue;
        pDetail += NS_LITERAL_STRING(")");
      }
    } else pDetail = NS_LITERAL_STRING("Erreur sans message.");
    pFaute = pDetail;
    rv = pFault->GetFaultString(pTitle);
    NS_ENSURE_SUCCESS(rv,rv);
    nsCOMPtr<nsIPrompt> pPrompt= do_GetService(NS_DEFAULTPROMPT_CONTRACTID, &rv);
    NS_ENSURE_SUCCESS(rv,rv);
    pPrompt->Alert(ToNewUnicode(pTitle), ToNewUnicode(pFaute));
    return NS_ERROR_FAILURE;
  }

  nsISOAPParameter ** pParameters;
  PRUint32 pTotal;
  rv = aResponse->GetParameters(PR_FALSE, &pTotal, &pParameters);
  NS_ENSURE_SUCCESS(rv,rv);
  if (pTotal!=1) {
    nsCOMPtr<nsIPrompt> pPrompt= do_GetService(NS_DEFAULTPROMPT_CONTRACTID, &rv);
    NS_ENSURE_SUCCESS(rv,rv);
    pPrompt->Alert(ToNewUnicode(NS_LITERAL_CSTRING("Erreur système")), ToNewUnicode(NS_LITERAL_CSTRING("Le nombre total de paramètres reçus est incorrect.")));
    return NS_ERROR_FAILURE;
  }

  nsAutoString pText;
  nsCOMArray<nsIVariant> pArray;
  nsCOMPtr<nsIWritableVariant> pVariant;
  PRUint32 pLsize=0, pCsize=0;
  PRUint32 pLineIndex, pColIndex;
  PRUint16 pNodeType;
  nsCOMPtr<nsIDOMElement> pResult;
  nsCOMPtr<nsIDOMNodeList> pLines, pValues;
  nsCOMPtr<nsIDOMNode> pLine, pValue, pContent;
  rv = pParameters[0]->GetElement(getter_AddRefs(pResult));
  NS_ENSURE_SUCCESS(rv,rv);
  rv = pResult->GetChildNodes(getter_AddRefs(pLines));
  NS_ENSURE_SUCCESS(rv,rv);
  pLines->GetLength(&pLsize);
  for (pLineIndex=0;pLineIndex<pLsize;pLineIndex++) {
    do {
      rv = pLines->Item(pLineIndex, getter_AddRefs(pLine));
      NS_ENSURE_SUCCESS(rv,rv);
      pLine->GetNodeType(&pNodeType);
      if (pNodeType!=nsIDOMNode::ELEMENT_NODE) pLineIndex++;
    } while (pLineIndex<pLsize && pNodeType!=nsIDOMNode::ELEMENT_NODE);
    if (pLineIndex>=pLsize) break;
    rv = pLine->GetChildNodes(getter_AddRefs(pValues));
    NS_ENSURE_SUCCESS(rv,rv);
    pValues->GetLength(&pCsize);
    for (pColIndex=0;pColIndex<pCsize;pColIndex++) {
      do {
        rv = pValues->Item(pColIndex, getter_AddRefs(pValue));
        NS_ENSURE_SUCCESS(rv,rv);
        pValue->GetNodeType(&pNodeType);
        if (pNodeType!=nsIDOMNode::ELEMENT_NODE) pColIndex++;
      } while (pColIndex<pCsize && pNodeType!=nsIDOMNode::ELEMENT_NODE);
      if (pColIndex>=pCsize) break;
      rv = pValue->GetFirstChild(getter_AddRefs(pContent));
      NS_ENSURE_SUCCESS(rv,rv);
      pVariant = do_CreateInstance(NS_VARIANT_CONTRACTID, &rv);
      NS_ENSURE_SUCCESS(rv,rv);
      if (pContent) {
        rv = pContent->GetNodeValue(pText);
        NS_ENSURE_SUCCESS(rv,rv);
        pVariant->SetAsAString(pText);
        printf("%s|",ToNewCString(pText));
      } else {
        pVariant->SetAsAString(NS_LITERAL_STRING(""));
      }
      rv = pArray.AppendObject(pVariant);
    }
  }
  rv = mComponent->TreatP0011(pArray, pLsize, pCsize, mKey);
  return rv;
}


/* Generated by Pygmalion */


NS_IMPL_ISUPPORTS1(mozListenerP0012, nsISOAPResponseListener)

mozListenerP0012::mozListenerP0012(mozC02gestsea* aComponent, const nsAString & aKey, const nsACString & aField1, const nsACString & aField2, const nsACString & aField3, const nsACString & aField4, const nsACString & aField5, const nsACString & aField6, const nsACString & aField7, const nsACString & aField8, const nsACString & aField9, const nsACString & aField10, const nsACString & aField11, const nsACString & aField12, const nsACString & aField13)
{
  mComponent = aComponent;
  mKey = aKey;
  mField1 = aField1;
  mField2 = aField2;
  mField3 = aField3;
  mField4 = aField4;
  mField5 = aField5;
  mField6 = aField6;
  mField7 = aField7;
  mField8 = aField8;
  mField9 = aField9;
  mField10 = aField10;
  mField11 = aField11;
  mField12 = aField12;
  mField13 = aField13;
}
mozListenerP0012::~mozListenerP0012()
{
}

NS_IMETHODIMP mozListenerP0012::HandleResponse(nsISOAPResponse *aResponse, nsISOAPCall *aCall, PRUint32 aStatus, PRBool aLast, PRBool *aReturn)
{
  nsresult rv;
  nsCOMPtr<nsISOAPFault> pFault;
  rv = aResponse->GetFault(getter_AddRefs(pFault));
  NS_ENSURE_SUCCESS(rv, rv);
  if (pFault) {
    nsAutoString pFaute, pDetail, pTitle;
    nsCOMPtr<nsIDOMElement> pTheDetail;
    nsCOMPtr<nsIDOMNode> pNode;
    rv = pFault->GetDetail(getter_AddRefs(pTheDetail));
    NS_ENSURE_SUCCESS(rv,rv);
    rv = pTheDetail->GetFirstChild(getter_AddRefs(pNode));
    NS_ENSURE_SUCCESS(rv,rv);
    if (pNode) {
      nsCOMPtr<nsIDOMNamedNodeMap> pAttributes;
      nsCOMPtr<nsIDOMNode> pAttribute, pFirstNode;
      nsAutoString pNodeValue;
      rv = pNode->GetFirstChild(getter_AddRefs(pFirstNode));
      NS_ENSURE_SUCCESS(rv,rv);
      if (pFirstNode) {
        pFirstNode->GetNodeValue(pNodeValue);
        NS_ENSURE_SUCCESS(rv,rv);
        pDetail  = pNodeValue;
      }
      pNode->GetAttributes(getter_AddRefs(pAttributes));
      NS_ENSURE_SUCCESS(rv,rv);
      pAttributes->GetNamedItem(NS_LITERAL_STRING("code"), getter_AddRefs(pAttribute));
      NS_ENSURE_SUCCESS(rv,rv);
      if (pAttribute) {
        pAttribute->GetNodeValue(pNodeValue);
        NS_ENSURE_SUCCESS(rv,rv);
        pDetail += NS_LITERAL_STRING("\n(Erreur ");
        pDetail += pNodeValue;
        pDetail += NS_LITERAL_STRING(")");
      }
    } else pDetail = NS_LITERAL_STRING("Erreur sans message.");
    pFaute = pDetail;
    rv = pFault->GetFaultString(pTitle);
    NS_ENSURE_SUCCESS(rv,rv);
    nsCOMPtr<nsIPrompt> pPrompt= do_GetService(NS_DEFAULTPROMPT_CONTRACTID, &rv);
    NS_ENSURE_SUCCESS(rv,rv);
    pPrompt->Alert(ToNewUnicode(pTitle), ToNewUnicode(pFaute));
    return NS_ERROR_FAILURE;
  }

  nsISOAPParameter ** pParameters;
  PRUint32 pTotal;
  rv = aResponse->GetParameters(PR_FALSE, &pTotal, &pParameters);
  NS_ENSURE_SUCCESS(rv,rv);
  if (pTotal!=1) {
    nsCOMPtr<nsIPrompt> pPrompt= do_GetService(NS_DEFAULTPROMPT_CONTRACTID, &rv);
    NS_ENSURE_SUCCESS(rv,rv);
    pPrompt->Alert(ToNewUnicode(NS_LITERAL_CSTRING("Erreur système")), ToNewUnicode(NS_LITERAL_CSTRING("Le nombre total de paramètres reçus est incorrect.")));
    return NS_ERROR_FAILURE;
  }

  nsAutoString pText;
  nsCOMPtr<nsIVariant> pValue;
  rv = pParameters[0]->GetValue(getter_AddRefs(pValue));
  NS_ENSURE_SUCCESS(rv,rv);
  rv = pValue->GetAsAString(pText);
  NS_ENSURE_SUCCESS(rv,rv);
  rv = mComponent->TreatP0012(pText, mKey, mField1, mField2, mField3, mField4, mField5, mField6, mField7, mField8, mField9, mField10, mField11, mField12, mField13);
  return rv;
}


/* Generated by Pygmalion */


NS_IMPL_ISUPPORTS1(mozListenerP0013, nsISOAPResponseListener)

mozListenerP0013::mozListenerP0013(mozC02gestsea* aComponent, const nsACString & aSearch)
{
  mComponent = aComponent;
  mSearch = aSearch;
}
mozListenerP0013::~mozListenerP0013()
{
}

NS_IMETHODIMP mozListenerP0013::HandleResponse(nsISOAPResponse *aResponse, nsISOAPCall *aCall, PRUint32 aStatus, PRBool aLast, PRBool *aReturn)
{
  nsresult rv;
  nsCOMPtr<nsISOAPFault> pFault;
  rv = aResponse->GetFault(getter_AddRefs(pFault));
  NS_ENSURE_SUCCESS(rv, rv);
  if (pFault) {
    nsAutoString pFaute, pDetail, pTitle;
    nsCOMPtr<nsIDOMElement> pTheDetail;
    nsCOMPtr<nsIDOMNode> pNode;
    rv = pFault->GetDetail(getter_AddRefs(pTheDetail));
    NS_ENSURE_SUCCESS(rv,rv);
    rv = pTheDetail->GetFirstChild(getter_AddRefs(pNode));
    NS_ENSURE_SUCCESS(rv,rv);
    if (pNode) {
      nsCOMPtr<nsIDOMNamedNodeMap> pAttributes;
      nsCOMPtr<nsIDOMNode> pAttribute, pFirstNode;
      nsAutoString pNodeValue;
      rv = pNode->GetFirstChild(getter_AddRefs(pFirstNode));
      NS_ENSURE_SUCCESS(rv,rv);
      if (pFirstNode) {
        pFirstNode->GetNodeValue(pNodeValue);
        NS_ENSURE_SUCCESS(rv,rv);
        pDetail  = pNodeValue;
      }
      pNode->GetAttributes(getter_AddRefs(pAttributes));
      NS_ENSURE_SUCCESS(rv,rv);
      pAttributes->GetNamedItem(NS_LITERAL_STRING("code"), getter_AddRefs(pAttribute));
      NS_ENSURE_SUCCESS(rv,rv);
      if (pAttribute) {
        pAttribute->GetNodeValue(pNodeValue);
        NS_ENSURE_SUCCESS(rv,rv);
        pDetail += NS_LITERAL_STRING("\n(Erreur ");
        pDetail += pNodeValue;
        pDetail += NS_LITERAL_STRING(")");
      }
    } else pDetail = NS_LITERAL_STRING("Erreur sans message.");
    pFaute = pDetail;
    rv = pFault->GetFaultString(pTitle);
    NS_ENSURE_SUCCESS(rv,rv);
    nsCOMPtr<nsIPrompt> pPrompt= do_GetService(NS_DEFAULTPROMPT_CONTRACTID, &rv);
    NS_ENSURE_SUCCESS(rv,rv);
    pPrompt->Alert(ToNewUnicode(pTitle), ToNewUnicode(pFaute));
    return NS_ERROR_FAILURE;
  }

  nsISOAPParameter ** pParameters;
  PRUint32 pTotal;
  rv = aResponse->GetParameters(PR_FALSE, &pTotal, &pParameters);
  NS_ENSURE_SUCCESS(rv,rv);
  if (pTotal!=1) {
    nsCOMPtr<nsIPrompt> pPrompt= do_GetService(NS_DEFAULTPROMPT_CONTRACTID, &rv);
    NS_ENSURE_SUCCESS(rv,rv);
    pPrompt->Alert(ToNewUnicode(NS_LITERAL_CSTRING("Erreur système")), ToNewUnicode(NS_LITERAL_CSTRING("Le nombre total de paramètres reçus est incorrect.")));
    return NS_ERROR_FAILURE;
  }

  nsAutoString pText;
  nsCOMArray<nsIVariant> pArray;
  nsCOMPtr<nsIWritableVariant> pVariant;
  PRUint32 pLsize=0, pCsize=0;
  PRUint32 pLineIndex, pColIndex;
  PRUint16 pNodeType;
  nsCOMPtr<nsIDOMElement> pResult;
  nsCOMPtr<nsIDOMNodeList> pLines, pValues;
  nsCOMPtr<nsIDOMNode> pLine, pValue, pContent;
  rv = pParameters[0]->GetElement(getter_AddRefs(pResult));
  NS_ENSURE_SUCCESS(rv,rv);
  rv = pResult->GetChildNodes(getter_AddRefs(pLines));
  NS_ENSURE_SUCCESS(rv,rv);
  pLines->GetLength(&pLsize);
  for (pLineIndex=0;pLineIndex<pLsize;pLineIndex++) {
    do {
      rv = pLines->Item(pLineIndex, getter_AddRefs(pLine));
      NS_ENSURE_SUCCESS(rv,rv);
      pLine->GetNodeType(&pNodeType);
      if (pNodeType!=nsIDOMNode::ELEMENT_NODE) pLineIndex++;
    } while (pLineIndex<pLsize && pNodeType!=nsIDOMNode::ELEMENT_NODE);
    if (pLineIndex>=pLsize) break;
    rv = pLine->GetChildNodes(getter_AddRefs(pValues));
    NS_ENSURE_SUCCESS(rv,rv);
    pValues->GetLength(&pCsize);
    for (pColIndex=0;pColIndex<pCsize;pColIndex++) {
      do {
        rv = pValues->Item(pColIndex, getter_AddRefs(pValue));
        NS_ENSURE_SUCCESS(rv,rv);
        pValue->GetNodeType(&pNodeType);
        if (pNodeType!=nsIDOMNode::ELEMENT_NODE) pColIndex++;
      } while (pColIndex<pCsize && pNodeType!=nsIDOMNode::ELEMENT_NODE);
      if (pColIndex>=pCsize) break;
      rv = pValue->GetFirstChild(getter_AddRefs(pContent));
      NS_ENSURE_SUCCESS(rv,rv);
      pVariant = do_CreateInstance(NS_VARIANT_CONTRACTID, &rv);
      NS_ENSURE_SUCCESS(rv,rv);
      if (pContent) {
        rv = pContent->GetNodeValue(pText);
        NS_ENSURE_SUCCESS(rv,rv);
        pVariant->SetAsAString(pText);
        printf("%s|",ToNewCString(pText));
      } else {
        pVariant->SetAsAString(NS_LITERAL_STRING(""));
      }
      rv = pArray.AppendObject(pVariant);
    }
  }
  rv = mComponent->TreatP0013(pArray, pLsize, pCsize, mSearch);
  return rv;
}


/* Generated by Pygmalion */


NS_IMPL_ISUPPORTS1(mozListenerP0014, nsISOAPResponseListener)

mozListenerP0014::mozListenerP0014(mozC02gestsea* aComponent, const nsACString & aSearch)
{
  mComponent = aComponent;
  mSearch = aSearch;
}
mozListenerP0014::~mozListenerP0014()
{
}

NS_IMETHODIMP mozListenerP0014::HandleResponse(nsISOAPResponse *aResponse, nsISOAPCall *aCall, PRUint32 aStatus, PRBool aLast, PRBool *aReturn)
{
  nsresult rv;
  nsCOMPtr<nsISOAPFault> pFault;
  rv = aResponse->GetFault(getter_AddRefs(pFault));
  NS_ENSURE_SUCCESS(rv, rv);
  if (pFault) {
    nsAutoString pFaute, pDetail, pTitle;
    nsCOMPtr<nsIDOMElement> pTheDetail;
    nsCOMPtr<nsIDOMNode> pNode;
    rv = pFault->GetDetail(getter_AddRefs(pTheDetail));
    NS_ENSURE_SUCCESS(rv,rv);
    rv = pTheDetail->GetFirstChild(getter_AddRefs(pNode));
    NS_ENSURE_SUCCESS(rv,rv);
    if (pNode) {
      nsCOMPtr<nsIDOMNamedNodeMap> pAttributes;
      nsCOMPtr<nsIDOMNode> pAttribute, pFirstNode;
      nsAutoString pNodeValue;
      rv = pNode->GetFirstChild(getter_AddRefs(pFirstNode));
      NS_ENSURE_SUCCESS(rv,rv);
      if (pFirstNode) {
        pFirstNode->GetNodeValue(pNodeValue);
        NS_ENSURE_SUCCESS(rv,rv);
        pDetail  = pNodeValue;
      }
      pNode->GetAttributes(getter_AddRefs(pAttributes));
      NS_ENSURE_SUCCESS(rv,rv);
      pAttributes->GetNamedItem(NS_LITERAL_STRING("code"), getter_AddRefs(pAttribute));
      NS_ENSURE_SUCCESS(rv,rv);
      if (pAttribute) {
        pAttribute->GetNodeValue(pNodeValue);
        NS_ENSURE_SUCCESS(rv,rv);
        pDetail += NS_LITERAL_STRING("\n(Erreur ");
        pDetail += pNodeValue;
        pDetail += NS_LITERAL_STRING(")");
      }
    } else pDetail = NS_LITERAL_STRING("Erreur sans message.");
    pFaute = pDetail;
    rv = pFault->GetFaultString(pTitle);
    NS_ENSURE_SUCCESS(rv,rv);
    nsCOMPtr<nsIPrompt> pPrompt= do_GetService(NS_DEFAULTPROMPT_CONTRACTID, &rv);
    NS_ENSURE_SUCCESS(rv,rv);
    pPrompt->Alert(ToNewUnicode(pTitle), ToNewUnicode(pFaute));
    return NS_ERROR_FAILURE;
  }

  nsISOAPParameter ** pParameters;
  PRUint32 pTotal;
  rv = aResponse->GetParameters(PR_FALSE, &pTotal, &pParameters);
  NS_ENSURE_SUCCESS(rv,rv);
  if (pTotal!=1) {
    nsCOMPtr<nsIPrompt> pPrompt= do_GetService(NS_DEFAULTPROMPT_CONTRACTID, &rv);
    NS_ENSURE_SUCCESS(rv,rv);
    pPrompt->Alert(ToNewUnicode(NS_LITERAL_CSTRING("Erreur système")), ToNewUnicode(NS_LITERAL_CSTRING("Le nombre total de paramètres reçus est incorrect.")));
    return NS_ERROR_FAILURE;
  }

  nsAutoString pText;
  nsCOMArray<nsIVariant> pArray;
  nsCOMPtr<nsIWritableVariant> pVariant;
  PRUint32 pLsize=0, pCsize=0;
  PRUint32 pLineIndex, pColIndex;
  PRUint16 pNodeType;
  nsCOMPtr<nsIDOMElement> pResult;
  nsCOMPtr<nsIDOMNodeList> pLines, pValues;
  nsCOMPtr<nsIDOMNode> pLine, pValue, pContent;
  rv = pParameters[0]->GetElement(getter_AddRefs(pResult));
  NS_ENSURE_SUCCESS(rv,rv);
  rv = pResult->GetChildNodes(getter_AddRefs(pLines));
  NS_ENSURE_SUCCESS(rv,rv);
  pLines->GetLength(&pLsize);
  for (pLineIndex=0;pLineIndex<pLsize;pLineIndex++) {
    do {
      rv = pLines->Item(pLineIndex, getter_AddRefs(pLine));
      NS_ENSURE_SUCCESS(rv,rv);
      pLine->GetNodeType(&pNodeType);
      if (pNodeType!=nsIDOMNode::ELEMENT_NODE) pLineIndex++;
    } while (pLineIndex<pLsize && pNodeType!=nsIDOMNode::ELEMENT_NODE);
    if (pLineIndex>=pLsize) break;
    rv = pLine->GetChildNodes(getter_AddRefs(pValues));
    NS_ENSURE_SUCCESS(rv,rv);
    pValues->GetLength(&pCsize);
    for (pColIndex=0;pColIndex<pCsize;pColIndex++) {
      do {
        rv = pValues->Item(pColIndex, getter_AddRefs(pValue));
        NS_ENSURE_SUCCESS(rv,rv);
        pValue->GetNodeType(&pNodeType);
        if (pNodeType!=nsIDOMNode::ELEMENT_NODE) pColIndex++;
      } while (pColIndex<pCsize && pNodeType!=nsIDOMNode::ELEMENT_NODE);
      if (pColIndex>=pCsize) break;
      rv = pValue->GetFirstChild(getter_AddRefs(pContent));
      NS_ENSURE_SUCCESS(rv,rv);
      pVariant = do_CreateInstance(NS_VARIANT_CONTRACTID, &rv);
      NS_ENSURE_SUCCESS(rv,rv);
      if (pContent) {
        rv = pContent->GetNodeValue(pText);
        NS_ENSURE_SUCCESS(rv,rv);
        pVariant->SetAsAString(pText);
        printf("%s|",ToNewCString(pText));
      } else {
        pVariant->SetAsAString(NS_LITERAL_STRING(""));
      }
      rv = pArray.AppendObject(pVariant);
    }
  }
  rv = mComponent->TreatP0014(pArray, pLsize, pCsize, mSearch);
  return rv;
}


/* Generated by Pygmalion */


NS_IMPL_ISUPPORTS1(mozListenerP0015, nsISOAPResponseListener)

mozListenerP0015::mozListenerP0015(mozC02gestsea* aComponent, const nsAString & aKey)
{
  mComponent = aComponent;
  mKey = aKey;
}
mozListenerP0015::~mozListenerP0015()
{
}

NS_IMETHODIMP mozListenerP0015::HandleResponse(nsISOAPResponse *aResponse, nsISOAPCall *aCall, PRUint32 aStatus, PRBool aLast, PRBool *aReturn)
{
  nsresult rv;
  nsCOMPtr<nsISOAPFault> pFault;
  rv = aResponse->GetFault(getter_AddRefs(pFault));
  NS_ENSURE_SUCCESS(rv, rv);
  if (pFault) {
    nsAutoString pFaute, pDetail, pTitle;
    nsCOMPtr<nsIDOMElement> pTheDetail;
    nsCOMPtr<nsIDOMNode> pNode;
    rv = pFault->GetDetail(getter_AddRefs(pTheDetail));
    NS_ENSURE_SUCCESS(rv,rv);
    rv = pTheDetail->GetFirstChild(getter_AddRefs(pNode));
    NS_ENSURE_SUCCESS(rv,rv);
    if (pNode) {
      nsCOMPtr<nsIDOMNamedNodeMap> pAttributes;
      nsCOMPtr<nsIDOMNode> pAttribute, pFirstNode;
      nsAutoString pNodeValue;
      rv = pNode->GetFirstChild(getter_AddRefs(pFirstNode));
      NS_ENSURE_SUCCESS(rv,rv);
      if (pFirstNode) {
        pFirstNode->GetNodeValue(pNodeValue);
        NS_ENSURE_SUCCESS(rv,rv);
        pDetail  = pNodeValue;
      }
      pNode->GetAttributes(getter_AddRefs(pAttributes));
      NS_ENSURE_SUCCESS(rv,rv);
      pAttributes->GetNamedItem(NS_LITERAL_STRING("code"), getter_AddRefs(pAttribute));
      NS_ENSURE_SUCCESS(rv,rv);
      if (pAttribute) {
        pAttribute->GetNodeValue(pNodeValue);
        NS_ENSURE_SUCCESS(rv,rv);
        pDetail += NS_LITERAL_STRING("\n(Erreur ");
        pDetail += pNodeValue;
        pDetail += NS_LITERAL_STRING(")");
      }
    } else pDetail = NS_LITERAL_STRING("Erreur sans message.");
    pFaute = pDetail;
    rv = pFault->GetFaultString(pTitle);
    NS_ENSURE_SUCCESS(rv,rv);
    nsCOMPtr<nsIPrompt> pPrompt= do_GetService(NS_DEFAULTPROMPT_CONTRACTID, &rv);
    NS_ENSURE_SUCCESS(rv,rv);
    pPrompt->Alert(ToNewUnicode(pTitle), ToNewUnicode(pFaute));
    return NS_ERROR_FAILURE;
  }

  nsISOAPParameter ** pParameters;
  PRUint32 pTotal;
  rv = aResponse->GetParameters(PR_FALSE, &pTotal, &pParameters);
  NS_ENSURE_SUCCESS(rv,rv);
  if (pTotal!=1) {
    nsCOMPtr<nsIPrompt> pPrompt= do_GetService(NS_DEFAULTPROMPT_CONTRACTID, &rv);
    NS_ENSURE_SUCCESS(rv,rv);
    pPrompt->Alert(ToNewUnicode(NS_LITERAL_CSTRING("Erreur système")), ToNewUnicode(NS_LITERAL_CSTRING("Le nombre total de paramètres reçus est incorrect.")));
    return NS_ERROR_FAILURE;
  }

  nsAutoString pText;
  nsCOMArray<nsIVariant> pArray;
  nsCOMPtr<nsIWritableVariant> pVariant;
  PRUint32 pLsize=0, pCsize=0;
  PRUint32 pLineIndex, pColIndex;
  PRUint16 pNodeType;
  nsCOMPtr<nsIDOMElement> pResult;
  nsCOMPtr<nsIDOMNodeList> pLines, pValues;
  nsCOMPtr<nsIDOMNode> pLine, pValue, pContent;
  rv = pParameters[0]->GetElement(getter_AddRefs(pResult));
  NS_ENSURE_SUCCESS(rv,rv);
  rv = pResult->GetChildNodes(getter_AddRefs(pLines));
  NS_ENSURE_SUCCESS(rv,rv);
  pLines->GetLength(&pLsize);
  for (pLineIndex=0;pLineIndex<pLsize;pLineIndex++) {
    do {
      rv = pLines->Item(pLineIndex, getter_AddRefs(pLine));
      NS_ENSURE_SUCCESS(rv,rv);
      pLine->GetNodeType(&pNodeType);
      if (pNodeType!=nsIDOMNode::ELEMENT_NODE) pLineIndex++;
    } while (pLineIndex<pLsize && pNodeType!=nsIDOMNode::ELEMENT_NODE);
    if (pLineIndex>=pLsize) break;
    rv = pLine->GetChildNodes(getter_AddRefs(pValues));
    NS_ENSURE_SUCCESS(rv,rv);
    pValues->GetLength(&pCsize);
    for (pColIndex=0;pColIndex<pCsize;pColIndex++) {
      do {
        rv = pValues->Item(pColIndex, getter_AddRefs(pValue));
        NS_ENSURE_SUCCESS(rv,rv);
        pValue->GetNodeType(&pNodeType);
        if (pNodeType!=nsIDOMNode::ELEMENT_NODE) pColIndex++;
      } while (pColIndex<pCsize && pNodeType!=nsIDOMNode::ELEMENT_NODE);
      if (pColIndex>=pCsize) break;
      rv = pValue->GetFirstChild(getter_AddRefs(pContent));
      NS_ENSURE_SUCCESS(rv,rv);
      pVariant = do_CreateInstance(NS_VARIANT_CONTRACTID, &rv);
      NS_ENSURE_SUCCESS(rv,rv);
      if (pContent) {
        rv = pContent->GetNodeValue(pText);
        NS_ENSURE_SUCCESS(rv,rv);
        pVariant->SetAsAString(pText);
        printf("%s|",ToNewCString(pText));
      } else {
        pVariant->SetAsAString(NS_LITERAL_STRING(""));
      }
      rv = pArray.AppendObject(pVariant);
    }
  }
  rv = mComponent->TreatP0015(pArray, pLsize, pCsize, mKey);
  return rv;
}


/* Generated by Pygmalion */


NS_IMPL_ISUPPORTS1(mozListenerP0016, nsISOAPResponseListener)

mozListenerP0016::mozListenerP0016(mozC02gestsea* aComponent, const nsACString & aSearch)
{
  mComponent = aComponent;
  mSearch = aSearch;
}
mozListenerP0016::~mozListenerP0016()
{
}

NS_IMETHODIMP mozListenerP0016::HandleResponse(nsISOAPResponse *aResponse, nsISOAPCall *aCall, PRUint32 aStatus, PRBool aLast, PRBool *aReturn)
{
  nsresult rv;
  nsCOMPtr<nsISOAPFault> pFault;
  rv = aResponse->GetFault(getter_AddRefs(pFault));
  NS_ENSURE_SUCCESS(rv, rv);
  if (pFault) {
    nsAutoString pFaute, pDetail, pTitle;
    nsCOMPtr<nsIDOMElement> pTheDetail;
    nsCOMPtr<nsIDOMNode> pNode;
    rv = pFault->GetDetail(getter_AddRefs(pTheDetail));
    NS_ENSURE_SUCCESS(rv,rv);
    rv = pTheDetail->GetFirstChild(getter_AddRefs(pNode));
    NS_ENSURE_SUCCESS(rv,rv);
    if (pNode) {
      nsCOMPtr<nsIDOMNamedNodeMap> pAttributes;
      nsCOMPtr<nsIDOMNode> pAttribute, pFirstNode;
      nsAutoString pNodeValue;
      rv = pNode->GetFirstChild(getter_AddRefs(pFirstNode));
      NS_ENSURE_SUCCESS(rv,rv);
      if (pFirstNode) {
        pFirstNode->GetNodeValue(pNodeValue);
        NS_ENSURE_SUCCESS(rv,rv);
        pDetail  = pNodeValue;
      }
      pNode->GetAttributes(getter_AddRefs(pAttributes));
      NS_ENSURE_SUCCESS(rv,rv);
      pAttributes->GetNamedItem(NS_LITERAL_STRING("code"), getter_AddRefs(pAttribute));
      NS_ENSURE_SUCCESS(rv,rv);
      if (pAttribute) {
        pAttribute->GetNodeValue(pNodeValue);
        NS_ENSURE_SUCCESS(rv,rv);
        pDetail += NS_LITERAL_STRING("\n(Erreur ");
        pDetail += pNodeValue;
        pDetail += NS_LITERAL_STRING(")");
      }
    } else pDetail = NS_LITERAL_STRING("Erreur sans message.");
    pFaute = pDetail;
    rv = pFault->GetFaultString(pTitle);
    NS_ENSURE_SUCCESS(rv,rv);
    nsCOMPtr<nsIPrompt> pPrompt= do_GetService(NS_DEFAULTPROMPT_CONTRACTID, &rv);
    NS_ENSURE_SUCCESS(rv,rv);
    pPrompt->Alert(ToNewUnicode(pTitle), ToNewUnicode(pFaute));
    return NS_ERROR_FAILURE;
  }

  nsISOAPParameter ** pParameters;
  PRUint32 pTotal;
  rv = aResponse->GetParameters(PR_FALSE, &pTotal, &pParameters);
  NS_ENSURE_SUCCESS(rv,rv);
  if (pTotal!=1) {
    nsCOMPtr<nsIPrompt> pPrompt= do_GetService(NS_DEFAULTPROMPT_CONTRACTID, &rv);
    NS_ENSURE_SUCCESS(rv,rv);
    pPrompt->Alert(ToNewUnicode(NS_LITERAL_CSTRING("Erreur système")), ToNewUnicode(NS_LITERAL_CSTRING("Le nombre total de paramètres reçus est incorrect.")));
    return NS_ERROR_FAILURE;
  }

  nsAutoString pText;
  nsCOMArray<nsIVariant> pArray;
  nsCOMPtr<nsIWritableVariant> pVariant;
  PRUint32 pLsize=0, pCsize=0;
  PRUint32 pLineIndex, pColIndex;
  PRUint16 pNodeType;
  nsCOMPtr<nsIDOMElement> pResult;
  nsCOMPtr<nsIDOMNodeList> pLines, pValues;
  nsCOMPtr<nsIDOMNode> pLine, pValue, pContent;
  rv = pParameters[0]->GetElement(getter_AddRefs(pResult));
  NS_ENSURE_SUCCESS(rv,rv);
  rv = pResult->GetChildNodes(getter_AddRefs(pLines));
  NS_ENSURE_SUCCESS(rv,rv);
  pLines->GetLength(&pLsize);
  for (pLineIndex=0;pLineIndex<pLsize;pLineIndex++) {
    do {
      rv = pLines->Item(pLineIndex, getter_AddRefs(pLine));
      NS_ENSURE_SUCCESS(rv,rv);
      pLine->GetNodeType(&pNodeType);
      if (pNodeType!=nsIDOMNode::ELEMENT_NODE) pLineIndex++;
    } while (pLineIndex<pLsize && pNodeType!=nsIDOMNode::ELEMENT_NODE);
    if (pLineIndex>=pLsize) break;
    rv = pLine->GetChildNodes(getter_AddRefs(pValues));
    NS_ENSURE_SUCCESS(rv,rv);
    pValues->GetLength(&pCsize);
    for (pColIndex=0;pColIndex<pCsize;pColIndex++) {
      do {
        rv = pValues->Item(pColIndex, getter_AddRefs(pValue));
        NS_ENSURE_SUCCESS(rv,rv);
        pValue->GetNodeType(&pNodeType);
        if (pNodeType!=nsIDOMNode::ELEMENT_NODE) pColIndex++;
      } while (pColIndex<pCsize && pNodeType!=nsIDOMNode::ELEMENT_NODE);
      if (pColIndex>=pCsize) break;
      rv = pValue->GetFirstChild(getter_AddRefs(pContent));
      NS_ENSURE_SUCCESS(rv,rv);
      pVariant = do_CreateInstance(NS_VARIANT_CONTRACTID, &rv);
      NS_ENSURE_SUCCESS(rv,rv);
      if (pContent) {
        rv = pContent->GetNodeValue(pText);
        NS_ENSURE_SUCCESS(rv,rv);
        pVariant->SetAsAString(pText);
        printf("%s|",ToNewCString(pText));
      } else {
        pVariant->SetAsAString(NS_LITERAL_STRING(""));
      }
      rv = pArray.AppendObject(pVariant);
    }
  }
  rv = mComponent->TreatP0016(pArray, pLsize, pCsize, mSearch);
  return rv;
}


/* Generated by Pygmalion */


NS_IMPL_ISUPPORTS1(mozListenerP0017, nsISOAPResponseListener)

mozListenerP0017::mozListenerP0017(mozC02gestsea* aComponent, const nsACString & aSearch)
{
  mComponent = aComponent;
  mSearch = aSearch;
}
mozListenerP0017::~mozListenerP0017()
{
}

NS_IMETHODIMP mozListenerP0017::HandleResponse(nsISOAPResponse *aResponse, nsISOAPCall *aCall, PRUint32 aStatus, PRBool aLast, PRBool *aReturn)
{
  nsresult rv;
  nsCOMPtr<nsISOAPFault> pFault;
  rv = aResponse->GetFault(getter_AddRefs(pFault));
  NS_ENSURE_SUCCESS(rv, rv);
  if (pFault) {
    nsAutoString pFaute, pDetail, pTitle;
    nsCOMPtr<nsIDOMElement> pTheDetail;
    nsCOMPtr<nsIDOMNode> pNode;
    rv = pFault->GetDetail(getter_AddRefs(pTheDetail));
    NS_ENSURE_SUCCESS(rv,rv);
    rv = pTheDetail->GetFirstChild(getter_AddRefs(pNode));
    NS_ENSURE_SUCCESS(rv,rv);
    if (pNode) {
      nsCOMPtr<nsIDOMNamedNodeMap> pAttributes;
      nsCOMPtr<nsIDOMNode> pAttribute, pFirstNode;
      nsAutoString pNodeValue;
      rv = pNode->GetFirstChild(getter_AddRefs(pFirstNode));
      NS_ENSURE_SUCCESS(rv,rv);
      if (pFirstNode) {
        pFirstNode->GetNodeValue(pNodeValue);
        NS_ENSURE_SUCCESS(rv,rv);
        pDetail  = pNodeValue;
      }
      pNode->GetAttributes(getter_AddRefs(pAttributes));
      NS_ENSURE_SUCCESS(rv,rv);
      pAttributes->GetNamedItem(NS_LITERAL_STRING("code"), getter_AddRefs(pAttribute));
      NS_ENSURE_SUCCESS(rv,rv);
      if (pAttribute) {
        pAttribute->GetNodeValue(pNodeValue);
        NS_ENSURE_SUCCESS(rv,rv);
        pDetail += NS_LITERAL_STRING("\n(Erreur ");
        pDetail += pNodeValue;
        pDetail += NS_LITERAL_STRING(")");
      }
    } else pDetail = NS_LITERAL_STRING("Erreur sans message.");
    pFaute = pDetail;
    rv = pFault->GetFaultString(pTitle);
    NS_ENSURE_SUCCESS(rv,rv);
    nsCOMPtr<nsIPrompt> pPrompt= do_GetService(NS_DEFAULTPROMPT_CONTRACTID, &rv);
    NS_ENSURE_SUCCESS(rv,rv);
    pPrompt->Alert(ToNewUnicode(pTitle), ToNewUnicode(pFaute));
    return NS_ERROR_FAILURE;
  }

  nsISOAPParameter ** pParameters;
  PRUint32 pTotal;
  rv = aResponse->GetParameters(PR_FALSE, &pTotal, &pParameters);
  NS_ENSURE_SUCCESS(rv,rv);
  if (pTotal!=1) {
    nsCOMPtr<nsIPrompt> pPrompt= do_GetService(NS_DEFAULTPROMPT_CONTRACTID, &rv);
    NS_ENSURE_SUCCESS(rv,rv);
    pPrompt->Alert(ToNewUnicode(NS_LITERAL_CSTRING("Erreur système")), ToNewUnicode(NS_LITERAL_CSTRING("Le nombre total de paramètres reçus est incorrect.")));
    return NS_ERROR_FAILURE;
  }

  nsAutoString pText;
  nsCOMArray<nsIVariant> pArray;
  nsCOMPtr<nsIWritableVariant> pVariant;
  PRUint32 pLsize=0, pCsize=0;
  PRUint32 pLineIndex, pColIndex;
  PRUint16 pNodeType;
  nsCOMPtr<nsIDOMElement> pResult;
  nsCOMPtr<nsIDOMNodeList> pLines, pValues;
  nsCOMPtr<nsIDOMNode> pLine, pValue, pContent;
  rv = pParameters[0]->GetElement(getter_AddRefs(pResult));
  NS_ENSURE_SUCCESS(rv,rv);
  rv = pResult->GetChildNodes(getter_AddRefs(pLines));
  NS_ENSURE_SUCCESS(rv,rv);
  pLines->GetLength(&pLsize);
  for (pLineIndex=0;pLineIndex<pLsize;pLineIndex++) {
    do {
      rv = pLines->Item(pLineIndex, getter_AddRefs(pLine));
      NS_ENSURE_SUCCESS(rv,rv);
      pLine->GetNodeType(&pNodeType);
      if (pNodeType!=nsIDOMNode::ELEMENT_NODE) pLineIndex++;
    } while (pLineIndex<pLsize && pNodeType!=nsIDOMNode::ELEMENT_NODE);
    if (pLineIndex>=pLsize) break;
    rv = pLine->GetChildNodes(getter_AddRefs(pValues));
    NS_ENSURE_SUCCESS(rv,rv);
    pValues->GetLength(&pCsize);
    for (pColIndex=0;pColIndex<pCsize;pColIndex++) {
      do {
        rv = pValues->Item(pColIndex, getter_AddRefs(pValue));
        NS_ENSURE_SUCCESS(rv,rv);
        pValue->GetNodeType(&pNodeType);
        if (pNodeType!=nsIDOMNode::ELEMENT_NODE) pColIndex++;
      } while (pColIndex<pCsize && pNodeType!=nsIDOMNode::ELEMENT_NODE);
      if (pColIndex>=pCsize) break;
      rv = pValue->GetFirstChild(getter_AddRefs(pContent));
      NS_ENSURE_SUCCESS(rv,rv);
      pVariant = do_CreateInstance(NS_VARIANT_CONTRACTID, &rv);
      NS_ENSURE_SUCCESS(rv,rv);
      if (pContent) {
        rv = pContent->GetNodeValue(pText);
        NS_ENSURE_SUCCESS(rv,rv);
        pVariant->SetAsAString(pText);
        printf("%s|",ToNewCString(pText));
      } else {
        pVariant->SetAsAString(NS_LITERAL_STRING(""));
      }
      rv = pArray.AppendObject(pVariant);
    }
  }
  rv = mComponent->TreatP0017(pArray, pLsize, pCsize, mSearch);
  return rv;
}


/* Generated by Pygmalion */


NS_IMPL_ISUPPORTS1(mozListenerP0018, nsISOAPResponseListener)

mozListenerP0018::mozListenerP0018(mozC02gestsea* aComponent, const nsAString & aKey)
{
  mComponent = aComponent;
  mKey = aKey;
}
mozListenerP0018::~mozListenerP0018()
{
}

NS_IMETHODIMP mozListenerP0018::HandleResponse(nsISOAPResponse *aResponse, nsISOAPCall *aCall, PRUint32 aStatus, PRBool aLast, PRBool *aReturn)
{
  nsresult rv;
  nsCOMPtr<nsISOAPFault> pFault;
  rv = aResponse->GetFault(getter_AddRefs(pFault));
  NS_ENSURE_SUCCESS(rv, rv);
  if (pFault) {
    nsAutoString pFaute, pDetail, pTitle;
    nsCOMPtr<nsIDOMElement> pTheDetail;
    nsCOMPtr<nsIDOMNode> pNode;
    rv = pFault->GetDetail(getter_AddRefs(pTheDetail));
    NS_ENSURE_SUCCESS(rv,rv);
    rv = pTheDetail->GetFirstChild(getter_AddRefs(pNode));
    NS_ENSURE_SUCCESS(rv,rv);
    if (pNode) {
      nsCOMPtr<nsIDOMNamedNodeMap> pAttributes;
      nsCOMPtr<nsIDOMNode> pAttribute, pFirstNode;
      nsAutoString pNodeValue;
      rv = pNode->GetFirstChild(getter_AddRefs(pFirstNode));
      NS_ENSURE_SUCCESS(rv,rv);
      if (pFirstNode) {
        pFirstNode->GetNodeValue(pNodeValue);
        NS_ENSURE_SUCCESS(rv,rv);
        pDetail  = pNodeValue;
      }
      pNode->GetAttributes(getter_AddRefs(pAttributes));
      NS_ENSURE_SUCCESS(rv,rv);
      pAttributes->GetNamedItem(NS_LITERAL_STRING("code"), getter_AddRefs(pAttribute));
      NS_ENSURE_SUCCESS(rv,rv);
      if (pAttribute) {
        pAttribute->GetNodeValue(pNodeValue);
        NS_ENSURE_SUCCESS(rv,rv);
        pDetail += NS_LITERAL_STRING("\n(Erreur ");
        pDetail += pNodeValue;
        pDetail += NS_LITERAL_STRING(")");
      }
    } else pDetail = NS_LITERAL_STRING("Erreur sans message.");
    pFaute = pDetail;
    rv = pFault->GetFaultString(pTitle);
    NS_ENSURE_SUCCESS(rv,rv);
    nsCOMPtr<nsIPrompt> pPrompt= do_GetService(NS_DEFAULTPROMPT_CONTRACTID, &rv);
    NS_ENSURE_SUCCESS(rv,rv);
    pPrompt->Alert(ToNewUnicode(pTitle), ToNewUnicode(pFaute));
    return NS_ERROR_FAILURE;
  }

  nsISOAPParameter ** pParameters;
  PRUint32 pTotal;
  rv = aResponse->GetParameters(PR_FALSE, &pTotal, &pParameters);
  NS_ENSURE_SUCCESS(rv,rv);
  if (pTotal!=1) {
    nsCOMPtr<nsIPrompt> pPrompt= do_GetService(NS_DEFAULTPROMPT_CONTRACTID, &rv);
    NS_ENSURE_SUCCESS(rv,rv);
    pPrompt->Alert(ToNewUnicode(NS_LITERAL_CSTRING("Erreur système")), ToNewUnicode(NS_LITERAL_CSTRING("Le nombre total de paramètres reçus est incorrect.")));
    return NS_ERROR_FAILURE;
  }

  nsAutoString pText;
  nsCOMArray<nsIVariant> pArray;
  nsCOMPtr<nsIWritableVariant> pVariant;
  PRUint32 pLsize=0, pCsize=0;
  PRUint32 pLineIndex, pColIndex;
  PRUint16 pNodeType;
  nsCOMPtr<nsIDOMElement> pResult;
  nsCOMPtr<nsIDOMNodeList> pLines, pValues;
  nsCOMPtr<nsIDOMNode> pLine, pValue, pContent;
  rv = pParameters[0]->GetElement(getter_AddRefs(pResult));
  NS_ENSURE_SUCCESS(rv,rv);
  rv = pResult->GetChildNodes(getter_AddRefs(pLines));
  NS_ENSURE_SUCCESS(rv,rv);
  pLines->GetLength(&pLsize);
  for (pLineIndex=0;pLineIndex<pLsize;pLineIndex++) {
    do {
      rv = pLines->Item(pLineIndex, getter_AddRefs(pLine));
      NS_ENSURE_SUCCESS(rv,rv);
      pLine->GetNodeType(&pNodeType);
      if (pNodeType!=nsIDOMNode::ELEMENT_NODE) pLineIndex++;
    } while (pLineIndex<pLsize && pNodeType!=nsIDOMNode::ELEMENT_NODE);
    if (pLineIndex>=pLsize) break;
    rv = pLine->GetChildNodes(getter_AddRefs(pValues));
    NS_ENSURE_SUCCESS(rv,rv);
    pValues->GetLength(&pCsize);
    for (pColIndex=0;pColIndex<pCsize;pColIndex++) {
      do {
        rv = pValues->Item(pColIndex, getter_AddRefs(pValue));
        NS_ENSURE_SUCCESS(rv,rv);
        pValue->GetNodeType(&pNodeType);
        if (pNodeType!=nsIDOMNode::ELEMENT_NODE) pColIndex++;
      } while (pColIndex<pCsize && pNodeType!=nsIDOMNode::ELEMENT_NODE);
      if (pColIndex>=pCsize) break;
      rv = pValue->GetFirstChild(getter_AddRefs(pContent));
      NS_ENSURE_SUCCESS(rv,rv);
      pVariant = do_CreateInstance(NS_VARIANT_CONTRACTID, &rv);
      NS_ENSURE_SUCCESS(rv,rv);
      if (pContent) {
        rv = pContent->GetNodeValue(pText);
        NS_ENSURE_SUCCESS(rv,rv);
        pVariant->SetAsAString(pText);
        printf("%s|",ToNewCString(pText));
      } else {
        pVariant->SetAsAString(NS_LITERAL_STRING(""));
      }
      rv = pArray.AppendObject(pVariant);
    }
  }
  rv = mComponent->TreatP0018(pArray, pLsize, pCsize, mKey);
  return rv;
}


/* Generated by Pygmalion */


NS_IMPL_ISUPPORTS1(mozListenerP0019, nsISOAPResponseListener)

mozListenerP0019::mozListenerP0019(mozC02gestsea* aComponent, const nsACString & aSearch)
{
  mComponent = aComponent;
  mSearch = aSearch;
}
mozListenerP0019::~mozListenerP0019()
{
}

NS_IMETHODIMP mozListenerP0019::HandleResponse(nsISOAPResponse *aResponse, nsISOAPCall *aCall, PRUint32 aStatus, PRBool aLast, PRBool *aReturn)
{
  nsresult rv;
  nsCOMPtr<nsISOAPFault> pFault;
  rv = aResponse->GetFault(getter_AddRefs(pFault));
  NS_ENSURE_SUCCESS(rv, rv);
  if (pFault) {
    nsAutoString pFaute, pDetail, pTitle;
    nsCOMPtr<nsIDOMElement> pTheDetail;
    nsCOMPtr<nsIDOMNode> pNode;
    rv = pFault->GetDetail(getter_AddRefs(pTheDetail));
    NS_ENSURE_SUCCESS(rv,rv);
    rv = pTheDetail->GetFirstChild(getter_AddRefs(pNode));
    NS_ENSURE_SUCCESS(rv,rv);
    if (pNode) {
      nsCOMPtr<nsIDOMNamedNodeMap> pAttributes;
      nsCOMPtr<nsIDOMNode> pAttribute, pFirstNode;
      nsAutoString pNodeValue;
      rv = pNode->GetFirstChild(getter_AddRefs(pFirstNode));
      NS_ENSURE_SUCCESS(rv,rv);
      if (pFirstNode) {
        pFirstNode->GetNodeValue(pNodeValue);
        NS_ENSURE_SUCCESS(rv,rv);
        pDetail  = pNodeValue;
      }
      pNode->GetAttributes(getter_AddRefs(pAttributes));
      NS_ENSURE_SUCCESS(rv,rv);
      pAttributes->GetNamedItem(NS_LITERAL_STRING("code"), getter_AddRefs(pAttribute));
      NS_ENSURE_SUCCESS(rv,rv);
      if (pAttribute) {
        pAttribute->GetNodeValue(pNodeValue);
        NS_ENSURE_SUCCESS(rv,rv);
        pDetail += NS_LITERAL_STRING("\n(Erreur ");
        pDetail += pNodeValue;
        pDetail += NS_LITERAL_STRING(")");
      }
    } else pDetail = NS_LITERAL_STRING("Erreur sans message.");
    pFaute = pDetail;
    rv = pFault->GetFaultString(pTitle);
    NS_ENSURE_SUCCESS(rv,rv);
    nsCOMPtr<nsIPrompt> pPrompt= do_GetService(NS_DEFAULTPROMPT_CONTRACTID, &rv);
    NS_ENSURE_SUCCESS(rv,rv);
    pPrompt->Alert(ToNewUnicode(pTitle), ToNewUnicode(pFaute));
    return NS_ERROR_FAILURE;
  }

  nsISOAPParameter ** pParameters;
  PRUint32 pTotal;
  rv = aResponse->GetParameters(PR_FALSE, &pTotal, &pParameters);
  NS_ENSURE_SUCCESS(rv,rv);
  if (pTotal!=1) {
    nsCOMPtr<nsIPrompt> pPrompt= do_GetService(NS_DEFAULTPROMPT_CONTRACTID, &rv);
    NS_ENSURE_SUCCESS(rv,rv);
    pPrompt->Alert(ToNewUnicode(NS_LITERAL_CSTRING("Erreur système")), ToNewUnicode(NS_LITERAL_CSTRING("Le nombre total de paramètres reçus est incorrect.")));
    return NS_ERROR_FAILURE;
  }

  nsAutoString pText;
  nsCOMArray<nsIVariant> pArray;
  nsCOMPtr<nsIWritableVariant> pVariant;
  PRUint32 pLsize=0, pCsize=0;
  PRUint32 pLineIndex, pColIndex;
  PRUint16 pNodeType;
  nsCOMPtr<nsIDOMElement> pResult;
  nsCOMPtr<nsIDOMNodeList> pLines, pValues;
  nsCOMPtr<nsIDOMNode> pLine, pValue, pContent;
  rv = pParameters[0]->GetElement(getter_AddRefs(pResult));
  NS_ENSURE_SUCCESS(rv,rv);
  rv = pResult->GetChildNodes(getter_AddRefs(pLines));
  NS_ENSURE_SUCCESS(rv,rv);
  pLines->GetLength(&pLsize);
  for (pLineIndex=0;pLineIndex<pLsize;pLineIndex++) {
    do {
      rv = pLines->Item(pLineIndex, getter_AddRefs(pLine));
      NS_ENSURE_SUCCESS(rv,rv);
      pLine->GetNodeType(&pNodeType);
      if (pNodeType!=nsIDOMNode::ELEMENT_NODE) pLineIndex++;
    } while (pLineIndex<pLsize && pNodeType!=nsIDOMNode::ELEMENT_NODE);
    if (pLineIndex>=pLsize) break;
    rv = pLine->GetChildNodes(getter_AddRefs(pValues));
    NS_ENSURE_SUCCESS(rv,rv);
    pValues->GetLength(&pCsize);
    for (pColIndex=0;pColIndex<pCsize;pColIndex++) {
      do {
        rv = pValues->Item(pColIndex, getter_AddRefs(pValue));
        NS_ENSURE_SUCCESS(rv,rv);
        pValue->GetNodeType(&pNodeType);
        if (pNodeType!=nsIDOMNode::ELEMENT_NODE) pColIndex++;
      } while (pColIndex<pCsize && pNodeType!=nsIDOMNode::ELEMENT_NODE);
      if (pColIndex>=pCsize) break;
      rv = pValue->GetFirstChild(getter_AddRefs(pContent));
      NS_ENSURE_SUCCESS(rv,rv);
      pVariant = do_CreateInstance(NS_VARIANT_CONTRACTID, &rv);
      NS_ENSURE_SUCCESS(rv,rv);
      if (pContent) {
        rv = pContent->GetNodeValue(pText);
        NS_ENSURE_SUCCESS(rv,rv);
        pVariant->SetAsAString(pText);
        printf("%s|",ToNewCString(pText));
      } else {
        pVariant->SetAsAString(NS_LITERAL_STRING(""));
      }
      rv = pArray.AppendObject(pVariant);
    }
  }
  rv = mComponent->TreatP0019(pArray, pLsize, pCsize, mSearch);
  return rv;
}


/* Generated by Pygmalion */


NS_IMPL_ISUPPORTS1(mozListenerP001A, nsISOAPResponseListener)

mozListenerP001A::mozListenerP001A(mozC02gestsea* aComponent, const nsACString & aSearch)
{
  mComponent = aComponent;
  mSearch = aSearch;
}
mozListenerP001A::~mozListenerP001A()
{
}

NS_IMETHODIMP mozListenerP001A::HandleResponse(nsISOAPResponse *aResponse, nsISOAPCall *aCall, PRUint32 aStatus, PRBool aLast, PRBool *aReturn)
{
  nsresult rv;
  nsCOMPtr<nsISOAPFault> pFault;
  rv = aResponse->GetFault(getter_AddRefs(pFault));
  NS_ENSURE_SUCCESS(rv, rv);
  if (pFault) {
    nsAutoString pFaute, pDetail, pTitle;
    nsCOMPtr<nsIDOMElement> pTheDetail;
    nsCOMPtr<nsIDOMNode> pNode;
    rv = pFault->GetDetail(getter_AddRefs(pTheDetail));
    NS_ENSURE_SUCCESS(rv,rv);
    rv = pTheDetail->GetFirstChild(getter_AddRefs(pNode));
    NS_ENSURE_SUCCESS(rv,rv);
    if (pNode) {
      nsCOMPtr<nsIDOMNamedNodeMap> pAttributes;
      nsCOMPtr<nsIDOMNode> pAttribute, pFirstNode;
      nsAutoString pNodeValue;
      rv = pNode->GetFirstChild(getter_AddRefs(pFirstNode));
      NS_ENSURE_SUCCESS(rv,rv);
      if (pFirstNode) {
        pFirstNode->GetNodeValue(pNodeValue);
        NS_ENSURE_SUCCESS(rv,rv);
        pDetail  = pNodeValue;
      }
      pNode->GetAttributes(getter_AddRefs(pAttributes));
      NS_ENSURE_SUCCESS(rv,rv);
      pAttributes->GetNamedItem(NS_LITERAL_STRING("code"), getter_AddRefs(pAttribute));
      NS_ENSURE_SUCCESS(rv,rv);
      if (pAttribute) {
        pAttribute->GetNodeValue(pNodeValue);
        NS_ENSURE_SUCCESS(rv,rv);
        pDetail += NS_LITERAL_STRING("\n(Erreur ");
        pDetail += pNodeValue;
        pDetail += NS_LITERAL_STRING(")");
      }
    } else pDetail = NS_LITERAL_STRING("Erreur sans message.");
    pFaute = pDetail;
    rv = pFault->GetFaultString(pTitle);
    NS_ENSURE_SUCCESS(rv,rv);
    nsCOMPtr<nsIPrompt> pPrompt= do_GetService(NS_DEFAULTPROMPT_CONTRACTID, &rv);
    NS_ENSURE_SUCCESS(rv,rv);
    pPrompt->Alert(ToNewUnicode(pTitle), ToNewUnicode(pFaute));
    return NS_ERROR_FAILURE;
  }

  nsISOAPParameter ** pParameters;
  PRUint32 pTotal;
  rv = aResponse->GetParameters(PR_FALSE, &pTotal, &pParameters);
  NS_ENSURE_SUCCESS(rv,rv);
  if (pTotal!=1) {
    nsCOMPtr<nsIPrompt> pPrompt= do_GetService(NS_DEFAULTPROMPT_CONTRACTID, &rv);
    NS_ENSURE_SUCCESS(rv,rv);
    pPrompt->Alert(ToNewUnicode(NS_LITERAL_CSTRING("Erreur système")), ToNewUnicode(NS_LITERAL_CSTRING("Le nombre total de paramètres reçus est incorrect.")));
    return NS_ERROR_FAILURE;
  }

  nsAutoString pText;
  nsCOMArray<nsIVariant> pArray;
  nsCOMPtr<nsIWritableVariant> pVariant;
  PRUint32 pLsize=0, pCsize=0;
  PRUint32 pLineIndex, pColIndex;
  PRUint16 pNodeType;
  nsCOMPtr<nsIDOMElement> pResult;
  nsCOMPtr<nsIDOMNodeList> pLines, pValues;
  nsCOMPtr<nsIDOMNode> pLine, pValue, pContent;
  rv = pParameters[0]->GetElement(getter_AddRefs(pResult));
  NS_ENSURE_SUCCESS(rv,rv);
  rv = pResult->GetChildNodes(getter_AddRefs(pLines));
  NS_ENSURE_SUCCESS(rv,rv);
  pLines->GetLength(&pLsize);
  for (pLineIndex=0;pLineIndex<pLsize;pLineIndex++) {
    do {
      rv = pLines->Item(pLineIndex, getter_AddRefs(pLine));
      NS_ENSURE_SUCCESS(rv,rv);
      pLine->GetNodeType(&pNodeType);
      if (pNodeType!=nsIDOMNode::ELEMENT_NODE) pLineIndex++;
    } while (pLineIndex<pLsize && pNodeType!=nsIDOMNode::ELEMENT_NODE);
    if (pLineIndex>=pLsize) break;
    rv = pLine->GetChildNodes(getter_AddRefs(pValues));
    NS_ENSURE_SUCCESS(rv,rv);
    pValues->GetLength(&pCsize);
    for (pColIndex=0;pColIndex<pCsize;pColIndex++) {
      do {
        rv = pValues->Item(pColIndex, getter_AddRefs(pValue));
        NS_ENSURE_SUCCESS(rv,rv);
        pValue->GetNodeType(&pNodeType);
        if (pNodeType!=nsIDOMNode::ELEMENT_NODE) pColIndex++;
      } while (pColIndex<pCsize && pNodeType!=nsIDOMNode::ELEMENT_NODE);
      if (pColIndex>=pCsize) break;
      rv = pValue->GetFirstChild(getter_AddRefs(pContent));
      NS_ENSURE_SUCCESS(rv,rv);
      pVariant = do_CreateInstance(NS_VARIANT_CONTRACTID, &rv);
      NS_ENSURE_SUCCESS(rv,rv);
      if (pContent) {
        rv = pContent->GetNodeValue(pText);
        NS_ENSURE_SUCCESS(rv,rv);
        pVariant->SetAsAString(pText);
        printf("%s|",ToNewCString(pText));
      } else {
        pVariant->SetAsAString(NS_LITERAL_STRING(""));
      }
      rv = pArray.AppendObject(pVariant);
    }
  }
  rv = mComponent->TreatP001A(pArray, pLsize, pCsize, mSearch);
  return rv;
}


/* Generated by Pygmalion */


NS_IMPL_ISUPPORTS1(mozListenerP001B, nsISOAPResponseListener)

mozListenerP001B::mozListenerP001B(mozC02gestsea* aComponent, const nsAString & aKey)
{
  mComponent = aComponent;
  mKey = aKey;
}
mozListenerP001B::~mozListenerP001B()
{
}

NS_IMETHODIMP mozListenerP001B::HandleResponse(nsISOAPResponse *aResponse, nsISOAPCall *aCall, PRUint32 aStatus, PRBool aLast, PRBool *aReturn)
{
  nsresult rv;
  nsCOMPtr<nsISOAPFault> pFault;
  rv = aResponse->GetFault(getter_AddRefs(pFault));
  NS_ENSURE_SUCCESS(rv, rv);
  if (pFault) {
    nsAutoString pFaute, pDetail, pTitle;
    nsCOMPtr<nsIDOMElement> pTheDetail;
    nsCOMPtr<nsIDOMNode> pNode;
    rv = pFault->GetDetail(getter_AddRefs(pTheDetail));
    NS_ENSURE_SUCCESS(rv,rv);
    rv = pTheDetail->GetFirstChild(getter_AddRefs(pNode));
    NS_ENSURE_SUCCESS(rv,rv);
    if (pNode) {
      nsCOMPtr<nsIDOMNamedNodeMap> pAttributes;
      nsCOMPtr<nsIDOMNode> pAttribute, pFirstNode;
      nsAutoString pNodeValue;
      rv = pNode->GetFirstChild(getter_AddRefs(pFirstNode));
      NS_ENSURE_SUCCESS(rv,rv);
      if (pFirstNode) {
        pFirstNode->GetNodeValue(pNodeValue);
        NS_ENSURE_SUCCESS(rv,rv);
        pDetail  = pNodeValue;
      }
      pNode->GetAttributes(getter_AddRefs(pAttributes));
      NS_ENSURE_SUCCESS(rv,rv);
      pAttributes->GetNamedItem(NS_LITERAL_STRING("code"), getter_AddRefs(pAttribute));
      NS_ENSURE_SUCCESS(rv,rv);
      if (pAttribute) {
        pAttribute->GetNodeValue(pNodeValue);
        NS_ENSURE_SUCCESS(rv,rv);
        pDetail += NS_LITERAL_STRING("\n(Erreur ");
        pDetail += pNodeValue;
        pDetail += NS_LITERAL_STRING(")");
      }
    } else pDetail = NS_LITERAL_STRING("Erreur sans message.");
    pFaute = pDetail;
    rv = pFault->GetFaultString(pTitle);
    NS_ENSURE_SUCCESS(rv,rv);
    nsCOMPtr<nsIPrompt> pPrompt= do_GetService(NS_DEFAULTPROMPT_CONTRACTID, &rv);
    NS_ENSURE_SUCCESS(rv,rv);
    pPrompt->Alert(ToNewUnicode(pTitle), ToNewUnicode(pFaute));
    return NS_ERROR_FAILURE;
  }

  nsISOAPParameter ** pParameters;
  PRUint32 pTotal;
  rv = aResponse->GetParameters(PR_FALSE, &pTotal, &pParameters);
  NS_ENSURE_SUCCESS(rv,rv);
  if (pTotal!=1) {
    nsCOMPtr<nsIPrompt> pPrompt= do_GetService(NS_DEFAULTPROMPT_CONTRACTID, &rv);
    NS_ENSURE_SUCCESS(rv,rv);
    pPrompt->Alert(ToNewUnicode(NS_LITERAL_CSTRING("Erreur système")), ToNewUnicode(NS_LITERAL_CSTRING("Le nombre total de paramètres reçus est incorrect.")));
    return NS_ERROR_FAILURE;
  }

  nsAutoString pText;
  nsCOMArray<nsIVariant> pArray;
  nsCOMPtr<nsIWritableVariant> pVariant;
  PRUint32 pLsize=0, pCsize=0;
  PRUint32 pLineIndex, pColIndex;
  PRUint16 pNodeType;
  nsCOMPtr<nsIDOMElement> pResult;
  nsCOMPtr<nsIDOMNodeList> pLines, pValues;
  nsCOMPtr<nsIDOMNode> pLine, pValue, pContent;
  rv = pParameters[0]->GetElement(getter_AddRefs(pResult));
  NS_ENSURE_SUCCESS(rv,rv);
  rv = pResult->GetChildNodes(getter_AddRefs(pLines));
  NS_ENSURE_SUCCESS(rv,rv);
  pLines->GetLength(&pLsize);
  for (pLineIndex=0;pLineIndex<pLsize;pLineIndex++) {
    do {
      rv = pLines->Item(pLineIndex, getter_AddRefs(pLine));
      NS_ENSURE_SUCCESS(rv,rv);
      pLine->GetNodeType(&pNodeType);
      if (pNodeType!=nsIDOMNode::ELEMENT_NODE) pLineIndex++;
    } while (pLineIndex<pLsize && pNodeType!=nsIDOMNode::ELEMENT_NODE);
    if (pLineIndex>=pLsize) break;
    rv = pLine->GetChildNodes(getter_AddRefs(pValues));
    NS_ENSURE_SUCCESS(rv,rv);
    pValues->GetLength(&pCsize);
    for (pColIndex=0;pColIndex<pCsize;pColIndex++) {
      do {
        rv = pValues->Item(pColIndex, getter_AddRefs(pValue));
        NS_ENSURE_SUCCESS(rv,rv);
        pValue->GetNodeType(&pNodeType);
        if (pNodeType!=nsIDOMNode::ELEMENT_NODE) pColIndex++;
      } while (pColIndex<pCsize && pNodeType!=nsIDOMNode::ELEMENT_NODE);
      if (pColIndex>=pCsize) break;
      rv = pValue->GetFirstChild(getter_AddRefs(pContent));
      NS_ENSURE_SUCCESS(rv,rv);
      pVariant = do_CreateInstance(NS_VARIANT_CONTRACTID, &rv);
      NS_ENSURE_SUCCESS(rv,rv);
      if (pContent) {
        rv = pContent->GetNodeValue(pText);
        NS_ENSURE_SUCCESS(rv,rv);
        pVariant->SetAsAString(pText);
        printf("%s|",ToNewCString(pText));
      } else {
        pVariant->SetAsAString(NS_LITERAL_STRING(""));
      }
      rv = pArray.AppendObject(pVariant);
    }
  }
  rv = mComponent->TreatP001B(pArray, pLsize, pCsize, mKey);
  return rv;
}


/* Generated by Pygmalion */


NS_IMPL_ISUPPORTS1(mozListenerP001C, nsISOAPResponseListener)

mozListenerP001C::mozListenerP001C(mozC02gestsea* aComponent, const nsAString & aKey, const nsACString & aField1, const nsACString & aField2, const nsACString & aField3, const nsACString & aField4, const nsACString & aField5, const nsACString & aField6, const nsACString & aField7, const nsACString & aField8, const nsACString & aField9, const nsACString & aField10, const nsACString & aField11, const nsACString & aField12, const nsACString & aField13)
{
  mComponent = aComponent;
  mKey = aKey;
  mField1 = aField1;
  mField2 = aField2;
  mField3 = aField3;
  mField4 = aField4;
  mField5 = aField5;
  mField6 = aField6;
  mField7 = aField7;
  mField8 = aField8;
  mField9 = aField9;
  mField10 = aField10;
  mField11 = aField11;
  mField12 = aField12;
  mField13 = aField13;
}
mozListenerP001C::~mozListenerP001C()
{
}

NS_IMETHODIMP mozListenerP001C::HandleResponse(nsISOAPResponse *aResponse, nsISOAPCall *aCall, PRUint32 aStatus, PRBool aLast, PRBool *aReturn)
{
  nsresult rv;
  nsCOMPtr<nsISOAPFault> pFault;
  rv = aResponse->GetFault(getter_AddRefs(pFault));
  NS_ENSURE_SUCCESS(rv, rv);
  if (pFault) {
    nsAutoString pFaute, pDetail, pTitle;
    nsCOMPtr<nsIDOMElement> pTheDetail;
    nsCOMPtr<nsIDOMNode> pNode;
    rv = pFault->GetDetail(getter_AddRefs(pTheDetail));
    NS_ENSURE_SUCCESS(rv,rv);
    rv = pTheDetail->GetFirstChild(getter_AddRefs(pNode));
    NS_ENSURE_SUCCESS(rv,rv);
    if (pNode) {
      nsCOMPtr<nsIDOMNamedNodeMap> pAttributes;
      nsCOMPtr<nsIDOMNode> pAttribute, pFirstNode;
      nsAutoString pNodeValue;
      rv = pNode->GetFirstChild(getter_AddRefs(pFirstNode));
      NS_ENSURE_SUCCESS(rv,rv);
      if (pFirstNode) {
        pFirstNode->GetNodeValue(pNodeValue);
        NS_ENSURE_SUCCESS(rv,rv);
        pDetail  = pNodeValue;
      }
      pNode->GetAttributes(getter_AddRefs(pAttributes));
      NS_ENSURE_SUCCESS(rv,rv);
      pAttributes->GetNamedItem(NS_LITERAL_STRING("code"), getter_AddRefs(pAttribute));
      NS_ENSURE_SUCCESS(rv,rv);
      if (pAttribute) {
        pAttribute->GetNodeValue(pNodeValue);
        NS_ENSURE_SUCCESS(rv,rv);
        pDetail += NS_LITERAL_STRING("\n(Erreur ");
        pDetail += pNodeValue;
        pDetail += NS_LITERAL_STRING(")");
      }
    } else pDetail = NS_LITERAL_STRING("Erreur sans message.");
    pFaute = pDetail;
    rv = pFault->GetFaultString(pTitle);
    NS_ENSURE_SUCCESS(rv,rv);
    nsCOMPtr<nsIPrompt> pPrompt= do_GetService(NS_DEFAULTPROMPT_CONTRACTID, &rv);
    NS_ENSURE_SUCCESS(rv,rv);
    pPrompt->Alert(ToNewUnicode(pTitle), ToNewUnicode(pFaute));
    return NS_ERROR_FAILURE;
  }

  nsISOAPParameter ** pParameters;
  PRUint32 pTotal;
  rv = aResponse->GetParameters(PR_FALSE, &pTotal, &pParameters);
  NS_ENSURE_SUCCESS(rv,rv);
  if (pTotal!=1) {
    nsCOMPtr<nsIPrompt> pPrompt= do_GetService(NS_DEFAULTPROMPT_CONTRACTID, &rv);
    NS_ENSURE_SUCCESS(rv,rv);
    pPrompt->Alert(ToNewUnicode(NS_LITERAL_CSTRING("Erreur système")), ToNewUnicode(NS_LITERAL_CSTRING("Le nombre total de paramètres reçus est incorrect.")));
    return NS_ERROR_FAILURE;
  }

  nsAutoString pText;
  nsCOMPtr<nsIVariant> pValue;
  rv = pParameters[0]->GetValue(getter_AddRefs(pValue));
  NS_ENSURE_SUCCESS(rv,rv);
  rv = pValue->GetAsAString(pText);
  NS_ENSURE_SUCCESS(rv,rv);
  rv = mComponent->TreatP001C(pText, mKey, mField1, mField2, mField3, mField4, mField5, mField6, mField7, mField8, mField9, mField10, mField11, mField12, mField13);
  return rv;
}


/* Generated by Pygmalion */


NS_IMPL_ISUPPORTS1(mozListenerP001D, nsISOAPResponseListener)

mozListenerP001D::mozListenerP001D(mozC02gestsea* aComponent)
{
  mComponent = aComponent;
}
mozListenerP001D::~mozListenerP001D()
{
}

NS_IMETHODIMP mozListenerP001D::HandleResponse(nsISOAPResponse *aResponse, nsISOAPCall *aCall, PRUint32 aStatus, PRBool aLast, PRBool *aReturn)
{
  nsresult rv;
  nsCOMPtr<nsISOAPFault> pFault;
  rv = aResponse->GetFault(getter_AddRefs(pFault));
  NS_ENSURE_SUCCESS(rv, rv);
  if (pFault) {
    nsAutoString pFaute, pDetail, pTitle;
    nsCOMPtr<nsIDOMElement> pTheDetail;
    nsCOMPtr<nsIDOMNode> pNode;
    rv = pFault->GetDetail(getter_AddRefs(pTheDetail));
    NS_ENSURE_SUCCESS(rv,rv);
    rv = pTheDetail->GetFirstChild(getter_AddRefs(pNode));
    NS_ENSURE_SUCCESS(rv,rv);
    if (pNode) {
      nsCOMPtr<nsIDOMNamedNodeMap> pAttributes;
      nsCOMPtr<nsIDOMNode> pAttribute, pFirstNode;
      nsAutoString pNodeValue;
      rv = pNode->GetFirstChild(getter_AddRefs(pFirstNode));
      NS_ENSURE_SUCCESS(rv,rv);
      if (pFirstNode) {
        pFirstNode->GetNodeValue(pNodeValue);
        NS_ENSURE_SUCCESS(rv,rv);
        pDetail  = pNodeValue;
      }
      pNode->GetAttributes(getter_AddRefs(pAttributes));
      NS_ENSURE_SUCCESS(rv,rv);
      pAttributes->GetNamedItem(NS_LITERAL_STRING("code"), getter_AddRefs(pAttribute));
      NS_ENSURE_SUCCESS(rv,rv);
      if (pAttribute) {
        pAttribute->GetNodeValue(pNodeValue);
        NS_ENSURE_SUCCESS(rv,rv);
        pDetail += NS_LITERAL_STRING("\n(Erreur ");
        pDetail += pNodeValue;
        pDetail += NS_LITERAL_STRING(")");
      }
    } else pDetail = NS_LITERAL_STRING("Erreur sans message.");
    pFaute = pDetail;
    rv = pFault->GetFaultString(pTitle);
    NS_ENSURE_SUCCESS(rv,rv);
    nsCOMPtr<nsIPrompt> pPrompt= do_GetService(NS_DEFAULTPROMPT_CONTRACTID, &rv);
    NS_ENSURE_SUCCESS(rv,rv);
    pPrompt->Alert(ToNewUnicode(pTitle), ToNewUnicode(pFaute));
    return NS_ERROR_FAILURE;
  }

  nsISOAPParameter ** pParameters;
  PRUint32 pTotal;
  rv = aResponse->GetParameters(PR_FALSE, &pTotal, &pParameters);
  NS_ENSURE_SUCCESS(rv,rv);
  if (pTotal!=1) {
    nsCOMPtr<nsIPrompt> pPrompt= do_GetService(NS_DEFAULTPROMPT_CONTRACTID, &rv);
    NS_ENSURE_SUCCESS(rv,rv);
    pPrompt->Alert(ToNewUnicode(NS_LITERAL_CSTRING("Erreur système")), ToNewUnicode(NS_LITERAL_CSTRING("Le nombre total de paramètres reçus est incorrect.")));
    return NS_ERROR_FAILURE;
  }

  nsAutoString pText;
  nsCOMArray<nsIVariant> pArray;
  nsCOMPtr<nsIWritableVariant> pVariant;
  PRUint32 pLsize=0, pCsize=0;
  PRUint32 pLineIndex, pColIndex;
  PRUint16 pNodeType;
  nsCOMPtr<nsIDOMElement> pResult;
  nsCOMPtr<nsIDOMNodeList> pLines, pValues;
  nsCOMPtr<nsIDOMNode> pLine, pValue, pContent;
  rv = pParameters[0]->GetElement(getter_AddRefs(pResult));
  NS_ENSURE_SUCCESS(rv,rv);
  rv = pResult->GetChildNodes(getter_AddRefs(pLines));
  NS_ENSURE_SUCCESS(rv,rv);
  pLines->GetLength(&pLsize);
  for (pLineIndex=0;pLineIndex<pLsize;pLineIndex++) {
    do {
      rv = pLines->Item(pLineIndex, getter_AddRefs(pLine));
      NS_ENSURE_SUCCESS(rv,rv);
      pLine->GetNodeType(&pNodeType);
      if (pNodeType!=nsIDOMNode::ELEMENT_NODE) pLineIndex++;
    } while (pLineIndex<pLsize && pNodeType!=nsIDOMNode::ELEMENT_NODE);
    if (pLineIndex>=pLsize) break;
    rv = pLine->GetChildNodes(getter_AddRefs(pValues));
    NS_ENSURE_SUCCESS(rv,rv);
    pValues->GetLength(&pCsize);
    for (pColIndex=0;pColIndex<pCsize;pColIndex++) {
      do {
        rv = pValues->Item(pColIndex, getter_AddRefs(pValue));
        NS_ENSURE_SUCCESS(rv,rv);
        pValue->GetNodeType(&pNodeType);
        if (pNodeType!=nsIDOMNode::ELEMENT_NODE) pColIndex++;
      } while (pColIndex<pCsize && pNodeType!=nsIDOMNode::ELEMENT_NODE);
      if (pColIndex>=pCsize) break;
      rv = pValue->GetFirstChild(getter_AddRefs(pContent));
      NS_ENSURE_SUCCESS(rv,rv);
      pVariant = do_CreateInstance(NS_VARIANT_CONTRACTID, &rv);
      NS_ENSURE_SUCCESS(rv,rv);
      if (pContent) {
        rv = pContent->GetNodeValue(pText);
        NS_ENSURE_SUCCESS(rv,rv);
        pVariant->SetAsAString(pText);
        printf("%s|",ToNewCString(pText));
      } else {
        pVariant->SetAsAString(NS_LITERAL_STRING(""));
      }
      rv = pArray.AppendObject(pVariant);
    }
  }
  rv = mComponent->TreatP001D(pArray, pLsize, pCsize);
  return rv;
}


/* Generated by Pygmalion */


NS_IMPL_ISUPPORTS1(mozListenerP001E, nsISOAPResponseListener)

mozListenerP001E::mozListenerP001E(mozC02gestsea* aComponent, const nsAString & aKey)
{
  mComponent = aComponent;
  mKey = aKey;
}
mozListenerP001E::~mozListenerP001E()
{
}

NS_IMETHODIMP mozListenerP001E::HandleResponse(nsISOAPResponse *aResponse, nsISOAPCall *aCall, PRUint32 aStatus, PRBool aLast, PRBool *aReturn)
{
  nsresult rv;
  nsCOMPtr<nsISOAPFault> pFault;
  rv = aResponse->GetFault(getter_AddRefs(pFault));
  NS_ENSURE_SUCCESS(rv, rv);
  if (pFault) {
    nsAutoString pFaute, pDetail, pTitle;
    nsCOMPtr<nsIDOMElement> pTheDetail;
    nsCOMPtr<nsIDOMNode> pNode;
    rv = pFault->GetDetail(getter_AddRefs(pTheDetail));
    NS_ENSURE_SUCCESS(rv,rv);
    rv = pTheDetail->GetFirstChild(getter_AddRefs(pNode));
    NS_ENSURE_SUCCESS(rv,rv);
    if (pNode) {
      nsCOMPtr<nsIDOMNamedNodeMap> pAttributes;
      nsCOMPtr<nsIDOMNode> pAttribute, pFirstNode;
      nsAutoString pNodeValue;
      rv = pNode->GetFirstChild(getter_AddRefs(pFirstNode));
      NS_ENSURE_SUCCESS(rv,rv);
      if (pFirstNode) {
        pFirstNode->GetNodeValue(pNodeValue);
        NS_ENSURE_SUCCESS(rv,rv);
        pDetail  = pNodeValue;
      }
      pNode->GetAttributes(getter_AddRefs(pAttributes));
      NS_ENSURE_SUCCESS(rv,rv);
      pAttributes->GetNamedItem(NS_LITERAL_STRING("code"), getter_AddRefs(pAttribute));
      NS_ENSURE_SUCCESS(rv,rv);
      if (pAttribute) {
        pAttribute->GetNodeValue(pNodeValue);
        NS_ENSURE_SUCCESS(rv,rv);
        pDetail += NS_LITERAL_STRING("\n(Erreur ");
        pDetail += pNodeValue;
        pDetail += NS_LITERAL_STRING(")");
      }
    } else pDetail = NS_LITERAL_STRING("Erreur sans message.");
    pFaute = pDetail;
    rv = pFault->GetFaultString(pTitle);
    NS_ENSURE_SUCCESS(rv,rv);
    nsCOMPtr<nsIPrompt> pPrompt= do_GetService(NS_DEFAULTPROMPT_CONTRACTID, &rv);
    NS_ENSURE_SUCCESS(rv,rv);
    pPrompt->Alert(ToNewUnicode(pTitle), ToNewUnicode(pFaute));
    return NS_ERROR_FAILURE;
  }

  nsISOAPParameter ** pParameters;
  PRUint32 pTotal;
  rv = aResponse->GetParameters(PR_FALSE, &pTotal, &pParameters);
  NS_ENSURE_SUCCESS(rv,rv);
  if (pTotal!=1) {
    nsCOMPtr<nsIPrompt> pPrompt= do_GetService(NS_DEFAULTPROMPT_CONTRACTID, &rv);
    NS_ENSURE_SUCCESS(rv,rv);
    pPrompt->Alert(ToNewUnicode(NS_LITERAL_CSTRING("Erreur système")), ToNewUnicode(NS_LITERAL_CSTRING("Le nombre total de paramètres reçus est incorrect.")));
    return NS_ERROR_FAILURE;
  }

  nsAutoString pText;
  nsCOMPtr<nsIVariant> pValue;
  rv = pParameters[0]->GetValue(getter_AddRefs(pValue));
  NS_ENSURE_SUCCESS(rv,rv);
  rv = pValue->GetAsAString(pText);
  NS_ENSURE_SUCCESS(rv,rv);
  rv = mComponent->TreatP001E(pText, mKey);
  return rv;
}


/* Generated by Pygmalion */


NS_IMPL_ISUPPORTS1(mozListenerP001F, nsISOAPResponseListener)

mozListenerP001F::mozListenerP001F(mozC02gestsea* aComponent, const nsAString & aKey)
{
  mComponent = aComponent;
  mKey = aKey;
}
mozListenerP001F::~mozListenerP001F()
{
}

NS_IMETHODIMP mozListenerP001F::HandleResponse(nsISOAPResponse *aResponse, nsISOAPCall *aCall, PRUint32 aStatus, PRBool aLast, PRBool *aReturn)
{
  nsresult rv;
  nsCOMPtr<nsISOAPFault> pFault;
  rv = aResponse->GetFault(getter_AddRefs(pFault));
  NS_ENSURE_SUCCESS(rv, rv);
  if (pFault) {
    nsAutoString pFaute, pDetail, pTitle;
    nsCOMPtr<nsIDOMElement> pTheDetail;
    nsCOMPtr<nsIDOMNode> pNode;
    rv = pFault->GetDetail(getter_AddRefs(pTheDetail));
    NS_ENSURE_SUCCESS(rv,rv);
    rv = pTheDetail->GetFirstChild(getter_AddRefs(pNode));
    NS_ENSURE_SUCCESS(rv,rv);
    if (pNode) {
      nsCOMPtr<nsIDOMNamedNodeMap> pAttributes;
      nsCOMPtr<nsIDOMNode> pAttribute, pFirstNode;
      nsAutoString pNodeValue;
      rv = pNode->GetFirstChild(getter_AddRefs(pFirstNode));
      NS_ENSURE_SUCCESS(rv,rv);
      if (pFirstNode) {
        pFirstNode->GetNodeValue(pNodeValue);
        NS_ENSURE_SUCCESS(rv,rv);
        pDetail  = pNodeValue;
      }
      pNode->GetAttributes(getter_AddRefs(pAttributes));
      NS_ENSURE_SUCCESS(rv,rv);
      pAttributes->GetNamedItem(NS_LITERAL_STRING("code"), getter_AddRefs(pAttribute));
      NS_ENSURE_SUCCESS(rv,rv);
      if (pAttribute) {
        pAttribute->GetNodeValue(pNodeValue);
        NS_ENSURE_SUCCESS(rv,rv);
        pDetail += NS_LITERAL_STRING("\n(Erreur ");
        pDetail += pNodeValue;
        pDetail += NS_LITERAL_STRING(")");
      }
    } else pDetail = NS_LITERAL_STRING("Erreur sans message.");
    pFaute = pDetail;
    rv = pFault->GetFaultString(pTitle);
    NS_ENSURE_SUCCESS(rv,rv);
    nsCOMPtr<nsIPrompt> pPrompt= do_GetService(NS_DEFAULTPROMPT_CONTRACTID, &rv);
    NS_ENSURE_SUCCESS(rv,rv);
    pPrompt->Alert(ToNewUnicode(pTitle), ToNewUnicode(pFaute));
    return NS_ERROR_FAILURE;
  }

  nsISOAPParameter ** pParameters;
  PRUint32 pTotal;
  rv = aResponse->GetParameters(PR_FALSE, &pTotal, &pParameters);
  NS_ENSURE_SUCCESS(rv,rv);
  if (pTotal!=1) {
    nsCOMPtr<nsIPrompt> pPrompt= do_GetService(NS_DEFAULTPROMPT_CONTRACTID, &rv);
    NS_ENSURE_SUCCESS(rv,rv);
    pPrompt->Alert(ToNewUnicode(NS_LITERAL_CSTRING("Erreur système")), ToNewUnicode(NS_LITERAL_CSTRING("Le nombre total de paramètres reçus est incorrect.")));
    return NS_ERROR_FAILURE;
  }

  nsAutoString pText;
  nsCOMArray<nsIVariant> pArray;
  nsCOMPtr<nsIWritableVariant> pVariant;
  PRUint32 pLsize=0, pCsize=0;
  PRUint32 pLineIndex, pColIndex;
  PRUint16 pNodeType;
  nsCOMPtr<nsIDOMElement> pResult;
  nsCOMPtr<nsIDOMNodeList> pLines, pValues;
  nsCOMPtr<nsIDOMNode> pLine, pValue, pContent;
  rv = pParameters[0]->GetElement(getter_AddRefs(pResult));
  NS_ENSURE_SUCCESS(rv,rv);
  rv = pResult->GetChildNodes(getter_AddRefs(pLines));
  NS_ENSURE_SUCCESS(rv,rv);
  pLines->GetLength(&pLsize);
  for (pLineIndex=0;pLineIndex<pLsize;pLineIndex++) {
    do {
      rv = pLines->Item(pLineIndex, getter_AddRefs(pLine));
      NS_ENSURE_SUCCESS(rv,rv);
      pLine->GetNodeType(&pNodeType);
      if (pNodeType!=nsIDOMNode::ELEMENT_NODE) pLineIndex++;
    } while (pLineIndex<pLsize && pNodeType!=nsIDOMNode::ELEMENT_NODE);
    if (pLineIndex>=pLsize) break;
    rv = pLine->GetChildNodes(getter_AddRefs(pValues));
    NS_ENSURE_SUCCESS(rv,rv);
    pValues->GetLength(&pCsize);
    for (pColIndex=0;pColIndex<pCsize;pColIndex++) {
      do {
        rv = pValues->Item(pColIndex, getter_AddRefs(pValue));
        NS_ENSURE_SUCCESS(rv,rv);
        pValue->GetNodeType(&pNodeType);
        if (pNodeType!=nsIDOMNode::ELEMENT_NODE) pColIndex++;
      } while (pColIndex<pCsize && pNodeType!=nsIDOMNode::ELEMENT_NODE);
      if (pColIndex>=pCsize) break;
      rv = pValue->GetFirstChild(getter_AddRefs(pContent));
      NS_ENSURE_SUCCESS(rv,rv);
      pVariant = do_CreateInstance(NS_VARIANT_CONTRACTID, &rv);
      NS_ENSURE_SUCCESS(rv,rv);
      if (pContent) {
        rv = pContent->GetNodeValue(pText);
        NS_ENSURE_SUCCESS(rv,rv);
        pVariant->SetAsAString(pText);
        printf("%s|",ToNewCString(pText));
      } else {
        pVariant->SetAsAString(NS_LITERAL_STRING(""));
      }
      rv = pArray.AppendObject(pVariant);
    }
  }
  rv = mComponent->TreatP001F(pArray, pLsize, pCsize, mKey);
  return rv;
}


/* Generated by Pygmalion */


NS_IMPL_ISUPPORTS1(mozListenerP0020, nsISOAPResponseListener)

mozListenerP0020::mozListenerP0020(mozC02gestsea* aComponent, const nsACString & aSearch)
{
  mComponent = aComponent;
  mSearch = aSearch;
}
mozListenerP0020::~mozListenerP0020()
{
}

NS_IMETHODIMP mozListenerP0020::HandleResponse(nsISOAPResponse *aResponse, nsISOAPCall *aCall, PRUint32 aStatus, PRBool aLast, PRBool *aReturn)
{
  nsresult rv;
  nsCOMPtr<nsISOAPFault> pFault;
  rv = aResponse->GetFault(getter_AddRefs(pFault));
  NS_ENSURE_SUCCESS(rv, rv);
  if (pFault) {
    nsAutoString pFaute, pDetail, pTitle;
    nsCOMPtr<nsIDOMElement> pTheDetail;
    nsCOMPtr<nsIDOMNode> pNode;
    rv = pFault->GetDetail(getter_AddRefs(pTheDetail));
    NS_ENSURE_SUCCESS(rv,rv);
    rv = pTheDetail->GetFirstChild(getter_AddRefs(pNode));
    NS_ENSURE_SUCCESS(rv,rv);
    if (pNode) {
      nsCOMPtr<nsIDOMNamedNodeMap> pAttributes;
      nsCOMPtr<nsIDOMNode> pAttribute, pFirstNode;
      nsAutoString pNodeValue;
      rv = pNode->GetFirstChild(getter_AddRefs(pFirstNode));
      NS_ENSURE_SUCCESS(rv,rv);
      if (pFirstNode) {
        pFirstNode->GetNodeValue(pNodeValue);
        NS_ENSURE_SUCCESS(rv,rv);
        pDetail  = pNodeValue;
      }
      pNode->GetAttributes(getter_AddRefs(pAttributes));
      NS_ENSURE_SUCCESS(rv,rv);
      pAttributes->GetNamedItem(NS_LITERAL_STRING("code"), getter_AddRefs(pAttribute));
      NS_ENSURE_SUCCESS(rv,rv);
      if (pAttribute) {
        pAttribute->GetNodeValue(pNodeValue);
        NS_ENSURE_SUCCESS(rv,rv);
        pDetail += NS_LITERAL_STRING("\n(Erreur ");
        pDetail += pNodeValue;
        pDetail += NS_LITERAL_STRING(")");
      }
    } else pDetail = NS_LITERAL_STRING("Erreur sans message.");
    pFaute = pDetail;
    rv = pFault->GetFaultString(pTitle);
    NS_ENSURE_SUCCESS(rv,rv);
    nsCOMPtr<nsIPrompt> pPrompt= do_GetService(NS_DEFAULTPROMPT_CONTRACTID, &rv);
    NS_ENSURE_SUCCESS(rv,rv);
    pPrompt->Alert(ToNewUnicode(pTitle), ToNewUnicode(pFaute));
    return NS_ERROR_FAILURE;
  }

  nsISOAPParameter ** pParameters;
  PRUint32 pTotal;
  rv = aResponse->GetParameters(PR_FALSE, &pTotal, &pParameters);
  NS_ENSURE_SUCCESS(rv,rv);
  if (pTotal!=1) {
    nsCOMPtr<nsIPrompt> pPrompt= do_GetService(NS_DEFAULTPROMPT_CONTRACTID, &rv);
    NS_ENSURE_SUCCESS(rv,rv);
    pPrompt->Alert(ToNewUnicode(NS_LITERAL_CSTRING("Erreur système")), ToNewUnicode(NS_LITERAL_CSTRING("Le nombre total de paramètres reçus est incorrect.")));
    return NS_ERROR_FAILURE;
  }

  nsAutoString pText;
  nsCOMArray<nsIVariant> pArray;
  nsCOMPtr<nsIWritableVariant> pVariant;
  PRUint32 pLsize=0, pCsize=0;
  PRUint32 pLineIndex, pColIndex;
  PRUint16 pNodeType;
  nsCOMPtr<nsIDOMElement> pResult;
  nsCOMPtr<nsIDOMNodeList> pLines, pValues;
  nsCOMPtr<nsIDOMNode> pLine, pValue, pContent;
  rv = pParameters[0]->GetElement(getter_AddRefs(pResult));
  NS_ENSURE_SUCCESS(rv,rv);
  rv = pResult->GetChildNodes(getter_AddRefs(pLines));
  NS_ENSURE_SUCCESS(rv,rv);
  pLines->GetLength(&pLsize);
  for (pLineIndex=0;pLineIndex<pLsize;pLineIndex++) {
    do {
      rv = pLines->Item(pLineIndex, getter_AddRefs(pLine));
      NS_ENSURE_SUCCESS(rv,rv);
      pLine->GetNodeType(&pNodeType);
      if (pNodeType!=nsIDOMNode::ELEMENT_NODE) pLineIndex++;
    } while (pLineIndex<pLsize && pNodeType!=nsIDOMNode::ELEMENT_NODE);
    if (pLineIndex>=pLsize) break;
    rv = pLine->GetChildNodes(getter_AddRefs(pValues));
    NS_ENSURE_SUCCESS(rv,rv);
    pValues->GetLength(&pCsize);
    for (pColIndex=0;pColIndex<pCsize;pColIndex++) {
      do {
        rv = pValues->Item(pColIndex, getter_AddRefs(pValue));
        NS_ENSURE_SUCCESS(rv,rv);
        pValue->GetNodeType(&pNodeType);
        if (pNodeType!=nsIDOMNode::ELEMENT_NODE) pColIndex++;
      } while (pColIndex<pCsize && pNodeType!=nsIDOMNode::ELEMENT_NODE);
      if (pColIndex>=pCsize) break;
      rv = pValue->GetFirstChild(getter_AddRefs(pContent));
      NS_ENSURE_SUCCESS(rv,rv);
      pVariant = do_CreateInstance(NS_VARIANT_CONTRACTID, &rv);
      NS_ENSURE_SUCCESS(rv,rv);
      if (pContent) {
        rv = pContent->GetNodeValue(pText);
        NS_ENSURE_SUCCESS(rv,rv);
        pVariant->SetAsAString(pText);
        printf("%s|",ToNewCString(pText));
      } else {
        pVariant->SetAsAString(NS_LITERAL_STRING(""));
      }
      rv = pArray.AppendObject(pVariant);
    }
  }
  rv = mComponent->TreatP0020(pArray, pLsize, pCsize, mSearch);
  return rv;
}


/* Generated by Pygmalion */


NS_IMPL_ISUPPORTS1(mozListenerP0021, nsISOAPResponseListener)

mozListenerP0021::mozListenerP0021(mozC02gestsea* aComponent, const nsACString & aSearch)
{
  mComponent = aComponent;
  mSearch = aSearch;
}
mozListenerP0021::~mozListenerP0021()
{
}

NS_IMETHODIMP mozListenerP0021::HandleResponse(nsISOAPResponse *aResponse, nsISOAPCall *aCall, PRUint32 aStatus, PRBool aLast, PRBool *aReturn)
{
  nsresult rv;
  nsCOMPtr<nsISOAPFault> pFault;
  rv = aResponse->GetFault(getter_AddRefs(pFault));
  NS_ENSURE_SUCCESS(rv, rv);
  if (pFault) {
    nsAutoString pFaute, pDetail, pTitle;
    nsCOMPtr<nsIDOMElement> pTheDetail;
    nsCOMPtr<nsIDOMNode> pNode;
    rv = pFault->GetDetail(getter_AddRefs(pTheDetail));
    NS_ENSURE_SUCCESS(rv,rv);
    rv = pTheDetail->GetFirstChild(getter_AddRefs(pNode));
    NS_ENSURE_SUCCESS(rv,rv);
    if (pNode) {
      nsCOMPtr<nsIDOMNamedNodeMap> pAttributes;
      nsCOMPtr<nsIDOMNode> pAttribute, pFirstNode;
      nsAutoString pNodeValue;
      rv = pNode->GetFirstChild(getter_AddRefs(pFirstNode));
      NS_ENSURE_SUCCESS(rv,rv);
      if (pFirstNode) {
        pFirstNode->GetNodeValue(pNodeValue);
        NS_ENSURE_SUCCESS(rv,rv);
        pDetail  = pNodeValue;
      }
      pNode->GetAttributes(getter_AddRefs(pAttributes));
      NS_ENSURE_SUCCESS(rv,rv);
      pAttributes->GetNamedItem(NS_LITERAL_STRING("code"), getter_AddRefs(pAttribute));
      NS_ENSURE_SUCCESS(rv,rv);
      if (pAttribute) {
        pAttribute->GetNodeValue(pNodeValue);
        NS_ENSURE_SUCCESS(rv,rv);
        pDetail += NS_LITERAL_STRING("\n(Erreur ");
        pDetail += pNodeValue;
        pDetail += NS_LITERAL_STRING(")");
      }
    } else pDetail = NS_LITERAL_STRING("Erreur sans message.");
    pFaute = pDetail;
    rv = pFault->GetFaultString(pTitle);
    NS_ENSURE_SUCCESS(rv,rv);
    nsCOMPtr<nsIPrompt> pPrompt= do_GetService(NS_DEFAULTPROMPT_CONTRACTID, &rv);
    NS_ENSURE_SUCCESS(rv,rv);
    pPrompt->Alert(ToNewUnicode(pTitle), ToNewUnicode(pFaute));
    return NS_ERROR_FAILURE;
  }

  nsISOAPParameter ** pParameters;
  PRUint32 pTotal;
  rv = aResponse->GetParameters(PR_FALSE, &pTotal, &pParameters);
  NS_ENSURE_SUCCESS(rv,rv);
  if (pTotal!=1) {
    nsCOMPtr<nsIPrompt> pPrompt= do_GetService(NS_DEFAULTPROMPT_CONTRACTID, &rv);
    NS_ENSURE_SUCCESS(rv,rv);
    pPrompt->Alert(ToNewUnicode(NS_LITERAL_CSTRING("Erreur système")), ToNewUnicode(NS_LITERAL_CSTRING("Le nombre total de paramètres reçus est incorrect.")));
    return NS_ERROR_FAILURE;
  }

  nsAutoString pText;
  nsCOMArray<nsIVariant> pArray;
  nsCOMPtr<nsIWritableVariant> pVariant;
  PRUint32 pLsize=0, pCsize=0;
  PRUint32 pLineIndex, pColIndex;
  PRUint16 pNodeType;
  nsCOMPtr<nsIDOMElement> pResult;
  nsCOMPtr<nsIDOMNodeList> pLines, pValues;
  nsCOMPtr<nsIDOMNode> pLine, pValue, pContent;
  rv = pParameters[0]->GetElement(getter_AddRefs(pResult));
  NS_ENSURE_SUCCESS(rv,rv);
  rv = pResult->GetChildNodes(getter_AddRefs(pLines));
  NS_ENSURE_SUCCESS(rv,rv);
  pLines->GetLength(&pLsize);
  for (pLineIndex=0;pLineIndex<pLsize;pLineIndex++) {
    do {
      rv = pLines->Item(pLineIndex, getter_AddRefs(pLine));
      NS_ENSURE_SUCCESS(rv,rv);
      pLine->GetNodeType(&pNodeType);
      if (pNodeType!=nsIDOMNode::ELEMENT_NODE) pLineIndex++;
    } while (pLineIndex<pLsize && pNodeType!=nsIDOMNode::ELEMENT_NODE);
    if (pLineIndex>=pLsize) break;
    rv = pLine->GetChildNodes(getter_AddRefs(pValues));
    NS_ENSURE_SUCCESS(rv,rv);
    pValues->GetLength(&pCsize);
    for (pColIndex=0;pColIndex<pCsize;pColIndex++) {
      do {
        rv = pValues->Item(pColIndex, getter_AddRefs(pValue));
        NS_ENSURE_SUCCESS(rv,rv);
        pValue->GetNodeType(&pNodeType);
        if (pNodeType!=nsIDOMNode::ELEMENT_NODE) pColIndex++;
      } while (pColIndex<pCsize && pNodeType!=nsIDOMNode::ELEMENT_NODE);
      if (pColIndex>=pCsize) break;
      rv = pValue->GetFirstChild(getter_AddRefs(pContent));
      NS_ENSURE_SUCCESS(rv,rv);
      pVariant = do_CreateInstance(NS_VARIANT_CONTRACTID, &rv);
      NS_ENSURE_SUCCESS(rv,rv);
      if (pContent) {
        rv = pContent->GetNodeValue(pText);
        NS_ENSURE_SUCCESS(rv,rv);
        pVariant->SetAsAString(pText);
        printf("%s|",ToNewCString(pText));
      } else {
        pVariant->SetAsAString(NS_LITERAL_STRING(""));
      }
      rv = pArray.AppendObject(pVariant);
    }
  }
  rv = mComponent->TreatP0021(pArray, pLsize, pCsize, mSearch);
  return rv;
}


/* Generated by Pygmalion */


NS_IMPL_ISUPPORTS1(mozListenerP0022, nsISOAPResponseListener)

mozListenerP0022::mozListenerP0022(mozC02gestsea* aComponent, const nsAString & aKey)
{
  mComponent = aComponent;
  mKey = aKey;
}
mozListenerP0022::~mozListenerP0022()
{
}

NS_IMETHODIMP mozListenerP0022::HandleResponse(nsISOAPResponse *aResponse, nsISOAPCall *aCall, PRUint32 aStatus, PRBool aLast, PRBool *aReturn)
{
  nsresult rv;
  nsCOMPtr<nsISOAPFault> pFault;
  rv = aResponse->GetFault(getter_AddRefs(pFault));
  NS_ENSURE_SUCCESS(rv, rv);
  if (pFault) {
    nsAutoString pFaute, pDetail, pTitle;
    nsCOMPtr<nsIDOMElement> pTheDetail;
    nsCOMPtr<nsIDOMNode> pNode;
    rv = pFault->GetDetail(getter_AddRefs(pTheDetail));
    NS_ENSURE_SUCCESS(rv,rv);
    rv = pTheDetail->GetFirstChild(getter_AddRefs(pNode));
    NS_ENSURE_SUCCESS(rv,rv);
    if (pNode) {
      nsCOMPtr<nsIDOMNamedNodeMap> pAttributes;
      nsCOMPtr<nsIDOMNode> pAttribute, pFirstNode;
      nsAutoString pNodeValue;
      rv = pNode->GetFirstChild(getter_AddRefs(pFirstNode));
      NS_ENSURE_SUCCESS(rv,rv);
      if (pFirstNode) {
        pFirstNode->GetNodeValue(pNodeValue);
        NS_ENSURE_SUCCESS(rv,rv);
        pDetail  = pNodeValue;
      }
      pNode->GetAttributes(getter_AddRefs(pAttributes));
      NS_ENSURE_SUCCESS(rv,rv);
      pAttributes->GetNamedItem(NS_LITERAL_STRING("code"), getter_AddRefs(pAttribute));
      NS_ENSURE_SUCCESS(rv,rv);
      if (pAttribute) {
        pAttribute->GetNodeValue(pNodeValue);
        NS_ENSURE_SUCCESS(rv,rv);
        pDetail += NS_LITERAL_STRING("\n(Erreur ");
        pDetail += pNodeValue;
        pDetail += NS_LITERAL_STRING(")");
      }
    } else pDetail = NS_LITERAL_STRING("Erreur sans message.");
    pFaute = pDetail;
    rv = pFault->GetFaultString(pTitle);
    NS_ENSURE_SUCCESS(rv,rv);
    nsCOMPtr<nsIPrompt> pPrompt= do_GetService(NS_DEFAULTPROMPT_CONTRACTID, &rv);
    NS_ENSURE_SUCCESS(rv,rv);
    pPrompt->Alert(ToNewUnicode(pTitle), ToNewUnicode(pFaute));
    return NS_ERROR_FAILURE;
  }

  nsISOAPParameter ** pParameters;
  PRUint32 pTotal;
  rv = aResponse->GetParameters(PR_FALSE, &pTotal, &pParameters);
  NS_ENSURE_SUCCESS(rv,rv);
  if (pTotal!=1) {
    nsCOMPtr<nsIPrompt> pPrompt= do_GetService(NS_DEFAULTPROMPT_CONTRACTID, &rv);
    NS_ENSURE_SUCCESS(rv,rv);
    pPrompt->Alert(ToNewUnicode(NS_LITERAL_CSTRING("Erreur système")), ToNewUnicode(NS_LITERAL_CSTRING("Le nombre total de paramètres reçus est incorrect.")));
    return NS_ERROR_FAILURE;
  }

  nsAutoString pText;
  nsCOMArray<nsIVariant> pArray;
  nsCOMPtr<nsIWritableVariant> pVariant;
  PRUint32 pLsize=0, pCsize=0;
  PRUint32 pLineIndex, pColIndex;
  PRUint16 pNodeType;
  nsCOMPtr<nsIDOMElement> pResult;
  nsCOMPtr<nsIDOMNodeList> pLines, pValues;
  nsCOMPtr<nsIDOMNode> pLine, pValue, pContent;
  rv = pParameters[0]->GetElement(getter_AddRefs(pResult));
  NS_ENSURE_SUCCESS(rv,rv);
  rv = pResult->GetChildNodes(getter_AddRefs(pLines));
  NS_ENSURE_SUCCESS(rv,rv);
  pLines->GetLength(&pLsize);
  for (pLineIndex=0;pLineIndex<pLsize;pLineIndex++) {
    do {
      rv = pLines->Item(pLineIndex, getter_AddRefs(pLine));
      NS_ENSURE_SUCCESS(rv,rv);
      pLine->GetNodeType(&pNodeType);
      if (pNodeType!=nsIDOMNode::ELEMENT_NODE) pLineIndex++;
    } while (pLineIndex<pLsize && pNodeType!=nsIDOMNode::ELEMENT_NODE);
    if (pLineIndex>=pLsize) break;
    rv = pLine->GetChildNodes(getter_AddRefs(pValues));
    NS_ENSURE_SUCCESS(rv,rv);
    pValues->GetLength(&pCsize);
    for (pColIndex=0;pColIndex<pCsize;pColIndex++) {
      do {
        rv = pValues->Item(pColIndex, getter_AddRefs(pValue));
        NS_ENSURE_SUCCESS(rv,rv);
        pValue->GetNodeType(&pNodeType);
        if (pNodeType!=nsIDOMNode::ELEMENT_NODE) pColIndex++;
      } while (pColIndex<pCsize && pNodeType!=nsIDOMNode::ELEMENT_NODE);
      if (pColIndex>=pCsize) break;
      rv = pValue->GetFirstChild(getter_AddRefs(pContent));
      NS_ENSURE_SUCCESS(rv,rv);
      pVariant = do_CreateInstance(NS_VARIANT_CONTRACTID, &rv);
      NS_ENSURE_SUCCESS(rv,rv);
      if (pContent) {
        rv = pContent->GetNodeValue(pText);
        NS_ENSURE_SUCCESS(rv,rv);
        pVariant->SetAsAString(pText);
        printf("%s|",ToNewCString(pText));
      } else {
        pVariant->SetAsAString(NS_LITERAL_STRING(""));
      }
      rv = pArray.AppendObject(pVariant);
    }
  }
  rv = mComponent->TreatP0022(pArray, pLsize, pCsize, mKey);
  return rv;
}


/* Generated by Pygmalion */


NS_IMPL_ISUPPORTS1(mozListenerP0023, nsISOAPResponseListener)

mozListenerP0023::mozListenerP0023(mozC02gestsea* aComponent, const nsACString & aSearch)
{
  mComponent = aComponent;
  mSearch = aSearch;
}
mozListenerP0023::~mozListenerP0023()
{
}

NS_IMETHODIMP mozListenerP0023::HandleResponse(nsISOAPResponse *aResponse, nsISOAPCall *aCall, PRUint32 aStatus, PRBool aLast, PRBool *aReturn)
{
  nsresult rv;
  nsCOMPtr<nsISOAPFault> pFault;
  rv = aResponse->GetFault(getter_AddRefs(pFault));
  NS_ENSURE_SUCCESS(rv, rv);
  if (pFault) {
    nsAutoString pFaute, pDetail, pTitle;
    nsCOMPtr<nsIDOMElement> pTheDetail;
    nsCOMPtr<nsIDOMNode> pNode;
    rv = pFault->GetDetail(getter_AddRefs(pTheDetail));
    NS_ENSURE_SUCCESS(rv,rv);
    rv = pTheDetail->GetFirstChild(getter_AddRefs(pNode));
    NS_ENSURE_SUCCESS(rv,rv);
    if (pNode) {
      nsCOMPtr<nsIDOMNamedNodeMap> pAttributes;
      nsCOMPtr<nsIDOMNode> pAttribute, pFirstNode;
      nsAutoString pNodeValue;
      rv = pNode->GetFirstChild(getter_AddRefs(pFirstNode));
      NS_ENSURE_SUCCESS(rv,rv);
      if (pFirstNode) {
        pFirstNode->GetNodeValue(pNodeValue);
        NS_ENSURE_SUCCESS(rv,rv);
        pDetail  = pNodeValue;
      }
      pNode->GetAttributes(getter_AddRefs(pAttributes));
      NS_ENSURE_SUCCESS(rv,rv);
      pAttributes->GetNamedItem(NS_LITERAL_STRING("code"), getter_AddRefs(pAttribute));
      NS_ENSURE_SUCCESS(rv,rv);
      if (pAttribute) {
        pAttribute->GetNodeValue(pNodeValue);
        NS_ENSURE_SUCCESS(rv,rv);
        pDetail += NS_LITERAL_STRING("\n(Erreur ");
        pDetail += pNodeValue;
        pDetail += NS_LITERAL_STRING(")");
      }
    } else pDetail = NS_LITERAL_STRING("Erreur sans message.");
    pFaute = pDetail;
    rv = pFault->GetFaultString(pTitle);
    NS_ENSURE_SUCCESS(rv,rv);
    nsCOMPtr<nsIPrompt> pPrompt= do_GetService(NS_DEFAULTPROMPT_CONTRACTID, &rv);
    NS_ENSURE_SUCCESS(rv,rv);
    pPrompt->Alert(ToNewUnicode(pTitle), ToNewUnicode(pFaute));
    return NS_ERROR_FAILURE;
  }

  nsISOAPParameter ** pParameters;
  PRUint32 pTotal;
  rv = aResponse->GetParameters(PR_FALSE, &pTotal, &pParameters);
  NS_ENSURE_SUCCESS(rv,rv);
  if (pTotal!=1) {
    nsCOMPtr<nsIPrompt> pPrompt= do_GetService(NS_DEFAULTPROMPT_CONTRACTID, &rv);
    NS_ENSURE_SUCCESS(rv,rv);
    pPrompt->Alert(ToNewUnicode(NS_LITERAL_CSTRING("Erreur système")), ToNewUnicode(NS_LITERAL_CSTRING("Le nombre total de paramètres reçus est incorrect.")));
    return NS_ERROR_FAILURE;
  }

  nsAutoString pText;
  nsCOMArray<nsIVariant> pArray;
  nsCOMPtr<nsIWritableVariant> pVariant;
  PRUint32 pLsize=0, pCsize=0;
  PRUint32 pLineIndex, pColIndex;
  PRUint16 pNodeType;
  nsCOMPtr<nsIDOMElement> pResult;
  nsCOMPtr<nsIDOMNodeList> pLines, pValues;
  nsCOMPtr<nsIDOMNode> pLine, pValue, pContent;
  rv = pParameters[0]->GetElement(getter_AddRefs(pResult));
  NS_ENSURE_SUCCESS(rv,rv);
  rv = pResult->GetChildNodes(getter_AddRefs(pLines));
  NS_ENSURE_SUCCESS(rv,rv);
  pLines->GetLength(&pLsize);
  for (pLineIndex=0;pLineIndex<pLsize;pLineIndex++) {
    do {
      rv = pLines->Item(pLineIndex, getter_AddRefs(pLine));
      NS_ENSURE_SUCCESS(rv,rv);
      pLine->GetNodeType(&pNodeType);
      if (pNodeType!=nsIDOMNode::ELEMENT_NODE) pLineIndex++;
    } while (pLineIndex<pLsize && pNodeType!=nsIDOMNode::ELEMENT_NODE);
    if (pLineIndex>=pLsize) break;
    rv = pLine->GetChildNodes(getter_AddRefs(pValues));
    NS_ENSURE_SUCCESS(rv,rv);
    pValues->GetLength(&pCsize);
    for (pColIndex=0;pColIndex<pCsize;pColIndex++) {
      do {
        rv = pValues->Item(pColIndex, getter_AddRefs(pValue));
        NS_ENSURE_SUCCESS(rv,rv);
        pValue->GetNodeType(&pNodeType);
        if (pNodeType!=nsIDOMNode::ELEMENT_NODE) pColIndex++;
      } while (pColIndex<pCsize && pNodeType!=nsIDOMNode::ELEMENT_NODE);
      if (pColIndex>=pCsize) break;
      rv = pValue->GetFirstChild(getter_AddRefs(pContent));
      NS_ENSURE_SUCCESS(rv,rv);
      pVariant = do_CreateInstance(NS_VARIANT_CONTRACTID, &rv);
      NS_ENSURE_SUCCESS(rv,rv);
      if (pContent) {
        rv = pContent->GetNodeValue(pText);
        NS_ENSURE_SUCCESS(rv,rv);
        pVariant->SetAsAString(pText);
        printf("%s|",ToNewCString(pText));
      } else {
        pVariant->SetAsAString(NS_LITERAL_STRING(""));
      }
      rv = pArray.AppendObject(pVariant);
    }
  }
  rv = mComponent->TreatP0023(pArray, pLsize, pCsize, mSearch);
  return rv;
}


/* Generated by Pygmalion */


NS_IMPL_ISUPPORTS1(mozListenerP0024, nsISOAPResponseListener)

mozListenerP0024::mozListenerP0024(mozC02gestsea* aComponent, const nsACString & aSearch)
{
  mComponent = aComponent;
  mSearch = aSearch;
}
mozListenerP0024::~mozListenerP0024()
{
}

NS_IMETHODIMP mozListenerP0024::HandleResponse(nsISOAPResponse *aResponse, nsISOAPCall *aCall, PRUint32 aStatus, PRBool aLast, PRBool *aReturn)
{
  nsresult rv;
  nsCOMPtr<nsISOAPFault> pFault;
  rv = aResponse->GetFault(getter_AddRefs(pFault));
  NS_ENSURE_SUCCESS(rv, rv);
  if (pFault) {
    nsAutoString pFaute, pDetail, pTitle;
    nsCOMPtr<nsIDOMElement> pTheDetail;
    nsCOMPtr<nsIDOMNode> pNode;
    rv = pFault->GetDetail(getter_AddRefs(pTheDetail));
    NS_ENSURE_SUCCESS(rv,rv);
    rv = pTheDetail->GetFirstChild(getter_AddRefs(pNode));
    NS_ENSURE_SUCCESS(rv,rv);
    if (pNode) {
      nsCOMPtr<nsIDOMNamedNodeMap> pAttributes;
      nsCOMPtr<nsIDOMNode> pAttribute, pFirstNode;
      nsAutoString pNodeValue;
      rv = pNode->GetFirstChild(getter_AddRefs(pFirstNode));
      NS_ENSURE_SUCCESS(rv,rv);
      if (pFirstNode) {
        pFirstNode->GetNodeValue(pNodeValue);
        NS_ENSURE_SUCCESS(rv,rv);
        pDetail  = pNodeValue;
      }
      pNode->GetAttributes(getter_AddRefs(pAttributes));
      NS_ENSURE_SUCCESS(rv,rv);
      pAttributes->GetNamedItem(NS_LITERAL_STRING("code"), getter_AddRefs(pAttribute));
      NS_ENSURE_SUCCESS(rv,rv);
      if (pAttribute) {
        pAttribute->GetNodeValue(pNodeValue);
        NS_ENSURE_SUCCESS(rv,rv);
        pDetail += NS_LITERAL_STRING("\n(Erreur ");
        pDetail += pNodeValue;
        pDetail += NS_LITERAL_STRING(")");
      }
    } else pDetail = NS_LITERAL_STRING("Erreur sans message.");
    pFaute = pDetail;
    rv = pFault->GetFaultString(pTitle);
    NS_ENSURE_SUCCESS(rv,rv);
    nsCOMPtr<nsIPrompt> pPrompt= do_GetService(NS_DEFAULTPROMPT_CONTRACTID, &rv);
    NS_ENSURE_SUCCESS(rv,rv);
    pPrompt->Alert(ToNewUnicode(pTitle), ToNewUnicode(pFaute));
    return NS_ERROR_FAILURE;
  }

  nsISOAPParameter ** pParameters;
  PRUint32 pTotal;
  rv = aResponse->GetParameters(PR_FALSE, &pTotal, &pParameters);
  NS_ENSURE_SUCCESS(rv,rv);
  if (pTotal!=1) {
    nsCOMPtr<nsIPrompt> pPrompt= do_GetService(NS_DEFAULTPROMPT_CONTRACTID, &rv);
    NS_ENSURE_SUCCESS(rv,rv);
    pPrompt->Alert(ToNewUnicode(NS_LITERAL_CSTRING("Erreur système")), ToNewUnicode(NS_LITERAL_CSTRING("Le nombre total de paramètres reçus est incorrect.")));
    return NS_ERROR_FAILURE;
  }

  nsAutoString pText;
  nsCOMArray<nsIVariant> pArray;
  nsCOMPtr<nsIWritableVariant> pVariant;
  PRUint32 pLsize=0, pCsize=0;
  PRUint32 pLineIndex, pColIndex;
  PRUint16 pNodeType;
  nsCOMPtr<nsIDOMElement> pResult;
  nsCOMPtr<nsIDOMNodeList> pLines, pValues;
  nsCOMPtr<nsIDOMNode> pLine, pValue, pContent;
  rv = pParameters[0]->GetElement(getter_AddRefs(pResult));
  NS_ENSURE_SUCCESS(rv,rv);
  rv = pResult->GetChildNodes(getter_AddRefs(pLines));
  NS_ENSURE_SUCCESS(rv,rv);
  pLines->GetLength(&pLsize);
  for (pLineIndex=0;pLineIndex<pLsize;pLineIndex++) {
    do {
      rv = pLines->Item(pLineIndex, getter_AddRefs(pLine));
      NS_ENSURE_SUCCESS(rv,rv);
      pLine->GetNodeType(&pNodeType);
      if (pNodeType!=nsIDOMNode::ELEMENT_NODE) pLineIndex++;
    } while (pLineIndex<pLsize && pNodeType!=nsIDOMNode::ELEMENT_NODE);
    if (pLineIndex>=pLsize) break;
    rv = pLine->GetChildNodes(getter_AddRefs(pValues));
    NS_ENSURE_SUCCESS(rv,rv);
    pValues->GetLength(&pCsize);
    for (pColIndex=0;pColIndex<pCsize;pColIndex++) {
      do {
        rv = pValues->Item(pColIndex, getter_AddRefs(pValue));
        NS_ENSURE_SUCCESS(rv,rv);
        pValue->GetNodeType(&pNodeType);
        if (pNodeType!=nsIDOMNode::ELEMENT_NODE) pColIndex++;
      } while (pColIndex<pCsize && pNodeType!=nsIDOMNode::ELEMENT_NODE);
      if (pColIndex>=pCsize) break;
      rv = pValue->GetFirstChild(getter_AddRefs(pContent));
      NS_ENSURE_SUCCESS(rv,rv);
      pVariant = do_CreateInstance(NS_VARIANT_CONTRACTID, &rv);
      NS_ENSURE_SUCCESS(rv,rv);
      if (pContent) {
        rv = pContent->GetNodeValue(pText);
        NS_ENSURE_SUCCESS(rv,rv);
        pVariant->SetAsAString(pText);
        printf("%s|",ToNewCString(pText));
      } else {
        pVariant->SetAsAString(NS_LITERAL_STRING(""));
      }
      rv = pArray.AppendObject(pVariant);
    }
  }
  rv = mComponent->TreatP0024(pArray, pLsize, pCsize, mSearch);
  return rv;
}


/* Generated by Pygmalion */


NS_IMPL_ISUPPORTS1(mozListenerP0025, nsISOAPResponseListener)

mozListenerP0025::mozListenerP0025(mozC02gestsea* aComponent, const nsAString & aKey)
{
  mComponent = aComponent;
  mKey = aKey;
}
mozListenerP0025::~mozListenerP0025()
{
}

NS_IMETHODIMP mozListenerP0025::HandleResponse(nsISOAPResponse *aResponse, nsISOAPCall *aCall, PRUint32 aStatus, PRBool aLast, PRBool *aReturn)
{
  nsresult rv;
  nsCOMPtr<nsISOAPFault> pFault;
  rv = aResponse->GetFault(getter_AddRefs(pFault));
  NS_ENSURE_SUCCESS(rv, rv);
  if (pFault) {
    nsAutoString pFaute, pDetail, pTitle;
    nsCOMPtr<nsIDOMElement> pTheDetail;
    nsCOMPtr<nsIDOMNode> pNode;
    rv = pFault->GetDetail(getter_AddRefs(pTheDetail));
    NS_ENSURE_SUCCESS(rv,rv);
    rv = pTheDetail->GetFirstChild(getter_AddRefs(pNode));
    NS_ENSURE_SUCCESS(rv,rv);
    if (pNode) {
      nsCOMPtr<nsIDOMNamedNodeMap> pAttributes;
      nsCOMPtr<nsIDOMNode> pAttribute, pFirstNode;
      nsAutoString pNodeValue;
      rv = pNode->GetFirstChild(getter_AddRefs(pFirstNode));
      NS_ENSURE_SUCCESS(rv,rv);
      if (pFirstNode) {
        pFirstNode->GetNodeValue(pNodeValue);
        NS_ENSURE_SUCCESS(rv,rv);
        pDetail  = pNodeValue;
      }
      pNode->GetAttributes(getter_AddRefs(pAttributes));
      NS_ENSURE_SUCCESS(rv,rv);
      pAttributes->GetNamedItem(NS_LITERAL_STRING("code"), getter_AddRefs(pAttribute));
      NS_ENSURE_SUCCESS(rv,rv);
      if (pAttribute) {
        pAttribute->GetNodeValue(pNodeValue);
        NS_ENSURE_SUCCESS(rv,rv);
        pDetail += NS_LITERAL_STRING("\n(Erreur ");
        pDetail += pNodeValue;
        pDetail += NS_LITERAL_STRING(")");
      }
    } else pDetail = NS_LITERAL_STRING("Erreur sans message.");
    pFaute = pDetail;
    rv = pFault->GetFaultString(pTitle);
    NS_ENSURE_SUCCESS(rv,rv);
    nsCOMPtr<nsIPrompt> pPrompt= do_GetService(NS_DEFAULTPROMPT_CONTRACTID, &rv);
    NS_ENSURE_SUCCESS(rv,rv);
    pPrompt->Alert(ToNewUnicode(pTitle), ToNewUnicode(pFaute));
    return NS_ERROR_FAILURE;
  }

  nsISOAPParameter ** pParameters;
  PRUint32 pTotal;
  rv = aResponse->GetParameters(PR_FALSE, &pTotal, &pParameters);
  NS_ENSURE_SUCCESS(rv,rv);
  if (pTotal!=1) {
    nsCOMPtr<nsIPrompt> pPrompt= do_GetService(NS_DEFAULTPROMPT_CONTRACTID, &rv);
    NS_ENSURE_SUCCESS(rv,rv);
    pPrompt->Alert(ToNewUnicode(NS_LITERAL_CSTRING("Erreur système")), ToNewUnicode(NS_LITERAL_CSTRING("Le nombre total de paramètres reçus est incorrect.")));
    return NS_ERROR_FAILURE;
  }

  nsAutoString pText;
  nsCOMArray<nsIVariant> pArray;
  nsCOMPtr<nsIWritableVariant> pVariant;
  PRUint32 pLsize=0, pCsize=0;
  PRUint32 pLineIndex, pColIndex;
  PRUint16 pNodeType;
  nsCOMPtr<nsIDOMElement> pResult;
  nsCOMPtr<nsIDOMNodeList> pLines, pValues;
  nsCOMPtr<nsIDOMNode> pLine, pValue, pContent;
  rv = pParameters[0]->GetElement(getter_AddRefs(pResult));
  NS_ENSURE_SUCCESS(rv,rv);
  rv = pResult->GetChildNodes(getter_AddRefs(pLines));
  NS_ENSURE_SUCCESS(rv,rv);
  pLines->GetLength(&pLsize);
  for (pLineIndex=0;pLineIndex<pLsize;pLineIndex++) {
    do {
      rv = pLines->Item(pLineIndex, getter_AddRefs(pLine));
      NS_ENSURE_SUCCESS(rv,rv);
      pLine->GetNodeType(&pNodeType);
      if (pNodeType!=nsIDOMNode::ELEMENT_NODE) pLineIndex++;
    } while (pLineIndex<pLsize && pNodeType!=nsIDOMNode::ELEMENT_NODE);
    if (pLineIndex>=pLsize) break;
    rv = pLine->GetChildNodes(getter_AddRefs(pValues));
    NS_ENSURE_SUCCESS(rv,rv);
    pValues->GetLength(&pCsize);
    for (pColIndex=0;pColIndex<pCsize;pColIndex++) {
      do {
        rv = pValues->Item(pColIndex, getter_AddRefs(pValue));
        NS_ENSURE_SUCCESS(rv,rv);
        pValue->GetNodeType(&pNodeType);
        if (pNodeType!=nsIDOMNode::ELEMENT_NODE) pColIndex++;
      } while (pColIndex<pCsize && pNodeType!=nsIDOMNode::ELEMENT_NODE);
      if (pColIndex>=pCsize) break;
      rv = pValue->GetFirstChild(getter_AddRefs(pContent));
      NS_ENSURE_SUCCESS(rv,rv);
      pVariant = do_CreateInstance(NS_VARIANT_CONTRACTID, &rv);
      NS_ENSURE_SUCCESS(rv,rv);
      if (pContent) {
        rv = pContent->GetNodeValue(pText);
        NS_ENSURE_SUCCESS(rv,rv);
        pVariant->SetAsAString(pText);
        printf("%s|",ToNewCString(pText));
      } else {
        pVariant->SetAsAString(NS_LITERAL_STRING(""));
      }
      rv = pArray.AppendObject(pVariant);
    }
  }
  rv = mComponent->TreatP0025(pArray, pLsize, pCsize, mKey);
  return rv;
}


/* Generated by Pygmalion */


NS_IMPL_ISUPPORTS1(mozListenerP0026, nsISOAPResponseListener)

mozListenerP0026::mozListenerP0026(mozC02gestsea* aComponent, const nsAString & aKey)
{
  mComponent = aComponent;
  mKey = aKey;
}
mozListenerP0026::~mozListenerP0026()
{
}

NS_IMETHODIMP mozListenerP0026::HandleResponse(nsISOAPResponse *aResponse, nsISOAPCall *aCall, PRUint32 aStatus, PRBool aLast, PRBool *aReturn)
{
  nsresult rv;
  nsCOMPtr<nsISOAPFault> pFault;
  rv = aResponse->GetFault(getter_AddRefs(pFault));
  NS_ENSURE_SUCCESS(rv, rv);
  if (pFault) {
    nsAutoString pFaute, pDetail, pTitle;
    nsCOMPtr<nsIDOMElement> pTheDetail;
    nsCOMPtr<nsIDOMNode> pNode;
    rv = pFault->GetDetail(getter_AddRefs(pTheDetail));
    NS_ENSURE_SUCCESS(rv,rv);
    rv = pTheDetail->GetFirstChild(getter_AddRefs(pNode));
    NS_ENSURE_SUCCESS(rv,rv);
    if (pNode) {
      nsCOMPtr<nsIDOMNamedNodeMap> pAttributes;
      nsCOMPtr<nsIDOMNode> pAttribute, pFirstNode;
      nsAutoString pNodeValue;
      rv = pNode->GetFirstChild(getter_AddRefs(pFirstNode));
      NS_ENSURE_SUCCESS(rv,rv);
      if (pFirstNode) {
        pFirstNode->GetNodeValue(pNodeValue);
        NS_ENSURE_SUCCESS(rv,rv);
        pDetail  = pNodeValue;
      }
      pNode->GetAttributes(getter_AddRefs(pAttributes));
      NS_ENSURE_SUCCESS(rv,rv);
      pAttributes->GetNamedItem(NS_LITERAL_STRING("code"), getter_AddRefs(pAttribute));
      NS_ENSURE_SUCCESS(rv,rv);
      if (pAttribute) {
        pAttribute->GetNodeValue(pNodeValue);
        NS_ENSURE_SUCCESS(rv,rv);
        pDetail += NS_LITERAL_STRING("\n(Erreur ");
        pDetail += pNodeValue;
        pDetail += NS_LITERAL_STRING(")");
      }
    } else pDetail = NS_LITERAL_STRING("Erreur sans message.");
    pFaute = pDetail;
    rv = pFault->GetFaultString(pTitle);
    NS_ENSURE_SUCCESS(rv,rv);
    nsCOMPtr<nsIPrompt> pPrompt= do_GetService(NS_DEFAULTPROMPT_CONTRACTID, &rv);
    NS_ENSURE_SUCCESS(rv,rv);
    pPrompt->Alert(ToNewUnicode(pTitle), ToNewUnicode(pFaute));
    return NS_ERROR_FAILURE;
  }

  nsISOAPParameter ** pParameters;
  PRUint32 pTotal;
  rv = aResponse->GetParameters(PR_FALSE, &pTotal, &pParameters);
  NS_ENSURE_SUCCESS(rv,rv);
  if (pTotal!=1) {
    nsCOMPtr<nsIPrompt> pPrompt= do_GetService(NS_DEFAULTPROMPT_CONTRACTID, &rv);
    NS_ENSURE_SUCCESS(rv,rv);
    pPrompt->Alert(ToNewUnicode(NS_LITERAL_CSTRING("Erreur système")), ToNewUnicode(NS_LITERAL_CSTRING("Le nombre total de paramètres reçus est incorrect.")));
    return NS_ERROR_FAILURE;
  }

  nsAutoString pText;
  nsCOMArray<nsIVariant> pArray;
  nsCOMPtr<nsIWritableVariant> pVariant;
  PRUint32 pLsize=0, pCsize=0;
  PRUint32 pLineIndex, pColIndex;
  PRUint16 pNodeType;
  nsCOMPtr<nsIDOMElement> pResult;
  nsCOMPtr<nsIDOMNodeList> pLines, pValues;
  nsCOMPtr<nsIDOMNode> pLine, pValue, pContent;
  rv = pParameters[0]->GetElement(getter_AddRefs(pResult));
  NS_ENSURE_SUCCESS(rv,rv);
  rv = pResult->GetChildNodes(getter_AddRefs(pLines));
  NS_ENSURE_SUCCESS(rv,rv);
  pLines->GetLength(&pLsize);
  for (pLineIndex=0;pLineIndex<pLsize;pLineIndex++) {
    do {
      rv = pLines->Item(pLineIndex, getter_AddRefs(pLine));
      NS_ENSURE_SUCCESS(rv,rv);
      pLine->GetNodeType(&pNodeType);
      if (pNodeType!=nsIDOMNode::ELEMENT_NODE) pLineIndex++;
    } while (pLineIndex<pLsize && pNodeType!=nsIDOMNode::ELEMENT_NODE);
    if (pLineIndex>=pLsize) break;
    rv = pLine->GetChildNodes(getter_AddRefs(pValues));
    NS_ENSURE_SUCCESS(rv,rv);
    pValues->GetLength(&pCsize);
    for (pColIndex=0;pColIndex<pCsize;pColIndex++) {
      do {
        rv = pValues->Item(pColIndex, getter_AddRefs(pValue));
        NS_ENSURE_SUCCESS(rv,rv);
        pValue->GetNodeType(&pNodeType);
        if (pNodeType!=nsIDOMNode::ELEMENT_NODE) pColIndex++;
      } while (pColIndex<pCsize && pNodeType!=nsIDOMNode::ELEMENT_NODE);
      if (pColIndex>=pCsize) break;
      rv = pValue->GetFirstChild(getter_AddRefs(pContent));
      NS_ENSURE_SUCCESS(rv,rv);
      pVariant = do_CreateInstance(NS_VARIANT_CONTRACTID, &rv);
      NS_ENSURE_SUCCESS(rv,rv);
      if (pContent) {
        rv = pContent->GetNodeValue(pText);
        NS_ENSURE_SUCCESS(rv,rv);
        pVariant->SetAsAString(pText);
        printf("%s|",ToNewCString(pText));
      } else {
        pVariant->SetAsAString(NS_LITERAL_STRING(""));
      }
      rv = pArray.AppendObject(pVariant);
    }
  }
  rv = mComponent->TreatP0026(pArray, pLsize, pCsize, mKey);
  return rv;
}


/* Generated by Pygmalion */


NS_IMPL_ISUPPORTS1(mozListenerP0027, nsISOAPResponseListener)

mozListenerP0027::mozListenerP0027(mozC02gestsea* aComponent, const nsAString & aKey, const nsACString & aField1, const nsACString & aField2, const nsACString & aField3)
{
  mComponent = aComponent;
  mKey = aKey;
  mField1 = aField1;
  mField2 = aField2;
  mField3 = aField3;
}
mozListenerP0027::~mozListenerP0027()
{
}

NS_IMETHODIMP mozListenerP0027::HandleResponse(nsISOAPResponse *aResponse, nsISOAPCall *aCall, PRUint32 aStatus, PRBool aLast, PRBool *aReturn)
{
  nsresult rv;
  nsCOMPtr<nsISOAPFault> pFault;
  rv = aResponse->GetFault(getter_AddRefs(pFault));
  NS_ENSURE_SUCCESS(rv, rv);
  if (pFault) {
    nsAutoString pFaute, pDetail, pTitle;
    nsCOMPtr<nsIDOMElement> pTheDetail;
    nsCOMPtr<nsIDOMNode> pNode;
    rv = pFault->GetDetail(getter_AddRefs(pTheDetail));
    NS_ENSURE_SUCCESS(rv,rv);
    rv = pTheDetail->GetFirstChild(getter_AddRefs(pNode));
    NS_ENSURE_SUCCESS(rv,rv);
    if (pNode) {
      nsCOMPtr<nsIDOMNamedNodeMap> pAttributes;
      nsCOMPtr<nsIDOMNode> pAttribute, pFirstNode;
      nsAutoString pNodeValue;
      rv = pNode->GetFirstChild(getter_AddRefs(pFirstNode));
      NS_ENSURE_SUCCESS(rv,rv);
      if (pFirstNode) {
        pFirstNode->GetNodeValue(pNodeValue);
        NS_ENSURE_SUCCESS(rv,rv);
        pDetail  = pNodeValue;
      }
      pNode->GetAttributes(getter_AddRefs(pAttributes));
      NS_ENSURE_SUCCESS(rv,rv);
      pAttributes->GetNamedItem(NS_LITERAL_STRING("code"), getter_AddRefs(pAttribute));
      NS_ENSURE_SUCCESS(rv,rv);
      if (pAttribute) {
        pAttribute->GetNodeValue(pNodeValue);
        NS_ENSURE_SUCCESS(rv,rv);
        pDetail += NS_LITERAL_STRING("\n(Erreur ");
        pDetail += pNodeValue;
        pDetail += NS_LITERAL_STRING(")");
      }
    } else pDetail = NS_LITERAL_STRING("Erreur sans message.");
    pFaute = pDetail;
    rv = pFault->GetFaultString(pTitle);
    NS_ENSURE_SUCCESS(rv,rv);
    nsCOMPtr<nsIPrompt> pPrompt= do_GetService(NS_DEFAULTPROMPT_CONTRACTID, &rv);
    NS_ENSURE_SUCCESS(rv,rv);
    pPrompt->Alert(ToNewUnicode(pTitle), ToNewUnicode(pFaute));
    return NS_ERROR_FAILURE;
  }

  nsISOAPParameter ** pParameters;
  PRUint32 pTotal;
  rv = aResponse->GetParameters(PR_FALSE, &pTotal, &pParameters);
  NS_ENSURE_SUCCESS(rv,rv);
  if (pTotal!=1) {
    nsCOMPtr<nsIPrompt> pPrompt= do_GetService(NS_DEFAULTPROMPT_CONTRACTID, &rv);
    NS_ENSURE_SUCCESS(rv,rv);
    pPrompt->Alert(ToNewUnicode(NS_LITERAL_CSTRING("Erreur système")), ToNewUnicode(NS_LITERAL_CSTRING("Le nombre total de paramètres reçus est incorrect.")));
    return NS_ERROR_FAILURE;
  }

  nsAutoString pText;
  nsCOMPtr<nsIVariant> pValue;
  rv = pParameters[0]->GetValue(getter_AddRefs(pValue));
  NS_ENSURE_SUCCESS(rv,rv);
  rv = pValue->GetAsAString(pText);
  NS_ENSURE_SUCCESS(rv,rv);
  rv = mComponent->TreatP0027(pText, mKey, mField1, mField2, mField3);
  return rv;
}


/* Generated by Pygmalion */


NS_IMPL_ISUPPORTS1(mozListenerP0028, nsISOAPResponseListener)

mozListenerP0028::mozListenerP0028(mozC02gestsea* aComponent, const nsACString & aSearch)
{
  mComponent = aComponent;
  mSearch = aSearch;
}
mozListenerP0028::~mozListenerP0028()
{
}

NS_IMETHODIMP mozListenerP0028::HandleResponse(nsISOAPResponse *aResponse, nsISOAPCall *aCall, PRUint32 aStatus, PRBool aLast, PRBool *aReturn)
{
  nsresult rv;
  nsCOMPtr<nsISOAPFault> pFault;
  rv = aResponse->GetFault(getter_AddRefs(pFault));
  NS_ENSURE_SUCCESS(rv, rv);
  if (pFault) {
    nsAutoString pFaute, pDetail, pTitle;
    nsCOMPtr<nsIDOMElement> pTheDetail;
    nsCOMPtr<nsIDOMNode> pNode;
    rv = pFault->GetDetail(getter_AddRefs(pTheDetail));
    NS_ENSURE_SUCCESS(rv,rv);
    rv = pTheDetail->GetFirstChild(getter_AddRefs(pNode));
    NS_ENSURE_SUCCESS(rv,rv);
    if (pNode) {
      nsCOMPtr<nsIDOMNamedNodeMap> pAttributes;
      nsCOMPtr<nsIDOMNode> pAttribute, pFirstNode;
      nsAutoString pNodeValue;
      rv = pNode->GetFirstChild(getter_AddRefs(pFirstNode));
      NS_ENSURE_SUCCESS(rv,rv);
      if (pFirstNode) {
        pFirstNode->GetNodeValue(pNodeValue);
        NS_ENSURE_SUCCESS(rv,rv);
        pDetail  = pNodeValue;
      }
      pNode->GetAttributes(getter_AddRefs(pAttributes));
      NS_ENSURE_SUCCESS(rv,rv);
      pAttributes->GetNamedItem(NS_LITERAL_STRING("code"), getter_AddRefs(pAttribute));
      NS_ENSURE_SUCCESS(rv,rv);
      if (pAttribute) {
        pAttribute->GetNodeValue(pNodeValue);
        NS_ENSURE_SUCCESS(rv,rv);
        pDetail += NS_LITERAL_STRING("\n(Erreur ");
        pDetail += pNodeValue;
        pDetail += NS_LITERAL_STRING(")");
      }
    } else pDetail = NS_LITERAL_STRING("Erreur sans message.");
    pFaute = pDetail;
    rv = pFault->GetFaultString(pTitle);
    NS_ENSURE_SUCCESS(rv,rv);
    nsCOMPtr<nsIPrompt> pPrompt= do_GetService(NS_DEFAULTPROMPT_CONTRACTID, &rv);
    NS_ENSURE_SUCCESS(rv,rv);
    pPrompt->Alert(ToNewUnicode(pTitle), ToNewUnicode(pFaute));
    return NS_ERROR_FAILURE;
  }

  nsISOAPParameter ** pParameters;
  PRUint32 pTotal;
  rv = aResponse->GetParameters(PR_FALSE, &pTotal, &pParameters);
  NS_ENSURE_SUCCESS(rv,rv);
  if (pTotal!=1) {
    nsCOMPtr<nsIPrompt> pPrompt= do_GetService(NS_DEFAULTPROMPT_CONTRACTID, &rv);
    NS_ENSURE_SUCCESS(rv,rv);
    pPrompt->Alert(ToNewUnicode(NS_LITERAL_CSTRING("Erreur système")), ToNewUnicode(NS_LITERAL_CSTRING("Le nombre total de paramètres reçus est incorrect.")));
    return NS_ERROR_FAILURE;
  }

  nsAutoString pText;
  nsCOMArray<nsIVariant> pArray;
  nsCOMPtr<nsIWritableVariant> pVariant;
  PRUint32 pLsize=0, pCsize=0;
  PRUint32 pLineIndex, pColIndex;
  PRUint16 pNodeType;
  nsCOMPtr<nsIDOMElement> pResult;
  nsCOMPtr<nsIDOMNodeList> pLines, pValues;
  nsCOMPtr<nsIDOMNode> pLine, pValue, pContent;
  rv = pParameters[0]->GetElement(getter_AddRefs(pResult));
  NS_ENSURE_SUCCESS(rv,rv);
  rv = pResult->GetChildNodes(getter_AddRefs(pLines));
  NS_ENSURE_SUCCESS(rv,rv);
  pLines->GetLength(&pLsize);
  for (pLineIndex=0;pLineIndex<pLsize;pLineIndex++) {
    do {
      rv = pLines->Item(pLineIndex, getter_AddRefs(pLine));
      NS_ENSURE_SUCCESS(rv,rv);
      pLine->GetNodeType(&pNodeType);
      if (pNodeType!=nsIDOMNode::ELEMENT_NODE) pLineIndex++;
    } while (pLineIndex<pLsize && pNodeType!=nsIDOMNode::ELEMENT_NODE);
    if (pLineIndex>=pLsize) break;
    rv = pLine->GetChildNodes(getter_AddRefs(pValues));
    NS_ENSURE_SUCCESS(rv,rv);
    pValues->GetLength(&pCsize);
    for (pColIndex=0;pColIndex<pCsize;pColIndex++) {
      do {
        rv = pValues->Item(pColIndex, getter_AddRefs(pValue));
        NS_ENSURE_SUCCESS(rv,rv);
        pValue->GetNodeType(&pNodeType);
        if (pNodeType!=nsIDOMNode::ELEMENT_NODE) pColIndex++;
      } while (pColIndex<pCsize && pNodeType!=nsIDOMNode::ELEMENT_NODE);
      if (pColIndex>=pCsize) break;
      rv = pValue->GetFirstChild(getter_AddRefs(pContent));
      NS_ENSURE_SUCCESS(rv,rv);
      pVariant = do_CreateInstance(NS_VARIANT_CONTRACTID, &rv);
      NS_ENSURE_SUCCESS(rv,rv);
      if (pContent) {
        rv = pContent->GetNodeValue(pText);
        NS_ENSURE_SUCCESS(rv,rv);
        pVariant->SetAsAString(pText);
        printf("%s|",ToNewCString(pText));
      } else {
        pVariant->SetAsAString(NS_LITERAL_STRING(""));
      }
      rv = pArray.AppendObject(pVariant);
    }
  }
  rv = mComponent->TreatP0028(pArray, pLsize, pCsize, mSearch);
  return rv;
}


/* Generated by Pygmalion */


NS_IMPL_ISUPPORTS1(mozListenerP0029, nsISOAPResponseListener)

mozListenerP0029::mozListenerP0029(mozC02gestsea* aComponent, const nsACString & aSearch)
{
  mComponent = aComponent;
  mSearch = aSearch;
}
mozListenerP0029::~mozListenerP0029()
{
}

NS_IMETHODIMP mozListenerP0029::HandleResponse(nsISOAPResponse *aResponse, nsISOAPCall *aCall, PRUint32 aStatus, PRBool aLast, PRBool *aReturn)
{
  nsresult rv;
  nsCOMPtr<nsISOAPFault> pFault;
  rv = aResponse->GetFault(getter_AddRefs(pFault));
  NS_ENSURE_SUCCESS(rv, rv);
  if (pFault) {
    nsAutoString pFaute, pDetail, pTitle;
    nsCOMPtr<nsIDOMElement> pTheDetail;
    nsCOMPtr<nsIDOMNode> pNode;
    rv = pFault->GetDetail(getter_AddRefs(pTheDetail));
    NS_ENSURE_SUCCESS(rv,rv);
    rv = pTheDetail->GetFirstChild(getter_AddRefs(pNode));
    NS_ENSURE_SUCCESS(rv,rv);
    if (pNode) {
      nsCOMPtr<nsIDOMNamedNodeMap> pAttributes;
      nsCOMPtr<nsIDOMNode> pAttribute, pFirstNode;
      nsAutoString pNodeValue;
      rv = pNode->GetFirstChild(getter_AddRefs(pFirstNode));
      NS_ENSURE_SUCCESS(rv,rv);
      if (pFirstNode) {
        pFirstNode->GetNodeValue(pNodeValue);
        NS_ENSURE_SUCCESS(rv,rv);
        pDetail  = pNodeValue;
      }
      pNode->GetAttributes(getter_AddRefs(pAttributes));
      NS_ENSURE_SUCCESS(rv,rv);
      pAttributes->GetNamedItem(NS_LITERAL_STRING("code"), getter_AddRefs(pAttribute));
      NS_ENSURE_SUCCESS(rv,rv);
      if (pAttribute) {
        pAttribute->GetNodeValue(pNodeValue);
        NS_ENSURE_SUCCESS(rv,rv);
        pDetail += NS_LITERAL_STRING("\n(Erreur ");
        pDetail += pNodeValue;
        pDetail += NS_LITERAL_STRING(")");
      }
    } else pDetail = NS_LITERAL_STRING("Erreur sans message.");
    pFaute = pDetail;
    rv = pFault->GetFaultString(pTitle);
    NS_ENSURE_SUCCESS(rv,rv);
    nsCOMPtr<nsIPrompt> pPrompt= do_GetService(NS_DEFAULTPROMPT_CONTRACTID, &rv);
    NS_ENSURE_SUCCESS(rv,rv);
    pPrompt->Alert(ToNewUnicode(pTitle), ToNewUnicode(pFaute));
    return NS_ERROR_FAILURE;
  }

  nsISOAPParameter ** pParameters;
  PRUint32 pTotal;
  rv = aResponse->GetParameters(PR_FALSE, &pTotal, &pParameters);
  NS_ENSURE_SUCCESS(rv,rv);
  if (pTotal!=1) {
    nsCOMPtr<nsIPrompt> pPrompt= do_GetService(NS_DEFAULTPROMPT_CONTRACTID, &rv);
    NS_ENSURE_SUCCESS(rv,rv);
    pPrompt->Alert(ToNewUnicode(NS_LITERAL_CSTRING("Erreur système")), ToNewUnicode(NS_LITERAL_CSTRING("Le nombre total de paramètres reçus est incorrect.")));
    return NS_ERROR_FAILURE;
  }

  nsAutoString pText;
  nsCOMArray<nsIVariant> pArray;
  nsCOMPtr<nsIWritableVariant> pVariant;
  PRUint32 pLsize=0, pCsize=0;
  PRUint32 pLineIndex, pColIndex;
  PRUint16 pNodeType;
  nsCOMPtr<nsIDOMElement> pResult;
  nsCOMPtr<nsIDOMNodeList> pLines, pValues;
  nsCOMPtr<nsIDOMNode> pLine, pValue, pContent;
  rv = pParameters[0]->GetElement(getter_AddRefs(pResult));
  NS_ENSURE_SUCCESS(rv,rv);
  rv = pResult->GetChildNodes(getter_AddRefs(pLines));
  NS_ENSURE_SUCCESS(rv,rv);
  pLines->GetLength(&pLsize);
  for (pLineIndex=0;pLineIndex<pLsize;pLineIndex++) {
    do {
      rv = pLines->Item(pLineIndex, getter_AddRefs(pLine));
      NS_ENSURE_SUCCESS(rv,rv);
      pLine->GetNodeType(&pNodeType);
      if (pNodeType!=nsIDOMNode::ELEMENT_NODE) pLineIndex++;
    } while (pLineIndex<pLsize && pNodeType!=nsIDOMNode::ELEMENT_NODE);
    if (pLineIndex>=pLsize) break;
    rv = pLine->GetChildNodes(getter_AddRefs(pValues));
    NS_ENSURE_SUCCESS(rv,rv);
    pValues->GetLength(&pCsize);
    for (pColIndex=0;pColIndex<pCsize;pColIndex++) {
      do {
        rv = pValues->Item(pColIndex, getter_AddRefs(pValue));
        NS_ENSURE_SUCCESS(rv,rv);
        pValue->GetNodeType(&pNodeType);
        if (pNodeType!=nsIDOMNode::ELEMENT_NODE) pColIndex++;
      } while (pColIndex<pCsize && pNodeType!=nsIDOMNode::ELEMENT_NODE);
      if (pColIndex>=pCsize) break;
      rv = pValue->GetFirstChild(getter_AddRefs(pContent));
      NS_ENSURE_SUCCESS(rv,rv);
      pVariant = do_CreateInstance(NS_VARIANT_CONTRACTID, &rv);
      NS_ENSURE_SUCCESS(rv,rv);
      if (pContent) {
        rv = pContent->GetNodeValue(pText);
        NS_ENSURE_SUCCESS(rv,rv);
        pVariant->SetAsAString(pText);
        printf("%s|",ToNewCString(pText));
      } else {
        pVariant->SetAsAString(NS_LITERAL_STRING(""));
      }
      rv = pArray.AppendObject(pVariant);
    }
  }
  rv = mComponent->TreatP0029(pArray, pLsize, pCsize, mSearch);
  return rv;
}


/* Generated by Pygmalion */


NS_IMPL_ISUPPORTS1(mozListenerP002A, nsISOAPResponseListener)

mozListenerP002A::mozListenerP002A(mozC02gestsea* aComponent, const nsAString & aKey)
{
  mComponent = aComponent;
  mKey = aKey;
}
mozListenerP002A::~mozListenerP002A()
{
}

NS_IMETHODIMP mozListenerP002A::HandleResponse(nsISOAPResponse *aResponse, nsISOAPCall *aCall, PRUint32 aStatus, PRBool aLast, PRBool *aReturn)
{
  nsresult rv;
  nsCOMPtr<nsISOAPFault> pFault;
  rv = aResponse->GetFault(getter_AddRefs(pFault));
  NS_ENSURE_SUCCESS(rv, rv);
  if (pFault) {
    nsAutoString pFaute, pDetail, pTitle;
    nsCOMPtr<nsIDOMElement> pTheDetail;
    nsCOMPtr<nsIDOMNode> pNode;
    rv = pFault->GetDetail(getter_AddRefs(pTheDetail));
    NS_ENSURE_SUCCESS(rv,rv);
    rv = pTheDetail->GetFirstChild(getter_AddRefs(pNode));
    NS_ENSURE_SUCCESS(rv,rv);
    if (pNode) {
      nsCOMPtr<nsIDOMNamedNodeMap> pAttributes;
      nsCOMPtr<nsIDOMNode> pAttribute, pFirstNode;
      nsAutoString pNodeValue;
      rv = pNode->GetFirstChild(getter_AddRefs(pFirstNode));
      NS_ENSURE_SUCCESS(rv,rv);
      if (pFirstNode) {
        pFirstNode->GetNodeValue(pNodeValue);
        NS_ENSURE_SUCCESS(rv,rv);
        pDetail  = pNodeValue;
      }
      pNode->GetAttributes(getter_AddRefs(pAttributes));
      NS_ENSURE_SUCCESS(rv,rv);
      pAttributes->GetNamedItem(NS_LITERAL_STRING("code"), getter_AddRefs(pAttribute));
      NS_ENSURE_SUCCESS(rv,rv);
      if (pAttribute) {
        pAttribute->GetNodeValue(pNodeValue);
        NS_ENSURE_SUCCESS(rv,rv);
        pDetail += NS_LITERAL_STRING("\n(Erreur ");
        pDetail += pNodeValue;
        pDetail += NS_LITERAL_STRING(")");
      }
    } else pDetail = NS_LITERAL_STRING("Erreur sans message.");
    pFaute = pDetail;
    rv = pFault->GetFaultString(pTitle);
    NS_ENSURE_SUCCESS(rv,rv);
    nsCOMPtr<nsIPrompt> pPrompt= do_GetService(NS_DEFAULTPROMPT_CONTRACTID, &rv);
    NS_ENSURE_SUCCESS(rv,rv);
    pPrompt->Alert(ToNewUnicode(pTitle), ToNewUnicode(pFaute));
    return NS_ERROR_FAILURE;
  }

  nsISOAPParameter ** pParameters;
  PRUint32 pTotal;
  rv = aResponse->GetParameters(PR_FALSE, &pTotal, &pParameters);
  NS_ENSURE_SUCCESS(rv,rv);
  if (pTotal!=1) {
    nsCOMPtr<nsIPrompt> pPrompt= do_GetService(NS_DEFAULTPROMPT_CONTRACTID, &rv);
    NS_ENSURE_SUCCESS(rv,rv);
    pPrompt->Alert(ToNewUnicode(NS_LITERAL_CSTRING("Erreur système")), ToNewUnicode(NS_LITERAL_CSTRING("Le nombre total de paramètres reçus est incorrect.")));
    return NS_ERROR_FAILURE;
  }

  nsAutoString pText;
  nsCOMArray<nsIVariant> pArray;
  nsCOMPtr<nsIWritableVariant> pVariant;
  PRUint32 pLsize=0, pCsize=0;
  PRUint32 pLineIndex, pColIndex;
  PRUint16 pNodeType;
  nsCOMPtr<nsIDOMElement> pResult;
  nsCOMPtr<nsIDOMNodeList> pLines, pValues;
  nsCOMPtr<nsIDOMNode> pLine, pValue, pContent;
  rv = pParameters[0]->GetElement(getter_AddRefs(pResult));
  NS_ENSURE_SUCCESS(rv,rv);
  rv = pResult->GetChildNodes(getter_AddRefs(pLines));
  NS_ENSURE_SUCCESS(rv,rv);
  pLines->GetLength(&pLsize);
  for (pLineIndex=0;pLineIndex<pLsize;pLineIndex++) {
    do {
      rv = pLines->Item(pLineIndex, getter_AddRefs(pLine));
      NS_ENSURE_SUCCESS(rv,rv);
      pLine->GetNodeType(&pNodeType);
      if (pNodeType!=nsIDOMNode::ELEMENT_NODE) pLineIndex++;
    } while (pLineIndex<pLsize && pNodeType!=nsIDOMNode::ELEMENT_NODE);
    if (pLineIndex>=pLsize) break;
    rv = pLine->GetChildNodes(getter_AddRefs(pValues));
    NS_ENSURE_SUCCESS(rv,rv);
    pValues->GetLength(&pCsize);
    for (pColIndex=0;pColIndex<pCsize;pColIndex++) {
      do {
        rv = pValues->Item(pColIndex, getter_AddRefs(pValue));
        NS_ENSURE_SUCCESS(rv,rv);
        pValue->GetNodeType(&pNodeType);
        if (pNodeType!=nsIDOMNode::ELEMENT_NODE) pColIndex++;
      } while (pColIndex<pCsize && pNodeType!=nsIDOMNode::ELEMENT_NODE);
      if (pColIndex>=pCsize) break;
      rv = pValue->GetFirstChild(getter_AddRefs(pContent));
      NS_ENSURE_SUCCESS(rv,rv);
      pVariant = do_CreateInstance(NS_VARIANT_CONTRACTID, &rv);
      NS_ENSURE_SUCCESS(rv,rv);
      if (pContent) {
        rv = pContent->GetNodeValue(pText);
        NS_ENSURE_SUCCESS(rv,rv);
        pVariant->SetAsAString(pText);
        printf("%s|",ToNewCString(pText));
      } else {
        pVariant->SetAsAString(NS_LITERAL_STRING(""));
      }
      rv = pArray.AppendObject(pVariant);
    }
  }
  rv = mComponent->TreatP002A(pArray, pLsize, pCsize, mKey);
  return rv;
}


/* Generated by Pygmalion */


NS_IMPL_ISUPPORTS1(mozListenerP002B, nsISOAPResponseListener)

mozListenerP002B::mozListenerP002B(mozC02gestsea* aComponent, const nsACString & aSearch)
{
  mComponent = aComponent;
  mSearch = aSearch;
}
mozListenerP002B::~mozListenerP002B()
{
}

NS_IMETHODIMP mozListenerP002B::HandleResponse(nsISOAPResponse *aResponse, nsISOAPCall *aCall, PRUint32 aStatus, PRBool aLast, PRBool *aReturn)
{
  nsresult rv;
  nsCOMPtr<nsISOAPFault> pFault;
  rv = aResponse->GetFault(getter_AddRefs(pFault));
  NS_ENSURE_SUCCESS(rv, rv);
  if (pFault) {
    nsAutoString pFaute, pDetail, pTitle;
    nsCOMPtr<nsIDOMElement> pTheDetail;
    nsCOMPtr<nsIDOMNode> pNode;
    rv = pFault->GetDetail(getter_AddRefs(pTheDetail));
    NS_ENSURE_SUCCESS(rv,rv);
    rv = pTheDetail->GetFirstChild(getter_AddRefs(pNode));
    NS_ENSURE_SUCCESS(rv,rv);
    if (pNode) {
      nsCOMPtr<nsIDOMNamedNodeMap> pAttributes;
      nsCOMPtr<nsIDOMNode> pAttribute, pFirstNode;
      nsAutoString pNodeValue;
      rv = pNode->GetFirstChild(getter_AddRefs(pFirstNode));
      NS_ENSURE_SUCCESS(rv,rv);
      if (pFirstNode) {
        pFirstNode->GetNodeValue(pNodeValue);
        NS_ENSURE_SUCCESS(rv,rv);
        pDetail  = pNodeValue;
      }
      pNode->GetAttributes(getter_AddRefs(pAttributes));
      NS_ENSURE_SUCCESS(rv,rv);
      pAttributes->GetNamedItem(NS_LITERAL_STRING("code"), getter_AddRefs(pAttribute));
      NS_ENSURE_SUCCESS(rv,rv);
      if (pAttribute) {
        pAttribute->GetNodeValue(pNodeValue);
        NS_ENSURE_SUCCESS(rv,rv);
        pDetail += NS_LITERAL_STRING("\n(Erreur ");
        pDetail += pNodeValue;
        pDetail += NS_LITERAL_STRING(")");
      }
    } else pDetail = NS_LITERAL_STRING("Erreur sans message.");
    pFaute = pDetail;
    rv = pFault->GetFaultString(pTitle);
    NS_ENSURE_SUCCESS(rv,rv);
    nsCOMPtr<nsIPrompt> pPrompt= do_GetService(NS_DEFAULTPROMPT_CONTRACTID, &rv);
    NS_ENSURE_SUCCESS(rv,rv);
    pPrompt->Alert(ToNewUnicode(pTitle), ToNewUnicode(pFaute));
    return NS_ERROR_FAILURE;
  }

  nsISOAPParameter ** pParameters;
  PRUint32 pTotal;
  rv = aResponse->GetParameters(PR_FALSE, &pTotal, &pParameters);
  NS_ENSURE_SUCCESS(rv,rv);
  if (pTotal!=1) {
    nsCOMPtr<nsIPrompt> pPrompt= do_GetService(NS_DEFAULTPROMPT_CONTRACTID, &rv);
    NS_ENSURE_SUCCESS(rv,rv);
    pPrompt->Alert(ToNewUnicode(NS_LITERAL_CSTRING("Erreur système")), ToNewUnicode(NS_LITERAL_CSTRING("Le nombre total de paramètres reçus est incorrect.")));
    return NS_ERROR_FAILURE;
  }

  nsAutoString pText;
  nsCOMArray<nsIVariant> pArray;
  nsCOMPtr<nsIWritableVariant> pVariant;
  PRUint32 pLsize=0, pCsize=0;
  PRUint32 pLineIndex, pColIndex;
  PRUint16 pNodeType;
  nsCOMPtr<nsIDOMElement> pResult;
  nsCOMPtr<nsIDOMNodeList> pLines, pValues;
  nsCOMPtr<nsIDOMNode> pLine, pValue, pContent;
  rv = pParameters[0]->GetElement(getter_AddRefs(pResult));
  NS_ENSURE_SUCCESS(rv,rv);
  rv = pResult->GetChildNodes(getter_AddRefs(pLines));
  NS_ENSURE_SUCCESS(rv,rv);
  pLines->GetLength(&pLsize);
  for (pLineIndex=0;pLineIndex<pLsize;pLineIndex++) {
    do {
      rv = pLines->Item(pLineIndex, getter_AddRefs(pLine));
      NS_ENSURE_SUCCESS(rv,rv);
      pLine->GetNodeType(&pNodeType);
      if (pNodeType!=nsIDOMNode::ELEMENT_NODE) pLineIndex++;
    } while (pLineIndex<pLsize && pNodeType!=nsIDOMNode::ELEMENT_NODE);
    if (pLineIndex>=pLsize) break;
    rv = pLine->GetChildNodes(getter_AddRefs(pValues));
    NS_ENSURE_SUCCESS(rv,rv);
    pValues->GetLength(&pCsize);
    for (pColIndex=0;pColIndex<pCsize;pColIndex++) {
      do {
        rv = pValues->Item(pColIndex, getter_AddRefs(pValue));
        NS_ENSURE_SUCCESS(rv,rv);
        pValue->GetNodeType(&pNodeType);
        if (pNodeType!=nsIDOMNode::ELEMENT_NODE) pColIndex++;
      } while (pColIndex<pCsize && pNodeType!=nsIDOMNode::ELEMENT_NODE);
      if (pColIndex>=pCsize) break;
      rv = pValue->GetFirstChild(getter_AddRefs(pContent));
      NS_ENSURE_SUCCESS(rv,rv);
      pVariant = do_CreateInstance(NS_VARIANT_CONTRACTID, &rv);
      NS_ENSURE_SUCCESS(rv,rv);
      if (pContent) {
        rv = pContent->GetNodeValue(pText);
        NS_ENSURE_SUCCESS(rv,rv);
        pVariant->SetAsAString(pText);
        printf("%s|",ToNewCString(pText));
      } else {
        pVariant->SetAsAString(NS_LITERAL_STRING(""));
      }
      rv = pArray.AppendObject(pVariant);
    }
  }
  rv = mComponent->TreatP002B(pArray, pLsize, pCsize, mSearch);
  return rv;
}


/* Generated by Pygmalion */


NS_IMPL_ISUPPORTS1(mozListenerP002C, nsISOAPResponseListener)

mozListenerP002C::mozListenerP002C(mozC02gestsea* aComponent, const nsACString & aSearch)
{
  mComponent = aComponent;
  mSearch = aSearch;
}
mozListenerP002C::~mozListenerP002C()
{
}

NS_IMETHODIMP mozListenerP002C::HandleResponse(nsISOAPResponse *aResponse, nsISOAPCall *aCall, PRUint32 aStatus, PRBool aLast, PRBool *aReturn)
{
  nsresult rv;
  nsCOMPtr<nsISOAPFault> pFault;
  rv = aResponse->GetFault(getter_AddRefs(pFault));
  NS_ENSURE_SUCCESS(rv, rv);
  if (pFault) {
    nsAutoString pFaute, pDetail, pTitle;
    nsCOMPtr<nsIDOMElement> pTheDetail;
    nsCOMPtr<nsIDOMNode> pNode;
    rv = pFault->GetDetail(getter_AddRefs(pTheDetail));
    NS_ENSURE_SUCCESS(rv,rv);
    rv = pTheDetail->GetFirstChild(getter_AddRefs(pNode));
    NS_ENSURE_SUCCESS(rv,rv);
    if (pNode) {
      nsCOMPtr<nsIDOMNamedNodeMap> pAttributes;
      nsCOMPtr<nsIDOMNode> pAttribute, pFirstNode;
      nsAutoString pNodeValue;
      rv = pNode->GetFirstChild(getter_AddRefs(pFirstNode));
      NS_ENSURE_SUCCESS(rv,rv);
      if (pFirstNode) {
        pFirstNode->GetNodeValue(pNodeValue);
        NS_ENSURE_SUCCESS(rv,rv);
        pDetail  = pNodeValue;
      }
      pNode->GetAttributes(getter_AddRefs(pAttributes));
      NS_ENSURE_SUCCESS(rv,rv);
      pAttributes->GetNamedItem(NS_LITERAL_STRING("code"), getter_AddRefs(pAttribute));
      NS_ENSURE_SUCCESS(rv,rv);
      if (pAttribute) {
        pAttribute->GetNodeValue(pNodeValue);
        NS_ENSURE_SUCCESS(rv,rv);
        pDetail += NS_LITERAL_STRING("\n(Erreur ");
        pDetail += pNodeValue;
        pDetail += NS_LITERAL_STRING(")");
      }
    } else pDetail = NS_LITERAL_STRING("Erreur sans message.");
    pFaute = pDetail;
    rv = pFault->GetFaultString(pTitle);
    NS_ENSURE_SUCCESS(rv,rv);
    nsCOMPtr<nsIPrompt> pPrompt= do_GetService(NS_DEFAULTPROMPT_CONTRACTID, &rv);
    NS_ENSURE_SUCCESS(rv,rv);
    pPrompt->Alert(ToNewUnicode(pTitle), ToNewUnicode(pFaute));
    return NS_ERROR_FAILURE;
  }

  nsISOAPParameter ** pParameters;
  PRUint32 pTotal;
  rv = aResponse->GetParameters(PR_FALSE, &pTotal, &pParameters);
  NS_ENSURE_SUCCESS(rv,rv);
  if (pTotal!=1) {
    nsCOMPtr<nsIPrompt> pPrompt= do_GetService(NS_DEFAULTPROMPT_CONTRACTID, &rv);
    NS_ENSURE_SUCCESS(rv,rv);
    pPrompt->Alert(ToNewUnicode(NS_LITERAL_CSTRING("Erreur système")), ToNewUnicode(NS_LITERAL_CSTRING("Le nombre total de paramètres reçus est incorrect.")));
    return NS_ERROR_FAILURE;
  }

  nsAutoString pText;
  nsCOMArray<nsIVariant> pArray;
  nsCOMPtr<nsIWritableVariant> pVariant;
  PRUint32 pLsize=0, pCsize=0;
  PRUint32 pLineIndex, pColIndex;
  PRUint16 pNodeType;
  nsCOMPtr<nsIDOMElement> pResult;
  nsCOMPtr<nsIDOMNodeList> pLines, pValues;
  nsCOMPtr<nsIDOMNode> pLine, pValue, pContent;
  rv = pParameters[0]->GetElement(getter_AddRefs(pResult));
  NS_ENSURE_SUCCESS(rv,rv);
  rv = pResult->GetChildNodes(getter_AddRefs(pLines));
  NS_ENSURE_SUCCESS(rv,rv);
  pLines->GetLength(&pLsize);
  for (pLineIndex=0;pLineIndex<pLsize;pLineIndex++) {
    do {
      rv = pLines->Item(pLineIndex, getter_AddRefs(pLine));
      NS_ENSURE_SUCCESS(rv,rv);
      pLine->GetNodeType(&pNodeType);
      if (pNodeType!=nsIDOMNode::ELEMENT_NODE) pLineIndex++;
    } while (pLineIndex<pLsize && pNodeType!=nsIDOMNode::ELEMENT_NODE);
    if (pLineIndex>=pLsize) break;
    rv = pLine->GetChildNodes(getter_AddRefs(pValues));
    NS_ENSURE_SUCCESS(rv,rv);
    pValues->GetLength(&pCsize);
    for (pColIndex=0;pColIndex<pCsize;pColIndex++) {
      do {
        rv = pValues->Item(pColIndex, getter_AddRefs(pValue));
        NS_ENSURE_SUCCESS(rv,rv);
        pValue->GetNodeType(&pNodeType);
        if (pNodeType!=nsIDOMNode::ELEMENT_NODE) pColIndex++;
      } while (pColIndex<pCsize && pNodeType!=nsIDOMNode::ELEMENT_NODE);
      if (pColIndex>=pCsize) break;
      rv = pValue->GetFirstChild(getter_AddRefs(pContent));
      NS_ENSURE_SUCCESS(rv,rv);
      pVariant = do_CreateInstance(NS_VARIANT_CONTRACTID, &rv);
      NS_ENSURE_SUCCESS(rv,rv);
      if (pContent) {
        rv = pContent->GetNodeValue(pText);
        NS_ENSURE_SUCCESS(rv,rv);
        pVariant->SetAsAString(pText);
        printf("%s|",ToNewCString(pText));
      } else {
        pVariant->SetAsAString(NS_LITERAL_STRING(""));
      }
      rv = pArray.AppendObject(pVariant);
    }
  }
  rv = mComponent->TreatP002C(pArray, pLsize, pCsize, mSearch);
  return rv;
}


/* Generated by Pygmalion */


NS_IMPL_ISUPPORTS1(mozListenerP002D, nsISOAPResponseListener)

mozListenerP002D::mozListenerP002D(mozC02gestsea* aComponent, const nsAString & aKey)
{
  mComponent = aComponent;
  mKey = aKey;
}
mozListenerP002D::~mozListenerP002D()
{
}

NS_IMETHODIMP mozListenerP002D::HandleResponse(nsISOAPResponse *aResponse, nsISOAPCall *aCall, PRUint32 aStatus, PRBool aLast, PRBool *aReturn)
{
  nsresult rv;
  nsCOMPtr<nsISOAPFault> pFault;
  rv = aResponse->GetFault(getter_AddRefs(pFault));
  NS_ENSURE_SUCCESS(rv, rv);
  if (pFault) {
    nsAutoString pFaute, pDetail, pTitle;
    nsCOMPtr<nsIDOMElement> pTheDetail;
    nsCOMPtr<nsIDOMNode> pNode;
    rv = pFault->GetDetail(getter_AddRefs(pTheDetail));
    NS_ENSURE_SUCCESS(rv,rv);
    rv = pTheDetail->GetFirstChild(getter_AddRefs(pNode));
    NS_ENSURE_SUCCESS(rv,rv);
    if (pNode) {
      nsCOMPtr<nsIDOMNamedNodeMap> pAttributes;
      nsCOMPtr<nsIDOMNode> pAttribute, pFirstNode;
      nsAutoString pNodeValue;
      rv = pNode->GetFirstChild(getter_AddRefs(pFirstNode));
      NS_ENSURE_SUCCESS(rv,rv);
      if (pFirstNode) {
        pFirstNode->GetNodeValue(pNodeValue);
        NS_ENSURE_SUCCESS(rv,rv);
        pDetail  = pNodeValue;
      }
      pNode->GetAttributes(getter_AddRefs(pAttributes));
      NS_ENSURE_SUCCESS(rv,rv);
      pAttributes->GetNamedItem(NS_LITERAL_STRING("code"), getter_AddRefs(pAttribute));
      NS_ENSURE_SUCCESS(rv,rv);
      if (pAttribute) {
        pAttribute->GetNodeValue(pNodeValue);
        NS_ENSURE_SUCCESS(rv,rv);
        pDetail += NS_LITERAL_STRING("\n(Erreur ");
        pDetail += pNodeValue;
        pDetail += NS_LITERAL_STRING(")");
      }
    } else pDetail = NS_LITERAL_STRING("Erreur sans message.");
    pFaute = pDetail;
    rv = pFault->GetFaultString(pTitle);
    NS_ENSURE_SUCCESS(rv,rv);
    nsCOMPtr<nsIPrompt> pPrompt= do_GetService(NS_DEFAULTPROMPT_CONTRACTID, &rv);
    NS_ENSURE_SUCCESS(rv,rv);
    pPrompt->Alert(ToNewUnicode(pTitle), ToNewUnicode(pFaute));
    return NS_ERROR_FAILURE;
  }

  nsISOAPParameter ** pParameters;
  PRUint32 pTotal;
  rv = aResponse->GetParameters(PR_FALSE, &pTotal, &pParameters);
  NS_ENSURE_SUCCESS(rv,rv);
  if (pTotal!=1) {
    nsCOMPtr<nsIPrompt> pPrompt= do_GetService(NS_DEFAULTPROMPT_CONTRACTID, &rv);
    NS_ENSURE_SUCCESS(rv,rv);
    pPrompt->Alert(ToNewUnicode(NS_LITERAL_CSTRING("Erreur système")), ToNewUnicode(NS_LITERAL_CSTRING("Le nombre total de paramètres reçus est incorrect.")));
    return NS_ERROR_FAILURE;
  }

  nsAutoString pText;
  nsCOMArray<nsIVariant> pArray;
  nsCOMPtr<nsIWritableVariant> pVariant;
  PRUint32 pLsize=0, pCsize=0;
  PRUint32 pLineIndex, pColIndex;
  PRUint16 pNodeType;
  nsCOMPtr<nsIDOMElement> pResult;
  nsCOMPtr<nsIDOMNodeList> pLines, pValues;
  nsCOMPtr<nsIDOMNode> pLine, pValue, pContent;
  rv = pParameters[0]->GetElement(getter_AddRefs(pResult));
  NS_ENSURE_SUCCESS(rv,rv);
  rv = pResult->GetChildNodes(getter_AddRefs(pLines));
  NS_ENSURE_SUCCESS(rv,rv);
  pLines->GetLength(&pLsize);
  for (pLineIndex=0;pLineIndex<pLsize;pLineIndex++) {
    do {
      rv = pLines->Item(pLineIndex, getter_AddRefs(pLine));
      NS_ENSURE_SUCCESS(rv,rv);
      pLine->GetNodeType(&pNodeType);
      if (pNodeType!=nsIDOMNode::ELEMENT_NODE) pLineIndex++;
    } while (pLineIndex<pLsize && pNodeType!=nsIDOMNode::ELEMENT_NODE);
    if (pLineIndex>=pLsize) break;
    rv = pLine->GetChildNodes(getter_AddRefs(pValues));
    NS_ENSURE_SUCCESS(rv,rv);
    pValues->GetLength(&pCsize);
    for (pColIndex=0;pColIndex<pCsize;pColIndex++) {
      do {
        rv = pValues->Item(pColIndex, getter_AddRefs(pValue));
        NS_ENSURE_SUCCESS(rv,rv);
        pValue->GetNodeType(&pNodeType);
        if (pNodeType!=nsIDOMNode::ELEMENT_NODE) pColIndex++;
      } while (pColIndex<pCsize && pNodeType!=nsIDOMNode::ELEMENT_NODE);
      if (pColIndex>=pCsize) break;
      rv = pValue->GetFirstChild(getter_AddRefs(pContent));
      NS_ENSURE_SUCCESS(rv,rv);
      pVariant = do_CreateInstance(NS_VARIANT_CONTRACTID, &rv);
      NS_ENSURE_SUCCESS(rv,rv);
      if (pContent) {
        rv = pContent->GetNodeValue(pText);
        NS_ENSURE_SUCCESS(rv,rv);
        pVariant->SetAsAString(pText);
        printf("%s|",ToNewCString(pText));
      } else {
        pVariant->SetAsAString(NS_LITERAL_STRING(""));
      }
      rv = pArray.AppendObject(pVariant);
    }
  }
  rv = mComponent->TreatP002D(pArray, pLsize, pCsize, mKey);
  return rv;
}


/* Generated by Pygmalion */


NS_IMPL_ISUPPORTS1(mozListenerP002E, nsISOAPResponseListener)

mozListenerP002E::mozListenerP002E(mozC02gestsea* aComponent, const nsAString & aKey, const nsACString & aField1, const nsACString & aField2, const nsACString & aField3)
{
  mComponent = aComponent;
  mKey = aKey;
  mField1 = aField1;
  mField2 = aField2;
  mField3 = aField3;
}
mozListenerP002E::~mozListenerP002E()
{
}

NS_IMETHODIMP mozListenerP002E::HandleResponse(nsISOAPResponse *aResponse, nsISOAPCall *aCall, PRUint32 aStatus, PRBool aLast, PRBool *aReturn)
{
  nsresult rv;
  nsCOMPtr<nsISOAPFault> pFault;
  rv = aResponse->GetFault(getter_AddRefs(pFault));
  NS_ENSURE_SUCCESS(rv, rv);
  if (pFault) {
    nsAutoString pFaute, pDetail, pTitle;
    nsCOMPtr<nsIDOMElement> pTheDetail;
    nsCOMPtr<nsIDOMNode> pNode;
    rv = pFault->GetDetail(getter_AddRefs(pTheDetail));
    NS_ENSURE_SUCCESS(rv,rv);
    rv = pTheDetail->GetFirstChild(getter_AddRefs(pNode));
    NS_ENSURE_SUCCESS(rv,rv);
    if (pNode) {
      nsCOMPtr<nsIDOMNamedNodeMap> pAttributes;
      nsCOMPtr<nsIDOMNode> pAttribute, pFirstNode;
      nsAutoString pNodeValue;
      rv = pNode->GetFirstChild(getter_AddRefs(pFirstNode));
      NS_ENSURE_SUCCESS(rv,rv);
      if (pFirstNode) {
        pFirstNode->GetNodeValue(pNodeValue);
        NS_ENSURE_SUCCESS(rv,rv);
        pDetail  = pNodeValue;
      }
      pNode->GetAttributes(getter_AddRefs(pAttributes));
      NS_ENSURE_SUCCESS(rv,rv);
      pAttributes->GetNamedItem(NS_LITERAL_STRING("code"), getter_AddRefs(pAttribute));
      NS_ENSURE_SUCCESS(rv,rv);
      if (pAttribute) {
        pAttribute->GetNodeValue(pNodeValue);
        NS_ENSURE_SUCCESS(rv,rv);
        pDetail += NS_LITERAL_STRING("\n(Erreur ");
        pDetail += pNodeValue;
        pDetail += NS_LITERAL_STRING(")");
      }
    } else pDetail = NS_LITERAL_STRING("Erreur sans message.");
    pFaute = pDetail;
    rv = pFault->GetFaultString(pTitle);
    NS_ENSURE_SUCCESS(rv,rv);
    nsCOMPtr<nsIPrompt> pPrompt= do_GetService(NS_DEFAULTPROMPT_CONTRACTID, &rv);
    NS_ENSURE_SUCCESS(rv,rv);
    pPrompt->Alert(ToNewUnicode(pTitle), ToNewUnicode(pFaute));
    return NS_ERROR_FAILURE;
  }

  nsISOAPParameter ** pParameters;
  PRUint32 pTotal;
  rv = aResponse->GetParameters(PR_FALSE, &pTotal, &pParameters);
  NS_ENSURE_SUCCESS(rv,rv);
  if (pTotal!=1) {
    nsCOMPtr<nsIPrompt> pPrompt= do_GetService(NS_DEFAULTPROMPT_CONTRACTID, &rv);
    NS_ENSURE_SUCCESS(rv,rv);
    pPrompt->Alert(ToNewUnicode(NS_LITERAL_CSTRING("Erreur système")), ToNewUnicode(NS_LITERAL_CSTRING("Le nombre total de paramètres reçus est incorrect.")));
    return NS_ERROR_FAILURE;
  }

  nsAutoString pText;
  nsCOMPtr<nsIVariant> pValue;
  rv = pParameters[0]->GetValue(getter_AddRefs(pValue));
  NS_ENSURE_SUCCESS(rv,rv);
  rv = pValue->GetAsAString(pText);
  NS_ENSURE_SUCCESS(rv,rv);
  rv = mComponent->TreatP002E(pText, mKey, mField1, mField2, mField3);
  return rv;
}


/* Generated by Pygmalion */


NS_IMPL_ISUPPORTS1(mozListenerP002F, nsISOAPResponseListener)

mozListenerP002F::mozListenerP002F(mozC02gestsea* aComponent)
{
  mComponent = aComponent;
}
mozListenerP002F::~mozListenerP002F()
{
}

NS_IMETHODIMP mozListenerP002F::HandleResponse(nsISOAPResponse *aResponse, nsISOAPCall *aCall, PRUint32 aStatus, PRBool aLast, PRBool *aReturn)
{
  nsresult rv;
  nsCOMPtr<nsISOAPFault> pFault;
  rv = aResponse->GetFault(getter_AddRefs(pFault));
  NS_ENSURE_SUCCESS(rv, rv);
  if (pFault) {
    nsAutoString pFaute, pDetail, pTitle;
    nsCOMPtr<nsIDOMElement> pTheDetail;
    nsCOMPtr<nsIDOMNode> pNode;
    rv = pFault->GetDetail(getter_AddRefs(pTheDetail));
    NS_ENSURE_SUCCESS(rv,rv);
    rv = pTheDetail->GetFirstChild(getter_AddRefs(pNode));
    NS_ENSURE_SUCCESS(rv,rv);
    if (pNode) {
      nsCOMPtr<nsIDOMNamedNodeMap> pAttributes;
      nsCOMPtr<nsIDOMNode> pAttribute, pFirstNode;
      nsAutoString pNodeValue;
      rv = pNode->GetFirstChild(getter_AddRefs(pFirstNode));
      NS_ENSURE_SUCCESS(rv,rv);
      if (pFirstNode) {
        pFirstNode->GetNodeValue(pNodeValue);
        NS_ENSURE_SUCCESS(rv,rv);
        pDetail  = pNodeValue;
      }
      pNode->GetAttributes(getter_AddRefs(pAttributes));
      NS_ENSURE_SUCCESS(rv,rv);
      pAttributes->GetNamedItem(NS_LITERAL_STRING("code"), getter_AddRefs(pAttribute));
      NS_ENSURE_SUCCESS(rv,rv);
      if (pAttribute) {
        pAttribute->GetNodeValue(pNodeValue);
        NS_ENSURE_SUCCESS(rv,rv);
        pDetail += NS_LITERAL_STRING("\n(Erreur ");
        pDetail += pNodeValue;
        pDetail += NS_LITERAL_STRING(")");
      }
    } else pDetail = NS_LITERAL_STRING("Erreur sans message.");
    pFaute = pDetail;
    rv = pFault->GetFaultString(pTitle);
    NS_ENSURE_SUCCESS(rv,rv);
    nsCOMPtr<nsIPrompt> pPrompt= do_GetService(NS_DEFAULTPROMPT_CONTRACTID, &rv);
    NS_ENSURE_SUCCESS(rv,rv);
    pPrompt->Alert(ToNewUnicode(pTitle), ToNewUnicode(pFaute));
    return NS_ERROR_FAILURE;
  }

  nsISOAPParameter ** pParameters;
  PRUint32 pTotal;
  rv = aResponse->GetParameters(PR_FALSE, &pTotal, &pParameters);
  NS_ENSURE_SUCCESS(rv,rv);
  if (pTotal!=1) {
    nsCOMPtr<nsIPrompt> pPrompt= do_GetService(NS_DEFAULTPROMPT_CONTRACTID, &rv);
    NS_ENSURE_SUCCESS(rv,rv);
    pPrompt->Alert(ToNewUnicode(NS_LITERAL_CSTRING("Erreur système")), ToNewUnicode(NS_LITERAL_CSTRING("Le nombre total de paramètres reçus est incorrect.")));
    return NS_ERROR_FAILURE;
  }

  nsAutoString pText;
  nsCOMArray<nsIVariant> pArray;
  nsCOMPtr<nsIWritableVariant> pVariant;
  PRUint32 pLsize=0, pCsize=0;
  PRUint32 pLineIndex, pColIndex;
  PRUint16 pNodeType;
  nsCOMPtr<nsIDOMElement> pResult;
  nsCOMPtr<nsIDOMNodeList> pLines, pValues;
  nsCOMPtr<nsIDOMNode> pLine, pValue, pContent;
  rv = pParameters[0]->GetElement(getter_AddRefs(pResult));
  NS_ENSURE_SUCCESS(rv,rv);
  rv = pResult->GetChildNodes(getter_AddRefs(pLines));
  NS_ENSURE_SUCCESS(rv,rv);
  pLines->GetLength(&pLsize);
  for (pLineIndex=0;pLineIndex<pLsize;pLineIndex++) {
    do {
      rv = pLines->Item(pLineIndex, getter_AddRefs(pLine));
      NS_ENSURE_SUCCESS(rv,rv);
      pLine->GetNodeType(&pNodeType);
      if (pNodeType!=nsIDOMNode::ELEMENT_NODE) pLineIndex++;
    } while (pLineIndex<pLsize && pNodeType!=nsIDOMNode::ELEMENT_NODE);
    if (pLineIndex>=pLsize) break;
    rv = pLine->GetChildNodes(getter_AddRefs(pValues));
    NS_ENSURE_SUCCESS(rv,rv);
    pValues->GetLength(&pCsize);
    for (pColIndex=0;pColIndex<pCsize;pColIndex++) {
      do {
        rv = pValues->Item(pColIndex, getter_AddRefs(pValue));
        NS_ENSURE_SUCCESS(rv,rv);
        pValue->GetNodeType(&pNodeType);
        if (pNodeType!=nsIDOMNode::ELEMENT_NODE) pColIndex++;
      } while (pColIndex<pCsize && pNodeType!=nsIDOMNode::ELEMENT_NODE);
      if (pColIndex>=pCsize) break;
      rv = pValue->GetFirstChild(getter_AddRefs(pContent));
      NS_ENSURE_SUCCESS(rv,rv);
      pVariant = do_CreateInstance(NS_VARIANT_CONTRACTID, &rv);
      NS_ENSURE_SUCCESS(rv,rv);
      if (pContent) {
        rv = pContent->GetNodeValue(pText);
        NS_ENSURE_SUCCESS(rv,rv);
        pVariant->SetAsAString(pText);
        printf("%s|",ToNewCString(pText));
      } else {
        pVariant->SetAsAString(NS_LITERAL_STRING(""));
      }
      rv = pArray.AppendObject(pVariant);
    }
  }
  rv = mComponent->TreatP002F(pArray, pLsize, pCsize);
  return rv;
}


/* Generated by Pygmalion */


NS_IMPL_ISUPPORTS1(mozListenerP0030, nsISOAPResponseListener)

mozListenerP0030::mozListenerP0030(mozC02gestsea* aComponent, const nsAString & aKey)
{
  mComponent = aComponent;
  mKey = aKey;
}
mozListenerP0030::~mozListenerP0030()
{
}

NS_IMETHODIMP mozListenerP0030::HandleResponse(nsISOAPResponse *aResponse, nsISOAPCall *aCall, PRUint32 aStatus, PRBool aLast, PRBool *aReturn)
{
  nsresult rv;
  nsCOMPtr<nsISOAPFault> pFault;
  rv = aResponse->GetFault(getter_AddRefs(pFault));
  NS_ENSURE_SUCCESS(rv, rv);
  if (pFault) {
    nsAutoString pFaute, pDetail, pTitle;
    nsCOMPtr<nsIDOMElement> pTheDetail;
    nsCOMPtr<nsIDOMNode> pNode;
    rv = pFault->GetDetail(getter_AddRefs(pTheDetail));
    NS_ENSURE_SUCCESS(rv,rv);
    rv = pTheDetail->GetFirstChild(getter_AddRefs(pNode));
    NS_ENSURE_SUCCESS(rv,rv);
    if (pNode) {
      nsCOMPtr<nsIDOMNamedNodeMap> pAttributes;
      nsCOMPtr<nsIDOMNode> pAttribute, pFirstNode;
      nsAutoString pNodeValue;
      rv = pNode->GetFirstChild(getter_AddRefs(pFirstNode));
      NS_ENSURE_SUCCESS(rv,rv);
      if (pFirstNode) {
        pFirstNode->GetNodeValue(pNodeValue);
        NS_ENSURE_SUCCESS(rv,rv);
        pDetail  = pNodeValue;
      }
      pNode->GetAttributes(getter_AddRefs(pAttributes));
      NS_ENSURE_SUCCESS(rv,rv);
      pAttributes->GetNamedItem(NS_LITERAL_STRING("code"), getter_AddRefs(pAttribute));
      NS_ENSURE_SUCCESS(rv,rv);
      if (pAttribute) {
        pAttribute->GetNodeValue(pNodeValue);
        NS_ENSURE_SUCCESS(rv,rv);
        pDetail += NS_LITERAL_STRING("\n(Erreur ");
        pDetail += pNodeValue;
        pDetail += NS_LITERAL_STRING(")");
      }
    } else pDetail = NS_LITERAL_STRING("Erreur sans message.");
    pFaute = pDetail;
    rv = pFault->GetFaultString(pTitle);
    NS_ENSURE_SUCCESS(rv,rv);
    nsCOMPtr<nsIPrompt> pPrompt= do_GetService(NS_DEFAULTPROMPT_CONTRACTID, &rv);
    NS_ENSURE_SUCCESS(rv,rv);
    pPrompt->Alert(ToNewUnicode(pTitle), ToNewUnicode(pFaute));
    return NS_ERROR_FAILURE;
  }

  nsISOAPParameter ** pParameters;
  PRUint32 pTotal;
  rv = aResponse->GetParameters(PR_FALSE, &pTotal, &pParameters);
  NS_ENSURE_SUCCESS(rv,rv);
  if (pTotal!=1) {
    nsCOMPtr<nsIPrompt> pPrompt= do_GetService(NS_DEFAULTPROMPT_CONTRACTID, &rv);
    NS_ENSURE_SUCCESS(rv,rv);
    pPrompt->Alert(ToNewUnicode(NS_LITERAL_CSTRING("Erreur système")), ToNewUnicode(NS_LITERAL_CSTRING("Le nombre total de paramètres reçus est incorrect.")));
    return NS_ERROR_FAILURE;
  }

  nsAutoString pText;
  nsCOMPtr<nsIVariant> pValue;
  rv = pParameters[0]->GetValue(getter_AddRefs(pValue));
  NS_ENSURE_SUCCESS(rv,rv);
  rv = pValue->GetAsAString(pText);
  NS_ENSURE_SUCCESS(rv,rv);
  rv = mComponent->TreatP0030(pText, mKey);
  return rv;
}


/* Generated by Pygmalion */


NS_IMPL_ISUPPORTS1(mozListenerP0031, nsISOAPResponseListener)

mozListenerP0031::mozListenerP0031(mozC02gestsea* aComponent, const nsAString & aKey)
{
  mComponent = aComponent;
  mKey = aKey;
}
mozListenerP0031::~mozListenerP0031()
{
}

NS_IMETHODIMP mozListenerP0031::HandleResponse(nsISOAPResponse *aResponse, nsISOAPCall *aCall, PRUint32 aStatus, PRBool aLast, PRBool *aReturn)
{
  nsresult rv;
  nsCOMPtr<nsISOAPFault> pFault;
  rv = aResponse->GetFault(getter_AddRefs(pFault));
  NS_ENSURE_SUCCESS(rv, rv);
  if (pFault) {
    nsAutoString pFaute, pDetail, pTitle;
    nsCOMPtr<nsIDOMElement> pTheDetail;
    nsCOMPtr<nsIDOMNode> pNode;
    rv = pFault->GetDetail(getter_AddRefs(pTheDetail));
    NS_ENSURE_SUCCESS(rv,rv);
    rv = pTheDetail->GetFirstChild(getter_AddRefs(pNode));
    NS_ENSURE_SUCCESS(rv,rv);
    if (pNode) {
      nsCOMPtr<nsIDOMNamedNodeMap> pAttributes;
      nsCOMPtr<nsIDOMNode> pAttribute, pFirstNode;
      nsAutoString pNodeValue;
      rv = pNode->GetFirstChild(getter_AddRefs(pFirstNode));
      NS_ENSURE_SUCCESS(rv,rv);
      if (pFirstNode) {
        pFirstNode->GetNodeValue(pNodeValue);
        NS_ENSURE_SUCCESS(rv,rv);
        pDetail  = pNodeValue;
      }
      pNode->GetAttributes(getter_AddRefs(pAttributes));
      NS_ENSURE_SUCCESS(rv,rv);
      pAttributes->GetNamedItem(NS_LITERAL_STRING("code"), getter_AddRefs(pAttribute));
      NS_ENSURE_SUCCESS(rv,rv);
      if (pAttribute) {
        pAttribute->GetNodeValue(pNodeValue);
        NS_ENSURE_SUCCESS(rv,rv);
        pDetail += NS_LITERAL_STRING("\n(Erreur ");
        pDetail += pNodeValue;
        pDetail += NS_LITERAL_STRING(")");
      }
    } else pDetail = NS_LITERAL_STRING("Erreur sans message.");
    pFaute = pDetail;
    rv = pFault->GetFaultString(pTitle);
    NS_ENSURE_SUCCESS(rv,rv);
    nsCOMPtr<nsIPrompt> pPrompt= do_GetService(NS_DEFAULTPROMPT_CONTRACTID, &rv);
    NS_ENSURE_SUCCESS(rv,rv);
    pPrompt->Alert(ToNewUnicode(pTitle), ToNewUnicode(pFaute));
    return NS_ERROR_FAILURE;
  }

  nsISOAPParameter ** pParameters;
  PRUint32 pTotal;
  rv = aResponse->GetParameters(PR_FALSE, &pTotal, &pParameters);
  NS_ENSURE_SUCCESS(rv,rv);
  if (pTotal!=1) {
    nsCOMPtr<nsIPrompt> pPrompt= do_GetService(NS_DEFAULTPROMPT_CONTRACTID, &rv);
    NS_ENSURE_SUCCESS(rv,rv);
    pPrompt->Alert(ToNewUnicode(NS_LITERAL_CSTRING("Erreur système")), ToNewUnicode(NS_LITERAL_CSTRING("Le nombre total de paramètres reçus est incorrect.")));
    return NS_ERROR_FAILURE;
  }

  nsAutoString pText;
  nsCOMArray<nsIVariant> pArray;
  nsCOMPtr<nsIWritableVariant> pVariant;
  PRUint32 pLsize=0, pCsize=0;
  PRUint32 pLineIndex, pColIndex;
  PRUint16 pNodeType;
  nsCOMPtr<nsIDOMElement> pResult;
  nsCOMPtr<nsIDOMNodeList> pLines, pValues;
  nsCOMPtr<nsIDOMNode> pLine, pValue, pContent;
  rv = pParameters[0]->GetElement(getter_AddRefs(pResult));
  NS_ENSURE_SUCCESS(rv,rv);
  rv = pResult->GetChildNodes(getter_AddRefs(pLines));
  NS_ENSURE_SUCCESS(rv,rv);
  pLines->GetLength(&pLsize);
  for (pLineIndex=0;pLineIndex<pLsize;pLineIndex++) {
    do {
      rv = pLines->Item(pLineIndex, getter_AddRefs(pLine));
      NS_ENSURE_SUCCESS(rv,rv);
      pLine->GetNodeType(&pNodeType);
      if (pNodeType!=nsIDOMNode::ELEMENT_NODE) pLineIndex++;
    } while (pLineIndex<pLsize && pNodeType!=nsIDOMNode::ELEMENT_NODE);
    if (pLineIndex>=pLsize) break;
    rv = pLine->GetChildNodes(getter_AddRefs(pValues));
    NS_ENSURE_SUCCESS(rv,rv);
    pValues->GetLength(&pCsize);
    for (pColIndex=0;pColIndex<pCsize;pColIndex++) {
      do {
        rv = pValues->Item(pColIndex, getter_AddRefs(pValue));
        NS_ENSURE_SUCCESS(rv,rv);
        pValue->GetNodeType(&pNodeType);
        if (pNodeType!=nsIDOMNode::ELEMENT_NODE) pColIndex++;
      } while (pColIndex<pCsize && pNodeType!=nsIDOMNode::ELEMENT_NODE);
      if (pColIndex>=pCsize) break;
      rv = pValue->GetFirstChild(getter_AddRefs(pContent));
      NS_ENSURE_SUCCESS(rv,rv);
      pVariant = do_CreateInstance(NS_VARIANT_CONTRACTID, &rv);
      NS_ENSURE_SUCCESS(rv,rv);
      if (pContent) {
        rv = pContent->GetNodeValue(pText);
        NS_ENSURE_SUCCESS(rv,rv);
        pVariant->SetAsAString(pText);
        printf("%s|",ToNewCString(pText));
      } else {
        pVariant->SetAsAString(NS_LITERAL_STRING(""));
      }
      rv = pArray.AppendObject(pVariant);
    }
  }
  rv = mComponent->TreatP0031(pArray, pLsize, pCsize, mKey);
  return rv;
}


/* Generated by Pygmalion */


NS_IMPL_ISUPPORTS1(mozListenerP0032, nsISOAPResponseListener)

mozListenerP0032::mozListenerP0032(mozC02gestsea* aComponent, const nsAString & aKey)
{
  mComponent = aComponent;
  mKey = aKey;
}
mozListenerP0032::~mozListenerP0032()
{
}

NS_IMETHODIMP mozListenerP0032::HandleResponse(nsISOAPResponse *aResponse, nsISOAPCall *aCall, PRUint32 aStatus, PRBool aLast, PRBool *aReturn)
{
  nsresult rv;
  nsCOMPtr<nsISOAPFault> pFault;
  rv = aResponse->GetFault(getter_AddRefs(pFault));
  NS_ENSURE_SUCCESS(rv, rv);
  if (pFault) {
    nsAutoString pFaute, pDetail, pTitle;
    nsCOMPtr<nsIDOMElement> pTheDetail;
    nsCOMPtr<nsIDOMNode> pNode;
    rv = pFault->GetDetail(getter_AddRefs(pTheDetail));
    NS_ENSURE_SUCCESS(rv,rv);
    rv = pTheDetail->GetFirstChild(getter_AddRefs(pNode));
    NS_ENSURE_SUCCESS(rv,rv);
    if (pNode) {
      nsCOMPtr<nsIDOMNamedNodeMap> pAttributes;
      nsCOMPtr<nsIDOMNode> pAttribute, pFirstNode;
      nsAutoString pNodeValue;
      rv = pNode->GetFirstChild(getter_AddRefs(pFirstNode));
      NS_ENSURE_SUCCESS(rv,rv);
      if (pFirstNode) {
        pFirstNode->GetNodeValue(pNodeValue);
        NS_ENSURE_SUCCESS(rv,rv);
        pDetail  = pNodeValue;
      }
      pNode->GetAttributes(getter_AddRefs(pAttributes));
      NS_ENSURE_SUCCESS(rv,rv);
      pAttributes->GetNamedItem(NS_LITERAL_STRING("code"), getter_AddRefs(pAttribute));
      NS_ENSURE_SUCCESS(rv,rv);
      if (pAttribute) {
        pAttribute->GetNodeValue(pNodeValue);
        NS_ENSURE_SUCCESS(rv,rv);
        pDetail += NS_LITERAL_STRING("\n(Erreur ");
        pDetail += pNodeValue;
        pDetail += NS_LITERAL_STRING(")");
      }
    } else pDetail = NS_LITERAL_STRING("Erreur sans message.");
    pFaute = pDetail;
    rv = pFault->GetFaultString(pTitle);
    NS_ENSURE_SUCCESS(rv,rv);
    nsCOMPtr<nsIPrompt> pPrompt= do_GetService(NS_DEFAULTPROMPT_CONTRACTID, &rv);
    NS_ENSURE_SUCCESS(rv,rv);
    pPrompt->Alert(ToNewUnicode(pTitle), ToNewUnicode(pFaute));
    return NS_ERROR_FAILURE;
  }

  nsISOAPParameter ** pParameters;
  PRUint32 pTotal;
  rv = aResponse->GetParameters(PR_FALSE, &pTotal, &pParameters);
  NS_ENSURE_SUCCESS(rv,rv);
  if (pTotal!=1) {
    nsCOMPtr<nsIPrompt> pPrompt= do_GetService(NS_DEFAULTPROMPT_CONTRACTID, &rv);
    NS_ENSURE_SUCCESS(rv,rv);
    pPrompt->Alert(ToNewUnicode(NS_LITERAL_CSTRING("Erreur système")), ToNewUnicode(NS_LITERAL_CSTRING("Le nombre total de paramètres reçus est incorrect.")));
    return NS_ERROR_FAILURE;
  }

  nsAutoString pText;
  nsCOMArray<nsIVariant> pArray;
  nsCOMPtr<nsIWritableVariant> pVariant;
  PRUint32 pLsize=0, pCsize=0;
  PRUint32 pLineIndex, pColIndex;
  PRUint16 pNodeType;
  nsCOMPtr<nsIDOMElement> pResult;
  nsCOMPtr<nsIDOMNodeList> pLines, pValues;
  nsCOMPtr<nsIDOMNode> pLine, pValue, pContent;
  rv = pParameters[0]->GetElement(getter_AddRefs(pResult));
  NS_ENSURE_SUCCESS(rv,rv);
  rv = pResult->GetChildNodes(getter_AddRefs(pLines));
  NS_ENSURE_SUCCESS(rv,rv);
  pLines->GetLength(&pLsize);
  for (pLineIndex=0;pLineIndex<pLsize;pLineIndex++) {
    do {
      rv = pLines->Item(pLineIndex, getter_AddRefs(pLine));
      NS_ENSURE_SUCCESS(rv,rv);
      pLine->GetNodeType(&pNodeType);
      if (pNodeType!=nsIDOMNode::ELEMENT_NODE) pLineIndex++;
    } while (pLineIndex<pLsize && pNodeType!=nsIDOMNode::ELEMENT_NODE);
    if (pLineIndex>=pLsize) break;
    rv = pLine->GetChildNodes(getter_AddRefs(pValues));
    NS_ENSURE_SUCCESS(rv,rv);
    pValues->GetLength(&pCsize);
    for (pColIndex=0;pColIndex<pCsize;pColIndex++) {
      do {
        rv = pValues->Item(pColIndex, getter_AddRefs(pValue));
        NS_ENSURE_SUCCESS(rv,rv);
        pValue->GetNodeType(&pNodeType);
        if (pNodeType!=nsIDOMNode::ELEMENT_NODE) pColIndex++;
      } while (pColIndex<pCsize && pNodeType!=nsIDOMNode::ELEMENT_NODE);
      if (pColIndex>=pCsize) break;
      rv = pValue->GetFirstChild(getter_AddRefs(pContent));
      NS_ENSURE_SUCCESS(rv,rv);
      pVariant = do_CreateInstance(NS_VARIANT_CONTRACTID, &rv);
      NS_ENSURE_SUCCESS(rv,rv);
      if (pContent) {
        rv = pContent->GetNodeValue(pText);
        NS_ENSURE_SUCCESS(rv,rv);
        pVariant->SetAsAString(pText);
        printf("%s|",ToNewCString(pText));
      } else {
        pVariant->SetAsAString(NS_LITERAL_STRING(""));
      }
      rv = pArray.AppendObject(pVariant);
    }
  }
  rv = mComponent->TreatP0032(pArray, pLsize, pCsize, mKey);
  return rv;
}


/* Generated by Pygmalion */


NS_IMPL_ISUPPORTS1(mozListenerP0033, nsISOAPResponseListener)

mozListenerP0033::mozListenerP0033(mozC02gestsea* aComponent, const nsAString & aKey)
{
  mComponent = aComponent;
  mKey = aKey;
}
mozListenerP0033::~mozListenerP0033()
{
}

NS_IMETHODIMP mozListenerP0033::HandleResponse(nsISOAPResponse *aResponse, nsISOAPCall *aCall, PRUint32 aStatus, PRBool aLast, PRBool *aReturn)
{
  nsresult rv;
  nsCOMPtr<nsISOAPFault> pFault;
  rv = aResponse->GetFault(getter_AddRefs(pFault));
  NS_ENSURE_SUCCESS(rv, rv);
  if (pFault) {
    nsAutoString pFaute, pDetail, pTitle;
    nsCOMPtr<nsIDOMElement> pTheDetail;
    nsCOMPtr<nsIDOMNode> pNode;
    rv = pFault->GetDetail(getter_AddRefs(pTheDetail));
    NS_ENSURE_SUCCESS(rv,rv);
    rv = pTheDetail->GetFirstChild(getter_AddRefs(pNode));
    NS_ENSURE_SUCCESS(rv,rv);
    if (pNode) {
      nsCOMPtr<nsIDOMNamedNodeMap> pAttributes;
      nsCOMPtr<nsIDOMNode> pAttribute, pFirstNode;
      nsAutoString pNodeValue;
      rv = pNode->GetFirstChild(getter_AddRefs(pFirstNode));
      NS_ENSURE_SUCCESS(rv,rv);
      if (pFirstNode) {
        pFirstNode->GetNodeValue(pNodeValue);
        NS_ENSURE_SUCCESS(rv,rv);
        pDetail  = pNodeValue;
      }
      pNode->GetAttributes(getter_AddRefs(pAttributes));
      NS_ENSURE_SUCCESS(rv,rv);
      pAttributes->GetNamedItem(NS_LITERAL_STRING("code"), getter_AddRefs(pAttribute));
      NS_ENSURE_SUCCESS(rv,rv);
      if (pAttribute) {
        pAttribute->GetNodeValue(pNodeValue);
        NS_ENSURE_SUCCESS(rv,rv);
        pDetail += NS_LITERAL_STRING("\n(Erreur ");
        pDetail += pNodeValue;
        pDetail += NS_LITERAL_STRING(")");
      }
    } else pDetail = NS_LITERAL_STRING("Erreur sans message.");
    pFaute = pDetail;
    rv = pFault->GetFaultString(pTitle);
    NS_ENSURE_SUCCESS(rv,rv);
    nsCOMPtr<nsIPrompt> pPrompt= do_GetService(NS_DEFAULTPROMPT_CONTRACTID, &rv);
    NS_ENSURE_SUCCESS(rv,rv);
    pPrompt->Alert(ToNewUnicode(pTitle), ToNewUnicode(pFaute));
    return NS_ERROR_FAILURE;
  }

  nsISOAPParameter ** pParameters;
  PRUint32 pTotal;
  rv = aResponse->GetParameters(PR_FALSE, &pTotal, &pParameters);
  NS_ENSURE_SUCCESS(rv,rv);
  if (pTotal!=1) {
    nsCOMPtr<nsIPrompt> pPrompt= do_GetService(NS_DEFAULTPROMPT_CONTRACTID, &rv);
    NS_ENSURE_SUCCESS(rv,rv);
    pPrompt->Alert(ToNewUnicode(NS_LITERAL_CSTRING("Erreur système")), ToNewUnicode(NS_LITERAL_CSTRING("Le nombre total de paramètres reçus est incorrect.")));
    return NS_ERROR_FAILURE;
  }

  nsAutoString pText;
  nsCOMArray<nsIVariant> pArray;
  nsCOMPtr<nsIWritableVariant> pVariant;
  PRUint32 pLsize=0, pCsize=0;
  PRUint32 pLineIndex, pColIndex;
  PRUint16 pNodeType;
  nsCOMPtr<nsIDOMElement> pResult;
  nsCOMPtr<nsIDOMNodeList> pLines, pValues;
  nsCOMPtr<nsIDOMNode> pLine, pValue, pContent;
  rv = pParameters[0]->GetElement(getter_AddRefs(pResult));
  NS_ENSURE_SUCCESS(rv,rv);
  rv = pResult->GetChildNodes(getter_AddRefs(pLines));
  NS_ENSURE_SUCCESS(rv,rv);
  pLines->GetLength(&pLsize);
  for (pLineIndex=0;pLineIndex<pLsize;pLineIndex++) {
    do {
      rv = pLines->Item(pLineIndex, getter_AddRefs(pLine));
      NS_ENSURE_SUCCESS(rv,rv);
      pLine->GetNodeType(&pNodeType);
      if (pNodeType!=nsIDOMNode::ELEMENT_NODE) pLineIndex++;
    } while (pLineIndex<pLsize && pNodeType!=nsIDOMNode::ELEMENT_NODE);
    if (pLineIndex>=pLsize) break;
    rv = pLine->GetChildNodes(getter_AddRefs(pValues));
    NS_ENSURE_SUCCESS(rv,rv);
    pValues->GetLength(&pCsize);
    for (pColIndex=0;pColIndex<pCsize;pColIndex++) {
      do {
        rv = pValues->Item(pColIndex, getter_AddRefs(pValue));
        NS_ENSURE_SUCCESS(rv,rv);
        pValue->GetNodeType(&pNodeType);
        if (pNodeType!=nsIDOMNode::ELEMENT_NODE) pColIndex++;
      } while (pColIndex<pCsize && pNodeType!=nsIDOMNode::ELEMENT_NODE);
      if (pColIndex>=pCsize) break;
      rv = pValue->GetFirstChild(getter_AddRefs(pContent));
      NS_ENSURE_SUCCESS(rv,rv);
      pVariant = do_CreateInstance(NS_VARIANT_CONTRACTID, &rv);
      NS_ENSURE_SUCCESS(rv,rv);
      if (pContent) {
        rv = pContent->GetNodeValue(pText);
        NS_ENSURE_SUCCESS(rv,rv);
        pVariant->SetAsAString(pText);
        printf("%s|",ToNewCString(pText));
      } else {
        pVariant->SetAsAString(NS_LITERAL_STRING(""));
      }
      rv = pArray.AppendObject(pVariant);
    }
  }
  rv = mComponent->TreatP0033(pArray, pLsize, pCsize, mKey);
  return rv;
}


/* Generated by Pygmalion */


NS_IMPL_ISUPPORTS1(mozListenerP0034, nsISOAPResponseListener)

mozListenerP0034::mozListenerP0034(mozC02gestsea* aComponent, const nsAString & aKey)
{
  mComponent = aComponent;
  mKey = aKey;
}
mozListenerP0034::~mozListenerP0034()
{
}

NS_IMETHODIMP mozListenerP0034::HandleResponse(nsISOAPResponse *aResponse, nsISOAPCall *aCall, PRUint32 aStatus, PRBool aLast, PRBool *aReturn)
{
  nsresult rv;
  nsCOMPtr<nsISOAPFault> pFault;
  rv = aResponse->GetFault(getter_AddRefs(pFault));
  NS_ENSURE_SUCCESS(rv, rv);
  if (pFault) {
    nsAutoString pFaute, pDetail, pTitle;
    nsCOMPtr<nsIDOMElement> pTheDetail;
    nsCOMPtr<nsIDOMNode> pNode;
    rv = pFault->GetDetail(getter_AddRefs(pTheDetail));
    NS_ENSURE_SUCCESS(rv,rv);
    rv = pTheDetail->GetFirstChild(getter_AddRefs(pNode));
    NS_ENSURE_SUCCESS(rv,rv);
    if (pNode) {
      nsCOMPtr<nsIDOMNamedNodeMap> pAttributes;
      nsCOMPtr<nsIDOMNode> pAttribute, pFirstNode;
      nsAutoString pNodeValue;
      rv = pNode->GetFirstChild(getter_AddRefs(pFirstNode));
      NS_ENSURE_SUCCESS(rv,rv);
      if (pFirstNode) {
        pFirstNode->GetNodeValue(pNodeValue);
        NS_ENSURE_SUCCESS(rv,rv);
        pDetail  = pNodeValue;
      }
      pNode->GetAttributes(getter_AddRefs(pAttributes));
      NS_ENSURE_SUCCESS(rv,rv);
      pAttributes->GetNamedItem(NS_LITERAL_STRING("code"), getter_AddRefs(pAttribute));
      NS_ENSURE_SUCCESS(rv,rv);
      if (pAttribute) {
        pAttribute->GetNodeValue(pNodeValue);
        NS_ENSURE_SUCCESS(rv,rv);
        pDetail += NS_LITERAL_STRING("\n(Erreur ");
        pDetail += pNodeValue;
        pDetail += NS_LITERAL_STRING(")");
      }
    } else pDetail = NS_LITERAL_STRING("Erreur sans message.");
    pFaute = pDetail;
    rv = pFault->GetFaultString(pTitle);
    NS_ENSURE_SUCCESS(rv,rv);
    nsCOMPtr<nsIPrompt> pPrompt= do_GetService(NS_DEFAULTPROMPT_CONTRACTID, &rv);
    NS_ENSURE_SUCCESS(rv,rv);
    pPrompt->Alert(ToNewUnicode(pTitle), ToNewUnicode(pFaute));
    return NS_ERROR_FAILURE;
  }

  nsISOAPParameter ** pParameters;
  PRUint32 pTotal;
  rv = aResponse->GetParameters(PR_FALSE, &pTotal, &pParameters);
  NS_ENSURE_SUCCESS(rv,rv);
  if (pTotal!=1) {
    nsCOMPtr<nsIPrompt> pPrompt= do_GetService(NS_DEFAULTPROMPT_CONTRACTID, &rv);
    NS_ENSURE_SUCCESS(rv,rv);
    pPrompt->Alert(ToNewUnicode(NS_LITERAL_CSTRING("Erreur système")), ToNewUnicode(NS_LITERAL_CSTRING("Le nombre total de paramètres reçus est incorrect.")));
    return NS_ERROR_FAILURE;
  }

  nsAutoString pText;
  nsCOMArray<nsIVariant> pArray;
  nsCOMPtr<nsIWritableVariant> pVariant;
  PRUint32 pLsize=0, pCsize=0;
  PRUint32 pLineIndex, pColIndex;
  PRUint16 pNodeType;
  nsCOMPtr<nsIDOMElement> pResult;
  nsCOMPtr<nsIDOMNodeList> pLines, pValues;
  nsCOMPtr<nsIDOMNode> pLine, pValue, pContent;
  rv = pParameters[0]->GetElement(getter_AddRefs(pResult));
  NS_ENSURE_SUCCESS(rv,rv);
  rv = pResult->GetChildNodes(getter_AddRefs(pLines));
  NS_ENSURE_SUCCESS(rv,rv);
  pLines->GetLength(&pLsize);
  for (pLineIndex=0;pLineIndex<pLsize;pLineIndex++) {
    do {
      rv = pLines->Item(pLineIndex, getter_AddRefs(pLine));
      NS_ENSURE_SUCCESS(rv,rv);
      pLine->GetNodeType(&pNodeType);
      if (pNodeType!=nsIDOMNode::ELEMENT_NODE) pLineIndex++;
    } while (pLineIndex<pLsize && pNodeType!=nsIDOMNode::ELEMENT_NODE);
    if (pLineIndex>=pLsize) break;
    rv = pLine->GetChildNodes(getter_AddRefs(pValues));
    NS_ENSURE_SUCCESS(rv,rv);
    pValues->GetLength(&pCsize);
    for (pColIndex=0;pColIndex<pCsize;pColIndex++) {
      do {
        rv = pValues->Item(pColIndex, getter_AddRefs(pValue));
        NS_ENSURE_SUCCESS(rv,rv);
        pValue->GetNodeType(&pNodeType);
        if (pNodeType!=nsIDOMNode::ELEMENT_NODE) pColIndex++;
      } while (pColIndex<pCsize && pNodeType!=nsIDOMNode::ELEMENT_NODE);
      if (pColIndex>=pCsize) break;
      rv = pValue->GetFirstChild(getter_AddRefs(pContent));
      NS_ENSURE_SUCCESS(rv,rv);
      pVariant = do_CreateInstance(NS_VARIANT_CONTRACTID, &rv);
      NS_ENSURE_SUCCESS(rv,rv);
      if (pContent) {
        rv = pContent->GetNodeValue(pText);
        NS_ENSURE_SUCCESS(rv,rv);
        pVariant->SetAsAString(pText);
        printf("%s|",ToNewCString(pText));
      } else {
        pVariant->SetAsAString(NS_LITERAL_STRING(""));
      }
      rv = pArray.AppendObject(pVariant);
    }
  }
  rv = mComponent->TreatP0034(pArray, pLsize, pCsize, mKey);
  return rv;
}


/* Generated by Pygmalion */


NS_IMPL_ISUPPORTS1(mozListenerP0035, nsISOAPResponseListener)

mozListenerP0035::mozListenerP0035(mozC02gestsea* aComponent, const nsACString & aSearch)
{
  mComponent = aComponent;
  mSearch = aSearch;
}
mozListenerP0035::~mozListenerP0035()
{
}

NS_IMETHODIMP mozListenerP0035::HandleResponse(nsISOAPResponse *aResponse, nsISOAPCall *aCall, PRUint32 aStatus, PRBool aLast, PRBool *aReturn)
{
  nsresult rv;
  nsCOMPtr<nsISOAPFault> pFault;
  rv = aResponse->GetFault(getter_AddRefs(pFault));
  NS_ENSURE_SUCCESS(rv, rv);
  if (pFault) {
    nsAutoString pFaute, pDetail, pTitle;
    nsCOMPtr<nsIDOMElement> pTheDetail;
    nsCOMPtr<nsIDOMNode> pNode;
    rv = pFault->GetDetail(getter_AddRefs(pTheDetail));
    NS_ENSURE_SUCCESS(rv,rv);
    rv = pTheDetail->GetFirstChild(getter_AddRefs(pNode));
    NS_ENSURE_SUCCESS(rv,rv);
    if (pNode) {
      nsCOMPtr<nsIDOMNamedNodeMap> pAttributes;
      nsCOMPtr<nsIDOMNode> pAttribute, pFirstNode;
      nsAutoString pNodeValue;
      rv = pNode->GetFirstChild(getter_AddRefs(pFirstNode));
      NS_ENSURE_SUCCESS(rv,rv);
      if (pFirstNode) {
        pFirstNode->GetNodeValue(pNodeValue);
        NS_ENSURE_SUCCESS(rv,rv);
        pDetail  = pNodeValue;
      }
      pNode->GetAttributes(getter_AddRefs(pAttributes));
      NS_ENSURE_SUCCESS(rv,rv);
      pAttributes->GetNamedItem(NS_LITERAL_STRING("code"), getter_AddRefs(pAttribute));
      NS_ENSURE_SUCCESS(rv,rv);
      if (pAttribute) {
        pAttribute->GetNodeValue(pNodeValue);
        NS_ENSURE_SUCCESS(rv,rv);
        pDetail += NS_LITERAL_STRING("\n(Erreur ");
        pDetail += pNodeValue;
        pDetail += NS_LITERAL_STRING(")");
      }
    } else pDetail = NS_LITERAL_STRING("Erreur sans message.");
    pFaute = pDetail;
    rv = pFault->GetFaultString(pTitle);
    NS_ENSURE_SUCCESS(rv,rv);
    nsCOMPtr<nsIPrompt> pPrompt= do_GetService(NS_DEFAULTPROMPT_CONTRACTID, &rv);
    NS_ENSURE_SUCCESS(rv,rv);
    pPrompt->Alert(ToNewUnicode(pTitle), ToNewUnicode(pFaute));
    return NS_ERROR_FAILURE;
  }

  nsISOAPParameter ** pParameters;
  PRUint32 pTotal;
  rv = aResponse->GetParameters(PR_FALSE, &pTotal, &pParameters);
  NS_ENSURE_SUCCESS(rv,rv);
  if (pTotal!=1) {
    nsCOMPtr<nsIPrompt> pPrompt= do_GetService(NS_DEFAULTPROMPT_CONTRACTID, &rv);
    NS_ENSURE_SUCCESS(rv,rv);
    pPrompt->Alert(ToNewUnicode(NS_LITERAL_CSTRING("Erreur système")), ToNewUnicode(NS_LITERAL_CSTRING("Le nombre total de paramètres reçus est incorrect.")));
    return NS_ERROR_FAILURE;
  }

  nsAutoString pText;
  nsCOMArray<nsIVariant> pArray;
  nsCOMPtr<nsIWritableVariant> pVariant;
  PRUint32 pLsize=0, pCsize=0;
  PRUint32 pLineIndex, pColIndex;
  PRUint16 pNodeType;
  nsCOMPtr<nsIDOMElement> pResult;
  nsCOMPtr<nsIDOMNodeList> pLines, pValues;
  nsCOMPtr<nsIDOMNode> pLine, pValue, pContent;
  rv = pParameters[0]->GetElement(getter_AddRefs(pResult));
  NS_ENSURE_SUCCESS(rv,rv);
  rv = pResult->GetChildNodes(getter_AddRefs(pLines));
  NS_ENSURE_SUCCESS(rv,rv);
  pLines->GetLength(&pLsize);
  for (pLineIndex=0;pLineIndex<pLsize;pLineIndex++) {
    do {
      rv = pLines->Item(pLineIndex, getter_AddRefs(pLine));
      NS_ENSURE_SUCCESS(rv,rv);
      pLine->GetNodeType(&pNodeType);
      if (pNodeType!=nsIDOMNode::ELEMENT_NODE) pLineIndex++;
    } while (pLineIndex<pLsize && pNodeType!=nsIDOMNode::ELEMENT_NODE);
    if (pLineIndex>=pLsize) break;
    rv = pLine->GetChildNodes(getter_AddRefs(pValues));
    NS_ENSURE_SUCCESS(rv,rv);
    pValues->GetLength(&pCsize);
    for (pColIndex=0;pColIndex<pCsize;pColIndex++) {
      do {
        rv = pValues->Item(pColIndex, getter_AddRefs(pValue));
        NS_ENSURE_SUCCESS(rv,rv);
        pValue->GetNodeType(&pNodeType);
        if (pNodeType!=nsIDOMNode::ELEMENT_NODE) pColIndex++;
      } while (pColIndex<pCsize && pNodeType!=nsIDOMNode::ELEMENT_NODE);
      if (pColIndex>=pCsize) break;
      rv = pValue->GetFirstChild(getter_AddRefs(pContent));
      NS_ENSURE_SUCCESS(rv,rv);
      pVariant = do_CreateInstance(NS_VARIANT_CONTRACTID, &rv);
      NS_ENSURE_SUCCESS(rv,rv);
      if (pContent) {
        rv = pContent->GetNodeValue(pText);
        NS_ENSURE_SUCCESS(rv,rv);
        pVariant->SetAsAString(pText);
        printf("%s|",ToNewCString(pText));
      } else {
        pVariant->SetAsAString(NS_LITERAL_STRING(""));
      }
      rv = pArray.AppendObject(pVariant);
    }
  }
  rv = mComponent->TreatP0035(pArray, pLsize, pCsize, mSearch);
  return rv;
}


/* Generated by Pygmalion */


NS_IMPL_ISUPPORTS1(mozListenerP0036, nsISOAPResponseListener)

mozListenerP0036::mozListenerP0036(mozC02gestsea* aComponent, const nsACString & aSearch)
{
  mComponent = aComponent;
  mSearch = aSearch;
}
mozListenerP0036::~mozListenerP0036()
{
}

NS_IMETHODIMP mozListenerP0036::HandleResponse(nsISOAPResponse *aResponse, nsISOAPCall *aCall, PRUint32 aStatus, PRBool aLast, PRBool *aReturn)
{
  nsresult rv;
  nsCOMPtr<nsISOAPFault> pFault;
  rv = aResponse->GetFault(getter_AddRefs(pFault));
  NS_ENSURE_SUCCESS(rv, rv);
  if (pFault) {
    nsAutoString pFaute, pDetail, pTitle;
    nsCOMPtr<nsIDOMElement> pTheDetail;
    nsCOMPtr<nsIDOMNode> pNode;
    rv = pFault->GetDetail(getter_AddRefs(pTheDetail));
    NS_ENSURE_SUCCESS(rv,rv);
    rv = pTheDetail->GetFirstChild(getter_AddRefs(pNode));
    NS_ENSURE_SUCCESS(rv,rv);
    if (pNode) {
      nsCOMPtr<nsIDOMNamedNodeMap> pAttributes;
      nsCOMPtr<nsIDOMNode> pAttribute, pFirstNode;
      nsAutoString pNodeValue;
      rv = pNode->GetFirstChild(getter_AddRefs(pFirstNode));
      NS_ENSURE_SUCCESS(rv,rv);
      if (pFirstNode) {
        pFirstNode->GetNodeValue(pNodeValue);
        NS_ENSURE_SUCCESS(rv,rv);
        pDetail  = pNodeValue;
      }
      pNode->GetAttributes(getter_AddRefs(pAttributes));
      NS_ENSURE_SUCCESS(rv,rv);
      pAttributes->GetNamedItem(NS_LITERAL_STRING("code"), getter_AddRefs(pAttribute));
      NS_ENSURE_SUCCESS(rv,rv);
      if (pAttribute) {
        pAttribute->GetNodeValue(pNodeValue);
        NS_ENSURE_SUCCESS(rv,rv);
        pDetail += NS_LITERAL_STRING("\n(Erreur ");
        pDetail += pNodeValue;
        pDetail += NS_LITERAL_STRING(")");
      }
    } else pDetail = NS_LITERAL_STRING("Erreur sans message.");
    pFaute = pDetail;
    rv = pFault->GetFaultString(pTitle);
    NS_ENSURE_SUCCESS(rv,rv);
    nsCOMPtr<nsIPrompt> pPrompt= do_GetService(NS_DEFAULTPROMPT_CONTRACTID, &rv);
    NS_ENSURE_SUCCESS(rv,rv);
    pPrompt->Alert(ToNewUnicode(pTitle), ToNewUnicode(pFaute));
    return NS_ERROR_FAILURE;
  }

  nsISOAPParameter ** pParameters;
  PRUint32 pTotal;
  rv = aResponse->GetParameters(PR_FALSE, &pTotal, &pParameters);
  NS_ENSURE_SUCCESS(rv,rv);
  if (pTotal!=1) {
    nsCOMPtr<nsIPrompt> pPrompt= do_GetService(NS_DEFAULTPROMPT_CONTRACTID, &rv);
    NS_ENSURE_SUCCESS(rv,rv);
    pPrompt->Alert(ToNewUnicode(NS_LITERAL_CSTRING("Erreur système")), ToNewUnicode(NS_LITERAL_CSTRING("Le nombre total de paramètres reçus est incorrect.")));
    return NS_ERROR_FAILURE;
  }

  nsAutoString pText;
  nsCOMArray<nsIVariant> pArray;
  nsCOMPtr<nsIWritableVariant> pVariant;
  PRUint32 pLsize=0, pCsize=0;
  PRUint32 pLineIndex, pColIndex;
  PRUint16 pNodeType;
  nsCOMPtr<nsIDOMElement> pResult;
  nsCOMPtr<nsIDOMNodeList> pLines, pValues;
  nsCOMPtr<nsIDOMNode> pLine, pValue, pContent;
  rv = pParameters[0]->GetElement(getter_AddRefs(pResult));
  NS_ENSURE_SUCCESS(rv,rv);
  rv = pResult->GetChildNodes(getter_AddRefs(pLines));
  NS_ENSURE_SUCCESS(rv,rv);
  pLines->GetLength(&pLsize);
  for (pLineIndex=0;pLineIndex<pLsize;pLineIndex++) {
    do {
      rv = pLines->Item(pLineIndex, getter_AddRefs(pLine));
      NS_ENSURE_SUCCESS(rv,rv);
      pLine->GetNodeType(&pNodeType);
      if (pNodeType!=nsIDOMNode::ELEMENT_NODE) pLineIndex++;
    } while (pLineIndex<pLsize && pNodeType!=nsIDOMNode::ELEMENT_NODE);
    if (pLineIndex>=pLsize) break;
    rv = pLine->GetChildNodes(getter_AddRefs(pValues));
    NS_ENSURE_SUCCESS(rv,rv);
    pValues->GetLength(&pCsize);
    for (pColIndex=0;pColIndex<pCsize;pColIndex++) {
      do {
        rv = pValues->Item(pColIndex, getter_AddRefs(pValue));
        NS_ENSURE_SUCCESS(rv,rv);
        pValue->GetNodeType(&pNodeType);
        if (pNodeType!=nsIDOMNode::ELEMENT_NODE) pColIndex++;
      } while (pColIndex<pCsize && pNodeType!=nsIDOMNode::ELEMENT_NODE);
      if (pColIndex>=pCsize) break;
      rv = pValue->GetFirstChild(getter_AddRefs(pContent));
      NS_ENSURE_SUCCESS(rv,rv);
      pVariant = do_CreateInstance(NS_VARIANT_CONTRACTID, &rv);
      NS_ENSURE_SUCCESS(rv,rv);
      if (pContent) {
        rv = pContent->GetNodeValue(pText);
        NS_ENSURE_SUCCESS(rv,rv);
        pVariant->SetAsAString(pText);
        printf("%s|",ToNewCString(pText));
      } else {
        pVariant->SetAsAString(NS_LITERAL_STRING(""));
      }
      rv = pArray.AppendObject(pVariant);
    }
  }
  rv = mComponent->TreatP0036(pArray, pLsize, pCsize, mSearch);
  return rv;
}


/* Generated by Pygmalion */


NS_IMPL_ISUPPORTS1(mozListenerP0037, nsISOAPResponseListener)

mozListenerP0037::mozListenerP0037(mozC02gestsea* aComponent, const nsAString & aKey)
{
  mComponent = aComponent;
  mKey = aKey;
}
mozListenerP0037::~mozListenerP0037()
{
}

NS_IMETHODIMP mozListenerP0037::HandleResponse(nsISOAPResponse *aResponse, nsISOAPCall *aCall, PRUint32 aStatus, PRBool aLast, PRBool *aReturn)
{
  nsresult rv;
  nsCOMPtr<nsISOAPFault> pFault;
  rv = aResponse->GetFault(getter_AddRefs(pFault));
  NS_ENSURE_SUCCESS(rv, rv);
  if (pFault) {
    nsAutoString pFaute, pDetail, pTitle;
    nsCOMPtr<nsIDOMElement> pTheDetail;
    nsCOMPtr<nsIDOMNode> pNode;
    rv = pFault->GetDetail(getter_AddRefs(pTheDetail));
    NS_ENSURE_SUCCESS(rv,rv);
    rv = pTheDetail->GetFirstChild(getter_AddRefs(pNode));
    NS_ENSURE_SUCCESS(rv,rv);
    if (pNode) {
      nsCOMPtr<nsIDOMNamedNodeMap> pAttributes;
      nsCOMPtr<nsIDOMNode> pAttribute, pFirstNode;
      nsAutoString pNodeValue;
      rv = pNode->GetFirstChild(getter_AddRefs(pFirstNode));
      NS_ENSURE_SUCCESS(rv,rv);
      if (pFirstNode) {
        pFirstNode->GetNodeValue(pNodeValue);
        NS_ENSURE_SUCCESS(rv,rv);
        pDetail  = pNodeValue;
      }
      pNode->GetAttributes(getter_AddRefs(pAttributes));
      NS_ENSURE_SUCCESS(rv,rv);
      pAttributes->GetNamedItem(NS_LITERAL_STRING("code"), getter_AddRefs(pAttribute));
      NS_ENSURE_SUCCESS(rv,rv);
      if (pAttribute) {
        pAttribute->GetNodeValue(pNodeValue);
        NS_ENSURE_SUCCESS(rv,rv);
        pDetail += NS_LITERAL_STRING("\n(Erreur ");
        pDetail += pNodeValue;
        pDetail += NS_LITERAL_STRING(")");
      }
    } else pDetail = NS_LITERAL_STRING("Erreur sans message.");
    pFaute = pDetail;
    rv = pFault->GetFaultString(pTitle);
    NS_ENSURE_SUCCESS(rv,rv);
    nsCOMPtr<nsIPrompt> pPrompt= do_GetService(NS_DEFAULTPROMPT_CONTRACTID, &rv);
    NS_ENSURE_SUCCESS(rv,rv);
    pPrompt->Alert(ToNewUnicode(pTitle), ToNewUnicode(pFaute));
    return NS_ERROR_FAILURE;
  }

  nsISOAPParameter ** pParameters;
  PRUint32 pTotal;
  rv = aResponse->GetParameters(PR_FALSE, &pTotal, &pParameters);
  NS_ENSURE_SUCCESS(rv,rv);
  if (pTotal!=1) {
    nsCOMPtr<nsIPrompt> pPrompt= do_GetService(NS_DEFAULTPROMPT_CONTRACTID, &rv);
    NS_ENSURE_SUCCESS(rv,rv);
    pPrompt->Alert(ToNewUnicode(NS_LITERAL_CSTRING("Erreur système")), ToNewUnicode(NS_LITERAL_CSTRING("Le nombre total de paramètres reçus est incorrect.")));
    return NS_ERROR_FAILURE;
  }

  nsAutoString pText;
  nsCOMArray<nsIVariant> pArray;
  nsCOMPtr<nsIWritableVariant> pVariant;
  PRUint32 pLsize=0, pCsize=0;
  PRUint32 pLineIndex, pColIndex;
  PRUint16 pNodeType;
  nsCOMPtr<nsIDOMElement> pResult;
  nsCOMPtr<nsIDOMNodeList> pLines, pValues;
  nsCOMPtr<nsIDOMNode> pLine, pValue, pContent;
  rv = pParameters[0]->GetElement(getter_AddRefs(pResult));
  NS_ENSURE_SUCCESS(rv,rv);
  rv = pResult->GetChildNodes(getter_AddRefs(pLines));
  NS_ENSURE_SUCCESS(rv,rv);
  pLines->GetLength(&pLsize);
  for (pLineIndex=0;pLineIndex<pLsize;pLineIndex++) {
    do {
      rv = pLines->Item(pLineIndex, getter_AddRefs(pLine));
      NS_ENSURE_SUCCESS(rv,rv);
      pLine->GetNodeType(&pNodeType);
      if (pNodeType!=nsIDOMNode::ELEMENT_NODE) pLineIndex++;
    } while (pLineIndex<pLsize && pNodeType!=nsIDOMNode::ELEMENT_NODE);
    if (pLineIndex>=pLsize) break;
    rv = pLine->GetChildNodes(getter_AddRefs(pValues));
    NS_ENSURE_SUCCESS(rv,rv);
    pValues->GetLength(&pCsize);
    for (pColIndex=0;pColIndex<pCsize;pColIndex++) {
      do {
        rv = pValues->Item(pColIndex, getter_AddRefs(pValue));
        NS_ENSURE_SUCCESS(rv,rv);
        pValue->GetNodeType(&pNodeType);
        if (pNodeType!=nsIDOMNode::ELEMENT_NODE) pColIndex++;
      } while (pColIndex<pCsize && pNodeType!=nsIDOMNode::ELEMENT_NODE);
      if (pColIndex>=pCsize) break;
      rv = pValue->GetFirstChild(getter_AddRefs(pContent));
      NS_ENSURE_SUCCESS(rv,rv);
      pVariant = do_CreateInstance(NS_VARIANT_CONTRACTID, &rv);
      NS_ENSURE_SUCCESS(rv,rv);
      if (pContent) {
        rv = pContent->GetNodeValue(pText);
        NS_ENSURE_SUCCESS(rv,rv);
        pVariant->SetAsAString(pText);
        printf("%s|",ToNewCString(pText));
      } else {
        pVariant->SetAsAString(NS_LITERAL_STRING(""));
      }
      rv = pArray.AppendObject(pVariant);
    }
  }
  rv = mComponent->TreatP0037(pArray, pLsize, pCsize, mKey);
  return rv;
}


/* Generated by Pygmalion */


NS_IMPL_ISUPPORTS1(mozListenerP0038, nsISOAPResponseListener)

mozListenerP0038::mozListenerP0038(mozC02gestsea* aComponent, const nsACString & aSearch)
{
  mComponent = aComponent;
  mSearch = aSearch;
}
mozListenerP0038::~mozListenerP0038()
{
}

NS_IMETHODIMP mozListenerP0038::HandleResponse(nsISOAPResponse *aResponse, nsISOAPCall *aCall, PRUint32 aStatus, PRBool aLast, PRBool *aReturn)
{
  nsresult rv;
  nsCOMPtr<nsISOAPFault> pFault;
  rv = aResponse->GetFault(getter_AddRefs(pFault));
  NS_ENSURE_SUCCESS(rv, rv);
  if (pFault) {
    nsAutoString pFaute, pDetail, pTitle;
    nsCOMPtr<nsIDOMElement> pTheDetail;
    nsCOMPtr<nsIDOMNode> pNode;
    rv = pFault->GetDetail(getter_AddRefs(pTheDetail));
    NS_ENSURE_SUCCESS(rv,rv);
    rv = pTheDetail->GetFirstChild(getter_AddRefs(pNode));
    NS_ENSURE_SUCCESS(rv,rv);
    if (pNode) {
      nsCOMPtr<nsIDOMNamedNodeMap> pAttributes;
      nsCOMPtr<nsIDOMNode> pAttribute, pFirstNode;
      nsAutoString pNodeValue;
      rv = pNode->GetFirstChild(getter_AddRefs(pFirstNode));
      NS_ENSURE_SUCCESS(rv,rv);
      if (pFirstNode) {
        pFirstNode->GetNodeValue(pNodeValue);
        NS_ENSURE_SUCCESS(rv,rv);
        pDetail  = pNodeValue;
      }
      pNode->GetAttributes(getter_AddRefs(pAttributes));
      NS_ENSURE_SUCCESS(rv,rv);
      pAttributes->GetNamedItem(NS_LITERAL_STRING("code"), getter_AddRefs(pAttribute));
      NS_ENSURE_SUCCESS(rv,rv);
      if (pAttribute) {
        pAttribute->GetNodeValue(pNodeValue);
        NS_ENSURE_SUCCESS(rv,rv);
        pDetail += NS_LITERAL_STRING("\n(Erreur ");
        pDetail += pNodeValue;
        pDetail += NS_LITERAL_STRING(")");
      }
    } else pDetail = NS_LITERAL_STRING("Erreur sans message.");
    pFaute = pDetail;
    rv = pFault->GetFaultString(pTitle);
    NS_ENSURE_SUCCESS(rv,rv);
    nsCOMPtr<nsIPrompt> pPrompt= do_GetService(NS_DEFAULTPROMPT_CONTRACTID, &rv);
    NS_ENSURE_SUCCESS(rv,rv);
    pPrompt->Alert(ToNewUnicode(pTitle), ToNewUnicode(pFaute));
    return NS_ERROR_FAILURE;
  }

  nsISOAPParameter ** pParameters;
  PRUint32 pTotal;
  rv = aResponse->GetParameters(PR_FALSE, &pTotal, &pParameters);
  NS_ENSURE_SUCCESS(rv,rv);
  if (pTotal!=1) {
    nsCOMPtr<nsIPrompt> pPrompt= do_GetService(NS_DEFAULTPROMPT_CONTRACTID, &rv);
    NS_ENSURE_SUCCESS(rv,rv);
    pPrompt->Alert(ToNewUnicode(NS_LITERAL_CSTRING("Erreur système")), ToNewUnicode(NS_LITERAL_CSTRING("Le nombre total de paramètres reçus est incorrect.")));
    return NS_ERROR_FAILURE;
  }

  nsAutoString pText;
  nsCOMArray<nsIVariant> pArray;
  nsCOMPtr<nsIWritableVariant> pVariant;
  PRUint32 pLsize=0, pCsize=0;
  PRUint32 pLineIndex, pColIndex;
  PRUint16 pNodeType;
  nsCOMPtr<nsIDOMElement> pResult;
  nsCOMPtr<nsIDOMNodeList> pLines, pValues;
  nsCOMPtr<nsIDOMNode> pLine, pValue, pContent;
  rv = pParameters[0]->GetElement(getter_AddRefs(pResult));
  NS_ENSURE_SUCCESS(rv,rv);
  rv = pResult->GetChildNodes(getter_AddRefs(pLines));
  NS_ENSURE_SUCCESS(rv,rv);
  pLines->GetLength(&pLsize);
  for (pLineIndex=0;pLineIndex<pLsize;pLineIndex++) {
    do {
      rv = pLines->Item(pLineIndex, getter_AddRefs(pLine));
      NS_ENSURE_SUCCESS(rv,rv);
      pLine->GetNodeType(&pNodeType);
      if (pNodeType!=nsIDOMNode::ELEMENT_NODE) pLineIndex++;
    } while (pLineIndex<pLsize && pNodeType!=nsIDOMNode::ELEMENT_NODE);
    if (pLineIndex>=pLsize) break;
    rv = pLine->GetChildNodes(getter_AddRefs(pValues));
    NS_ENSURE_SUCCESS(rv,rv);
    pValues->GetLength(&pCsize);
    for (pColIndex=0;pColIndex<pCsize;pColIndex++) {
      do {
        rv = pValues->Item(pColIndex, getter_AddRefs(pValue));
        NS_ENSURE_SUCCESS(rv,rv);
        pValue->GetNodeType(&pNodeType);
        if (pNodeType!=nsIDOMNode::ELEMENT_NODE) pColIndex++;
      } while (pColIndex<pCsize && pNodeType!=nsIDOMNode::ELEMENT_NODE);
      if (pColIndex>=pCsize) break;
      rv = pValue->GetFirstChild(getter_AddRefs(pContent));
      NS_ENSURE_SUCCESS(rv,rv);
      pVariant = do_CreateInstance(NS_VARIANT_CONTRACTID, &rv);
      NS_ENSURE_SUCCESS(rv,rv);
      if (pContent) {
        rv = pContent->GetNodeValue(pText);
        NS_ENSURE_SUCCESS(rv,rv);
        pVariant->SetAsAString(pText);
        printf("%s|",ToNewCString(pText));
      } else {
        pVariant->SetAsAString(NS_LITERAL_STRING(""));
      }
      rv = pArray.AppendObject(pVariant);
    }
  }
  rv = mComponent->TreatP0038(pArray, pLsize, pCsize, mSearch);
  return rv;
}


/* Generated by Pygmalion */


NS_IMPL_ISUPPORTS1(mozListenerP0039, nsISOAPResponseListener)

mozListenerP0039::mozListenerP0039(mozC02gestsea* aComponent, const nsACString & aSearch)
{
  mComponent = aComponent;
  mSearch = aSearch;
}
mozListenerP0039::~mozListenerP0039()
{
}

NS_IMETHODIMP mozListenerP0039::HandleResponse(nsISOAPResponse *aResponse, nsISOAPCall *aCall, PRUint32 aStatus, PRBool aLast, PRBool *aReturn)
{
  nsresult rv;
  nsCOMPtr<nsISOAPFault> pFault;
  rv = aResponse->GetFault(getter_AddRefs(pFault));
  NS_ENSURE_SUCCESS(rv, rv);
  if (pFault) {
    nsAutoString pFaute, pDetail, pTitle;
    nsCOMPtr<nsIDOMElement> pTheDetail;
    nsCOMPtr<nsIDOMNode> pNode;
    rv = pFault->GetDetail(getter_AddRefs(pTheDetail));
    NS_ENSURE_SUCCESS(rv,rv);
    rv = pTheDetail->GetFirstChild(getter_AddRefs(pNode));
    NS_ENSURE_SUCCESS(rv,rv);
    if (pNode) {
      nsCOMPtr<nsIDOMNamedNodeMap> pAttributes;
      nsCOMPtr<nsIDOMNode> pAttribute, pFirstNode;
      nsAutoString pNodeValue;
      rv = pNode->GetFirstChild(getter_AddRefs(pFirstNode));
      NS_ENSURE_SUCCESS(rv,rv);
      if (pFirstNode) {
        pFirstNode->GetNodeValue(pNodeValue);
        NS_ENSURE_SUCCESS(rv,rv);
        pDetail  = pNodeValue;
      }
      pNode->GetAttributes(getter_AddRefs(pAttributes));
      NS_ENSURE_SUCCESS(rv,rv);
      pAttributes->GetNamedItem(NS_LITERAL_STRING("code"), getter_AddRefs(pAttribute));
      NS_ENSURE_SUCCESS(rv,rv);
      if (pAttribute) {
        pAttribute->GetNodeValue(pNodeValue);
        NS_ENSURE_SUCCESS(rv,rv);
        pDetail += NS_LITERAL_STRING("\n(Erreur ");
        pDetail += pNodeValue;
        pDetail += NS_LITERAL_STRING(")");
      }
    } else pDetail = NS_LITERAL_STRING("Erreur sans message.");
    pFaute = pDetail;
    rv = pFault->GetFaultString(pTitle);
    NS_ENSURE_SUCCESS(rv,rv);
    nsCOMPtr<nsIPrompt> pPrompt= do_GetService(NS_DEFAULTPROMPT_CONTRACTID, &rv);
    NS_ENSURE_SUCCESS(rv,rv);
    pPrompt->Alert(ToNewUnicode(pTitle), ToNewUnicode(pFaute));
    return NS_ERROR_FAILURE;
  }

  nsISOAPParameter ** pParameters;
  PRUint32 pTotal;
  rv = aResponse->GetParameters(PR_FALSE, &pTotal, &pParameters);
  NS_ENSURE_SUCCESS(rv,rv);
  if (pTotal!=1) {
    nsCOMPtr<nsIPrompt> pPrompt= do_GetService(NS_DEFAULTPROMPT_CONTRACTID, &rv);
    NS_ENSURE_SUCCESS(rv,rv);
    pPrompt->Alert(ToNewUnicode(NS_LITERAL_CSTRING("Erreur système")), ToNewUnicode(NS_LITERAL_CSTRING("Le nombre total de paramètres reçus est incorrect.")));
    return NS_ERROR_FAILURE;
  }

  nsAutoString pText;
  nsCOMArray<nsIVariant> pArray;
  nsCOMPtr<nsIWritableVariant> pVariant;
  PRUint32 pLsize=0, pCsize=0;
  PRUint32 pLineIndex, pColIndex;
  PRUint16 pNodeType;
  nsCOMPtr<nsIDOMElement> pResult;
  nsCOMPtr<nsIDOMNodeList> pLines, pValues;
  nsCOMPtr<nsIDOMNode> pLine, pValue, pContent;
  rv = pParameters[0]->GetElement(getter_AddRefs(pResult));
  NS_ENSURE_SUCCESS(rv,rv);
  rv = pResult->GetChildNodes(getter_AddRefs(pLines));
  NS_ENSURE_SUCCESS(rv,rv);
  pLines->GetLength(&pLsize);
  for (pLineIndex=0;pLineIndex<pLsize;pLineIndex++) {
    do {
      rv = pLines->Item(pLineIndex, getter_AddRefs(pLine));
      NS_ENSURE_SUCCESS(rv,rv);
      pLine->GetNodeType(&pNodeType);
      if (pNodeType!=nsIDOMNode::ELEMENT_NODE) pLineIndex++;
    } while (pLineIndex<pLsize && pNodeType!=nsIDOMNode::ELEMENT_NODE);
    if (pLineIndex>=pLsize) break;
    rv = pLine->GetChildNodes(getter_AddRefs(pValues));
    NS_ENSURE_SUCCESS(rv,rv);
    pValues->GetLength(&pCsize);
    for (pColIndex=0;pColIndex<pCsize;pColIndex++) {
      do {
        rv = pValues->Item(pColIndex, getter_AddRefs(pValue));
        NS_ENSURE_SUCCESS(rv,rv);
        pValue->GetNodeType(&pNodeType);
        if (pNodeType!=nsIDOMNode::ELEMENT_NODE) pColIndex++;
      } while (pColIndex<pCsize && pNodeType!=nsIDOMNode::ELEMENT_NODE);
      if (pColIndex>=pCsize) break;
      rv = pValue->GetFirstChild(getter_AddRefs(pContent));
      NS_ENSURE_SUCCESS(rv,rv);
      pVariant = do_CreateInstance(NS_VARIANT_CONTRACTID, &rv);
      NS_ENSURE_SUCCESS(rv,rv);
      if (pContent) {
        rv = pContent->GetNodeValue(pText);
        NS_ENSURE_SUCCESS(rv,rv);
        pVariant->SetAsAString(pText);
        printf("%s|",ToNewCString(pText));
      } else {
        pVariant->SetAsAString(NS_LITERAL_STRING(""));
      }
      rv = pArray.AppendObject(pVariant);
    }
  }
  rv = mComponent->TreatP0039(pArray, pLsize, pCsize, mSearch);
  return rv;
}


/* Generated by Pygmalion */


NS_IMPL_ISUPPORTS1(mozListenerP003A, nsISOAPResponseListener)

mozListenerP003A::mozListenerP003A(mozC02gestsea* aComponent, const nsAString & aKey)
{
  mComponent = aComponent;
  mKey = aKey;
}
mozListenerP003A::~mozListenerP003A()
{
}

NS_IMETHODIMP mozListenerP003A::HandleResponse(nsISOAPResponse *aResponse, nsISOAPCall *aCall, PRUint32 aStatus, PRBool aLast, PRBool *aReturn)
{
  nsresult rv;
  nsCOMPtr<nsISOAPFault> pFault;
  rv = aResponse->GetFault(getter_AddRefs(pFault));
  NS_ENSURE_SUCCESS(rv, rv);
  if (pFault) {
    nsAutoString pFaute, pDetail, pTitle;
    nsCOMPtr<nsIDOMElement> pTheDetail;
    nsCOMPtr<nsIDOMNode> pNode;
    rv = pFault->GetDetail(getter_AddRefs(pTheDetail));
    NS_ENSURE_SUCCESS(rv,rv);
    rv = pTheDetail->GetFirstChild(getter_AddRefs(pNode));
    NS_ENSURE_SUCCESS(rv,rv);
    if (pNode) {
      nsCOMPtr<nsIDOMNamedNodeMap> pAttributes;
      nsCOMPtr<nsIDOMNode> pAttribute, pFirstNode;
      nsAutoString pNodeValue;
      rv = pNode->GetFirstChild(getter_AddRefs(pFirstNode));
      NS_ENSURE_SUCCESS(rv,rv);
      if (pFirstNode) {
        pFirstNode->GetNodeValue(pNodeValue);
        NS_ENSURE_SUCCESS(rv,rv);
        pDetail  = pNodeValue;
      }
      pNode->GetAttributes(getter_AddRefs(pAttributes));
      NS_ENSURE_SUCCESS(rv,rv);
      pAttributes->GetNamedItem(NS_LITERAL_STRING("code"), getter_AddRefs(pAttribute));
      NS_ENSURE_SUCCESS(rv,rv);
      if (pAttribute) {
        pAttribute->GetNodeValue(pNodeValue);
        NS_ENSURE_SUCCESS(rv,rv);
        pDetail += NS_LITERAL_STRING("\n(Erreur ");
        pDetail += pNodeValue;
        pDetail += NS_LITERAL_STRING(")");
      }
    } else pDetail = NS_LITERAL_STRING("Erreur sans message.");
    pFaute = pDetail;
    rv = pFault->GetFaultString(pTitle);
    NS_ENSURE_SUCCESS(rv,rv);
    nsCOMPtr<nsIPrompt> pPrompt= do_GetService(NS_DEFAULTPROMPT_CONTRACTID, &rv);
    NS_ENSURE_SUCCESS(rv,rv);
    pPrompt->Alert(ToNewUnicode(pTitle), ToNewUnicode(pFaute));
    return NS_ERROR_FAILURE;
  }

  nsISOAPParameter ** pParameters;
  PRUint32 pTotal;
  rv = aResponse->GetParameters(PR_FALSE, &pTotal, &pParameters);
  NS_ENSURE_SUCCESS(rv,rv);
  if (pTotal!=1) {
    nsCOMPtr<nsIPrompt> pPrompt= do_GetService(NS_DEFAULTPROMPT_CONTRACTID, &rv);
    NS_ENSURE_SUCCESS(rv,rv);
    pPrompt->Alert(ToNewUnicode(NS_LITERAL_CSTRING("Erreur système")), ToNewUnicode(NS_LITERAL_CSTRING("Le nombre total de paramètres reçus est incorrect.")));
    return NS_ERROR_FAILURE;
  }

  nsAutoString pText;
  nsCOMArray<nsIVariant> pArray;
  nsCOMPtr<nsIWritableVariant> pVariant;
  PRUint32 pLsize=0, pCsize=0;
  PRUint32 pLineIndex, pColIndex;
  PRUint16 pNodeType;
  nsCOMPtr<nsIDOMElement> pResult;
  nsCOMPtr<nsIDOMNodeList> pLines, pValues;
  nsCOMPtr<nsIDOMNode> pLine, pValue, pContent;
  rv = pParameters[0]->GetElement(getter_AddRefs(pResult));
  NS_ENSURE_SUCCESS(rv,rv);
  rv = pResult->GetChildNodes(getter_AddRefs(pLines));
  NS_ENSURE_SUCCESS(rv,rv);
  pLines->GetLength(&pLsize);
  for (pLineIndex=0;pLineIndex<pLsize;pLineIndex++) {
    do {
      rv = pLines->Item(pLineIndex, getter_AddRefs(pLine));
      NS_ENSURE_SUCCESS(rv,rv);
      pLine->GetNodeType(&pNodeType);
      if (pNodeType!=nsIDOMNode::ELEMENT_NODE) pLineIndex++;
    } while (pLineIndex<pLsize && pNodeType!=nsIDOMNode::ELEMENT_NODE);
    if (pLineIndex>=pLsize) break;
    rv = pLine->GetChildNodes(getter_AddRefs(pValues));
    NS_ENSURE_SUCCESS(rv,rv);
    pValues->GetLength(&pCsize);
    for (pColIndex=0;pColIndex<pCsize;pColIndex++) {
      do {
        rv = pValues->Item(pColIndex, getter_AddRefs(pValue));
        NS_ENSURE_SUCCESS(rv,rv);
        pValue->GetNodeType(&pNodeType);
        if (pNodeType!=nsIDOMNode::ELEMENT_NODE) pColIndex++;
      } while (pColIndex<pCsize && pNodeType!=nsIDOMNode::ELEMENT_NODE);
      if (pColIndex>=pCsize) break;
      rv = pValue->GetFirstChild(getter_AddRefs(pContent));
      NS_ENSURE_SUCCESS(rv,rv);
      pVariant = do_CreateInstance(NS_VARIANT_CONTRACTID, &rv);
      NS_ENSURE_SUCCESS(rv,rv);
      if (pContent) {
        rv = pContent->GetNodeValue(pText);
        NS_ENSURE_SUCCESS(rv,rv);
        pVariant->SetAsAString(pText);
        printf("%s|",ToNewCString(pText));
      } else {
        pVariant->SetAsAString(NS_LITERAL_STRING(""));
      }
      rv = pArray.AppendObject(pVariant);
    }
  }
  rv = mComponent->TreatP003A(pArray, pLsize, pCsize, mKey);
  return rv;
}


/* Generated by Pygmalion */


NS_IMPL_ISUPPORTS1(mozListenerP003B, nsISOAPResponseListener)

mozListenerP003B::mozListenerP003B(mozC02gestsea* aComponent, const nsACString & aSearch)
{
  mComponent = aComponent;
  mSearch = aSearch;
}
mozListenerP003B::~mozListenerP003B()
{
}

NS_IMETHODIMP mozListenerP003B::HandleResponse(nsISOAPResponse *aResponse, nsISOAPCall *aCall, PRUint32 aStatus, PRBool aLast, PRBool *aReturn)
{
  nsresult rv;
  nsCOMPtr<nsISOAPFault> pFault;
  rv = aResponse->GetFault(getter_AddRefs(pFault));
  NS_ENSURE_SUCCESS(rv, rv);
  if (pFault) {
    nsAutoString pFaute, pDetail, pTitle;
    nsCOMPtr<nsIDOMElement> pTheDetail;
    nsCOMPtr<nsIDOMNode> pNode;
    rv = pFault->GetDetail(getter_AddRefs(pTheDetail));
    NS_ENSURE_SUCCESS(rv,rv);
    rv = pTheDetail->GetFirstChild(getter_AddRefs(pNode));
    NS_ENSURE_SUCCESS(rv,rv);
    if (pNode) {
      nsCOMPtr<nsIDOMNamedNodeMap> pAttributes;
      nsCOMPtr<nsIDOMNode> pAttribute, pFirstNode;
      nsAutoString pNodeValue;
      rv = pNode->GetFirstChild(getter_AddRefs(pFirstNode));
      NS_ENSURE_SUCCESS(rv,rv);
      if (pFirstNode) {
        pFirstNode->GetNodeValue(pNodeValue);
        NS_ENSURE_SUCCESS(rv,rv);
        pDetail  = pNodeValue;
      }
      pNode->GetAttributes(getter_AddRefs(pAttributes));
      NS_ENSURE_SUCCESS(rv,rv);
      pAttributes->GetNamedItem(NS_LITERAL_STRING("code"), getter_AddRefs(pAttribute));
      NS_ENSURE_SUCCESS(rv,rv);
      if (pAttribute) {
        pAttribute->GetNodeValue(pNodeValue);
        NS_ENSURE_SUCCESS(rv,rv);
        pDetail += NS_LITERAL_STRING("\n(Erreur ");
        pDetail += pNodeValue;
        pDetail += NS_LITERAL_STRING(")");
      }
    } else pDetail = NS_LITERAL_STRING("Erreur sans message.");
    pFaute = pDetail;
    rv = pFault->GetFaultString(pTitle);
    NS_ENSURE_SUCCESS(rv,rv);
    nsCOMPtr<nsIPrompt> pPrompt= do_GetService(NS_DEFAULTPROMPT_CONTRACTID, &rv);
    NS_ENSURE_SUCCESS(rv,rv);
    pPrompt->Alert(ToNewUnicode(pTitle), ToNewUnicode(pFaute));
    return NS_ERROR_FAILURE;
  }

  nsISOAPParameter ** pParameters;
  PRUint32 pTotal;
  rv = aResponse->GetParameters(PR_FALSE, &pTotal, &pParameters);
  NS_ENSURE_SUCCESS(rv,rv);
  if (pTotal!=1) {
    nsCOMPtr<nsIPrompt> pPrompt= do_GetService(NS_DEFAULTPROMPT_CONTRACTID, &rv);
    NS_ENSURE_SUCCESS(rv,rv);
    pPrompt->Alert(ToNewUnicode(NS_LITERAL_CSTRING("Erreur système")), ToNewUnicode(NS_LITERAL_CSTRING("Le nombre total de paramètres reçus est incorrect.")));
    return NS_ERROR_FAILURE;
  }

  nsAutoString pText;
  nsCOMArray<nsIVariant> pArray;
  nsCOMPtr<nsIWritableVariant> pVariant;
  PRUint32 pLsize=0, pCsize=0;
  PRUint32 pLineIndex, pColIndex;
  PRUint16 pNodeType;
  nsCOMPtr<nsIDOMElement> pResult;
  nsCOMPtr<nsIDOMNodeList> pLines, pValues;
  nsCOMPtr<nsIDOMNode> pLine, pValue, pContent;
  rv = pParameters[0]->GetElement(getter_AddRefs(pResult));
  NS_ENSURE_SUCCESS(rv,rv);
  rv = pResult->GetChildNodes(getter_AddRefs(pLines));
  NS_ENSURE_SUCCESS(rv,rv);
  pLines->GetLength(&pLsize);
  for (pLineIndex=0;pLineIndex<pLsize;pLineIndex++) {
    do {
      rv = pLines->Item(pLineIndex, getter_AddRefs(pLine));
      NS_ENSURE_SUCCESS(rv,rv);
      pLine->GetNodeType(&pNodeType);
      if (pNodeType!=nsIDOMNode::ELEMENT_NODE) pLineIndex++;
    } while (pLineIndex<pLsize && pNodeType!=nsIDOMNode::ELEMENT_NODE);
    if (pLineIndex>=pLsize) break;
    rv = pLine->GetChildNodes(getter_AddRefs(pValues));
    NS_ENSURE_SUCCESS(rv,rv);
    pValues->GetLength(&pCsize);
    for (pColIndex=0;pColIndex<pCsize;pColIndex++) {
      do {
        rv = pValues->Item(pColIndex, getter_AddRefs(pValue));
        NS_ENSURE_SUCCESS(rv,rv);
        pValue->GetNodeType(&pNodeType);
        if (pNodeType!=nsIDOMNode::ELEMENT_NODE) pColIndex++;
      } while (pColIndex<pCsize && pNodeType!=nsIDOMNode::ELEMENT_NODE);
      if (pColIndex>=pCsize) break;
      rv = pValue->GetFirstChild(getter_AddRefs(pContent));
      NS_ENSURE_SUCCESS(rv,rv);
      pVariant = do_CreateInstance(NS_VARIANT_CONTRACTID, &rv);
      NS_ENSURE_SUCCESS(rv,rv);
      if (pContent) {
        rv = pContent->GetNodeValue(pText);
        NS_ENSURE_SUCCESS(rv,rv);
        pVariant->SetAsAString(pText);
        printf("%s|",ToNewCString(pText));
      } else {
        pVariant->SetAsAString(NS_LITERAL_STRING(""));
      }
      rv = pArray.AppendObject(pVariant);
    }
  }
  rv = mComponent->TreatP003B(pArray, pLsize, pCsize, mSearch);
  return rv;
}


/* Generated by Pygmalion */


NS_IMPL_ISUPPORTS1(mozListenerP003C, nsISOAPResponseListener)

mozListenerP003C::mozListenerP003C(mozC02gestsea* aComponent, const nsACString & aSearch)
{
  mComponent = aComponent;
  mSearch = aSearch;
}
mozListenerP003C::~mozListenerP003C()
{
}

NS_IMETHODIMP mozListenerP003C::HandleResponse(nsISOAPResponse *aResponse, nsISOAPCall *aCall, PRUint32 aStatus, PRBool aLast, PRBool *aReturn)
{
  nsresult rv;
  nsCOMPtr<nsISOAPFault> pFault;
  rv = aResponse->GetFault(getter_AddRefs(pFault));
  NS_ENSURE_SUCCESS(rv, rv);
  if (pFault) {
    nsAutoString pFaute, pDetail, pTitle;
    nsCOMPtr<nsIDOMElement> pTheDetail;
    nsCOMPtr<nsIDOMNode> pNode;
    rv = pFault->GetDetail(getter_AddRefs(pTheDetail));
    NS_ENSURE_SUCCESS(rv,rv);
    rv = pTheDetail->GetFirstChild(getter_AddRefs(pNode));
    NS_ENSURE_SUCCESS(rv,rv);
    if (pNode) {
      nsCOMPtr<nsIDOMNamedNodeMap> pAttributes;
      nsCOMPtr<nsIDOMNode> pAttribute, pFirstNode;
      nsAutoString pNodeValue;
      rv = pNode->GetFirstChild(getter_AddRefs(pFirstNode));
      NS_ENSURE_SUCCESS(rv,rv);
      if (pFirstNode) {
        pFirstNode->GetNodeValue(pNodeValue);
        NS_ENSURE_SUCCESS(rv,rv);
        pDetail  = pNodeValue;
      }
      pNode->GetAttributes(getter_AddRefs(pAttributes));
      NS_ENSURE_SUCCESS(rv,rv);
      pAttributes->GetNamedItem(NS_LITERAL_STRING("code"), getter_AddRefs(pAttribute));
      NS_ENSURE_SUCCESS(rv,rv);
      if (pAttribute) {
        pAttribute->GetNodeValue(pNodeValue);
        NS_ENSURE_SUCCESS(rv,rv);
        pDetail += NS_LITERAL_STRING("\n(Erreur ");
        pDetail += pNodeValue;
        pDetail += NS_LITERAL_STRING(")");
      }
    } else pDetail = NS_LITERAL_STRING("Erreur sans message.");
    pFaute = pDetail;
    rv = pFault->GetFaultString(pTitle);
    NS_ENSURE_SUCCESS(rv,rv);
    nsCOMPtr<nsIPrompt> pPrompt= do_GetService(NS_DEFAULTPROMPT_CONTRACTID, &rv);
    NS_ENSURE_SUCCESS(rv,rv);
    pPrompt->Alert(ToNewUnicode(pTitle), ToNewUnicode(pFaute));
    return NS_ERROR_FAILURE;
  }

  nsISOAPParameter ** pParameters;
  PRUint32 pTotal;
  rv = aResponse->GetParameters(PR_FALSE, &pTotal, &pParameters);
  NS_ENSURE_SUCCESS(rv,rv);
  if (pTotal!=1) {
    nsCOMPtr<nsIPrompt> pPrompt= do_GetService(NS_DEFAULTPROMPT_CONTRACTID, &rv);
    NS_ENSURE_SUCCESS(rv,rv);
    pPrompt->Alert(ToNewUnicode(NS_LITERAL_CSTRING("Erreur système")), ToNewUnicode(NS_LITERAL_CSTRING("Le nombre total de paramètres reçus est incorrect.")));
    return NS_ERROR_FAILURE;
  }

  nsAutoString pText;
  nsCOMArray<nsIVariant> pArray;
  nsCOMPtr<nsIWritableVariant> pVariant;
  PRUint32 pLsize=0, pCsize=0;
  PRUint32 pLineIndex, pColIndex;
  PRUint16 pNodeType;
  nsCOMPtr<nsIDOMElement> pResult;
  nsCOMPtr<nsIDOMNodeList> pLines, pValues;
  nsCOMPtr<nsIDOMNode> pLine, pValue, pContent;
  rv = pParameters[0]->GetElement(getter_AddRefs(pResult));
  NS_ENSURE_SUCCESS(rv,rv);
  rv = pResult->GetChildNodes(getter_AddRefs(pLines));
  NS_ENSURE_SUCCESS(rv,rv);
  pLines->GetLength(&pLsize);
  for (pLineIndex=0;pLineIndex<pLsize;pLineIndex++) {
    do {
      rv = pLines->Item(pLineIndex, getter_AddRefs(pLine));
      NS_ENSURE_SUCCESS(rv,rv);
      pLine->GetNodeType(&pNodeType);
      if (pNodeType!=nsIDOMNode::ELEMENT_NODE) pLineIndex++;
    } while (pLineIndex<pLsize && pNodeType!=nsIDOMNode::ELEMENT_NODE);
    if (pLineIndex>=pLsize) break;
    rv = pLine->GetChildNodes(getter_AddRefs(pValues));
    NS_ENSURE_SUCCESS(rv,rv);
    pValues->GetLength(&pCsize);
    for (pColIndex=0;pColIndex<pCsize;pColIndex++) {
      do {
        rv = pValues->Item(pColIndex, getter_AddRefs(pValue));
        NS_ENSURE_SUCCESS(rv,rv);
        pValue->GetNodeType(&pNodeType);
        if (pNodeType!=nsIDOMNode::ELEMENT_NODE) pColIndex++;
      } while (pColIndex<pCsize && pNodeType!=nsIDOMNode::ELEMENT_NODE);
      if (pColIndex>=pCsize) break;
      rv = pValue->GetFirstChild(getter_AddRefs(pContent));
      NS_ENSURE_SUCCESS(rv,rv);
      pVariant = do_CreateInstance(NS_VARIANT_CONTRACTID, &rv);
      NS_ENSURE_SUCCESS(rv,rv);
      if (pContent) {
        rv = pContent->GetNodeValue(pText);
        NS_ENSURE_SUCCESS(rv,rv);
        pVariant->SetAsAString(pText);
        printf("%s|",ToNewCString(pText));
      } else {
        pVariant->SetAsAString(NS_LITERAL_STRING(""));
      }
      rv = pArray.AppendObject(pVariant);
    }
  }
  rv = mComponent->TreatP003C(pArray, pLsize, pCsize, mSearch);
  return rv;
}


/* Generated by Pygmalion */


NS_IMPL_ISUPPORTS1(mozListenerP003D, nsISOAPResponseListener)

mozListenerP003D::mozListenerP003D(mozC02gestsea* aComponent, const nsAString & aKey)
{
  mComponent = aComponent;
  mKey = aKey;
}
mozListenerP003D::~mozListenerP003D()
{
}

NS_IMETHODIMP mozListenerP003D::HandleResponse(nsISOAPResponse *aResponse, nsISOAPCall *aCall, PRUint32 aStatus, PRBool aLast, PRBool *aReturn)
{
  nsresult rv;
  nsCOMPtr<nsISOAPFault> pFault;
  rv = aResponse->GetFault(getter_AddRefs(pFault));
  NS_ENSURE_SUCCESS(rv, rv);
  if (pFault) {
    nsAutoString pFaute, pDetail, pTitle;
    nsCOMPtr<nsIDOMElement> pTheDetail;
    nsCOMPtr<nsIDOMNode> pNode;
    rv = pFault->GetDetail(getter_AddRefs(pTheDetail));
    NS_ENSURE_SUCCESS(rv,rv);
    rv = pTheDetail->GetFirstChild(getter_AddRefs(pNode));
    NS_ENSURE_SUCCESS(rv,rv);
    if (pNode) {
      nsCOMPtr<nsIDOMNamedNodeMap> pAttributes;
      nsCOMPtr<nsIDOMNode> pAttribute, pFirstNode;
      nsAutoString pNodeValue;
      rv = pNode->GetFirstChild(getter_AddRefs(pFirstNode));
      NS_ENSURE_SUCCESS(rv,rv);
      if (pFirstNode) {
        pFirstNode->GetNodeValue(pNodeValue);
        NS_ENSURE_SUCCESS(rv,rv);
        pDetail  = pNodeValue;
      }
      pNode->GetAttributes(getter_AddRefs(pAttributes));
      NS_ENSURE_SUCCESS(rv,rv);
      pAttributes->GetNamedItem(NS_LITERAL_STRING("code"), getter_AddRefs(pAttribute));
      NS_ENSURE_SUCCESS(rv,rv);
      if (pAttribute) {
        pAttribute->GetNodeValue(pNodeValue);
        NS_ENSURE_SUCCESS(rv,rv);
        pDetail += NS_LITERAL_STRING("\n(Erreur ");
        pDetail += pNodeValue;
        pDetail += NS_LITERAL_STRING(")");
      }
    } else pDetail = NS_LITERAL_STRING("Erreur sans message.");
    pFaute = pDetail;
    rv = pFault->GetFaultString(pTitle);
    NS_ENSURE_SUCCESS(rv,rv);
    nsCOMPtr<nsIPrompt> pPrompt= do_GetService(NS_DEFAULTPROMPT_CONTRACTID, &rv);
    NS_ENSURE_SUCCESS(rv,rv);
    pPrompt->Alert(ToNewUnicode(pTitle), ToNewUnicode(pFaute));
    return NS_ERROR_FAILURE;
  }

  nsISOAPParameter ** pParameters;
  PRUint32 pTotal;
  rv = aResponse->GetParameters(PR_FALSE, &pTotal, &pParameters);
  NS_ENSURE_SUCCESS(rv,rv);
  if (pTotal!=1) {
    nsCOMPtr<nsIPrompt> pPrompt= do_GetService(NS_DEFAULTPROMPT_CONTRACTID, &rv);
    NS_ENSURE_SUCCESS(rv,rv);
    pPrompt->Alert(ToNewUnicode(NS_LITERAL_CSTRING("Erreur système")), ToNewUnicode(NS_LITERAL_CSTRING("Le nombre total de paramètres reçus est incorrect.")));
    return NS_ERROR_FAILURE;
  }

  nsAutoString pText;
  nsCOMArray<nsIVariant> pArray;
  nsCOMPtr<nsIWritableVariant> pVariant;
  PRUint32 pLsize=0, pCsize=0;
  PRUint32 pLineIndex, pColIndex;
  PRUint16 pNodeType;
  nsCOMPtr<nsIDOMElement> pResult;
  nsCOMPtr<nsIDOMNodeList> pLines, pValues;
  nsCOMPtr<nsIDOMNode> pLine, pValue, pContent;
  rv = pParameters[0]->GetElement(getter_AddRefs(pResult));
  NS_ENSURE_SUCCESS(rv,rv);
  rv = pResult->GetChildNodes(getter_AddRefs(pLines));
  NS_ENSURE_SUCCESS(rv,rv);
  pLines->GetLength(&pLsize);
  for (pLineIndex=0;pLineIndex<pLsize;pLineIndex++) {
    do {
      rv = pLines->Item(pLineIndex, getter_AddRefs(pLine));
      NS_ENSURE_SUCCESS(rv,rv);
      pLine->GetNodeType(&pNodeType);
      if (pNodeType!=nsIDOMNode::ELEMENT_NODE) pLineIndex++;
    } while (pLineIndex<pLsize && pNodeType!=nsIDOMNode::ELEMENT_NODE);
    if (pLineIndex>=pLsize) break;
    rv = pLine->GetChildNodes(getter_AddRefs(pValues));
    NS_ENSURE_SUCCESS(rv,rv);
    pValues->GetLength(&pCsize);
    for (pColIndex=0;pColIndex<pCsize;pColIndex++) {
      do {
        rv = pValues->Item(pColIndex, getter_AddRefs(pValue));
        NS_ENSURE_SUCCESS(rv,rv);
        pValue->GetNodeType(&pNodeType);
        if (pNodeType!=nsIDOMNode::ELEMENT_NODE) pColIndex++;
      } while (pColIndex<pCsize && pNodeType!=nsIDOMNode::ELEMENT_NODE);
      if (pColIndex>=pCsize) break;
      rv = pValue->GetFirstChild(getter_AddRefs(pContent));
      NS_ENSURE_SUCCESS(rv,rv);
      pVariant = do_CreateInstance(NS_VARIANT_CONTRACTID, &rv);
      NS_ENSURE_SUCCESS(rv,rv);
      if (pContent) {
        rv = pContent->GetNodeValue(pText);
        NS_ENSURE_SUCCESS(rv,rv);
        pVariant->SetAsAString(pText);
        printf("%s|",ToNewCString(pText));
      } else {
        pVariant->SetAsAString(NS_LITERAL_STRING(""));
      }
      rv = pArray.AppendObject(pVariant);
    }
  }
  rv = mComponent->TreatP003D(pArray, pLsize, pCsize, mKey);
  return rv;
}


/* Generated by Pygmalion */


NS_IMPL_ISUPPORTS1(mozListenerP003E, nsISOAPResponseListener)

mozListenerP003E::mozListenerP003E(mozC02gestsea* aComponent, const nsAString & aKey)
{
  mComponent = aComponent;
  mKey = aKey;
}
mozListenerP003E::~mozListenerP003E()
{
}

NS_IMETHODIMP mozListenerP003E::HandleResponse(nsISOAPResponse *aResponse, nsISOAPCall *aCall, PRUint32 aStatus, PRBool aLast, PRBool *aReturn)
{
  nsresult rv;
  nsCOMPtr<nsISOAPFault> pFault;
  rv = aResponse->GetFault(getter_AddRefs(pFault));
  NS_ENSURE_SUCCESS(rv, rv);
  if (pFault) {
    nsAutoString pFaute, pDetail, pTitle;
    nsCOMPtr<nsIDOMElement> pTheDetail;
    nsCOMPtr<nsIDOMNode> pNode;
    rv = pFault->GetDetail(getter_AddRefs(pTheDetail));
    NS_ENSURE_SUCCESS(rv,rv);
    rv = pTheDetail->GetFirstChild(getter_AddRefs(pNode));
    NS_ENSURE_SUCCESS(rv,rv);
    if (pNode) {
      nsCOMPtr<nsIDOMNamedNodeMap> pAttributes;
      nsCOMPtr<nsIDOMNode> pAttribute, pFirstNode;
      nsAutoString pNodeValue;
      rv = pNode->GetFirstChild(getter_AddRefs(pFirstNode));
      NS_ENSURE_SUCCESS(rv,rv);
      if (pFirstNode) {
        pFirstNode->GetNodeValue(pNodeValue);
        NS_ENSURE_SUCCESS(rv,rv);
        pDetail  = pNodeValue;
      }
      pNode->GetAttributes(getter_AddRefs(pAttributes));
      NS_ENSURE_SUCCESS(rv,rv);
      pAttributes->GetNamedItem(NS_LITERAL_STRING("code"), getter_AddRefs(pAttribute));
      NS_ENSURE_SUCCESS(rv,rv);
      if (pAttribute) {
        pAttribute->GetNodeValue(pNodeValue);
        NS_ENSURE_SUCCESS(rv,rv);
        pDetail += NS_LITERAL_STRING("\n(Erreur ");
        pDetail += pNodeValue;
        pDetail += NS_LITERAL_STRING(")");
      }
    } else pDetail = NS_LITERAL_STRING("Erreur sans message.");
    pFaute = pDetail;
    rv = pFault->GetFaultString(pTitle);
    NS_ENSURE_SUCCESS(rv,rv);
    nsCOMPtr<nsIPrompt> pPrompt= do_GetService(NS_DEFAULTPROMPT_CONTRACTID, &rv);
    NS_ENSURE_SUCCESS(rv,rv);
    pPrompt->Alert(ToNewUnicode(pTitle), ToNewUnicode(pFaute));
    return NS_ERROR_FAILURE;
  }

  nsISOAPParameter ** pParameters;
  PRUint32 pTotal;
  rv = aResponse->GetParameters(PR_FALSE, &pTotal, &pParameters);
  NS_ENSURE_SUCCESS(rv,rv);
  if (pTotal!=1) {
    nsCOMPtr<nsIPrompt> pPrompt= do_GetService(NS_DEFAULTPROMPT_CONTRACTID, &rv);
    NS_ENSURE_SUCCESS(rv,rv);
    pPrompt->Alert(ToNewUnicode(NS_LITERAL_CSTRING("Erreur système")), ToNewUnicode(NS_LITERAL_CSTRING("Le nombre total de paramètres reçus est incorrect.")));
    return NS_ERROR_FAILURE;
  }

  nsAutoString pText;
  nsCOMArray<nsIVariant> pArray;
  nsCOMPtr<nsIWritableVariant> pVariant;
  PRUint32 pLsize=0, pCsize=0;
  PRUint32 pLineIndex, pColIndex;
  PRUint16 pNodeType;
  nsCOMPtr<nsIDOMElement> pResult;
  nsCOMPtr<nsIDOMNodeList> pLines, pValues;
  nsCOMPtr<nsIDOMNode> pLine, pValue, pContent;
  rv = pParameters[0]->GetElement(getter_AddRefs(pResult));
  NS_ENSURE_SUCCESS(rv,rv);
  rv = pResult->GetChildNodes(getter_AddRefs(pLines));
  NS_ENSURE_SUCCESS(rv,rv);
  pLines->GetLength(&pLsize);
  for (pLineIndex=0;pLineIndex<pLsize;pLineIndex++) {
    do {
      rv = pLines->Item(pLineIndex, getter_AddRefs(pLine));
      NS_ENSURE_SUCCESS(rv,rv);
      pLine->GetNodeType(&pNodeType);
      if (pNodeType!=nsIDOMNode::ELEMENT_NODE) pLineIndex++;
    } while (pLineIndex<pLsize && pNodeType!=nsIDOMNode::ELEMENT_NODE);
    if (pLineIndex>=pLsize) break;
    rv = pLine->GetChildNodes(getter_AddRefs(pValues));
    NS_ENSURE_SUCCESS(rv,rv);
    pValues->GetLength(&pCsize);
    for (pColIndex=0;pColIndex<pCsize;pColIndex++) {
      do {
        rv = pValues->Item(pColIndex, getter_AddRefs(pValue));
        NS_ENSURE_SUCCESS(rv,rv);
        pValue->GetNodeType(&pNodeType);
        if (pNodeType!=nsIDOMNode::ELEMENT_NODE) pColIndex++;
      } while (pColIndex<pCsize && pNodeType!=nsIDOMNode::ELEMENT_NODE);
      if (pColIndex>=pCsize) break;
      rv = pValue->GetFirstChild(getter_AddRefs(pContent));
      NS_ENSURE_SUCCESS(rv,rv);
      pVariant = do_CreateInstance(NS_VARIANT_CONTRACTID, &rv);
      NS_ENSURE_SUCCESS(rv,rv);
      if (pContent) {
        rv = pContent->GetNodeValue(pText);
        NS_ENSURE_SUCCESS(rv,rv);
        pVariant->SetAsAString(pText);
        printf("%s|",ToNewCString(pText));
      } else {
        pVariant->SetAsAString(NS_LITERAL_STRING(""));
      }
      rv = pArray.AppendObject(pVariant);
    }
  }
  rv = mComponent->TreatP003E(pArray, pLsize, pCsize, mKey);
  return rv;
}


/* Generated by Pygmalion */


NS_IMPL_ISUPPORTS1(mozListenerP003F, nsISOAPResponseListener)

mozListenerP003F::mozListenerP003F(mozC02gestsea* aComponent, const nsAString & aKey, const nsACString & aField1, const nsACString & aField2, const nsACString & aField3, const nsACString & aField4)
{
  mComponent = aComponent;
  mKey = aKey;
  mField1 = aField1;
  mField2 = aField2;
  mField3 = aField3;
  mField4 = aField4;
}
mozListenerP003F::~mozListenerP003F()
{
}

NS_IMETHODIMP mozListenerP003F::HandleResponse(nsISOAPResponse *aResponse, nsISOAPCall *aCall, PRUint32 aStatus, PRBool aLast, PRBool *aReturn)
{
  nsresult rv;
  nsCOMPtr<nsISOAPFault> pFault;
  rv = aResponse->GetFault(getter_AddRefs(pFault));
  NS_ENSURE_SUCCESS(rv, rv);
  if (pFault) {
    nsAutoString pFaute, pDetail, pTitle;
    nsCOMPtr<nsIDOMElement> pTheDetail;
    nsCOMPtr<nsIDOMNode> pNode;
    rv = pFault->GetDetail(getter_AddRefs(pTheDetail));
    NS_ENSURE_SUCCESS(rv,rv);
    rv = pTheDetail->GetFirstChild(getter_AddRefs(pNode));
    NS_ENSURE_SUCCESS(rv,rv);
    if (pNode) {
      nsCOMPtr<nsIDOMNamedNodeMap> pAttributes;
      nsCOMPtr<nsIDOMNode> pAttribute, pFirstNode;
      nsAutoString pNodeValue;
      rv = pNode->GetFirstChild(getter_AddRefs(pFirstNode));
      NS_ENSURE_SUCCESS(rv,rv);
      if (pFirstNode) {
        pFirstNode->GetNodeValue(pNodeValue);
        NS_ENSURE_SUCCESS(rv,rv);
        pDetail  = pNodeValue;
      }
      pNode->GetAttributes(getter_AddRefs(pAttributes));
      NS_ENSURE_SUCCESS(rv,rv);
      pAttributes->GetNamedItem(NS_LITERAL_STRING("code"), getter_AddRefs(pAttribute));
      NS_ENSURE_SUCCESS(rv,rv);
      if (pAttribute) {
        pAttribute->GetNodeValue(pNodeValue);
        NS_ENSURE_SUCCESS(rv,rv);
        pDetail += NS_LITERAL_STRING("\n(Erreur ");
        pDetail += pNodeValue;
        pDetail += NS_LITERAL_STRING(")");
      }
    } else pDetail = NS_LITERAL_STRING("Erreur sans message.");
    pFaute = pDetail;
    rv = pFault->GetFaultString(pTitle);
    NS_ENSURE_SUCCESS(rv,rv);
    nsCOMPtr<nsIPrompt> pPrompt= do_GetService(NS_DEFAULTPROMPT_CONTRACTID, &rv);
    NS_ENSURE_SUCCESS(rv,rv);
    pPrompt->Alert(ToNewUnicode(pTitle), ToNewUnicode(pFaute));
    return NS_ERROR_FAILURE;
  }

  nsISOAPParameter ** pParameters;
  PRUint32 pTotal;
  rv = aResponse->GetParameters(PR_FALSE, &pTotal, &pParameters);
  NS_ENSURE_SUCCESS(rv,rv);
  if (pTotal!=1) {
    nsCOMPtr<nsIPrompt> pPrompt= do_GetService(NS_DEFAULTPROMPT_CONTRACTID, &rv);
    NS_ENSURE_SUCCESS(rv,rv);
    pPrompt->Alert(ToNewUnicode(NS_LITERAL_CSTRING("Erreur système")), ToNewUnicode(NS_LITERAL_CSTRING("Le nombre total de paramètres reçus est incorrect.")));
    return NS_ERROR_FAILURE;
  }

  nsAutoString pText;
  nsCOMPtr<nsIVariant> pValue;
  rv = pParameters[0]->GetValue(getter_AddRefs(pValue));
  NS_ENSURE_SUCCESS(rv,rv);
  rv = pValue->GetAsAString(pText);
  NS_ENSURE_SUCCESS(rv,rv);
  rv = mComponent->TreatP003F(pText, mKey, mField1, mField2, mField3, mField4);
  return rv;
}


/* Generated by Pygmalion */


NS_IMPL_ISUPPORTS1(mozListenerP0040, nsISOAPResponseListener)

mozListenerP0040::mozListenerP0040(mozC02gestsea* aComponent, const nsACString & aSearch)
{
  mComponent = aComponent;
  mSearch = aSearch;
}
mozListenerP0040::~mozListenerP0040()
{
}

NS_IMETHODIMP mozListenerP0040::HandleResponse(nsISOAPResponse *aResponse, nsISOAPCall *aCall, PRUint32 aStatus, PRBool aLast, PRBool *aReturn)
{
  nsresult rv;
  nsCOMPtr<nsISOAPFault> pFault;
  rv = aResponse->GetFault(getter_AddRefs(pFault));
  NS_ENSURE_SUCCESS(rv, rv);
  if (pFault) {
    nsAutoString pFaute, pDetail, pTitle;
    nsCOMPtr<nsIDOMElement> pTheDetail;
    nsCOMPtr<nsIDOMNode> pNode;
    rv = pFault->GetDetail(getter_AddRefs(pTheDetail));
    NS_ENSURE_SUCCESS(rv,rv);
    rv = pTheDetail->GetFirstChild(getter_AddRefs(pNode));
    NS_ENSURE_SUCCESS(rv,rv);
    if (pNode) {
      nsCOMPtr<nsIDOMNamedNodeMap> pAttributes;
      nsCOMPtr<nsIDOMNode> pAttribute, pFirstNode;
      nsAutoString pNodeValue;
      rv = pNode->GetFirstChild(getter_AddRefs(pFirstNode));
      NS_ENSURE_SUCCESS(rv,rv);
      if (pFirstNode) {
        pFirstNode->GetNodeValue(pNodeValue);
        NS_ENSURE_SUCCESS(rv,rv);
        pDetail  = pNodeValue;
      }
      pNode->GetAttributes(getter_AddRefs(pAttributes));
      NS_ENSURE_SUCCESS(rv,rv);
      pAttributes->GetNamedItem(NS_LITERAL_STRING("code"), getter_AddRefs(pAttribute));
      NS_ENSURE_SUCCESS(rv,rv);
      if (pAttribute) {
        pAttribute->GetNodeValue(pNodeValue);
        NS_ENSURE_SUCCESS(rv,rv);
        pDetail += NS_LITERAL_STRING("\n(Erreur ");
        pDetail += pNodeValue;
        pDetail += NS_LITERAL_STRING(")");
      }
    } else pDetail = NS_LITERAL_STRING("Erreur sans message.");
    pFaute = pDetail;
    rv = pFault->GetFaultString(pTitle);
    NS_ENSURE_SUCCESS(rv,rv);
    nsCOMPtr<nsIPrompt> pPrompt= do_GetService(NS_DEFAULTPROMPT_CONTRACTID, &rv);
    NS_ENSURE_SUCCESS(rv,rv);
    pPrompt->Alert(ToNewUnicode(pTitle), ToNewUnicode(pFaute));
    return NS_ERROR_FAILURE;
  }

  nsISOAPParameter ** pParameters;
  PRUint32 pTotal;
  rv = aResponse->GetParameters(PR_FALSE, &pTotal, &pParameters);
  NS_ENSURE_SUCCESS(rv,rv);
  if (pTotal!=1) {
    nsCOMPtr<nsIPrompt> pPrompt= do_GetService(NS_DEFAULTPROMPT_CONTRACTID, &rv);
    NS_ENSURE_SUCCESS(rv,rv);
    pPrompt->Alert(ToNewUnicode(NS_LITERAL_CSTRING("Erreur système")), ToNewUnicode(NS_LITERAL_CSTRING("Le nombre total de paramètres reçus est incorrect.")));
    return NS_ERROR_FAILURE;
  }

  nsAutoString pText;
  nsCOMArray<nsIVariant> pArray;
  nsCOMPtr<nsIWritableVariant> pVariant;
  PRUint32 pLsize=0, pCsize=0;
  PRUint32 pLineIndex, pColIndex;
  PRUint16 pNodeType;
  nsCOMPtr<nsIDOMElement> pResult;
  nsCOMPtr<nsIDOMNodeList> pLines, pValues;
  nsCOMPtr<nsIDOMNode> pLine, pValue, pContent;
  rv = pParameters[0]->GetElement(getter_AddRefs(pResult));
  NS_ENSURE_SUCCESS(rv,rv);
  rv = pResult->GetChildNodes(getter_AddRefs(pLines));
  NS_ENSURE_SUCCESS(rv,rv);
  pLines->GetLength(&pLsize);
  for (pLineIndex=0;pLineIndex<pLsize;pLineIndex++) {
    do {
      rv = pLines->Item(pLineIndex, getter_AddRefs(pLine));
      NS_ENSURE_SUCCESS(rv,rv);
      pLine->GetNodeType(&pNodeType);
      if (pNodeType!=nsIDOMNode::ELEMENT_NODE) pLineIndex++;
    } while (pLineIndex<pLsize && pNodeType!=nsIDOMNode::ELEMENT_NODE);
    if (pLineIndex>=pLsize) break;
    rv = pLine->GetChildNodes(getter_AddRefs(pValues));
    NS_ENSURE_SUCCESS(rv,rv);
    pValues->GetLength(&pCsize);
    for (pColIndex=0;pColIndex<pCsize;pColIndex++) {
      do {
        rv = pValues->Item(pColIndex, getter_AddRefs(pValue));
        NS_ENSURE_SUCCESS(rv,rv);
        pValue->GetNodeType(&pNodeType);
        if (pNodeType!=nsIDOMNode::ELEMENT_NODE) pColIndex++;
      } while (pColIndex<pCsize && pNodeType!=nsIDOMNode::ELEMENT_NODE);
      if (pColIndex>=pCsize) break;
      rv = pValue->GetFirstChild(getter_AddRefs(pContent));
      NS_ENSURE_SUCCESS(rv,rv);
      pVariant = do_CreateInstance(NS_VARIANT_CONTRACTID, &rv);
      NS_ENSURE_SUCCESS(rv,rv);
      if (pContent) {
        rv = pContent->GetNodeValue(pText);
        NS_ENSURE_SUCCESS(rv,rv);
        pVariant->SetAsAString(pText);
        printf("%s|",ToNewCString(pText));
      } else {
        pVariant->SetAsAString(NS_LITERAL_STRING(""));
      }
      rv = pArray.AppendObject(pVariant);
    }
  }
  rv = mComponent->TreatP0040(pArray, pLsize, pCsize, mSearch);
  return rv;
}


/* Generated by Pygmalion */


NS_IMPL_ISUPPORTS1(mozListenerP0041, nsISOAPResponseListener)

mozListenerP0041::mozListenerP0041(mozC02gestsea* aComponent, const nsACString & aSearch)
{
  mComponent = aComponent;
  mSearch = aSearch;
}
mozListenerP0041::~mozListenerP0041()
{
}

NS_IMETHODIMP mozListenerP0041::HandleResponse(nsISOAPResponse *aResponse, nsISOAPCall *aCall, PRUint32 aStatus, PRBool aLast, PRBool *aReturn)
{
  nsresult rv;
  nsCOMPtr<nsISOAPFault> pFault;
  rv = aResponse->GetFault(getter_AddRefs(pFault));
  NS_ENSURE_SUCCESS(rv, rv);
  if (pFault) {
    nsAutoString pFaute, pDetail, pTitle;
    nsCOMPtr<nsIDOMElement> pTheDetail;
    nsCOMPtr<nsIDOMNode> pNode;
    rv = pFault->GetDetail(getter_AddRefs(pTheDetail));
    NS_ENSURE_SUCCESS(rv,rv);
    rv = pTheDetail->GetFirstChild(getter_AddRefs(pNode));
    NS_ENSURE_SUCCESS(rv,rv);
    if (pNode) {
      nsCOMPtr<nsIDOMNamedNodeMap> pAttributes;
      nsCOMPtr<nsIDOMNode> pAttribute, pFirstNode;
      nsAutoString pNodeValue;
      rv = pNode->GetFirstChild(getter_AddRefs(pFirstNode));
      NS_ENSURE_SUCCESS(rv,rv);
      if (pFirstNode) {
        pFirstNode->GetNodeValue(pNodeValue);
        NS_ENSURE_SUCCESS(rv,rv);
        pDetail  = pNodeValue;
      }
      pNode->GetAttributes(getter_AddRefs(pAttributes));
      NS_ENSURE_SUCCESS(rv,rv);
      pAttributes->GetNamedItem(NS_LITERAL_STRING("code"), getter_AddRefs(pAttribute));
      NS_ENSURE_SUCCESS(rv,rv);
      if (pAttribute) {
        pAttribute->GetNodeValue(pNodeValue);
        NS_ENSURE_SUCCESS(rv,rv);
        pDetail += NS_LITERAL_STRING("\n(Erreur ");
        pDetail += pNodeValue;
        pDetail += NS_LITERAL_STRING(")");
      }
    } else pDetail = NS_LITERAL_STRING("Erreur sans message.");
    pFaute = pDetail;
    rv = pFault->GetFaultString(pTitle);
    NS_ENSURE_SUCCESS(rv,rv);
    nsCOMPtr<nsIPrompt> pPrompt= do_GetService(NS_DEFAULTPROMPT_CONTRACTID, &rv);
    NS_ENSURE_SUCCESS(rv,rv);
    pPrompt->Alert(ToNewUnicode(pTitle), ToNewUnicode(pFaute));
    return NS_ERROR_FAILURE;
  }

  nsISOAPParameter ** pParameters;
  PRUint32 pTotal;
  rv = aResponse->GetParameters(PR_FALSE, &pTotal, &pParameters);
  NS_ENSURE_SUCCESS(rv,rv);
  if (pTotal!=1) {
    nsCOMPtr<nsIPrompt> pPrompt= do_GetService(NS_DEFAULTPROMPT_CONTRACTID, &rv);
    NS_ENSURE_SUCCESS(rv,rv);
    pPrompt->Alert(ToNewUnicode(NS_LITERAL_CSTRING("Erreur système")), ToNewUnicode(NS_LITERAL_CSTRING("Le nombre total de paramètres reçus est incorrect.")));
    return NS_ERROR_FAILURE;
  }

  nsAutoString pText;
  nsCOMArray<nsIVariant> pArray;
  nsCOMPtr<nsIWritableVariant> pVariant;
  PRUint32 pLsize=0, pCsize=0;
  PRUint32 pLineIndex, pColIndex;
  PRUint16 pNodeType;
  nsCOMPtr<nsIDOMElement> pResult;
  nsCOMPtr<nsIDOMNodeList> pLines, pValues;
  nsCOMPtr<nsIDOMNode> pLine, pValue, pContent;
  rv = pParameters[0]->GetElement(getter_AddRefs(pResult));
  NS_ENSURE_SUCCESS(rv,rv);
  rv = pResult->GetChildNodes(getter_AddRefs(pLines));
  NS_ENSURE_SUCCESS(rv,rv);
  pLines->GetLength(&pLsize);
  for (pLineIndex=0;pLineIndex<pLsize;pLineIndex++) {
    do {
      rv = pLines->Item(pLineIndex, getter_AddRefs(pLine));
      NS_ENSURE_SUCCESS(rv,rv);
      pLine->GetNodeType(&pNodeType);
      if (pNodeType!=nsIDOMNode::ELEMENT_NODE) pLineIndex++;
    } while (pLineIndex<pLsize && pNodeType!=nsIDOMNode::ELEMENT_NODE);
    if (pLineIndex>=pLsize) break;
    rv = pLine->GetChildNodes(getter_AddRefs(pValues));
    NS_ENSURE_SUCCESS(rv,rv);
    pValues->GetLength(&pCsize);
    for (pColIndex=0;pColIndex<pCsize;pColIndex++) {
      do {
        rv = pValues->Item(pColIndex, getter_AddRefs(pValue));
        NS_ENSURE_SUCCESS(rv,rv);
        pValue->GetNodeType(&pNodeType);
        if (pNodeType!=nsIDOMNode::ELEMENT_NODE) pColIndex++;
      } while (pColIndex<pCsize && pNodeType!=nsIDOMNode::ELEMENT_NODE);
      if (pColIndex>=pCsize) break;
      rv = pValue->GetFirstChild(getter_AddRefs(pContent));
      NS_ENSURE_SUCCESS(rv,rv);
      pVariant = do_CreateInstance(NS_VARIANT_CONTRACTID, &rv);
      NS_ENSURE_SUCCESS(rv,rv);
      if (pContent) {
        rv = pContent->GetNodeValue(pText);
        NS_ENSURE_SUCCESS(rv,rv);
        pVariant->SetAsAString(pText);
        printf("%s|",ToNewCString(pText));
      } else {
        pVariant->SetAsAString(NS_LITERAL_STRING(""));
      }
      rv = pArray.AppendObject(pVariant);
    }
  }
  rv = mComponent->TreatP0041(pArray, pLsize, pCsize, mSearch);
  return rv;
}


/* Generated by Pygmalion */


NS_IMPL_ISUPPORTS1(mozListenerP0042, nsISOAPResponseListener)

mozListenerP0042::mozListenerP0042(mozC02gestsea* aComponent, const nsAString & aKey)
{
  mComponent = aComponent;
  mKey = aKey;
}
mozListenerP0042::~mozListenerP0042()
{
}

NS_IMETHODIMP mozListenerP0042::HandleResponse(nsISOAPResponse *aResponse, nsISOAPCall *aCall, PRUint32 aStatus, PRBool aLast, PRBool *aReturn)
{
  nsresult rv;
  nsCOMPtr<nsISOAPFault> pFault;
  rv = aResponse->GetFault(getter_AddRefs(pFault));
  NS_ENSURE_SUCCESS(rv, rv);
  if (pFault) {
    nsAutoString pFaute, pDetail, pTitle;
    nsCOMPtr<nsIDOMElement> pTheDetail;
    nsCOMPtr<nsIDOMNode> pNode;
    rv = pFault->GetDetail(getter_AddRefs(pTheDetail));
    NS_ENSURE_SUCCESS(rv,rv);
    rv = pTheDetail->GetFirstChild(getter_AddRefs(pNode));
    NS_ENSURE_SUCCESS(rv,rv);
    if (pNode) {
      nsCOMPtr<nsIDOMNamedNodeMap> pAttributes;
      nsCOMPtr<nsIDOMNode> pAttribute, pFirstNode;
      nsAutoString pNodeValue;
      rv = pNode->GetFirstChild(getter_AddRefs(pFirstNode));
      NS_ENSURE_SUCCESS(rv,rv);
      if (pFirstNode) {
        pFirstNode->GetNodeValue(pNodeValue);
        NS_ENSURE_SUCCESS(rv,rv);
        pDetail  = pNodeValue;
      }
      pNode->GetAttributes(getter_AddRefs(pAttributes));
      NS_ENSURE_SUCCESS(rv,rv);
      pAttributes->GetNamedItem(NS_LITERAL_STRING("code"), getter_AddRefs(pAttribute));
      NS_ENSURE_SUCCESS(rv,rv);
      if (pAttribute) {
        pAttribute->GetNodeValue(pNodeValue);
        NS_ENSURE_SUCCESS(rv,rv);
        pDetail += NS_LITERAL_STRING("\n(Erreur ");
        pDetail += pNodeValue;
        pDetail += NS_LITERAL_STRING(")");
      }
    } else pDetail = NS_LITERAL_STRING("Erreur sans message.");
    pFaute = pDetail;
    rv = pFault->GetFaultString(pTitle);
    NS_ENSURE_SUCCESS(rv,rv);
    nsCOMPtr<nsIPrompt> pPrompt= do_GetService(NS_DEFAULTPROMPT_CONTRACTID, &rv);
    NS_ENSURE_SUCCESS(rv,rv);
    pPrompt->Alert(ToNewUnicode(pTitle), ToNewUnicode(pFaute));
    return NS_ERROR_FAILURE;
  }

  nsISOAPParameter ** pParameters;
  PRUint32 pTotal;
  rv = aResponse->GetParameters(PR_FALSE, &pTotal, &pParameters);
  NS_ENSURE_SUCCESS(rv,rv);
  if (pTotal!=1) {
    nsCOMPtr<nsIPrompt> pPrompt= do_GetService(NS_DEFAULTPROMPT_CONTRACTID, &rv);
    NS_ENSURE_SUCCESS(rv,rv);
    pPrompt->Alert(ToNewUnicode(NS_LITERAL_CSTRING("Erreur système")), ToNewUnicode(NS_LITERAL_CSTRING("Le nombre total de paramètres reçus est incorrect.")));
    return NS_ERROR_FAILURE;
  }

  nsAutoString pText;
  nsCOMArray<nsIVariant> pArray;
  nsCOMPtr<nsIWritableVariant> pVariant;
  PRUint32 pLsize=0, pCsize=0;
  PRUint32 pLineIndex, pColIndex;
  PRUint16 pNodeType;
  nsCOMPtr<nsIDOMElement> pResult;
  nsCOMPtr<nsIDOMNodeList> pLines, pValues;
  nsCOMPtr<nsIDOMNode> pLine, pValue, pContent;
  rv = pParameters[0]->GetElement(getter_AddRefs(pResult));
  NS_ENSURE_SUCCESS(rv,rv);
  rv = pResult->GetChildNodes(getter_AddRefs(pLines));
  NS_ENSURE_SUCCESS(rv,rv);
  pLines->GetLength(&pLsize);
  for (pLineIndex=0;pLineIndex<pLsize;pLineIndex++) {
    do {
      rv = pLines->Item(pLineIndex, getter_AddRefs(pLine));
      NS_ENSURE_SUCCESS(rv,rv);
      pLine->GetNodeType(&pNodeType);
      if (pNodeType!=nsIDOMNode::ELEMENT_NODE) pLineIndex++;
    } while (pLineIndex<pLsize && pNodeType!=nsIDOMNode::ELEMENT_NODE);
    if (pLineIndex>=pLsize) break;
    rv = pLine->GetChildNodes(getter_AddRefs(pValues));
    NS_ENSURE_SUCCESS(rv,rv);
    pValues->GetLength(&pCsize);
    for (pColIndex=0;pColIndex<pCsize;pColIndex++) {
      do {
        rv = pValues->Item(pColIndex, getter_AddRefs(pValue));
        NS_ENSURE_SUCCESS(rv,rv);
        pValue->GetNodeType(&pNodeType);
        if (pNodeType!=nsIDOMNode::ELEMENT_NODE) pColIndex++;
      } while (pColIndex<pCsize && pNodeType!=nsIDOMNode::ELEMENT_NODE);
      if (pColIndex>=pCsize) break;
      rv = pValue->GetFirstChild(getter_AddRefs(pContent));
      NS_ENSURE_SUCCESS(rv,rv);
      pVariant = do_CreateInstance(NS_VARIANT_CONTRACTID, &rv);
      NS_ENSURE_SUCCESS(rv,rv);
      if (pContent) {
        rv = pContent->GetNodeValue(pText);
        NS_ENSURE_SUCCESS(rv,rv);
        pVariant->SetAsAString(pText);
        printf("%s|",ToNewCString(pText));
      } else {
        pVariant->SetAsAString(NS_LITERAL_STRING(""));
      }
      rv = pArray.AppendObject(pVariant);
    }
  }
  rv = mComponent->TreatP0042(pArray, pLsize, pCsize, mKey);
  return rv;
}


/* Generated by Pygmalion */


NS_IMPL_ISUPPORTS1(mozListenerP0043, nsISOAPResponseListener)

mozListenerP0043::mozListenerP0043(mozC02gestsea* aComponent, const nsACString & aSearch)
{
  mComponent = aComponent;
  mSearch = aSearch;
}
mozListenerP0043::~mozListenerP0043()
{
}

NS_IMETHODIMP mozListenerP0043::HandleResponse(nsISOAPResponse *aResponse, nsISOAPCall *aCall, PRUint32 aStatus, PRBool aLast, PRBool *aReturn)
{
  nsresult rv;
  nsCOMPtr<nsISOAPFault> pFault;
  rv = aResponse->GetFault(getter_AddRefs(pFault));
  NS_ENSURE_SUCCESS(rv, rv);
  if (pFault) {
    nsAutoString pFaute, pDetail, pTitle;
    nsCOMPtr<nsIDOMElement> pTheDetail;
    nsCOMPtr<nsIDOMNode> pNode;
    rv = pFault->GetDetail(getter_AddRefs(pTheDetail));
    NS_ENSURE_SUCCESS(rv,rv);
    rv = pTheDetail->GetFirstChild(getter_AddRefs(pNode));
    NS_ENSURE_SUCCESS(rv,rv);
    if (pNode) {
      nsCOMPtr<nsIDOMNamedNodeMap> pAttributes;
      nsCOMPtr<nsIDOMNode> pAttribute, pFirstNode;
      nsAutoString pNodeValue;
      rv = pNode->GetFirstChild(getter_AddRefs(pFirstNode));
      NS_ENSURE_SUCCESS(rv,rv);
      if (pFirstNode) {
        pFirstNode->GetNodeValue(pNodeValue);
        NS_ENSURE_SUCCESS(rv,rv);
        pDetail  = pNodeValue;
      }
      pNode->GetAttributes(getter_AddRefs(pAttributes));
      NS_ENSURE_SUCCESS(rv,rv);
      pAttributes->GetNamedItem(NS_LITERAL_STRING("code"), getter_AddRefs(pAttribute));
      NS_ENSURE_SUCCESS(rv,rv);
      if (pAttribute) {
        pAttribute->GetNodeValue(pNodeValue);
        NS_ENSURE_SUCCESS(rv,rv);
        pDetail += NS_LITERAL_STRING("\n(Erreur ");
        pDetail += pNodeValue;
        pDetail += NS_LITERAL_STRING(")");
      }
    } else pDetail = NS_LITERAL_STRING("Erreur sans message.");
    pFaute = pDetail;
    rv = pFault->GetFaultString(pTitle);
    NS_ENSURE_SUCCESS(rv,rv);
    nsCOMPtr<nsIPrompt> pPrompt= do_GetService(NS_DEFAULTPROMPT_CONTRACTID, &rv);
    NS_ENSURE_SUCCESS(rv,rv);
    pPrompt->Alert(ToNewUnicode(pTitle), ToNewUnicode(pFaute));
    return NS_ERROR_FAILURE;
  }

  nsISOAPParameter ** pParameters;
  PRUint32 pTotal;
  rv = aResponse->GetParameters(PR_FALSE, &pTotal, &pParameters);
  NS_ENSURE_SUCCESS(rv,rv);
  if (pTotal!=1) {
    nsCOMPtr<nsIPrompt> pPrompt= do_GetService(NS_DEFAULTPROMPT_CONTRACTID, &rv);
    NS_ENSURE_SUCCESS(rv,rv);
    pPrompt->Alert(ToNewUnicode(NS_LITERAL_CSTRING("Erreur système")), ToNewUnicode(NS_LITERAL_CSTRING("Le nombre total de paramètres reçus est incorrect.")));
    return NS_ERROR_FAILURE;
  }

  nsAutoString pText;
  nsCOMArray<nsIVariant> pArray;
  nsCOMPtr<nsIWritableVariant> pVariant;
  PRUint32 pLsize=0, pCsize=0;
  PRUint32 pLineIndex, pColIndex;
  PRUint16 pNodeType;
  nsCOMPtr<nsIDOMElement> pResult;
  nsCOMPtr<nsIDOMNodeList> pLines, pValues;
  nsCOMPtr<nsIDOMNode> pLine, pValue, pContent;
  rv = pParameters[0]->GetElement(getter_AddRefs(pResult));
  NS_ENSURE_SUCCESS(rv,rv);
  rv = pResult->GetChildNodes(getter_AddRefs(pLines));
  NS_ENSURE_SUCCESS(rv,rv);
  pLines->GetLength(&pLsize);
  for (pLineIndex=0;pLineIndex<pLsize;pLineIndex++) {
    do {
      rv = pLines->Item(pLineIndex, getter_AddRefs(pLine));
      NS_ENSURE_SUCCESS(rv,rv);
      pLine->GetNodeType(&pNodeType);
      if (pNodeType!=nsIDOMNode::ELEMENT_NODE) pLineIndex++;
    } while (pLineIndex<pLsize && pNodeType!=nsIDOMNode::ELEMENT_NODE);
    if (pLineIndex>=pLsize) break;
    rv = pLine->GetChildNodes(getter_AddRefs(pValues));
    NS_ENSURE_SUCCESS(rv,rv);
    pValues->GetLength(&pCsize);
    for (pColIndex=0;pColIndex<pCsize;pColIndex++) {
      do {
        rv = pValues->Item(pColIndex, getter_AddRefs(pValue));
        NS_ENSURE_SUCCESS(rv,rv);
        pValue->GetNodeType(&pNodeType);
        if (pNodeType!=nsIDOMNode::ELEMENT_NODE) pColIndex++;
      } while (pColIndex<pCsize && pNodeType!=nsIDOMNode::ELEMENT_NODE);
      if (pColIndex>=pCsize) break;
      rv = pValue->GetFirstChild(getter_AddRefs(pContent));
      NS_ENSURE_SUCCESS(rv,rv);
      pVariant = do_CreateInstance(NS_VARIANT_CONTRACTID, &rv);
      NS_ENSURE_SUCCESS(rv,rv);
      if (pContent) {
        rv = pContent->GetNodeValue(pText);
        NS_ENSURE_SUCCESS(rv,rv);
        pVariant->SetAsAString(pText);
        printf("%s|",ToNewCString(pText));
      } else {
        pVariant->SetAsAString(NS_LITERAL_STRING(""));
      }
      rv = pArray.AppendObject(pVariant);
    }
  }
  rv = mComponent->TreatP0043(pArray, pLsize, pCsize, mSearch);
  return rv;
}


/* Generated by Pygmalion */


NS_IMPL_ISUPPORTS1(mozListenerP0044, nsISOAPResponseListener)

mozListenerP0044::mozListenerP0044(mozC02gestsea* aComponent, const nsACString & aSearch)
{
  mComponent = aComponent;
  mSearch = aSearch;
}
mozListenerP0044::~mozListenerP0044()
{
}

NS_IMETHODIMP mozListenerP0044::HandleResponse(nsISOAPResponse *aResponse, nsISOAPCall *aCall, PRUint32 aStatus, PRBool aLast, PRBool *aReturn)
{
  nsresult rv;
  nsCOMPtr<nsISOAPFault> pFault;
  rv = aResponse->GetFault(getter_AddRefs(pFault));
  NS_ENSURE_SUCCESS(rv, rv);
  if (pFault) {
    nsAutoString pFaute, pDetail, pTitle;
    nsCOMPtr<nsIDOMElement> pTheDetail;
    nsCOMPtr<nsIDOMNode> pNode;
    rv = pFault->GetDetail(getter_AddRefs(pTheDetail));
    NS_ENSURE_SUCCESS(rv,rv);
    rv = pTheDetail->GetFirstChild(getter_AddRefs(pNode));
    NS_ENSURE_SUCCESS(rv,rv);
    if (pNode) {
      nsCOMPtr<nsIDOMNamedNodeMap> pAttributes;
      nsCOMPtr<nsIDOMNode> pAttribute, pFirstNode;
      nsAutoString pNodeValue;
      rv = pNode->GetFirstChild(getter_AddRefs(pFirstNode));
      NS_ENSURE_SUCCESS(rv,rv);
      if (pFirstNode) {
        pFirstNode->GetNodeValue(pNodeValue);
        NS_ENSURE_SUCCESS(rv,rv);
        pDetail  = pNodeValue;
      }
      pNode->GetAttributes(getter_AddRefs(pAttributes));
      NS_ENSURE_SUCCESS(rv,rv);
      pAttributes->GetNamedItem(NS_LITERAL_STRING("code"), getter_AddRefs(pAttribute));
      NS_ENSURE_SUCCESS(rv,rv);
      if (pAttribute) {
        pAttribute->GetNodeValue(pNodeValue);
        NS_ENSURE_SUCCESS(rv,rv);
        pDetail += NS_LITERAL_STRING("\n(Erreur ");
        pDetail += pNodeValue;
        pDetail += NS_LITERAL_STRING(")");
      }
    } else pDetail = NS_LITERAL_STRING("Erreur sans message.");
    pFaute = pDetail;
    rv = pFault->GetFaultString(pTitle);
    NS_ENSURE_SUCCESS(rv,rv);
    nsCOMPtr<nsIPrompt> pPrompt= do_GetService(NS_DEFAULTPROMPT_CONTRACTID, &rv);
    NS_ENSURE_SUCCESS(rv,rv);
    pPrompt->Alert(ToNewUnicode(pTitle), ToNewUnicode(pFaute));
    return NS_ERROR_FAILURE;
  }

  nsISOAPParameter ** pParameters;
  PRUint32 pTotal;
  rv = aResponse->GetParameters(PR_FALSE, &pTotal, &pParameters);
  NS_ENSURE_SUCCESS(rv,rv);
  if (pTotal!=1) {
    nsCOMPtr<nsIPrompt> pPrompt= do_GetService(NS_DEFAULTPROMPT_CONTRACTID, &rv);
    NS_ENSURE_SUCCESS(rv,rv);
    pPrompt->Alert(ToNewUnicode(NS_LITERAL_CSTRING("Erreur système")), ToNewUnicode(NS_LITERAL_CSTRING("Le nombre total de paramètres reçus est incorrect.")));
    return NS_ERROR_FAILURE;
  }

  nsAutoString pText;
  nsCOMArray<nsIVariant> pArray;
  nsCOMPtr<nsIWritableVariant> pVariant;
  PRUint32 pLsize=0, pCsize=0;
  PRUint32 pLineIndex, pColIndex;
  PRUint16 pNodeType;
  nsCOMPtr<nsIDOMElement> pResult;
  nsCOMPtr<nsIDOMNodeList> pLines, pValues;
  nsCOMPtr<nsIDOMNode> pLine, pValue, pContent;
  rv = pParameters[0]->GetElement(getter_AddRefs(pResult));
  NS_ENSURE_SUCCESS(rv,rv);
  rv = pResult->GetChildNodes(getter_AddRefs(pLines));
  NS_ENSURE_SUCCESS(rv,rv);
  pLines->GetLength(&pLsize);
  for (pLineIndex=0;pLineIndex<pLsize;pLineIndex++) {
    do {
      rv = pLines->Item(pLineIndex, getter_AddRefs(pLine));
      NS_ENSURE_SUCCESS(rv,rv);
      pLine->GetNodeType(&pNodeType);
      if (pNodeType!=nsIDOMNode::ELEMENT_NODE) pLineIndex++;
    } while (pLineIndex<pLsize && pNodeType!=nsIDOMNode::ELEMENT_NODE);
    if (pLineIndex>=pLsize) break;
    rv = pLine->GetChildNodes(getter_AddRefs(pValues));
    NS_ENSURE_SUCCESS(rv,rv);
    pValues->GetLength(&pCsize);
    for (pColIndex=0;pColIndex<pCsize;pColIndex++) {
      do {
        rv = pValues->Item(pColIndex, getter_AddRefs(pValue));
        NS_ENSURE_SUCCESS(rv,rv);
        pValue->GetNodeType(&pNodeType);
        if (pNodeType!=nsIDOMNode::ELEMENT_NODE) pColIndex++;
      } while (pColIndex<pCsize && pNodeType!=nsIDOMNode::ELEMENT_NODE);
      if (pColIndex>=pCsize) break;
      rv = pValue->GetFirstChild(getter_AddRefs(pContent));
      NS_ENSURE_SUCCESS(rv,rv);
      pVariant = do_CreateInstance(NS_VARIANT_CONTRACTID, &rv);
      NS_ENSURE_SUCCESS(rv,rv);
      if (pContent) {
        rv = pContent->GetNodeValue(pText);
        NS_ENSURE_SUCCESS(rv,rv);
        pVariant->SetAsAString(pText);
        printf("%s|",ToNewCString(pText));
      } else {
        pVariant->SetAsAString(NS_LITERAL_STRING(""));
      }
      rv = pArray.AppendObject(pVariant);
    }
  }
  rv = mComponent->TreatP0044(pArray, pLsize, pCsize, mSearch);
  return rv;
}


/* Generated by Pygmalion */


NS_IMPL_ISUPPORTS1(mozListenerP0045, nsISOAPResponseListener)

mozListenerP0045::mozListenerP0045(mozC02gestsea* aComponent, const nsAString & aKey)
{
  mComponent = aComponent;
  mKey = aKey;
}
mozListenerP0045::~mozListenerP0045()
{
}

NS_IMETHODIMP mozListenerP0045::HandleResponse(nsISOAPResponse *aResponse, nsISOAPCall *aCall, PRUint32 aStatus, PRBool aLast, PRBool *aReturn)
{
  nsresult rv;
  nsCOMPtr<nsISOAPFault> pFault;
  rv = aResponse->GetFault(getter_AddRefs(pFault));
  NS_ENSURE_SUCCESS(rv, rv);
  if (pFault) {
    nsAutoString pFaute, pDetail, pTitle;
    nsCOMPtr<nsIDOMElement> pTheDetail;
    nsCOMPtr<nsIDOMNode> pNode;
    rv = pFault->GetDetail(getter_AddRefs(pTheDetail));
    NS_ENSURE_SUCCESS(rv,rv);
    rv = pTheDetail->GetFirstChild(getter_AddRefs(pNode));
    NS_ENSURE_SUCCESS(rv,rv);
    if (pNode) {
      nsCOMPtr<nsIDOMNamedNodeMap> pAttributes;
      nsCOMPtr<nsIDOMNode> pAttribute, pFirstNode;
      nsAutoString pNodeValue;
      rv = pNode->GetFirstChild(getter_AddRefs(pFirstNode));
      NS_ENSURE_SUCCESS(rv,rv);
      if (pFirstNode) {
        pFirstNode->GetNodeValue(pNodeValue);
        NS_ENSURE_SUCCESS(rv,rv);
        pDetail  = pNodeValue;
      }
      pNode->GetAttributes(getter_AddRefs(pAttributes));
      NS_ENSURE_SUCCESS(rv,rv);
      pAttributes->GetNamedItem(NS_LITERAL_STRING("code"), getter_AddRefs(pAttribute));
      NS_ENSURE_SUCCESS(rv,rv);
      if (pAttribute) {
        pAttribute->GetNodeValue(pNodeValue);
        NS_ENSURE_SUCCESS(rv,rv);
        pDetail += NS_LITERAL_STRING("\n(Erreur ");
        pDetail += pNodeValue;
        pDetail += NS_LITERAL_STRING(")");
      }
    } else pDetail = NS_LITERAL_STRING("Erreur sans message.");
    pFaute = pDetail;
    rv = pFault->GetFaultString(pTitle);
    NS_ENSURE_SUCCESS(rv,rv);
    nsCOMPtr<nsIPrompt> pPrompt= do_GetService(NS_DEFAULTPROMPT_CONTRACTID, &rv);
    NS_ENSURE_SUCCESS(rv,rv);
    pPrompt->Alert(ToNewUnicode(pTitle), ToNewUnicode(pFaute));
    return NS_ERROR_FAILURE;
  }

  nsISOAPParameter ** pParameters;
  PRUint32 pTotal;
  rv = aResponse->GetParameters(PR_FALSE, &pTotal, &pParameters);
  NS_ENSURE_SUCCESS(rv,rv);
  if (pTotal!=1) {
    nsCOMPtr<nsIPrompt> pPrompt= do_GetService(NS_DEFAULTPROMPT_CONTRACTID, &rv);
    NS_ENSURE_SUCCESS(rv,rv);
    pPrompt->Alert(ToNewUnicode(NS_LITERAL_CSTRING("Erreur système")), ToNewUnicode(NS_LITERAL_CSTRING("Le nombre total de paramètres reçus est incorrect.")));
    return NS_ERROR_FAILURE;
  }

  nsAutoString pText;
  nsCOMArray<nsIVariant> pArray;
  nsCOMPtr<nsIWritableVariant> pVariant;
  PRUint32 pLsize=0, pCsize=0;
  PRUint32 pLineIndex, pColIndex;
  PRUint16 pNodeType;
  nsCOMPtr<nsIDOMElement> pResult;
  nsCOMPtr<nsIDOMNodeList> pLines, pValues;
  nsCOMPtr<nsIDOMNode> pLine, pValue, pContent;
  rv = pParameters[0]->GetElement(getter_AddRefs(pResult));
  NS_ENSURE_SUCCESS(rv,rv);
  rv = pResult->GetChildNodes(getter_AddRefs(pLines));
  NS_ENSURE_SUCCESS(rv,rv);
  pLines->GetLength(&pLsize);
  for (pLineIndex=0;pLineIndex<pLsize;pLineIndex++) {
    do {
      rv = pLines->Item(pLineIndex, getter_AddRefs(pLine));
      NS_ENSURE_SUCCESS(rv,rv);
      pLine->GetNodeType(&pNodeType);
      if (pNodeType!=nsIDOMNode::ELEMENT_NODE) pLineIndex++;
    } while (pLineIndex<pLsize && pNodeType!=nsIDOMNode::ELEMENT_NODE);
    if (pLineIndex>=pLsize) break;
    rv = pLine->GetChildNodes(getter_AddRefs(pValues));
    NS_ENSURE_SUCCESS(rv,rv);
    pValues->GetLength(&pCsize);
    for (pColIndex=0;pColIndex<pCsize;pColIndex++) {
      do {
        rv = pValues->Item(pColIndex, getter_AddRefs(pValue));
        NS_ENSURE_SUCCESS(rv,rv);
        pValue->GetNodeType(&pNodeType);
        if (pNodeType!=nsIDOMNode::ELEMENT_NODE) pColIndex++;
      } while (pColIndex<pCsize && pNodeType!=nsIDOMNode::ELEMENT_NODE);
      if (pColIndex>=pCsize) break;
      rv = pValue->GetFirstChild(getter_AddRefs(pContent));
      NS_ENSURE_SUCCESS(rv,rv);
      pVariant = do_CreateInstance(NS_VARIANT_CONTRACTID, &rv);
      NS_ENSURE_SUCCESS(rv,rv);
      if (pContent) {
        rv = pContent->GetNodeValue(pText);
        NS_ENSURE_SUCCESS(rv,rv);
        pVariant->SetAsAString(pText);
        printf("%s|",ToNewCString(pText));
      } else {
        pVariant->SetAsAString(NS_LITERAL_STRING(""));
      }
      rv = pArray.AppendObject(pVariant);
    }
  }
  rv = mComponent->TreatP0045(pArray, pLsize, pCsize, mKey);
  return rv;
}


/* Generated by Pygmalion */


NS_IMPL_ISUPPORTS1(mozListenerP0046, nsISOAPResponseListener)

mozListenerP0046::mozListenerP0046(mozC02gestsea* aComponent, const nsACString & aSearch)
{
  mComponent = aComponent;
  mSearch = aSearch;
}
mozListenerP0046::~mozListenerP0046()
{
}

NS_IMETHODIMP mozListenerP0046::HandleResponse(nsISOAPResponse *aResponse, nsISOAPCall *aCall, PRUint32 aStatus, PRBool aLast, PRBool *aReturn)
{
  nsresult rv;
  nsCOMPtr<nsISOAPFault> pFault;
  rv = aResponse->GetFault(getter_AddRefs(pFault));
  NS_ENSURE_SUCCESS(rv, rv);
  if (pFault) {
    nsAutoString pFaute, pDetail, pTitle;
    nsCOMPtr<nsIDOMElement> pTheDetail;
    nsCOMPtr<nsIDOMNode> pNode;
    rv = pFault->GetDetail(getter_AddRefs(pTheDetail));
    NS_ENSURE_SUCCESS(rv,rv);
    rv = pTheDetail->GetFirstChild(getter_AddRefs(pNode));
    NS_ENSURE_SUCCESS(rv,rv);
    if (pNode) {
      nsCOMPtr<nsIDOMNamedNodeMap> pAttributes;
      nsCOMPtr<nsIDOMNode> pAttribute, pFirstNode;
      nsAutoString pNodeValue;
      rv = pNode->GetFirstChild(getter_AddRefs(pFirstNode));
      NS_ENSURE_SUCCESS(rv,rv);
      if (pFirstNode) {
        pFirstNode->GetNodeValue(pNodeValue);
        NS_ENSURE_SUCCESS(rv,rv);
        pDetail  = pNodeValue;
      }
      pNode->GetAttributes(getter_AddRefs(pAttributes));
      NS_ENSURE_SUCCESS(rv,rv);
      pAttributes->GetNamedItem(NS_LITERAL_STRING("code"), getter_AddRefs(pAttribute));
      NS_ENSURE_SUCCESS(rv,rv);
      if (pAttribute) {
        pAttribute->GetNodeValue(pNodeValue);
        NS_ENSURE_SUCCESS(rv,rv);
        pDetail += NS_LITERAL_STRING("\n(Erreur ");
        pDetail += pNodeValue;
        pDetail += NS_LITERAL_STRING(")");
      }
    } else pDetail = NS_LITERAL_STRING("Erreur sans message.");
    pFaute = pDetail;
    rv = pFault->GetFaultString(pTitle);
    NS_ENSURE_SUCCESS(rv,rv);
    nsCOMPtr<nsIPrompt> pPrompt= do_GetService(NS_DEFAULTPROMPT_CONTRACTID, &rv);
    NS_ENSURE_SUCCESS(rv,rv);
    pPrompt->Alert(ToNewUnicode(pTitle), ToNewUnicode(pFaute));
    return NS_ERROR_FAILURE;
  }

  nsISOAPParameter ** pParameters;
  PRUint32 pTotal;
  rv = aResponse->GetParameters(PR_FALSE, &pTotal, &pParameters);
  NS_ENSURE_SUCCESS(rv,rv);
  if (pTotal!=1) {
    nsCOMPtr<nsIPrompt> pPrompt= do_GetService(NS_DEFAULTPROMPT_CONTRACTID, &rv);
    NS_ENSURE_SUCCESS(rv,rv);
    pPrompt->Alert(ToNewUnicode(NS_LITERAL_CSTRING("Erreur système")), ToNewUnicode(NS_LITERAL_CSTRING("Le nombre total de paramètres reçus est incorrect.")));
    return NS_ERROR_FAILURE;
  }

  nsAutoString pText;
  nsCOMArray<nsIVariant> pArray;
  nsCOMPtr<nsIWritableVariant> pVariant;
  PRUint32 pLsize=0, pCsize=0;
  PRUint32 pLineIndex, pColIndex;
  PRUint16 pNodeType;
  nsCOMPtr<nsIDOMElement> pResult;
  nsCOMPtr<nsIDOMNodeList> pLines, pValues;
  nsCOMPtr<nsIDOMNode> pLine, pValue, pContent;
  rv = pParameters[0]->GetElement(getter_AddRefs(pResult));
  NS_ENSURE_SUCCESS(rv,rv);
  rv = pResult->GetChildNodes(getter_AddRefs(pLines));
  NS_ENSURE_SUCCESS(rv,rv);
  pLines->GetLength(&pLsize);
  for (pLineIndex=0;pLineIndex<pLsize;pLineIndex++) {
    do {
      rv = pLines->Item(pLineIndex, getter_AddRefs(pLine));
      NS_ENSURE_SUCCESS(rv,rv);
      pLine->GetNodeType(&pNodeType);
      if (pNodeType!=nsIDOMNode::ELEMENT_NODE) pLineIndex++;
    } while (pLineIndex<pLsize && pNodeType!=nsIDOMNode::ELEMENT_NODE);
    if (pLineIndex>=pLsize) break;
    rv = pLine->GetChildNodes(getter_AddRefs(pValues));
    NS_ENSURE_SUCCESS(rv,rv);
    pValues->GetLength(&pCsize);
    for (pColIndex=0;pColIndex<pCsize;pColIndex++) {
      do {
        rv = pValues->Item(pColIndex, getter_AddRefs(pValue));
        NS_ENSURE_SUCCESS(rv,rv);
        pValue->GetNodeType(&pNodeType);
        if (pNodeType!=nsIDOMNode::ELEMENT_NODE) pColIndex++;
      } while (pColIndex<pCsize && pNodeType!=nsIDOMNode::ELEMENT_NODE);
      if (pColIndex>=pCsize) break;
      rv = pValue->GetFirstChild(getter_AddRefs(pContent));
      NS_ENSURE_SUCCESS(rv,rv);
      pVariant = do_CreateInstance(NS_VARIANT_CONTRACTID, &rv);
      NS_ENSURE_SUCCESS(rv,rv);
      if (pContent) {
        rv = pContent->GetNodeValue(pText);
        NS_ENSURE_SUCCESS(rv,rv);
        pVariant->SetAsAString(pText);
        printf("%s|",ToNewCString(pText));
      } else {
        pVariant->SetAsAString(NS_LITERAL_STRING(""));
      }
      rv = pArray.AppendObject(pVariant);
    }
  }
  rv = mComponent->TreatP0046(pArray, pLsize, pCsize, mSearch);
  return rv;
}


/* Generated by Pygmalion */


NS_IMPL_ISUPPORTS1(mozListenerP0047, nsISOAPResponseListener)

mozListenerP0047::mozListenerP0047(mozC02gestsea* aComponent, const nsACString & aSearch)
{
  mComponent = aComponent;
  mSearch = aSearch;
}
mozListenerP0047::~mozListenerP0047()
{
}

NS_IMETHODIMP mozListenerP0047::HandleResponse(nsISOAPResponse *aResponse, nsISOAPCall *aCall, PRUint32 aStatus, PRBool aLast, PRBool *aReturn)
{
  nsresult rv;
  nsCOMPtr<nsISOAPFault> pFault;
  rv = aResponse->GetFault(getter_AddRefs(pFault));
  NS_ENSURE_SUCCESS(rv, rv);
  if (pFault) {
    nsAutoString pFaute, pDetail, pTitle;
    nsCOMPtr<nsIDOMElement> pTheDetail;
    nsCOMPtr<nsIDOMNode> pNode;
    rv = pFault->GetDetail(getter_AddRefs(pTheDetail));
    NS_ENSURE_SUCCESS(rv,rv);
    rv = pTheDetail->GetFirstChild(getter_AddRefs(pNode));
    NS_ENSURE_SUCCESS(rv,rv);
    if (pNode) {
      nsCOMPtr<nsIDOMNamedNodeMap> pAttributes;
      nsCOMPtr<nsIDOMNode> pAttribute, pFirstNode;
      nsAutoString pNodeValue;
      rv = pNode->GetFirstChild(getter_AddRefs(pFirstNode));
      NS_ENSURE_SUCCESS(rv,rv);
      if (pFirstNode) {
        pFirstNode->GetNodeValue(pNodeValue);
        NS_ENSURE_SUCCESS(rv,rv);
        pDetail  = pNodeValue;
      }
      pNode->GetAttributes(getter_AddRefs(pAttributes));
      NS_ENSURE_SUCCESS(rv,rv);
      pAttributes->GetNamedItem(NS_LITERAL_STRING("code"), getter_AddRefs(pAttribute));
      NS_ENSURE_SUCCESS(rv,rv);
      if (pAttribute) {
        pAttribute->GetNodeValue(pNodeValue);
        NS_ENSURE_SUCCESS(rv,rv);
        pDetail += NS_LITERAL_STRING("\n(Erreur ");
        pDetail += pNodeValue;
        pDetail += NS_LITERAL_STRING(")");
      }
    } else pDetail = NS_LITERAL_STRING("Erreur sans message.");
    pFaute = pDetail;
    rv = pFault->GetFaultString(pTitle);
    NS_ENSURE_SUCCESS(rv,rv);
    nsCOMPtr<nsIPrompt> pPrompt= do_GetService(NS_DEFAULTPROMPT_CONTRACTID, &rv);
    NS_ENSURE_SUCCESS(rv,rv);
    pPrompt->Alert(ToNewUnicode(pTitle), ToNewUnicode(pFaute));
    return NS_ERROR_FAILURE;
  }

  nsISOAPParameter ** pParameters;
  PRUint32 pTotal;
  rv = aResponse->GetParameters(PR_FALSE, &pTotal, &pParameters);
  NS_ENSURE_SUCCESS(rv,rv);
  if (pTotal!=1) {
    nsCOMPtr<nsIPrompt> pPrompt= do_GetService(NS_DEFAULTPROMPT_CONTRACTID, &rv);
    NS_ENSURE_SUCCESS(rv,rv);
    pPrompt->Alert(ToNewUnicode(NS_LITERAL_CSTRING("Erreur système")), ToNewUnicode(NS_LITERAL_CSTRING("Le nombre total de paramètres reçus est incorrect.")));
    return NS_ERROR_FAILURE;
  }

  nsAutoString pText;
  nsCOMArray<nsIVariant> pArray;
  nsCOMPtr<nsIWritableVariant> pVariant;
  PRUint32 pLsize=0, pCsize=0;
  PRUint32 pLineIndex, pColIndex;
  PRUint16 pNodeType;
  nsCOMPtr<nsIDOMElement> pResult;
  nsCOMPtr<nsIDOMNodeList> pLines, pValues;
  nsCOMPtr<nsIDOMNode> pLine, pValue, pContent;
  rv = pParameters[0]->GetElement(getter_AddRefs(pResult));
  NS_ENSURE_SUCCESS(rv,rv);
  rv = pResult->GetChildNodes(getter_AddRefs(pLines));
  NS_ENSURE_SUCCESS(rv,rv);
  pLines->GetLength(&pLsize);
  for (pLineIndex=0;pLineIndex<pLsize;pLineIndex++) {
    do {
      rv = pLines->Item(pLineIndex, getter_AddRefs(pLine));
      NS_ENSURE_SUCCESS(rv,rv);
      pLine->GetNodeType(&pNodeType);
      if (pNodeType!=nsIDOMNode::ELEMENT_NODE) pLineIndex++;
    } while (pLineIndex<pLsize && pNodeType!=nsIDOMNode::ELEMENT_NODE);
    if (pLineIndex>=pLsize) break;
    rv = pLine->GetChildNodes(getter_AddRefs(pValues));
    NS_ENSURE_SUCCESS(rv,rv);
    pValues->GetLength(&pCsize);
    for (pColIndex=0;pColIndex<pCsize;pColIndex++) {
      do {
        rv = pValues->Item(pColIndex, getter_AddRefs(pValue));
        NS_ENSURE_SUCCESS(rv,rv);
        pValue->GetNodeType(&pNodeType);
        if (pNodeType!=nsIDOMNode::ELEMENT_NODE) pColIndex++;
      } while (pColIndex<pCsize && pNodeType!=nsIDOMNode::ELEMENT_NODE);
      if (pColIndex>=pCsize) break;
      rv = pValue->GetFirstChild(getter_AddRefs(pContent));
      NS_ENSURE_SUCCESS(rv,rv);
      pVariant = do_CreateInstance(NS_VARIANT_CONTRACTID, &rv);
      NS_ENSURE_SUCCESS(rv,rv);
      if (pContent) {
        rv = pContent->GetNodeValue(pText);
        NS_ENSURE_SUCCESS(rv,rv);
        pVariant->SetAsAString(pText);
        printf("%s|",ToNewCString(pText));
      } else {
        pVariant->SetAsAString(NS_LITERAL_STRING(""));
      }
      rv = pArray.AppendObject(pVariant);
    }
  }
  rv = mComponent->TreatP0047(pArray, pLsize, pCsize, mSearch);
  return rv;
}


/* Generated by Pygmalion */


NS_IMPL_ISUPPORTS1(mozListenerP0048, nsISOAPResponseListener)

mozListenerP0048::mozListenerP0048(mozC02gestsea* aComponent, const nsAString & aKey)
{
  mComponent = aComponent;
  mKey = aKey;
}
mozListenerP0048::~mozListenerP0048()
{
}

NS_IMETHODIMP mozListenerP0048::HandleResponse(nsISOAPResponse *aResponse, nsISOAPCall *aCall, PRUint32 aStatus, PRBool aLast, PRBool *aReturn)
{
  nsresult rv;
  nsCOMPtr<nsISOAPFault> pFault;
  rv = aResponse->GetFault(getter_AddRefs(pFault));
  NS_ENSURE_SUCCESS(rv, rv);
  if (pFault) {
    nsAutoString pFaute, pDetail, pTitle;
    nsCOMPtr<nsIDOMElement> pTheDetail;
    nsCOMPtr<nsIDOMNode> pNode;
    rv = pFault->GetDetail(getter_AddRefs(pTheDetail));
    NS_ENSURE_SUCCESS(rv,rv);
    rv = pTheDetail->GetFirstChild(getter_AddRefs(pNode));
    NS_ENSURE_SUCCESS(rv,rv);
    if (pNode) {
      nsCOMPtr<nsIDOMNamedNodeMap> pAttributes;
      nsCOMPtr<nsIDOMNode> pAttribute, pFirstNode;
      nsAutoString pNodeValue;
      rv = pNode->GetFirstChild(getter_AddRefs(pFirstNode));
      NS_ENSURE_SUCCESS(rv,rv);
      if (pFirstNode) {
        pFirstNode->GetNodeValue(pNodeValue);
        NS_ENSURE_SUCCESS(rv,rv);
        pDetail  = pNodeValue;
      }
      pNode->GetAttributes(getter_AddRefs(pAttributes));
      NS_ENSURE_SUCCESS(rv,rv);
      pAttributes->GetNamedItem(NS_LITERAL_STRING("code"), getter_AddRefs(pAttribute));
      NS_ENSURE_SUCCESS(rv,rv);
      if (pAttribute) {
        pAttribute->GetNodeValue(pNodeValue);
        NS_ENSURE_SUCCESS(rv,rv);
        pDetail += NS_LITERAL_STRING("\n(Erreur ");
        pDetail += pNodeValue;
        pDetail += NS_LITERAL_STRING(")");
      }
    } else pDetail = NS_LITERAL_STRING("Erreur sans message.");
    pFaute = pDetail;
    rv = pFault->GetFaultString(pTitle);
    NS_ENSURE_SUCCESS(rv,rv);
    nsCOMPtr<nsIPrompt> pPrompt= do_GetService(NS_DEFAULTPROMPT_CONTRACTID, &rv);
    NS_ENSURE_SUCCESS(rv,rv);
    pPrompt->Alert(ToNewUnicode(pTitle), ToNewUnicode(pFaute));
    return NS_ERROR_FAILURE;
  }

  nsISOAPParameter ** pParameters;
  PRUint32 pTotal;
  rv = aResponse->GetParameters(PR_FALSE, &pTotal, &pParameters);
  NS_ENSURE_SUCCESS(rv,rv);
  if (pTotal!=1) {
    nsCOMPtr<nsIPrompt> pPrompt= do_GetService(NS_DEFAULTPROMPT_CONTRACTID, &rv);
    NS_ENSURE_SUCCESS(rv,rv);
    pPrompt->Alert(ToNewUnicode(NS_LITERAL_CSTRING("Erreur système")), ToNewUnicode(NS_LITERAL_CSTRING("Le nombre total de paramètres reçus est incorrect.")));
    return NS_ERROR_FAILURE;
  }

  nsAutoString pText;
  nsCOMArray<nsIVariant> pArray;
  nsCOMPtr<nsIWritableVariant> pVariant;
  PRUint32 pLsize=0, pCsize=0;
  PRUint32 pLineIndex, pColIndex;
  PRUint16 pNodeType;
  nsCOMPtr<nsIDOMElement> pResult;
  nsCOMPtr<nsIDOMNodeList> pLines, pValues;
  nsCOMPtr<nsIDOMNode> pLine, pValue, pContent;
  rv = pParameters[0]->GetElement(getter_AddRefs(pResult));
  NS_ENSURE_SUCCESS(rv,rv);
  rv = pResult->GetChildNodes(getter_AddRefs(pLines));
  NS_ENSURE_SUCCESS(rv,rv);
  pLines->GetLength(&pLsize);
  for (pLineIndex=0;pLineIndex<pLsize;pLineIndex++) {
    do {
      rv = pLines->Item(pLineIndex, getter_AddRefs(pLine));
      NS_ENSURE_SUCCESS(rv,rv);
      pLine->GetNodeType(&pNodeType);
      if (pNodeType!=nsIDOMNode::ELEMENT_NODE) pLineIndex++;
    } while (pLineIndex<pLsize && pNodeType!=nsIDOMNode::ELEMENT_NODE);
    if (pLineIndex>=pLsize) break;
    rv = pLine->GetChildNodes(getter_AddRefs(pValues));
    NS_ENSURE_SUCCESS(rv,rv);
    pValues->GetLength(&pCsize);
    for (pColIndex=0;pColIndex<pCsize;pColIndex++) {
      do {
        rv = pValues->Item(pColIndex, getter_AddRefs(pValue));
        NS_ENSURE_SUCCESS(rv,rv);
        pValue->GetNodeType(&pNodeType);
        if (pNodeType!=nsIDOMNode::ELEMENT_NODE) pColIndex++;
      } while (pColIndex<pCsize && pNodeType!=nsIDOMNode::ELEMENT_NODE);
      if (pColIndex>=pCsize) break;
      rv = pValue->GetFirstChild(getter_AddRefs(pContent));
      NS_ENSURE_SUCCESS(rv,rv);
      pVariant = do_CreateInstance(NS_VARIANT_CONTRACTID, &rv);
      NS_ENSURE_SUCCESS(rv,rv);
      if (pContent) {
        rv = pContent->GetNodeValue(pText);
        NS_ENSURE_SUCCESS(rv,rv);
        pVariant->SetAsAString(pText);
        printf("%s|",ToNewCString(pText));
      } else {
        pVariant->SetAsAString(NS_LITERAL_STRING(""));
      }
      rv = pArray.AppendObject(pVariant);
    }
  }
  rv = mComponent->TreatP0048(pArray, pLsize, pCsize, mKey);
  return rv;
}


/* Generated by Pygmalion */


NS_IMPL_ISUPPORTS1(mozListenerP0049, nsISOAPResponseListener)

mozListenerP0049::mozListenerP0049(mozC02gestsea* aComponent, const nsAString & aKey, const nsACString & aField1, const nsACString & aField2, const nsACString & aField3, const nsACString & aField4)
{
  mComponent = aComponent;
  mKey = aKey;
  mField1 = aField1;
  mField2 = aField2;
  mField3 = aField3;
  mField4 = aField4;
}
mozListenerP0049::~mozListenerP0049()
{
}

NS_IMETHODIMP mozListenerP0049::HandleResponse(nsISOAPResponse *aResponse, nsISOAPCall *aCall, PRUint32 aStatus, PRBool aLast, PRBool *aReturn)
{
  nsresult rv;
  nsCOMPtr<nsISOAPFault> pFault;
  rv = aResponse->GetFault(getter_AddRefs(pFault));
  NS_ENSURE_SUCCESS(rv, rv);
  if (pFault) {
    nsAutoString pFaute, pDetail, pTitle;
    nsCOMPtr<nsIDOMElement> pTheDetail;
    nsCOMPtr<nsIDOMNode> pNode;
    rv = pFault->GetDetail(getter_AddRefs(pTheDetail));
    NS_ENSURE_SUCCESS(rv,rv);
    rv = pTheDetail->GetFirstChild(getter_AddRefs(pNode));
    NS_ENSURE_SUCCESS(rv,rv);
    if (pNode) {
      nsCOMPtr<nsIDOMNamedNodeMap> pAttributes;
      nsCOMPtr<nsIDOMNode> pAttribute, pFirstNode;
      nsAutoString pNodeValue;
      rv = pNode->GetFirstChild(getter_AddRefs(pFirstNode));
      NS_ENSURE_SUCCESS(rv,rv);
      if (pFirstNode) {
        pFirstNode->GetNodeValue(pNodeValue);
        NS_ENSURE_SUCCESS(rv,rv);
        pDetail  = pNodeValue;
      }
      pNode->GetAttributes(getter_AddRefs(pAttributes));
      NS_ENSURE_SUCCESS(rv,rv);
      pAttributes->GetNamedItem(NS_LITERAL_STRING("code"), getter_AddRefs(pAttribute));
      NS_ENSURE_SUCCESS(rv,rv);
      if (pAttribute) {
        pAttribute->GetNodeValue(pNodeValue);
        NS_ENSURE_SUCCESS(rv,rv);
        pDetail += NS_LITERAL_STRING("\n(Erreur ");
        pDetail += pNodeValue;
        pDetail += NS_LITERAL_STRING(")");
      }
    } else pDetail = NS_LITERAL_STRING("Erreur sans message.");
    pFaute = pDetail;
    rv = pFault->GetFaultString(pTitle);
    NS_ENSURE_SUCCESS(rv,rv);
    nsCOMPtr<nsIPrompt> pPrompt= do_GetService(NS_DEFAULTPROMPT_CONTRACTID, &rv);
    NS_ENSURE_SUCCESS(rv,rv);
    pPrompt->Alert(ToNewUnicode(pTitle), ToNewUnicode(pFaute));
    return NS_ERROR_FAILURE;
  }

  nsISOAPParameter ** pParameters;
  PRUint32 pTotal;
  rv = aResponse->GetParameters(PR_FALSE, &pTotal, &pParameters);
  NS_ENSURE_SUCCESS(rv,rv);
  if (pTotal!=1) {
    nsCOMPtr<nsIPrompt> pPrompt= do_GetService(NS_DEFAULTPROMPT_CONTRACTID, &rv);
    NS_ENSURE_SUCCESS(rv,rv);
    pPrompt->Alert(ToNewUnicode(NS_LITERAL_CSTRING("Erreur système")), ToNewUnicode(NS_LITERAL_CSTRING("Le nombre total de paramètres reçus est incorrect.")));
    return NS_ERROR_FAILURE;
  }

  nsAutoString pText;
  nsCOMPtr<nsIVariant> pValue;
  rv = pParameters[0]->GetValue(getter_AddRefs(pValue));
  NS_ENSURE_SUCCESS(rv,rv);
  rv = pValue->GetAsAString(pText);
  NS_ENSURE_SUCCESS(rv,rv);
  rv = mComponent->TreatP0049(pText, mKey, mField1, mField2, mField3, mField4);
  return rv;
}


/* Generated by Pygmalion */


NS_IMPL_ISUPPORTS1(mozListenerP004A, nsISOAPResponseListener)

mozListenerP004A::mozListenerP004A(mozC02gestsea* aComponent)
{
  mComponent = aComponent;
}
mozListenerP004A::~mozListenerP004A()
{
}

NS_IMETHODIMP mozListenerP004A::HandleResponse(nsISOAPResponse *aResponse, nsISOAPCall *aCall, PRUint32 aStatus, PRBool aLast, PRBool *aReturn)
{
  nsresult rv;
  nsCOMPtr<nsISOAPFault> pFault;
  rv = aResponse->GetFault(getter_AddRefs(pFault));
  NS_ENSURE_SUCCESS(rv, rv);
  if (pFault) {
    nsAutoString pFaute, pDetail, pTitle;
    nsCOMPtr<nsIDOMElement> pTheDetail;
    nsCOMPtr<nsIDOMNode> pNode;
    rv = pFault->GetDetail(getter_AddRefs(pTheDetail));
    NS_ENSURE_SUCCESS(rv,rv);
    rv = pTheDetail->GetFirstChild(getter_AddRefs(pNode));
    NS_ENSURE_SUCCESS(rv,rv);
    if (pNode) {
      nsCOMPtr<nsIDOMNamedNodeMap> pAttributes;
      nsCOMPtr<nsIDOMNode> pAttribute, pFirstNode;
      nsAutoString pNodeValue;
      rv = pNode->GetFirstChild(getter_AddRefs(pFirstNode));
      NS_ENSURE_SUCCESS(rv,rv);
      if (pFirstNode) {
        pFirstNode->GetNodeValue(pNodeValue);
        NS_ENSURE_SUCCESS(rv,rv);
        pDetail  = pNodeValue;
      }
      pNode->GetAttributes(getter_AddRefs(pAttributes));
      NS_ENSURE_SUCCESS(rv,rv);
      pAttributes->GetNamedItem(NS_LITERAL_STRING("code"), getter_AddRefs(pAttribute));
      NS_ENSURE_SUCCESS(rv,rv);
      if (pAttribute) {
        pAttribute->GetNodeValue(pNodeValue);
        NS_ENSURE_SUCCESS(rv,rv);
        pDetail += NS_LITERAL_STRING("\n(Erreur ");
        pDetail += pNodeValue;
        pDetail += NS_LITERAL_STRING(")");
      }
    } else pDetail = NS_LITERAL_STRING("Erreur sans message.");
    pFaute = pDetail;
    rv = pFault->GetFaultString(pTitle);
    NS_ENSURE_SUCCESS(rv,rv);
    nsCOMPtr<nsIPrompt> pPrompt= do_GetService(NS_DEFAULTPROMPT_CONTRACTID, &rv);
    NS_ENSURE_SUCCESS(rv,rv);
    pPrompt->Alert(ToNewUnicode(pTitle), ToNewUnicode(pFaute));
    return NS_ERROR_FAILURE;
  }

  nsISOAPParameter ** pParameters;
  PRUint32 pTotal;
  rv = aResponse->GetParameters(PR_FALSE, &pTotal, &pParameters);
  NS_ENSURE_SUCCESS(rv,rv);
  if (pTotal!=1) {
    nsCOMPtr<nsIPrompt> pPrompt= do_GetService(NS_DEFAULTPROMPT_CONTRACTID, &rv);
    NS_ENSURE_SUCCESS(rv,rv);
    pPrompt->Alert(ToNewUnicode(NS_LITERAL_CSTRING("Erreur système")), ToNewUnicode(NS_LITERAL_CSTRING("Le nombre total de paramètres reçus est incorrect.")));
    return NS_ERROR_FAILURE;
  }

  nsAutoString pText;
  nsCOMArray<nsIVariant> pArray;
  nsCOMPtr<nsIWritableVariant> pVariant;
  PRUint32 pLsize=0, pCsize=0;
  PRUint32 pLineIndex, pColIndex;
  PRUint16 pNodeType;
  nsCOMPtr<nsIDOMElement> pResult;
  nsCOMPtr<nsIDOMNodeList> pLines, pValues;
  nsCOMPtr<nsIDOMNode> pLine, pValue, pContent;
  rv = pParameters[0]->GetElement(getter_AddRefs(pResult));
  NS_ENSURE_SUCCESS(rv,rv);
  rv = pResult->GetChildNodes(getter_AddRefs(pLines));
  NS_ENSURE_SUCCESS(rv,rv);
  pLines->GetLength(&pLsize);
  for (pLineIndex=0;pLineIndex<pLsize;pLineIndex++) {
    do {
      rv = pLines->Item(pLineIndex, getter_AddRefs(pLine));
      NS_ENSURE_SUCCESS(rv,rv);
      pLine->GetNodeType(&pNodeType);
      if (pNodeType!=nsIDOMNode::ELEMENT_NODE) pLineIndex++;
    } while (pLineIndex<pLsize && pNodeType!=nsIDOMNode::ELEMENT_NODE);
    if (pLineIndex>=pLsize) break;
    rv = pLine->GetChildNodes(getter_AddRefs(pValues));
    NS_ENSURE_SUCCESS(rv,rv);
    pValues->GetLength(&pCsize);
    for (pColIndex=0;pColIndex<pCsize;pColIndex++) {
      do {
        rv = pValues->Item(pColIndex, getter_AddRefs(pValue));
        NS_ENSURE_SUCCESS(rv,rv);
        pValue->GetNodeType(&pNodeType);
        if (pNodeType!=nsIDOMNode::ELEMENT_NODE) pColIndex++;
      } while (pColIndex<pCsize && pNodeType!=nsIDOMNode::ELEMENT_NODE);
      if (pColIndex>=pCsize) break;
      rv = pValue->GetFirstChild(getter_AddRefs(pContent));
      NS_ENSURE_SUCCESS(rv,rv);
      pVariant = do_CreateInstance(NS_VARIANT_CONTRACTID, &rv);
      NS_ENSURE_SUCCESS(rv,rv);
      if (pContent) {
        rv = pContent->GetNodeValue(pText);
        NS_ENSURE_SUCCESS(rv,rv);
        pVariant->SetAsAString(pText);
        printf("%s|",ToNewCString(pText));
      } else {
        pVariant->SetAsAString(NS_LITERAL_STRING(""));
      }
      rv = pArray.AppendObject(pVariant);
    }
  }
  rv = mComponent->TreatP004A(pArray, pLsize, pCsize);
  return rv;
}


/* Generated by Pygmalion */


NS_IMPL_ISUPPORTS1(mozListenerP004B, nsISOAPResponseListener)

mozListenerP004B::mozListenerP004B(mozC02gestsea* aComponent, const nsAString & aKey)
{
  mComponent = aComponent;
  mKey = aKey;
}
mozListenerP004B::~mozListenerP004B()
{
}

NS_IMETHODIMP mozListenerP004B::HandleResponse(nsISOAPResponse *aResponse, nsISOAPCall *aCall, PRUint32 aStatus, PRBool aLast, PRBool *aReturn)
{
  nsresult rv;
  nsCOMPtr<nsISOAPFault> pFault;
  rv = aResponse->GetFault(getter_AddRefs(pFault));
  NS_ENSURE_SUCCESS(rv, rv);
  if (pFault) {
    nsAutoString pFaute, pDetail, pTitle;
    nsCOMPtr<nsIDOMElement> pTheDetail;
    nsCOMPtr<nsIDOMNode> pNode;
    rv = pFault->GetDetail(getter_AddRefs(pTheDetail));
    NS_ENSURE_SUCCESS(rv,rv);
    rv = pTheDetail->GetFirstChild(getter_AddRefs(pNode));
    NS_ENSURE_SUCCESS(rv,rv);
    if (pNode) {
      nsCOMPtr<nsIDOMNamedNodeMap> pAttributes;
      nsCOMPtr<nsIDOMNode> pAttribute, pFirstNode;
      nsAutoString pNodeValue;
      rv = pNode->GetFirstChild(getter_AddRefs(pFirstNode));
      NS_ENSURE_SUCCESS(rv,rv);
      if (pFirstNode) {
        pFirstNode->GetNodeValue(pNodeValue);
        NS_ENSURE_SUCCESS(rv,rv);
        pDetail  = pNodeValue;
      }
      pNode->GetAttributes(getter_AddRefs(pAttributes));
      NS_ENSURE_SUCCESS(rv,rv);
      pAttributes->GetNamedItem(NS_LITERAL_STRING("code"), getter_AddRefs(pAttribute));
      NS_ENSURE_SUCCESS(rv,rv);
      if (pAttribute) {
        pAttribute->GetNodeValue(pNodeValue);
        NS_ENSURE_SUCCESS(rv,rv);
        pDetail += NS_LITERAL_STRING("\n(Erreur ");
        pDetail += pNodeValue;
        pDetail += NS_LITERAL_STRING(")");
      }
    } else pDetail = NS_LITERAL_STRING("Erreur sans message.");
    pFaute = pDetail;
    rv = pFault->GetFaultString(pTitle);
    NS_ENSURE_SUCCESS(rv,rv);
    nsCOMPtr<nsIPrompt> pPrompt= do_GetService(NS_DEFAULTPROMPT_CONTRACTID, &rv);
    NS_ENSURE_SUCCESS(rv,rv);
    pPrompt->Alert(ToNewUnicode(pTitle), ToNewUnicode(pFaute));
    return NS_ERROR_FAILURE;
  }

  nsISOAPParameter ** pParameters;
  PRUint32 pTotal;
  rv = aResponse->GetParameters(PR_FALSE, &pTotal, &pParameters);
  NS_ENSURE_SUCCESS(rv,rv);
  if (pTotal!=1) {
    nsCOMPtr<nsIPrompt> pPrompt= do_GetService(NS_DEFAULTPROMPT_CONTRACTID, &rv);
    NS_ENSURE_SUCCESS(rv,rv);
    pPrompt->Alert(ToNewUnicode(NS_LITERAL_CSTRING("Erreur système")), ToNewUnicode(NS_LITERAL_CSTRING("Le nombre total de paramètres reçus est incorrect.")));
    return NS_ERROR_FAILURE;
  }

  nsAutoString pText;
  nsCOMPtr<nsIVariant> pValue;
  rv = pParameters[0]->GetValue(getter_AddRefs(pValue));
  NS_ENSURE_SUCCESS(rv,rv);
  rv = pValue->GetAsAString(pText);
  NS_ENSURE_SUCCESS(rv,rv);
  rv = mComponent->TreatP004B(pText, mKey);
  return rv;
}


/* Generated by Pygmalion */


NS_IMPL_ISUPPORTS1(mozListenerP004C, nsISOAPResponseListener)

mozListenerP004C::mozListenerP004C(mozC02gestsea* aComponent, const nsAString & aKey)
{
  mComponent = aComponent;
  mKey = aKey;
}
mozListenerP004C::~mozListenerP004C()
{
}

NS_IMETHODIMP mozListenerP004C::HandleResponse(nsISOAPResponse *aResponse, nsISOAPCall *aCall, PRUint32 aStatus, PRBool aLast, PRBool *aReturn)
{
  nsresult rv;
  nsCOMPtr<nsISOAPFault> pFault;
  rv = aResponse->GetFault(getter_AddRefs(pFault));
  NS_ENSURE_SUCCESS(rv, rv);
  if (pFault) {
    nsAutoString pFaute, pDetail, pTitle;
    nsCOMPtr<nsIDOMElement> pTheDetail;
    nsCOMPtr<nsIDOMNode> pNode;
    rv = pFault->GetDetail(getter_AddRefs(pTheDetail));
    NS_ENSURE_SUCCESS(rv,rv);
    rv = pTheDetail->GetFirstChild(getter_AddRefs(pNode));
    NS_ENSURE_SUCCESS(rv,rv);
    if (pNode) {
      nsCOMPtr<nsIDOMNamedNodeMap> pAttributes;
      nsCOMPtr<nsIDOMNode> pAttribute, pFirstNode;
      nsAutoString pNodeValue;
      rv = pNode->GetFirstChild(getter_AddRefs(pFirstNode));
      NS_ENSURE_SUCCESS(rv,rv);
      if (pFirstNode) {
        pFirstNode->GetNodeValue(pNodeValue);
        NS_ENSURE_SUCCESS(rv,rv);
        pDetail  = pNodeValue;
      }
      pNode->GetAttributes(getter_AddRefs(pAttributes));
      NS_ENSURE_SUCCESS(rv,rv);
      pAttributes->GetNamedItem(NS_LITERAL_STRING("code"), getter_AddRefs(pAttribute));
      NS_ENSURE_SUCCESS(rv,rv);
      if (pAttribute) {
        pAttribute->GetNodeValue(pNodeValue);
        NS_ENSURE_SUCCESS(rv,rv);
        pDetail += NS_LITERAL_STRING("\n(Erreur ");
        pDetail += pNodeValue;
        pDetail += NS_LITERAL_STRING(")");
      }
    } else pDetail = NS_LITERAL_STRING("Erreur sans message.");
    pFaute = pDetail;
    rv = pFault->GetFaultString(pTitle);
    NS_ENSURE_SUCCESS(rv,rv);
    nsCOMPtr<nsIPrompt> pPrompt= do_GetService(NS_DEFAULTPROMPT_CONTRACTID, &rv);
    NS_ENSURE_SUCCESS(rv,rv);
    pPrompt->Alert(ToNewUnicode(pTitle), ToNewUnicode(pFaute));
    return NS_ERROR_FAILURE;
  }

  nsISOAPParameter ** pParameters;
  PRUint32 pTotal;
  rv = aResponse->GetParameters(PR_FALSE, &pTotal, &pParameters);
  NS_ENSURE_SUCCESS(rv,rv);
  if (pTotal!=1) {
    nsCOMPtr<nsIPrompt> pPrompt= do_GetService(NS_DEFAULTPROMPT_CONTRACTID, &rv);
    NS_ENSURE_SUCCESS(rv,rv);
    pPrompt->Alert(ToNewUnicode(NS_LITERAL_CSTRING("Erreur système")), ToNewUnicode(NS_LITERAL_CSTRING("Le nombre total de paramètres reçus est incorrect.")));
    return NS_ERROR_FAILURE;
  }

  nsAutoString pText;
  nsCOMArray<nsIVariant> pArray;
  nsCOMPtr<nsIWritableVariant> pVariant;
  PRUint32 pLsize=0, pCsize=0;
  PRUint32 pLineIndex, pColIndex;
  PRUint16 pNodeType;
  nsCOMPtr<nsIDOMElement> pResult;
  nsCOMPtr<nsIDOMNodeList> pLines, pValues;
  nsCOMPtr<nsIDOMNode> pLine, pValue, pContent;
  rv = pParameters[0]->GetElement(getter_AddRefs(pResult));
  NS_ENSURE_SUCCESS(rv,rv);
  rv = pResult->GetChildNodes(getter_AddRefs(pLines));
  NS_ENSURE_SUCCESS(rv,rv);
  pLines->GetLength(&pLsize);
  for (pLineIndex=0;pLineIndex<pLsize;pLineIndex++) {
    do {
      rv = pLines->Item(pLineIndex, getter_AddRefs(pLine));
      NS_ENSURE_SUCCESS(rv,rv);
      pLine->GetNodeType(&pNodeType);
      if (pNodeType!=nsIDOMNode::ELEMENT_NODE) pLineIndex++;
    } while (pLineIndex<pLsize && pNodeType!=nsIDOMNode::ELEMENT_NODE);
    if (pLineIndex>=pLsize) break;
    rv = pLine->GetChildNodes(getter_AddRefs(pValues));
    NS_ENSURE_SUCCESS(rv,rv);
    pValues->GetLength(&pCsize);
    for (pColIndex=0;pColIndex<pCsize;pColIndex++) {
      do {
        rv = pValues->Item(pColIndex, getter_AddRefs(pValue));
        NS_ENSURE_SUCCESS(rv,rv);
        pValue->GetNodeType(&pNodeType);
        if (pNodeType!=nsIDOMNode::ELEMENT_NODE) pColIndex++;
      } while (pColIndex<pCsize && pNodeType!=nsIDOMNode::ELEMENT_NODE);
      if (pColIndex>=pCsize) break;
      rv = pValue->GetFirstChild(getter_AddRefs(pContent));
      NS_ENSURE_SUCCESS(rv,rv);
      pVariant = do_CreateInstance(NS_VARIANT_CONTRACTID, &rv);
      NS_ENSURE_SUCCESS(rv,rv);
      if (pContent) {
        rv = pContent->GetNodeValue(pText);
        NS_ENSURE_SUCCESS(rv,rv);
        pVariant->SetAsAString(pText);
        printf("%s|",ToNewCString(pText));
      } else {
        pVariant->SetAsAString(NS_LITERAL_STRING(""));
      }
      rv = pArray.AppendObject(pVariant);
    }
  }
  rv = mComponent->TreatP004C(pArray, pLsize, pCsize, mKey);
  return rv;
}


/* Generated by Pygmalion */


NS_IMPL_ISUPPORTS1(mozListenerP004D, nsISOAPResponseListener)

mozListenerP004D::mozListenerP004D(mozC02gestsea* aComponent, const nsAString & aKey)
{
  mComponent = aComponent;
  mKey = aKey;
}
mozListenerP004D::~mozListenerP004D()
{
}

NS_IMETHODIMP mozListenerP004D::HandleResponse(nsISOAPResponse *aResponse, nsISOAPCall *aCall, PRUint32 aStatus, PRBool aLast, PRBool *aReturn)
{
  nsresult rv;
  nsCOMPtr<nsISOAPFault> pFault;
  rv = aResponse->GetFault(getter_AddRefs(pFault));
  NS_ENSURE_SUCCESS(rv, rv);
  if (pFault) {
    nsAutoString pFaute, pDetail, pTitle;
    nsCOMPtr<nsIDOMElement> pTheDetail;
    nsCOMPtr<nsIDOMNode> pNode;
    rv = pFault->GetDetail(getter_AddRefs(pTheDetail));
    NS_ENSURE_SUCCESS(rv,rv);
    rv = pTheDetail->GetFirstChild(getter_AddRefs(pNode));
    NS_ENSURE_SUCCESS(rv,rv);
    if (pNode) {
      nsCOMPtr<nsIDOMNamedNodeMap> pAttributes;
      nsCOMPtr<nsIDOMNode> pAttribute, pFirstNode;
      nsAutoString pNodeValue;
      rv = pNode->GetFirstChild(getter_AddRefs(pFirstNode));
      NS_ENSURE_SUCCESS(rv,rv);
      if (pFirstNode) {
        pFirstNode->GetNodeValue(pNodeValue);
        NS_ENSURE_SUCCESS(rv,rv);
        pDetail  = pNodeValue;
      }
      pNode->GetAttributes(getter_AddRefs(pAttributes));
      NS_ENSURE_SUCCESS(rv,rv);
      pAttributes->GetNamedItem(NS_LITERAL_STRING("code"), getter_AddRefs(pAttribute));
      NS_ENSURE_SUCCESS(rv,rv);
      if (pAttribute) {
        pAttribute->GetNodeValue(pNodeValue);
        NS_ENSURE_SUCCESS(rv,rv);
        pDetail += NS_LITERAL_STRING("\n(Erreur ");
        pDetail += pNodeValue;
        pDetail += NS_LITERAL_STRING(")");
      }
    } else pDetail = NS_LITERAL_STRING("Erreur sans message.");
    pFaute = pDetail;
    rv = pFault->GetFaultString(pTitle);
    NS_ENSURE_SUCCESS(rv,rv);
    nsCOMPtr<nsIPrompt> pPrompt= do_GetService(NS_DEFAULTPROMPT_CONTRACTID, &rv);
    NS_ENSURE_SUCCESS(rv,rv);
    pPrompt->Alert(ToNewUnicode(pTitle), ToNewUnicode(pFaute));
    return NS_ERROR_FAILURE;
  }

  nsISOAPParameter ** pParameters;
  PRUint32 pTotal;
  rv = aResponse->GetParameters(PR_FALSE, &pTotal, &pParameters);
  NS_ENSURE_SUCCESS(rv,rv);
  if (pTotal!=1) {
    nsCOMPtr<nsIPrompt> pPrompt= do_GetService(NS_DEFAULTPROMPT_CONTRACTID, &rv);
    NS_ENSURE_SUCCESS(rv,rv);
    pPrompt->Alert(ToNewUnicode(NS_LITERAL_CSTRING("Erreur système")), ToNewUnicode(NS_LITERAL_CSTRING("Le nombre total de paramètres reçus est incorrect.")));
    return NS_ERROR_FAILURE;
  }

  nsAutoString pText;
  nsCOMArray<nsIVariant> pArray;
  nsCOMPtr<nsIWritableVariant> pVariant;
  PRUint32 pLsize=0, pCsize=0;
  PRUint32 pLineIndex, pColIndex;
  PRUint16 pNodeType;
  nsCOMPtr<nsIDOMElement> pResult;
  nsCOMPtr<nsIDOMNodeList> pLines, pValues;
  nsCOMPtr<nsIDOMNode> pLine, pValue, pContent;
  rv = pParameters[0]->GetElement(getter_AddRefs(pResult));
  NS_ENSURE_SUCCESS(rv,rv);
  rv = pResult->GetChildNodes(getter_AddRefs(pLines));
  NS_ENSURE_SUCCESS(rv,rv);
  pLines->GetLength(&pLsize);
  for (pLineIndex=0;pLineIndex<pLsize;pLineIndex++) {
    do {
      rv = pLines->Item(pLineIndex, getter_AddRefs(pLine));
      NS_ENSURE_SUCCESS(rv,rv);
      pLine->GetNodeType(&pNodeType);
      if (pNodeType!=nsIDOMNode::ELEMENT_NODE) pLineIndex++;
    } while (pLineIndex<pLsize && pNodeType!=nsIDOMNode::ELEMENT_NODE);
    if (pLineIndex>=pLsize) break;
    rv = pLine->GetChildNodes(getter_AddRefs(pValues));
    NS_ENSURE_SUCCESS(rv,rv);
    pValues->GetLength(&pCsize);
    for (pColIndex=0;pColIndex<pCsize;pColIndex++) {
      do {
        rv = pValues->Item(pColIndex, getter_AddRefs(pValue));
        NS_ENSURE_SUCCESS(rv,rv);
        pValue->GetNodeType(&pNodeType);
        if (pNodeType!=nsIDOMNode::ELEMENT_NODE) pColIndex++;
      } while (pColIndex<pCsize && pNodeType!=nsIDOMNode::ELEMENT_NODE);
      if (pColIndex>=pCsize) break;
      rv = pValue->GetFirstChild(getter_AddRefs(pContent));
      NS_ENSURE_SUCCESS(rv,rv);
      pVariant = do_CreateInstance(NS_VARIANT_CONTRACTID, &rv);
      NS_ENSURE_SUCCESS(rv,rv);
      if (pContent) {
        rv = pContent->GetNodeValue(pText);
        NS_ENSURE_SUCCESS(rv,rv);
        pVariant->SetAsAString(pText);
        printf("%s|",ToNewCString(pText));
      } else {
        pVariant->SetAsAString(NS_LITERAL_STRING(""));
      }
      rv = pArray.AppendObject(pVariant);
    }
  }
  rv = mComponent->TreatP004D(pArray, pLsize, pCsize, mKey);
  return rv;
}


/* Generated by Pygmalion */


NS_IMPL_ISUPPORTS1(mozListenerP004E, nsISOAPResponseListener)

mozListenerP004E::mozListenerP004E(mozC02gestsea* aComponent, const nsAString & aKey)
{
  mComponent = aComponent;
  mKey = aKey;
}
mozListenerP004E::~mozListenerP004E()
{
}

NS_IMETHODIMP mozListenerP004E::HandleResponse(nsISOAPResponse *aResponse, nsISOAPCall *aCall, PRUint32 aStatus, PRBool aLast, PRBool *aReturn)
{
  nsresult rv;
  nsCOMPtr<nsISOAPFault> pFault;
  rv = aResponse->GetFault(getter_AddRefs(pFault));
  NS_ENSURE_SUCCESS(rv, rv);
  if (pFault) {
    nsAutoString pFaute, pDetail, pTitle;
    nsCOMPtr<nsIDOMElement> pTheDetail;
    nsCOMPtr<nsIDOMNode> pNode;
    rv = pFault->GetDetail(getter_AddRefs(pTheDetail));
    NS_ENSURE_SUCCESS(rv,rv);
    rv = pTheDetail->GetFirstChild(getter_AddRefs(pNode));
    NS_ENSURE_SUCCESS(rv,rv);
    if (pNode) {
      nsCOMPtr<nsIDOMNamedNodeMap> pAttributes;
      nsCOMPtr<nsIDOMNode> pAttribute, pFirstNode;
      nsAutoString pNodeValue;
      rv = pNode->GetFirstChild(getter_AddRefs(pFirstNode));
      NS_ENSURE_SUCCESS(rv,rv);
      if (pFirstNode) {
        pFirstNode->GetNodeValue(pNodeValue);
        NS_ENSURE_SUCCESS(rv,rv);
        pDetail  = pNodeValue;
      }
      pNode->GetAttributes(getter_AddRefs(pAttributes));
      NS_ENSURE_SUCCESS(rv,rv);
      pAttributes->GetNamedItem(NS_LITERAL_STRING("code"), getter_AddRefs(pAttribute));
      NS_ENSURE_SUCCESS(rv,rv);
      if (pAttribute) {
        pAttribute->GetNodeValue(pNodeValue);
        NS_ENSURE_SUCCESS(rv,rv);
        pDetail += NS_LITERAL_STRING("\n(Erreur ");
        pDetail += pNodeValue;
        pDetail += NS_LITERAL_STRING(")");
      }
    } else pDetail = NS_LITERAL_STRING("Erreur sans message.");
    pFaute = pDetail;
    rv = pFault->GetFaultString(pTitle);
    NS_ENSURE_SUCCESS(rv,rv);
    nsCOMPtr<nsIPrompt> pPrompt= do_GetService(NS_DEFAULTPROMPT_CONTRACTID, &rv);
    NS_ENSURE_SUCCESS(rv,rv);
    pPrompt->Alert(ToNewUnicode(pTitle), ToNewUnicode(pFaute));
    return NS_ERROR_FAILURE;
  }

  nsISOAPParameter ** pParameters;
  PRUint32 pTotal;
  rv = aResponse->GetParameters(PR_FALSE, &pTotal, &pParameters);
  NS_ENSURE_SUCCESS(rv,rv);
  if (pTotal!=1) {
    nsCOMPtr<nsIPrompt> pPrompt= do_GetService(NS_DEFAULTPROMPT_CONTRACTID, &rv);
    NS_ENSURE_SUCCESS(rv,rv);
    pPrompt->Alert(ToNewUnicode(NS_LITERAL_CSTRING("Erreur système")), ToNewUnicode(NS_LITERAL_CSTRING("Le nombre total de paramètres reçus est incorrect.")));
    return NS_ERROR_FAILURE;
  }

  nsAutoString pText;
  nsCOMArray<nsIVariant> pArray;
  nsCOMPtr<nsIWritableVariant> pVariant;
  PRUint32 pLsize=0, pCsize=0;
  PRUint32 pLineIndex, pColIndex;
  PRUint16 pNodeType;
  nsCOMPtr<nsIDOMElement> pResult;
  nsCOMPtr<nsIDOMNodeList> pLines, pValues;
  nsCOMPtr<nsIDOMNode> pLine, pValue, pContent;
  rv = pParameters[0]->GetElement(getter_AddRefs(pResult));
  NS_ENSURE_SUCCESS(rv,rv);
  rv = pResult->GetChildNodes(getter_AddRefs(pLines));
  NS_ENSURE_SUCCESS(rv,rv);
  pLines->GetLength(&pLsize);
  for (pLineIndex=0;pLineIndex<pLsize;pLineIndex++) {
    do {
      rv = pLines->Item(pLineIndex, getter_AddRefs(pLine));
      NS_ENSURE_SUCCESS(rv,rv);
      pLine->GetNodeType(&pNodeType);
      if (pNodeType!=nsIDOMNode::ELEMENT_NODE) pLineIndex++;
    } while (pLineIndex<pLsize && pNodeType!=nsIDOMNode::ELEMENT_NODE);
    if (pLineIndex>=pLsize) break;
    rv = pLine->GetChildNodes(getter_AddRefs(pValues));
    NS_ENSURE_SUCCESS(rv,rv);
    pValues->GetLength(&pCsize);
    for (pColIndex=0;pColIndex<pCsize;pColIndex++) {
      do {
        rv = pValues->Item(pColIndex, getter_AddRefs(pValue));
        NS_ENSURE_SUCCESS(rv,rv);
        pValue->GetNodeType(&pNodeType);
        if (pNodeType!=nsIDOMNode::ELEMENT_NODE) pColIndex++;
      } while (pColIndex<pCsize && pNodeType!=nsIDOMNode::ELEMENT_NODE);
      if (pColIndex>=pCsize) break;
      rv = pValue->GetFirstChild(getter_AddRefs(pContent));
      NS_ENSURE_SUCCESS(rv,rv);
      pVariant = do_CreateInstance(NS_VARIANT_CONTRACTID, &rv);
      NS_ENSURE_SUCCESS(rv,rv);
      if (pContent) {
        rv = pContent->GetNodeValue(pText);
        NS_ENSURE_SUCCESS(rv,rv);
        pVariant->SetAsAString(pText);
        printf("%s|",ToNewCString(pText));
      } else {
        pVariant->SetAsAString(NS_LITERAL_STRING(""));
      }
      rv = pArray.AppendObject(pVariant);
    }
  }
  rv = mComponent->TreatP004E(pArray, pLsize, pCsize, mKey);
  return rv;
}


/* Generated by Pygmalion */


NS_IMPL_ISUPPORTS1(mozListenerP004F, nsISOAPResponseListener)

mozListenerP004F::mozListenerP004F(mozC02gestsea* aComponent, const nsAString & aKey)
{
  mComponent = aComponent;
  mKey = aKey;
}
mozListenerP004F::~mozListenerP004F()
{
}

NS_IMETHODIMP mozListenerP004F::HandleResponse(nsISOAPResponse *aResponse, nsISOAPCall *aCall, PRUint32 aStatus, PRBool aLast, PRBool *aReturn)
{
  nsresult rv;
  nsCOMPtr<nsISOAPFault> pFault;
  rv = aResponse->GetFault(getter_AddRefs(pFault));
  NS_ENSURE_SUCCESS(rv, rv);
  if (pFault) {
    nsAutoString pFaute, pDetail, pTitle;
    nsCOMPtr<nsIDOMElement> pTheDetail;
    nsCOMPtr<nsIDOMNode> pNode;
    rv = pFault->GetDetail(getter_AddRefs(pTheDetail));
    NS_ENSURE_SUCCESS(rv,rv);
    rv = pTheDetail->GetFirstChild(getter_AddRefs(pNode));
    NS_ENSURE_SUCCESS(rv,rv);
    if (pNode) {
      nsCOMPtr<nsIDOMNamedNodeMap> pAttributes;
      nsCOMPtr<nsIDOMNode> pAttribute, pFirstNode;
      nsAutoString pNodeValue;
      rv = pNode->GetFirstChild(getter_AddRefs(pFirstNode));
      NS_ENSURE_SUCCESS(rv,rv);
      if (pFirstNode) {
        pFirstNode->GetNodeValue(pNodeValue);
        NS_ENSURE_SUCCESS(rv,rv);
        pDetail  = pNodeValue;
      }
      pNode->GetAttributes(getter_AddRefs(pAttributes));
      NS_ENSURE_SUCCESS(rv,rv);
      pAttributes->GetNamedItem(NS_LITERAL_STRING("code"), getter_AddRefs(pAttribute));
      NS_ENSURE_SUCCESS(rv,rv);
      if (pAttribute) {
        pAttribute->GetNodeValue(pNodeValue);
        NS_ENSURE_SUCCESS(rv,rv);
        pDetail += NS_LITERAL_STRING("\n(Erreur ");
        pDetail += pNodeValue;
        pDetail += NS_LITERAL_STRING(")");
      }
    } else pDetail = NS_LITERAL_STRING("Erreur sans message.");
    pFaute = pDetail;
    rv = pFault->GetFaultString(pTitle);
    NS_ENSURE_SUCCESS(rv,rv);
    nsCOMPtr<nsIPrompt> pPrompt= do_GetService(NS_DEFAULTPROMPT_CONTRACTID, &rv);
    NS_ENSURE_SUCCESS(rv,rv);
    pPrompt->Alert(ToNewUnicode(pTitle), ToNewUnicode(pFaute));
    return NS_ERROR_FAILURE;
  }

  nsISOAPParameter ** pParameters;
  PRUint32 pTotal;
  rv = aResponse->GetParameters(PR_FALSE, &pTotal, &pParameters);
  NS_ENSURE_SUCCESS(rv,rv);
  if (pTotal!=1) {
    nsCOMPtr<nsIPrompt> pPrompt= do_GetService(NS_DEFAULTPROMPT_CONTRACTID, &rv);
    NS_ENSURE_SUCCESS(rv,rv);
    pPrompt->Alert(ToNewUnicode(NS_LITERAL_CSTRING("Erreur système")), ToNewUnicode(NS_LITERAL_CSTRING("Le nombre total de paramètres reçus est incorrect.")));
    return NS_ERROR_FAILURE;
  }

  nsAutoString pText;
  nsCOMArray<nsIVariant> pArray;
  nsCOMPtr<nsIWritableVariant> pVariant;
  PRUint32 pLsize=0, pCsize=0;
  PRUint32 pLineIndex, pColIndex;
  PRUint16 pNodeType;
  nsCOMPtr<nsIDOMElement> pResult;
  nsCOMPtr<nsIDOMNodeList> pLines, pValues;
  nsCOMPtr<nsIDOMNode> pLine, pValue, pContent;
  rv = pParameters[0]->GetElement(getter_AddRefs(pResult));
  NS_ENSURE_SUCCESS(rv,rv);
  rv = pResult->GetChildNodes(getter_AddRefs(pLines));
  NS_ENSURE_SUCCESS(rv,rv);
  pLines->GetLength(&pLsize);
  for (pLineIndex=0;pLineIndex<pLsize;pLineIndex++) {
    do {
      rv = pLines->Item(pLineIndex, getter_AddRefs(pLine));
      NS_ENSURE_SUCCESS(rv,rv);
      pLine->GetNodeType(&pNodeType);
      if (pNodeType!=nsIDOMNode::ELEMENT_NODE) pLineIndex++;
    } while (pLineIndex<pLsize && pNodeType!=nsIDOMNode::ELEMENT_NODE);
    if (pLineIndex>=pLsize) break;
    rv = pLine->GetChildNodes(getter_AddRefs(pValues));
    NS_ENSURE_SUCCESS(rv,rv);
    pValues->GetLength(&pCsize);
    for (pColIndex=0;pColIndex<pCsize;pColIndex++) {
      do {
        rv = pValues->Item(pColIndex, getter_AddRefs(pValue));
        NS_ENSURE_SUCCESS(rv,rv);
        pValue->GetNodeType(&pNodeType);
        if (pNodeType!=nsIDOMNode::ELEMENT_NODE) pColIndex++;
      } while (pColIndex<pCsize && pNodeType!=nsIDOMNode::ELEMENT_NODE);
      if (pColIndex>=pCsize) break;
      rv = pValue->GetFirstChild(getter_AddRefs(pContent));
      NS_ENSURE_SUCCESS(rv,rv);
      pVariant = do_CreateInstance(NS_VARIANT_CONTRACTID, &rv);
      NS_ENSURE_SUCCESS(rv,rv);
      if (pContent) {
        rv = pContent->GetNodeValue(pText);
        NS_ENSURE_SUCCESS(rv,rv);
        pVariant->SetAsAString(pText);
        printf("%s|",ToNewCString(pText));
      } else {
        pVariant->SetAsAString(NS_LITERAL_STRING(""));
      }
      rv = pArray.AppendObject(pVariant);
    }
  }
  rv = mComponent->TreatP004F(pArray, pLsize, pCsize, mKey);
  return rv;
}


/* Generated by Pygmalion */


NS_IMPL_ISUPPORTS1(mozListenerP0050, nsISOAPResponseListener)

mozListenerP0050::mozListenerP0050(mozC02gestsea* aComponent, const nsAString & aKey)
{
  mComponent = aComponent;
  mKey = aKey;
}
mozListenerP0050::~mozListenerP0050()
{
}

NS_IMETHODIMP mozListenerP0050::HandleResponse(nsISOAPResponse *aResponse, nsISOAPCall *aCall, PRUint32 aStatus, PRBool aLast, PRBool *aReturn)
{
  nsresult rv;
  nsCOMPtr<nsISOAPFault> pFault;
  rv = aResponse->GetFault(getter_AddRefs(pFault));
  NS_ENSURE_SUCCESS(rv, rv);
  if (pFault) {
    nsAutoString pFaute, pDetail, pTitle;
    nsCOMPtr<nsIDOMElement> pTheDetail;
    nsCOMPtr<nsIDOMNode> pNode;
    rv = pFault->GetDetail(getter_AddRefs(pTheDetail));
    NS_ENSURE_SUCCESS(rv,rv);
    rv = pTheDetail->GetFirstChild(getter_AddRefs(pNode));
    NS_ENSURE_SUCCESS(rv,rv);
    if (pNode) {
      nsCOMPtr<nsIDOMNamedNodeMap> pAttributes;
      nsCOMPtr<nsIDOMNode> pAttribute, pFirstNode;
      nsAutoString pNodeValue;
      rv = pNode->GetFirstChild(getter_AddRefs(pFirstNode));
      NS_ENSURE_SUCCESS(rv,rv);
      if (pFirstNode) {
        pFirstNode->GetNodeValue(pNodeValue);
        NS_ENSURE_SUCCESS(rv,rv);
        pDetail  = pNodeValue;
      }
      pNode->GetAttributes(getter_AddRefs(pAttributes));
      NS_ENSURE_SUCCESS(rv,rv);
      pAttributes->GetNamedItem(NS_LITERAL_STRING("code"), getter_AddRefs(pAttribute));
      NS_ENSURE_SUCCESS(rv,rv);
      if (pAttribute) {
        pAttribute->GetNodeValue(pNodeValue);
        NS_ENSURE_SUCCESS(rv,rv);
        pDetail += NS_LITERAL_STRING("\n(Erreur ");
        pDetail += pNodeValue;
        pDetail += NS_LITERAL_STRING(")");
      }
    } else pDetail = NS_LITERAL_STRING("Erreur sans message.");
    pFaute = pDetail;
    rv = pFault->GetFaultString(pTitle);
    NS_ENSURE_SUCCESS(rv,rv);
    nsCOMPtr<nsIPrompt> pPrompt= do_GetService(NS_DEFAULTPROMPT_CONTRACTID, &rv);
    NS_ENSURE_SUCCESS(rv,rv);
    pPrompt->Alert(ToNewUnicode(pTitle), ToNewUnicode(pFaute));
    return NS_ERROR_FAILURE;
  }

  nsISOAPParameter ** pParameters;
  PRUint32 pTotal;
  rv = aResponse->GetParameters(PR_FALSE, &pTotal, &pParameters);
  NS_ENSURE_SUCCESS(rv,rv);
  if (pTotal!=1) {
    nsCOMPtr<nsIPrompt> pPrompt= do_GetService(NS_DEFAULTPROMPT_CONTRACTID, &rv);
    NS_ENSURE_SUCCESS(rv,rv);
    pPrompt->Alert(ToNewUnicode(NS_LITERAL_CSTRING("Erreur système")), ToNewUnicode(NS_LITERAL_CSTRING("Le nombre total de paramètres reçus est incorrect.")));
    return NS_ERROR_FAILURE;
  }

  nsAutoString pText;
  nsCOMArray<nsIVariant> pArray;
  nsCOMPtr<nsIWritableVariant> pVariant;
  PRUint32 pLsize=0, pCsize=0;
  PRUint32 pLineIndex, pColIndex;
  PRUint16 pNodeType;
  nsCOMPtr<nsIDOMElement> pResult;
  nsCOMPtr<nsIDOMNodeList> pLines, pValues;
  nsCOMPtr<nsIDOMNode> pLine, pValue, pContent;
  rv = pParameters[0]->GetElement(getter_AddRefs(pResult));
  NS_ENSURE_SUCCESS(rv,rv);
  rv = pResult->GetChildNodes(getter_AddRefs(pLines));
  NS_ENSURE_SUCCESS(rv,rv);
  pLines->GetLength(&pLsize);
  for (pLineIndex=0;pLineIndex<pLsize;pLineIndex++) {
    do {
      rv = pLines->Item(pLineIndex, getter_AddRefs(pLine));
      NS_ENSURE_SUCCESS(rv,rv);
      pLine->GetNodeType(&pNodeType);
      if (pNodeType!=nsIDOMNode::ELEMENT_NODE) pLineIndex++;
    } while (pLineIndex<pLsize && pNodeType!=nsIDOMNode::ELEMENT_NODE);
    if (pLineIndex>=pLsize) break;
    rv = pLine->GetChildNodes(getter_AddRefs(pValues));
    NS_ENSURE_SUCCESS(rv,rv);
    pValues->GetLength(&pCsize);
    for (pColIndex=0;pColIndex<pCsize;pColIndex++) {
      do {
        rv = pValues->Item(pColIndex, getter_AddRefs(pValue));
        NS_ENSURE_SUCCESS(rv,rv);
        pValue->GetNodeType(&pNodeType);
        if (pNodeType!=nsIDOMNode::ELEMENT_NODE) pColIndex++;
      } while (pColIndex<pCsize && pNodeType!=nsIDOMNode::ELEMENT_NODE);
      if (pColIndex>=pCsize) break;
      rv = pValue->GetFirstChild(getter_AddRefs(pContent));
      NS_ENSURE_SUCCESS(rv,rv);
      pVariant = do_CreateInstance(NS_VARIANT_CONTRACTID, &rv);
      NS_ENSURE_SUCCESS(rv,rv);
      if (pContent) {
        rv = pContent->GetNodeValue(pText);
        NS_ENSURE_SUCCESS(rv,rv);
        pVariant->SetAsAString(pText);
        printf("%s|",ToNewCString(pText));
      } else {
        pVariant->SetAsAString(NS_LITERAL_STRING(""));
      }
      rv = pArray.AppendObject(pVariant);
    }
  }
  rv = mComponent->TreatP0050(pArray, pLsize, pCsize, mKey);
  return rv;
}


/* Generated by Pygmalion */


NS_IMPL_ISUPPORTS1(mozListenerP0051, nsISOAPResponseListener)

mozListenerP0051::mozListenerP0051(mozC02gestsea* aComponent, const nsAString & aKey)
{
  mComponent = aComponent;
  mKey = aKey;
}
mozListenerP0051::~mozListenerP0051()
{
}

NS_IMETHODIMP mozListenerP0051::HandleResponse(nsISOAPResponse *aResponse, nsISOAPCall *aCall, PRUint32 aStatus, PRBool aLast, PRBool *aReturn)
{
  nsresult rv;
  nsCOMPtr<nsISOAPFault> pFault;
  rv = aResponse->GetFault(getter_AddRefs(pFault));
  NS_ENSURE_SUCCESS(rv, rv);
  if (pFault) {
    nsAutoString pFaute, pDetail, pTitle;
    nsCOMPtr<nsIDOMElement> pTheDetail;
    nsCOMPtr<nsIDOMNode> pNode;
    rv = pFault->GetDetail(getter_AddRefs(pTheDetail));
    NS_ENSURE_SUCCESS(rv,rv);
    rv = pTheDetail->GetFirstChild(getter_AddRefs(pNode));
    NS_ENSURE_SUCCESS(rv,rv);
    if (pNode) {
      nsCOMPtr<nsIDOMNamedNodeMap> pAttributes;
      nsCOMPtr<nsIDOMNode> pAttribute, pFirstNode;
      nsAutoString pNodeValue;
      rv = pNode->GetFirstChild(getter_AddRefs(pFirstNode));
      NS_ENSURE_SUCCESS(rv,rv);
      if (pFirstNode) {
        pFirstNode->GetNodeValue(pNodeValue);
        NS_ENSURE_SUCCESS(rv,rv);
        pDetail  = pNodeValue;
      }
      pNode->GetAttributes(getter_AddRefs(pAttributes));
      NS_ENSURE_SUCCESS(rv,rv);
      pAttributes->GetNamedItem(NS_LITERAL_STRING("code"), getter_AddRefs(pAttribute));
      NS_ENSURE_SUCCESS(rv,rv);
      if (pAttribute) {
        pAttribute->GetNodeValue(pNodeValue);
        NS_ENSURE_SUCCESS(rv,rv);
        pDetail += NS_LITERAL_STRING("\n(Erreur ");
        pDetail += pNodeValue;
        pDetail += NS_LITERAL_STRING(")");
      }
    } else pDetail = NS_LITERAL_STRING("Erreur sans message.");
    pFaute = pDetail;
    rv = pFault->GetFaultString(pTitle);
    NS_ENSURE_SUCCESS(rv,rv);
    nsCOMPtr<nsIPrompt> pPrompt= do_GetService(NS_DEFAULTPROMPT_CONTRACTID, &rv);
    NS_ENSURE_SUCCESS(rv,rv);
    pPrompt->Alert(ToNewUnicode(pTitle), ToNewUnicode(pFaute));
    return NS_ERROR_FAILURE;
  }

  nsISOAPParameter ** pParameters;
  PRUint32 pTotal;
  rv = aResponse->GetParameters(PR_FALSE, &pTotal, &pParameters);
  NS_ENSURE_SUCCESS(rv,rv);
  if (pTotal!=1) {
    nsCOMPtr<nsIPrompt> pPrompt= do_GetService(NS_DEFAULTPROMPT_CONTRACTID, &rv);
    NS_ENSURE_SUCCESS(rv,rv);
    pPrompt->Alert(ToNewUnicode(NS_LITERAL_CSTRING("Erreur système")), ToNewUnicode(NS_LITERAL_CSTRING("Le nombre total de paramètres reçus est incorrect.")));
    return NS_ERROR_FAILURE;
  }

  nsAutoString pText;
  nsCOMArray<nsIVariant> pArray;
  nsCOMPtr<nsIWritableVariant> pVariant;
  PRUint32 pLsize=0, pCsize=0;
  PRUint32 pLineIndex, pColIndex;
  PRUint16 pNodeType;
  nsCOMPtr<nsIDOMElement> pResult;
  nsCOMPtr<nsIDOMNodeList> pLines, pValues;
  nsCOMPtr<nsIDOMNode> pLine, pValue, pContent;
  rv = pParameters[0]->GetElement(getter_AddRefs(pResult));
  NS_ENSURE_SUCCESS(rv,rv);
  rv = pResult->GetChildNodes(getter_AddRefs(pLines));
  NS_ENSURE_SUCCESS(rv,rv);
  pLines->GetLength(&pLsize);
  for (pLineIndex=0;pLineIndex<pLsize;pLineIndex++) {
    do {
      rv = pLines->Item(pLineIndex, getter_AddRefs(pLine));
      NS_ENSURE_SUCCESS(rv,rv);
      pLine->GetNodeType(&pNodeType);
      if (pNodeType!=nsIDOMNode::ELEMENT_NODE) pLineIndex++;
    } while (pLineIndex<pLsize && pNodeType!=nsIDOMNode::ELEMENT_NODE);
    if (pLineIndex>=pLsize) break;
    rv = pLine->GetChildNodes(getter_AddRefs(pValues));
    NS_ENSURE_SUCCESS(rv,rv);
    pValues->GetLength(&pCsize);
    for (pColIndex=0;pColIndex<pCsize;pColIndex++) {
      do {
        rv = pValues->Item(pColIndex, getter_AddRefs(pValue));
        NS_ENSURE_SUCCESS(rv,rv);
        pValue->GetNodeType(&pNodeType);
        if (pNodeType!=nsIDOMNode::ELEMENT_NODE) pColIndex++;
      } while (pColIndex<pCsize && pNodeType!=nsIDOMNode::ELEMENT_NODE);
      if (pColIndex>=pCsize) break;
      rv = pValue->GetFirstChild(getter_AddRefs(pContent));
      NS_ENSURE_SUCCESS(rv,rv);
      pVariant = do_CreateInstance(NS_VARIANT_CONTRACTID, &rv);
      NS_ENSURE_SUCCESS(rv,rv);
      if (pContent) {
        rv = pContent->GetNodeValue(pText);
        NS_ENSURE_SUCCESS(rv,rv);
        pVariant->SetAsAString(pText);
        printf("%s|",ToNewCString(pText));
      } else {
        pVariant->SetAsAString(NS_LITERAL_STRING(""));
      }
      rv = pArray.AppendObject(pVariant);
    }
  }
  rv = mComponent->TreatP0051(pArray, pLsize, pCsize, mKey);
  return rv;
}


/* Generated by Pygmalion */


NS_IMPL_ISUPPORTS1(mozListenerP0052, nsISOAPResponseListener)

mozListenerP0052::mozListenerP0052(mozC02gestsea* aComponent, const nsAString & aKey)
{
  mComponent = aComponent;
  mKey = aKey;
}
mozListenerP0052::~mozListenerP0052()
{
}

NS_IMETHODIMP mozListenerP0052::HandleResponse(nsISOAPResponse *aResponse, nsISOAPCall *aCall, PRUint32 aStatus, PRBool aLast, PRBool *aReturn)
{
  nsresult rv;
  nsCOMPtr<nsISOAPFault> pFault;
  rv = aResponse->GetFault(getter_AddRefs(pFault));
  NS_ENSURE_SUCCESS(rv, rv);
  if (pFault) {
    nsAutoString pFaute, pDetail, pTitle;
    nsCOMPtr<nsIDOMElement> pTheDetail;
    nsCOMPtr<nsIDOMNode> pNode;
    rv = pFault->GetDetail(getter_AddRefs(pTheDetail));
    NS_ENSURE_SUCCESS(rv,rv);
    rv = pTheDetail->GetFirstChild(getter_AddRefs(pNode));
    NS_ENSURE_SUCCESS(rv,rv);
    if (pNode) {
      nsCOMPtr<nsIDOMNamedNodeMap> pAttributes;
      nsCOMPtr<nsIDOMNode> pAttribute, pFirstNode;
      nsAutoString pNodeValue;
      rv = pNode->GetFirstChild(getter_AddRefs(pFirstNode));
      NS_ENSURE_SUCCESS(rv,rv);
      if (pFirstNode) {
        pFirstNode->GetNodeValue(pNodeValue);
        NS_ENSURE_SUCCESS(rv,rv);
        pDetail  = pNodeValue;
      }
      pNode->GetAttributes(getter_AddRefs(pAttributes));
      NS_ENSURE_SUCCESS(rv,rv);
      pAttributes->GetNamedItem(NS_LITERAL_STRING("code"), getter_AddRefs(pAttribute));
      NS_ENSURE_SUCCESS(rv,rv);
      if (pAttribute) {
        pAttribute->GetNodeValue(pNodeValue);
        NS_ENSURE_SUCCESS(rv,rv);
        pDetail += NS_LITERAL_STRING("\n(Erreur ");
        pDetail += pNodeValue;
        pDetail += NS_LITERAL_STRING(")");
      }
    } else pDetail = NS_LITERAL_STRING("Erreur sans message.");
    pFaute = pDetail;
    rv = pFault->GetFaultString(pTitle);
    NS_ENSURE_SUCCESS(rv,rv);
    nsCOMPtr<nsIPrompt> pPrompt= do_GetService(NS_DEFAULTPROMPT_CONTRACTID, &rv);
    NS_ENSURE_SUCCESS(rv,rv);
    pPrompt->Alert(ToNewUnicode(pTitle), ToNewUnicode(pFaute));
    return NS_ERROR_FAILURE;
  }

  nsISOAPParameter ** pParameters;
  PRUint32 pTotal;
  rv = aResponse->GetParameters(PR_FALSE, &pTotal, &pParameters);
  NS_ENSURE_SUCCESS(rv,rv);
  if (pTotal!=1) {
    nsCOMPtr<nsIPrompt> pPrompt= do_GetService(NS_DEFAULTPROMPT_CONTRACTID, &rv);
    NS_ENSURE_SUCCESS(rv,rv);
    pPrompt->Alert(ToNewUnicode(NS_LITERAL_CSTRING("Erreur système")), ToNewUnicode(NS_LITERAL_CSTRING("Le nombre total de paramètres reçus est incorrect.")));
    return NS_ERROR_FAILURE;
  }

  nsAutoString pText;
  nsCOMArray<nsIVariant> pArray;
  nsCOMPtr<nsIWritableVariant> pVariant;
  PRUint32 pLsize=0, pCsize=0;
  PRUint32 pLineIndex, pColIndex;
  PRUint16 pNodeType;
  nsCOMPtr<nsIDOMElement> pResult;
  nsCOMPtr<nsIDOMNodeList> pLines, pValues;
  nsCOMPtr<nsIDOMNode> pLine, pValue, pContent;
  rv = pParameters[0]->GetElement(getter_AddRefs(pResult));
  NS_ENSURE_SUCCESS(rv,rv);
  rv = pResult->GetChildNodes(getter_AddRefs(pLines));
  NS_ENSURE_SUCCESS(rv,rv);
  pLines->GetLength(&pLsize);
  for (pLineIndex=0;pLineIndex<pLsize;pLineIndex++) {
    do {
      rv = pLines->Item(pLineIndex, getter_AddRefs(pLine));
      NS_ENSURE_SUCCESS(rv,rv);
      pLine->GetNodeType(&pNodeType);
      if (pNodeType!=nsIDOMNode::ELEMENT_NODE) pLineIndex++;
    } while (pLineIndex<pLsize && pNodeType!=nsIDOMNode::ELEMENT_NODE);
    if (pLineIndex>=pLsize) break;
    rv = pLine->GetChildNodes(getter_AddRefs(pValues));
    NS_ENSURE_SUCCESS(rv,rv);
    pValues->GetLength(&pCsize);
    for (pColIndex=0;pColIndex<pCsize;pColIndex++) {
      do {
        rv = pValues->Item(pColIndex, getter_AddRefs(pValue));
        NS_ENSURE_SUCCESS(rv,rv);
        pValue->GetNodeType(&pNodeType);
        if (pNodeType!=nsIDOMNode::ELEMENT_NODE) pColIndex++;
      } while (pColIndex<pCsize && pNodeType!=nsIDOMNode::ELEMENT_NODE);
      if (pColIndex>=pCsize) break;
      rv = pValue->GetFirstChild(getter_AddRefs(pContent));
      NS_ENSURE_SUCCESS(rv,rv);
      pVariant = do_CreateInstance(NS_VARIANT_CONTRACTID, &rv);
      NS_ENSURE_SUCCESS(rv,rv);
      if (pContent) {
        rv = pContent->GetNodeValue(pText);
        NS_ENSURE_SUCCESS(rv,rv);
        pVariant->SetAsAString(pText);
        printf("%s|",ToNewCString(pText));
      } else {
        pVariant->SetAsAString(NS_LITERAL_STRING(""));
      }
      rv = pArray.AppendObject(pVariant);
    }
  }
  rv = mComponent->TreatP0052(pArray, pLsize, pCsize, mKey);
  return rv;
}


/* Generated by Pygmalion */


NS_IMPL_ISUPPORTS1(mozListenerP0053, nsISOAPResponseListener)

mozListenerP0053::mozListenerP0053(mozC02gestsea* aComponent, const nsAString & aKey)
{
  mComponent = aComponent;
  mKey = aKey;
}
mozListenerP0053::~mozListenerP0053()
{
}

NS_IMETHODIMP mozListenerP0053::HandleResponse(nsISOAPResponse *aResponse, nsISOAPCall *aCall, PRUint32 aStatus, PRBool aLast, PRBool *aReturn)
{
  nsresult rv;
  nsCOMPtr<nsISOAPFault> pFault;
  rv = aResponse->GetFault(getter_AddRefs(pFault));
  NS_ENSURE_SUCCESS(rv, rv);
  if (pFault) {
    nsAutoString pFaute, pDetail, pTitle;
    nsCOMPtr<nsIDOMElement> pTheDetail;
    nsCOMPtr<nsIDOMNode> pNode;
    rv = pFault->GetDetail(getter_AddRefs(pTheDetail));
    NS_ENSURE_SUCCESS(rv,rv);
    rv = pTheDetail->GetFirstChild(getter_AddRefs(pNode));
    NS_ENSURE_SUCCESS(rv,rv);
    if (pNode) {
      nsCOMPtr<nsIDOMNamedNodeMap> pAttributes;
      nsCOMPtr<nsIDOMNode> pAttribute, pFirstNode;
      nsAutoString pNodeValue;
      rv = pNode->GetFirstChild(getter_AddRefs(pFirstNode));
      NS_ENSURE_SUCCESS(rv,rv);
      if (pFirstNode) {
        pFirstNode->GetNodeValue(pNodeValue);
        NS_ENSURE_SUCCESS(rv,rv);
        pDetail  = pNodeValue;
      }
      pNode->GetAttributes(getter_AddRefs(pAttributes));
      NS_ENSURE_SUCCESS(rv,rv);
      pAttributes->GetNamedItem(NS_LITERAL_STRING("code"), getter_AddRefs(pAttribute));
      NS_ENSURE_SUCCESS(rv,rv);
      if (pAttribute) {
        pAttribute->GetNodeValue(pNodeValue);
        NS_ENSURE_SUCCESS(rv,rv);
        pDetail += NS_LITERAL_STRING("\n(Erreur ");
        pDetail += pNodeValue;
        pDetail += NS_LITERAL_STRING(")");
      }
    } else pDetail = NS_LITERAL_STRING("Erreur sans message.");
    pFaute = pDetail;
    rv = pFault->GetFaultString(pTitle);
    NS_ENSURE_SUCCESS(rv,rv);
    nsCOMPtr<nsIPrompt> pPrompt= do_GetService(NS_DEFAULTPROMPT_CONTRACTID, &rv);
    NS_ENSURE_SUCCESS(rv,rv);
    pPrompt->Alert(ToNewUnicode(pTitle), ToNewUnicode(pFaute));
    return NS_ERROR_FAILURE;
  }

  nsISOAPParameter ** pParameters;
  PRUint32 pTotal;
  rv = aResponse->GetParameters(PR_FALSE, &pTotal, &pParameters);
  NS_ENSURE_SUCCESS(rv,rv);
  if (pTotal!=1) {
    nsCOMPtr<nsIPrompt> pPrompt= do_GetService(NS_DEFAULTPROMPT_CONTRACTID, &rv);
    NS_ENSURE_SUCCESS(rv,rv);
    pPrompt->Alert(ToNewUnicode(NS_LITERAL_CSTRING("Erreur système")), ToNewUnicode(NS_LITERAL_CSTRING("Le nombre total de paramètres reçus est incorrect.")));
    return NS_ERROR_FAILURE;
  }

  nsAutoString pText;
  nsCOMArray<nsIVariant> pArray;
  nsCOMPtr<nsIWritableVariant> pVariant;
  PRUint32 pLsize=0, pCsize=0;
  PRUint32 pLineIndex, pColIndex;
  PRUint16 pNodeType;
  nsCOMPtr<nsIDOMElement> pResult;
  nsCOMPtr<nsIDOMNodeList> pLines, pValues;
  nsCOMPtr<nsIDOMNode> pLine, pValue, pContent;
  rv = pParameters[0]->GetElement(getter_AddRefs(pResult));
  NS_ENSURE_SUCCESS(rv,rv);
  rv = pResult->GetChildNodes(getter_AddRefs(pLines));
  NS_ENSURE_SUCCESS(rv,rv);
  pLines->GetLength(&pLsize);
  for (pLineIndex=0;pLineIndex<pLsize;pLineIndex++) {
    do {
      rv = pLines->Item(pLineIndex, getter_AddRefs(pLine));
      NS_ENSURE_SUCCESS(rv,rv);
      pLine->GetNodeType(&pNodeType);
      if (pNodeType!=nsIDOMNode::ELEMENT_NODE) pLineIndex++;
    } while (pLineIndex<pLsize && pNodeType!=nsIDOMNode::ELEMENT_NODE);
    if (pLineIndex>=pLsize) break;
    rv = pLine->GetChildNodes(getter_AddRefs(pValues));
    NS_ENSURE_SUCCESS(rv,rv);
    pValues->GetLength(&pCsize);
    for (pColIndex=0;pColIndex<pCsize;pColIndex++) {
      do {
        rv = pValues->Item(pColIndex, getter_AddRefs(pValue));
        NS_ENSURE_SUCCESS(rv,rv);
        pValue->GetNodeType(&pNodeType);
        if (pNodeType!=nsIDOMNode::ELEMENT_NODE) pColIndex++;
      } while (pColIndex<pCsize && pNodeType!=nsIDOMNode::ELEMENT_NODE);
      if (pColIndex>=pCsize) break;
      rv = pValue->GetFirstChild(getter_AddRefs(pContent));
      NS_ENSURE_SUCCESS(rv,rv);
      pVariant = do_CreateInstance(NS_VARIANT_CONTRACTID, &rv);
      NS_ENSURE_SUCCESS(rv,rv);
      if (pContent) {
        rv = pContent->GetNodeValue(pText);
        NS_ENSURE_SUCCESS(rv,rv);
        pVariant->SetAsAString(pText);
        printf("%s|",ToNewCString(pText));
      } else {
        pVariant->SetAsAString(NS_LITERAL_STRING(""));
      }
      rv = pArray.AppendObject(pVariant);
    }
  }
  rv = mComponent->TreatP0053(pArray, pLsize, pCsize, mKey);
  return rv;
}


/* Generated by Pygmalion */


NS_IMPL_ISUPPORTS1(mozListenerP0054, nsISOAPResponseListener)

mozListenerP0054::mozListenerP0054(mozC02gestsea* aComponent, const nsAString & aKey)
{
  mComponent = aComponent;
  mKey = aKey;
}
mozListenerP0054::~mozListenerP0054()
{
}

NS_IMETHODIMP mozListenerP0054::HandleResponse(nsISOAPResponse *aResponse, nsISOAPCall *aCall, PRUint32 aStatus, PRBool aLast, PRBool *aReturn)
{
  nsresult rv;
  nsCOMPtr<nsISOAPFault> pFault;
  rv = aResponse->GetFault(getter_AddRefs(pFault));
  NS_ENSURE_SUCCESS(rv, rv);
  if (pFault) {
    nsAutoString pFaute, pDetail, pTitle;
    nsCOMPtr<nsIDOMElement> pTheDetail;
    nsCOMPtr<nsIDOMNode> pNode;
    rv = pFault->GetDetail(getter_AddRefs(pTheDetail));
    NS_ENSURE_SUCCESS(rv,rv);
    rv = pTheDetail->GetFirstChild(getter_AddRefs(pNode));
    NS_ENSURE_SUCCESS(rv,rv);
    if (pNode) {
      nsCOMPtr<nsIDOMNamedNodeMap> pAttributes;
      nsCOMPtr<nsIDOMNode> pAttribute, pFirstNode;
      nsAutoString pNodeValue;
      rv = pNode->GetFirstChild(getter_AddRefs(pFirstNode));
      NS_ENSURE_SUCCESS(rv,rv);
      if (pFirstNode) {
        pFirstNode->GetNodeValue(pNodeValue);
        NS_ENSURE_SUCCESS(rv,rv);
        pDetail  = pNodeValue;
      }
      pNode->GetAttributes(getter_AddRefs(pAttributes));
      NS_ENSURE_SUCCESS(rv,rv);
      pAttributes->GetNamedItem(NS_LITERAL_STRING("code"), getter_AddRefs(pAttribute));
      NS_ENSURE_SUCCESS(rv,rv);
      if (pAttribute) {
        pAttribute->GetNodeValue(pNodeValue);
        NS_ENSURE_SUCCESS(rv,rv);
        pDetail += NS_LITERAL_STRING("\n(Erreur ");
        pDetail += pNodeValue;
        pDetail += NS_LITERAL_STRING(")");
      }
    } else pDetail = NS_LITERAL_STRING("Erreur sans message.");
    pFaute = pDetail;
    rv = pFault->GetFaultString(pTitle);
    NS_ENSURE_SUCCESS(rv,rv);
    nsCOMPtr<nsIPrompt> pPrompt= do_GetService(NS_DEFAULTPROMPT_CONTRACTID, &rv);
    NS_ENSURE_SUCCESS(rv,rv);
    pPrompt->Alert(ToNewUnicode(pTitle), ToNewUnicode(pFaute));
    return NS_ERROR_FAILURE;
  }

  nsISOAPParameter ** pParameters;
  PRUint32 pTotal;
  rv = aResponse->GetParameters(PR_FALSE, &pTotal, &pParameters);
  NS_ENSURE_SUCCESS(rv,rv);
  if (pTotal!=1) {
    nsCOMPtr<nsIPrompt> pPrompt= do_GetService(NS_DEFAULTPROMPT_CONTRACTID, &rv);
    NS_ENSURE_SUCCESS(rv,rv);
    pPrompt->Alert(ToNewUnicode(NS_LITERAL_CSTRING("Erreur système")), ToNewUnicode(NS_LITERAL_CSTRING("Le nombre total de paramètres reçus est incorrect.")));
    return NS_ERROR_FAILURE;
  }

  nsAutoString pText;
  nsCOMArray<nsIVariant> pArray;
  nsCOMPtr<nsIWritableVariant> pVariant;
  PRUint32 pLsize=0, pCsize=0;
  PRUint32 pLineIndex, pColIndex;
  PRUint16 pNodeType;
  nsCOMPtr<nsIDOMElement> pResult;
  nsCOMPtr<nsIDOMNodeList> pLines, pValues;
  nsCOMPtr<nsIDOMNode> pLine, pValue, pContent;
  rv = pParameters[0]->GetElement(getter_AddRefs(pResult));
  NS_ENSURE_SUCCESS(rv,rv);
  rv = pResult->GetChildNodes(getter_AddRefs(pLines));
  NS_ENSURE_SUCCESS(rv,rv);
  pLines->GetLength(&pLsize);
  for (pLineIndex=0;pLineIndex<pLsize;pLineIndex++) {
    do {
      rv = pLines->Item(pLineIndex, getter_AddRefs(pLine));
      NS_ENSURE_SUCCESS(rv,rv);
      pLine->GetNodeType(&pNodeType);
      if (pNodeType!=nsIDOMNode::ELEMENT_NODE) pLineIndex++;
    } while (pLineIndex<pLsize && pNodeType!=nsIDOMNode::ELEMENT_NODE);
    if (pLineIndex>=pLsize) break;
    rv = pLine->GetChildNodes(getter_AddRefs(pValues));
    NS_ENSURE_SUCCESS(rv,rv);
    pValues->GetLength(&pCsize);
    for (pColIndex=0;pColIndex<pCsize;pColIndex++) {
      do {
        rv = pValues->Item(pColIndex, getter_AddRefs(pValue));
        NS_ENSURE_SUCCESS(rv,rv);
        pValue->GetNodeType(&pNodeType);
        if (pNodeType!=nsIDOMNode::ELEMENT_NODE) pColIndex++;
      } while (pColIndex<pCsize && pNodeType!=nsIDOMNode::ELEMENT_NODE);
      if (pColIndex>=pCsize) break;
      rv = pValue->GetFirstChild(getter_AddRefs(pContent));
      NS_ENSURE_SUCCESS(rv,rv);
      pVariant = do_CreateInstance(NS_VARIANT_CONTRACTID, &rv);
      NS_ENSURE_SUCCESS(rv,rv);
      if (pContent) {
        rv = pContent->GetNodeValue(pText);
        NS_ENSURE_SUCCESS(rv,rv);
        pVariant->SetAsAString(pText);
        printf("%s|",ToNewCString(pText));
      } else {
        pVariant->SetAsAString(NS_LITERAL_STRING(""));
      }
      rv = pArray.AppendObject(pVariant);
    }
  }
  rv = mComponent->TreatP0054(pArray, pLsize, pCsize, mKey);
  return rv;
}


/* Generated by Pygmalion */


NS_IMPL_ISUPPORTS1(mozListenerP0055, nsISOAPResponseListener)

mozListenerP0055::mozListenerP0055(mozC02gestsea* aComponent, const nsAString & aKey)
{
  mComponent = aComponent;
  mKey = aKey;
}
mozListenerP0055::~mozListenerP0055()
{
}

NS_IMETHODIMP mozListenerP0055::HandleResponse(nsISOAPResponse *aResponse, nsISOAPCall *aCall, PRUint32 aStatus, PRBool aLast, PRBool *aReturn)
{
  nsresult rv;
  nsCOMPtr<nsISOAPFault> pFault;
  rv = aResponse->GetFault(getter_AddRefs(pFault));
  NS_ENSURE_SUCCESS(rv, rv);
  if (pFault) {
    nsAutoString pFaute, pDetail, pTitle;
    nsCOMPtr<nsIDOMElement> pTheDetail;
    nsCOMPtr<nsIDOMNode> pNode;
    rv = pFault->GetDetail(getter_AddRefs(pTheDetail));
    NS_ENSURE_SUCCESS(rv,rv);
    rv = pTheDetail->GetFirstChild(getter_AddRefs(pNode));
    NS_ENSURE_SUCCESS(rv,rv);
    if (pNode) {
      nsCOMPtr<nsIDOMNamedNodeMap> pAttributes;
      nsCOMPtr<nsIDOMNode> pAttribute, pFirstNode;
      nsAutoString pNodeValue;
      rv = pNode->GetFirstChild(getter_AddRefs(pFirstNode));
      NS_ENSURE_SUCCESS(rv,rv);
      if (pFirstNode) {
        pFirstNode->GetNodeValue(pNodeValue);
        NS_ENSURE_SUCCESS(rv,rv);
        pDetail  = pNodeValue;
      }
      pNode->GetAttributes(getter_AddRefs(pAttributes));
      NS_ENSURE_SUCCESS(rv,rv);
      pAttributes->GetNamedItem(NS_LITERAL_STRING("code"), getter_AddRefs(pAttribute));
      NS_ENSURE_SUCCESS(rv,rv);
      if (pAttribute) {
        pAttribute->GetNodeValue(pNodeValue);
        NS_ENSURE_SUCCESS(rv,rv);
        pDetail += NS_LITERAL_STRING("\n(Erreur ");
        pDetail += pNodeValue;
        pDetail += NS_LITERAL_STRING(")");
      }
    } else pDetail = NS_LITERAL_STRING("Erreur sans message.");
    pFaute = pDetail;
    rv = pFault->GetFaultString(pTitle);
    NS_ENSURE_SUCCESS(rv,rv);
    nsCOMPtr<nsIPrompt> pPrompt= do_GetService(NS_DEFAULTPROMPT_CONTRACTID, &rv);
    NS_ENSURE_SUCCESS(rv,rv);
    pPrompt->Alert(ToNewUnicode(pTitle), ToNewUnicode(pFaute));
    return NS_ERROR_FAILURE;
  }

  nsISOAPParameter ** pParameters;
  PRUint32 pTotal;
  rv = aResponse->GetParameters(PR_FALSE, &pTotal, &pParameters);
  NS_ENSURE_SUCCESS(rv,rv);
  if (pTotal!=1) {
    nsCOMPtr<nsIPrompt> pPrompt= do_GetService(NS_DEFAULTPROMPT_CONTRACTID, &rv);
    NS_ENSURE_SUCCESS(rv,rv);
    pPrompt->Alert(ToNewUnicode(NS_LITERAL_CSTRING("Erreur système")), ToNewUnicode(NS_LITERAL_CSTRING("Le nombre total de paramètres reçus est incorrect.")));
    return NS_ERROR_FAILURE;
  }

  nsAutoString pText;
  nsCOMArray<nsIVariant> pArray;
  nsCOMPtr<nsIWritableVariant> pVariant;
  PRUint32 pLsize=0, pCsize=0;
  PRUint32 pLineIndex, pColIndex;
  PRUint16 pNodeType;
  nsCOMPtr<nsIDOMElement> pResult;
  nsCOMPtr<nsIDOMNodeList> pLines, pValues;
  nsCOMPtr<nsIDOMNode> pLine, pValue, pContent;
  rv = pParameters[0]->GetElement(getter_AddRefs(pResult));
  NS_ENSURE_SUCCESS(rv,rv);
  rv = pResult->GetChildNodes(getter_AddRefs(pLines));
  NS_ENSURE_SUCCESS(rv,rv);
  pLines->GetLength(&pLsize);
  for (pLineIndex=0;pLineIndex<pLsize;pLineIndex++) {
    do {
      rv = pLines->Item(pLineIndex, getter_AddRefs(pLine));
      NS_ENSURE_SUCCESS(rv,rv);
      pLine->GetNodeType(&pNodeType);
      if (pNodeType!=nsIDOMNode::ELEMENT_NODE) pLineIndex++;
    } while (pLineIndex<pLsize && pNodeType!=nsIDOMNode::ELEMENT_NODE);
    if (pLineIndex>=pLsize) break;
    rv = pLine->GetChildNodes(getter_AddRefs(pValues));
    NS_ENSURE_SUCCESS(rv,rv);
    pValues->GetLength(&pCsize);
    for (pColIndex=0;pColIndex<pCsize;pColIndex++) {
      do {
        rv = pValues->Item(pColIndex, getter_AddRefs(pValue));
        NS_ENSURE_SUCCESS(rv,rv);
        pValue->GetNodeType(&pNodeType);
        if (pNodeType!=nsIDOMNode::ELEMENT_NODE) pColIndex++;
      } while (pColIndex<pCsize && pNodeType!=nsIDOMNode::ELEMENT_NODE);
      if (pColIndex>=pCsize) break;
      rv = pValue->GetFirstChild(getter_AddRefs(pContent));
      NS_ENSURE_SUCCESS(rv,rv);
      pVariant = do_CreateInstance(NS_VARIANT_CONTRACTID, &rv);
      NS_ENSURE_SUCCESS(rv,rv);
      if (pContent) {
        rv = pContent->GetNodeValue(pText);
        NS_ENSURE_SUCCESS(rv,rv);
        pVariant->SetAsAString(pText);
        printf("%s|",ToNewCString(pText));
      } else {
        pVariant->SetAsAString(NS_LITERAL_STRING(""));
      }
      rv = pArray.AppendObject(pVariant);
    }
  }
  rv = mComponent->TreatP0055(pArray, pLsize, pCsize, mKey);
  return rv;
}


/* Generated by Pygmalion */


NS_IMPL_ISUPPORTS1(mozListenerP0056, nsISOAPResponseListener)

mozListenerP0056::mozListenerP0056(mozC02gestsea* aComponent, const nsAString & aKey)
{
  mComponent = aComponent;
  mKey = aKey;
}
mozListenerP0056::~mozListenerP0056()
{
}

NS_IMETHODIMP mozListenerP0056::HandleResponse(nsISOAPResponse *aResponse, nsISOAPCall *aCall, PRUint32 aStatus, PRBool aLast, PRBool *aReturn)
{
  nsresult rv;
  nsCOMPtr<nsISOAPFault> pFault;
  rv = aResponse->GetFault(getter_AddRefs(pFault));
  NS_ENSURE_SUCCESS(rv, rv);
  if (pFault) {
    nsAutoString pFaute, pDetail, pTitle;
    nsCOMPtr<nsIDOMElement> pTheDetail;
    nsCOMPtr<nsIDOMNode> pNode;
    rv = pFault->GetDetail(getter_AddRefs(pTheDetail));
    NS_ENSURE_SUCCESS(rv,rv);
    rv = pTheDetail->GetFirstChild(getter_AddRefs(pNode));
    NS_ENSURE_SUCCESS(rv,rv);
    if (pNode) {
      nsCOMPtr<nsIDOMNamedNodeMap> pAttributes;
      nsCOMPtr<nsIDOMNode> pAttribute, pFirstNode;
      nsAutoString pNodeValue;
      rv = pNode->GetFirstChild(getter_AddRefs(pFirstNode));
      NS_ENSURE_SUCCESS(rv,rv);
      if (pFirstNode) {
        pFirstNode->GetNodeValue(pNodeValue);
        NS_ENSURE_SUCCESS(rv,rv);
        pDetail  = pNodeValue;
      }
      pNode->GetAttributes(getter_AddRefs(pAttributes));
      NS_ENSURE_SUCCESS(rv,rv);
      pAttributes->GetNamedItem(NS_LITERAL_STRING("code"), getter_AddRefs(pAttribute));
      NS_ENSURE_SUCCESS(rv,rv);
      if (pAttribute) {
        pAttribute->GetNodeValue(pNodeValue);
        NS_ENSURE_SUCCESS(rv,rv);
        pDetail += NS_LITERAL_STRING("\n(Erreur ");
        pDetail += pNodeValue;
        pDetail += NS_LITERAL_STRING(")");
      }
    } else pDetail = NS_LITERAL_STRING("Erreur sans message.");
    pFaute = pDetail;
    rv = pFault->GetFaultString(pTitle);
    NS_ENSURE_SUCCESS(rv,rv);
    nsCOMPtr<nsIPrompt> pPrompt= do_GetService(NS_DEFAULTPROMPT_CONTRACTID, &rv);
    NS_ENSURE_SUCCESS(rv,rv);
    pPrompt->Alert(ToNewUnicode(pTitle), ToNewUnicode(pFaute));
    return NS_ERROR_FAILURE;
  }

  nsISOAPParameter ** pParameters;
  PRUint32 pTotal;
  rv = aResponse->GetParameters(PR_FALSE, &pTotal, &pParameters);
  NS_ENSURE_SUCCESS(rv,rv);
  if (pTotal!=1) {
    nsCOMPtr<nsIPrompt> pPrompt= do_GetService(NS_DEFAULTPROMPT_CONTRACTID, &rv);
    NS_ENSURE_SUCCESS(rv,rv);
    pPrompt->Alert(ToNewUnicode(NS_LITERAL_CSTRING("Erreur système")), ToNewUnicode(NS_LITERAL_CSTRING("Le nombre total de paramètres reçus est incorrect.")));
    return NS_ERROR_FAILURE;
  }

  nsAutoString pText;
  nsCOMArray<nsIVariant> pArray;
  nsCOMPtr<nsIWritableVariant> pVariant;
  PRUint32 pLsize=0, pCsize=0;
  PRUint32 pLineIndex, pColIndex;
  PRUint16 pNodeType;
  nsCOMPtr<nsIDOMElement> pResult;
  nsCOMPtr<nsIDOMNodeList> pLines, pValues;
  nsCOMPtr<nsIDOMNode> pLine, pValue, pContent;
  rv = pParameters[0]->GetElement(getter_AddRefs(pResult));
  NS_ENSURE_SUCCESS(rv,rv);
  rv = pResult->GetChildNodes(getter_AddRefs(pLines));
  NS_ENSURE_SUCCESS(rv,rv);
  pLines->GetLength(&pLsize);
  for (pLineIndex=0;pLineIndex<pLsize;pLineIndex++) {
    do {
      rv = pLines->Item(pLineIndex, getter_AddRefs(pLine));
      NS_ENSURE_SUCCESS(rv,rv);
      pLine->GetNodeType(&pNodeType);
      if (pNodeType!=nsIDOMNode::ELEMENT_NODE) pLineIndex++;
    } while (pLineIndex<pLsize && pNodeType!=nsIDOMNode::ELEMENT_NODE);
    if (pLineIndex>=pLsize) break;
    rv = pLine->GetChildNodes(getter_AddRefs(pValues));
    NS_ENSURE_SUCCESS(rv,rv);
    pValues->GetLength(&pCsize);
    for (pColIndex=0;pColIndex<pCsize;pColIndex++) {
      do {
        rv = pValues->Item(pColIndex, getter_AddRefs(pValue));
        NS_ENSURE_SUCCESS(rv,rv);
        pValue->GetNodeType(&pNodeType);
        if (pNodeType!=nsIDOMNode::ELEMENT_NODE) pColIndex++;
      } while (pColIndex<pCsize && pNodeType!=nsIDOMNode::ELEMENT_NODE);
      if (pColIndex>=pCsize) break;
      rv = pValue->GetFirstChild(getter_AddRefs(pContent));
      NS_ENSURE_SUCCESS(rv,rv);
      pVariant = do_CreateInstance(NS_VARIANT_CONTRACTID, &rv);
      NS_ENSURE_SUCCESS(rv,rv);
      if (pContent) {
        rv = pContent->GetNodeValue(pText);
        NS_ENSURE_SUCCESS(rv,rv);
        pVariant->SetAsAString(pText);
        printf("%s|",ToNewCString(pText));
      } else {
        pVariant->SetAsAString(NS_LITERAL_STRING(""));
      }
      rv = pArray.AppendObject(pVariant);
    }
  }
  rv = mComponent->TreatP0056(pArray, pLsize, pCsize, mKey);
  return rv;
}


/* Generated by Pygmalion */


NS_IMPL_ISUPPORTS1(mozListenerP0057, nsISOAPResponseListener)

mozListenerP0057::mozListenerP0057(mozC02gestsea* aComponent, const nsAString & aKey)
{
  mComponent = aComponent;
  mKey = aKey;
}
mozListenerP0057::~mozListenerP0057()
{
}

NS_IMETHODIMP mozListenerP0057::HandleResponse(nsISOAPResponse *aResponse, nsISOAPCall *aCall, PRUint32 aStatus, PRBool aLast, PRBool *aReturn)
{
  nsresult rv;
  nsCOMPtr<nsISOAPFault> pFault;
  rv = aResponse->GetFault(getter_AddRefs(pFault));
  NS_ENSURE_SUCCESS(rv, rv);
  if (pFault) {
    nsAutoString pFaute, pDetail, pTitle;
    nsCOMPtr<nsIDOMElement> pTheDetail;
    nsCOMPtr<nsIDOMNode> pNode;
    rv = pFault->GetDetail(getter_AddRefs(pTheDetail));
    NS_ENSURE_SUCCESS(rv,rv);
    rv = pTheDetail->GetFirstChild(getter_AddRefs(pNode));
    NS_ENSURE_SUCCESS(rv,rv);
    if (pNode) {
      nsCOMPtr<nsIDOMNamedNodeMap> pAttributes;
      nsCOMPtr<nsIDOMNode> pAttribute, pFirstNode;
      nsAutoString pNodeValue;
      rv = pNode->GetFirstChild(getter_AddRefs(pFirstNode));
      NS_ENSURE_SUCCESS(rv,rv);
      if (pFirstNode) {
        pFirstNode->GetNodeValue(pNodeValue);
        NS_ENSURE_SUCCESS(rv,rv);
        pDetail  = pNodeValue;
      }
      pNode->GetAttributes(getter_AddRefs(pAttributes));
      NS_ENSURE_SUCCESS(rv,rv);
      pAttributes->GetNamedItem(NS_LITERAL_STRING("code"), getter_AddRefs(pAttribute));
      NS_ENSURE_SUCCESS(rv,rv);
      if (pAttribute) {
        pAttribute->GetNodeValue(pNodeValue);
        NS_ENSURE_SUCCESS(rv,rv);
        pDetail += NS_LITERAL_STRING("\n(Erreur ");
        pDetail += pNodeValue;
        pDetail += NS_LITERAL_STRING(")");
      }
    } else pDetail = NS_LITERAL_STRING("Erreur sans message.");
    pFaute = pDetail;
    rv = pFault->GetFaultString(pTitle);
    NS_ENSURE_SUCCESS(rv,rv);
    nsCOMPtr<nsIPrompt> pPrompt= do_GetService(NS_DEFAULTPROMPT_CONTRACTID, &rv);
    NS_ENSURE_SUCCESS(rv,rv);
    pPrompt->Alert(ToNewUnicode(pTitle), ToNewUnicode(pFaute));
    return NS_ERROR_FAILURE;
  }

  nsISOAPParameter ** pParameters;
  PRUint32 pTotal;
  rv = aResponse->GetParameters(PR_FALSE, &pTotal, &pParameters);
  NS_ENSURE_SUCCESS(rv,rv);
  if (pTotal!=1) {
    nsCOMPtr<nsIPrompt> pPrompt= do_GetService(NS_DEFAULTPROMPT_CONTRACTID, &rv);
    NS_ENSURE_SUCCESS(rv,rv);
    pPrompt->Alert(ToNewUnicode(NS_LITERAL_CSTRING("Erreur système")), ToNewUnicode(NS_LITERAL_CSTRING("Le nombre total de paramètres reçus est incorrect.")));
    return NS_ERROR_FAILURE;
  }

  nsAutoString pText;
  nsCOMArray<nsIVariant> pArray;
  nsCOMPtr<nsIWritableVariant> pVariant;
  PRUint32 pLsize=0, pCsize=0;
  PRUint32 pLineIndex, pColIndex;
  PRUint16 pNodeType;
  nsCOMPtr<nsIDOMElement> pResult;
  nsCOMPtr<nsIDOMNodeList> pLines, pValues;
  nsCOMPtr<nsIDOMNode> pLine, pValue, pContent;
  rv = pParameters[0]->GetElement(getter_AddRefs(pResult));
  NS_ENSURE_SUCCESS(rv,rv);
  rv = pResult->GetChildNodes(getter_AddRefs(pLines));
  NS_ENSURE_SUCCESS(rv,rv);
  pLines->GetLength(&pLsize);
  for (pLineIndex=0;pLineIndex<pLsize;pLineIndex++) {
    do {
      rv = pLines->Item(pLineIndex, getter_AddRefs(pLine));
      NS_ENSURE_SUCCESS(rv,rv);
      pLine->GetNodeType(&pNodeType);
      if (pNodeType!=nsIDOMNode::ELEMENT_NODE) pLineIndex++;
    } while (pLineIndex<pLsize && pNodeType!=nsIDOMNode::ELEMENT_NODE);
    if (pLineIndex>=pLsize) break;
    rv = pLine->GetChildNodes(getter_AddRefs(pValues));
    NS_ENSURE_SUCCESS(rv,rv);
    pValues->GetLength(&pCsize);
    for (pColIndex=0;pColIndex<pCsize;pColIndex++) {
      do {
        rv = pValues->Item(pColIndex, getter_AddRefs(pValue));
        NS_ENSURE_SUCCESS(rv,rv);
        pValue->GetNodeType(&pNodeType);
        if (pNodeType!=nsIDOMNode::ELEMENT_NODE) pColIndex++;
      } while (pColIndex<pCsize && pNodeType!=nsIDOMNode::ELEMENT_NODE);
      if (pColIndex>=pCsize) break;
      rv = pValue->GetFirstChild(getter_AddRefs(pContent));
      NS_ENSURE_SUCCESS(rv,rv);
      pVariant = do_CreateInstance(NS_VARIANT_CONTRACTID, &rv);
      NS_ENSURE_SUCCESS(rv,rv);
      if (pContent) {
        rv = pContent->GetNodeValue(pText);
        NS_ENSURE_SUCCESS(rv,rv);
        pVariant->SetAsAString(pText);
        printf("%s|",ToNewCString(pText));
      } else {
        pVariant->SetAsAString(NS_LITERAL_STRING(""));
      }
      rv = pArray.AppendObject(pVariant);
    }
  }
  rv = mComponent->TreatP0057(pArray, pLsize, pCsize, mKey);
  return rv;
}


/* Generated by Pygmalion */


NS_IMPL_ISUPPORTS1(mozListenerP0058, nsISOAPResponseListener)

mozListenerP0058::mozListenerP0058(mozC02gestsea* aComponent, const nsAString & aKey)
{
  mComponent = aComponent;
  mKey = aKey;
}
mozListenerP0058::~mozListenerP0058()
{
}

NS_IMETHODIMP mozListenerP0058::HandleResponse(nsISOAPResponse *aResponse, nsISOAPCall *aCall, PRUint32 aStatus, PRBool aLast, PRBool *aReturn)
{
  nsresult rv;
  nsCOMPtr<nsISOAPFault> pFault;
  rv = aResponse->GetFault(getter_AddRefs(pFault));
  NS_ENSURE_SUCCESS(rv, rv);
  if (pFault) {
    nsAutoString pFaute, pDetail, pTitle;
    nsCOMPtr<nsIDOMElement> pTheDetail;
    nsCOMPtr<nsIDOMNode> pNode;
    rv = pFault->GetDetail(getter_AddRefs(pTheDetail));
    NS_ENSURE_SUCCESS(rv,rv);
    rv = pTheDetail->GetFirstChild(getter_AddRefs(pNode));
    NS_ENSURE_SUCCESS(rv,rv);
    if (pNode) {
      nsCOMPtr<nsIDOMNamedNodeMap> pAttributes;
      nsCOMPtr<nsIDOMNode> pAttribute, pFirstNode;
      nsAutoString pNodeValue;
      rv = pNode->GetFirstChild(getter_AddRefs(pFirstNode));
      NS_ENSURE_SUCCESS(rv,rv);
      if (pFirstNode) {
        pFirstNode->GetNodeValue(pNodeValue);
        NS_ENSURE_SUCCESS(rv,rv);
        pDetail  = pNodeValue;
      }
      pNode->GetAttributes(getter_AddRefs(pAttributes));
      NS_ENSURE_SUCCESS(rv,rv);
      pAttributes->GetNamedItem(NS_LITERAL_STRING("code"), getter_AddRefs(pAttribute));
      NS_ENSURE_SUCCESS(rv,rv);
      if (pAttribute) {
        pAttribute->GetNodeValue(pNodeValue);
        NS_ENSURE_SUCCESS(rv,rv);
        pDetail += NS_LITERAL_STRING("\n(Erreur ");
        pDetail += pNodeValue;
        pDetail += NS_LITERAL_STRING(")");
      }
    } else pDetail = NS_LITERAL_STRING("Erreur sans message.");
    pFaute = pDetail;
    rv = pFault->GetFaultString(pTitle);
    NS_ENSURE_SUCCESS(rv,rv);
    nsCOMPtr<nsIPrompt> pPrompt= do_GetService(NS_DEFAULTPROMPT_CONTRACTID, &rv);
    NS_ENSURE_SUCCESS(rv,rv);
    pPrompt->Alert(ToNewUnicode(pTitle), ToNewUnicode(pFaute));
    return NS_ERROR_FAILURE;
  }

  nsISOAPParameter ** pParameters;
  PRUint32 pTotal;
  rv = aResponse->GetParameters(PR_FALSE, &pTotal, &pParameters);
  NS_ENSURE_SUCCESS(rv,rv);
  if (pTotal!=1) {
    nsCOMPtr<nsIPrompt> pPrompt= do_GetService(NS_DEFAULTPROMPT_CONTRACTID, &rv);
    NS_ENSURE_SUCCESS(rv,rv);
    pPrompt->Alert(ToNewUnicode(NS_LITERAL_CSTRING("Erreur système")), ToNewUnicode(NS_LITERAL_CSTRING("Le nombre total de paramètres reçus est incorrect.")));
    return NS_ERROR_FAILURE;
  }

  nsAutoString pText;
  nsCOMArray<nsIVariant> pArray;
  nsCOMPtr<nsIWritableVariant> pVariant;
  PRUint32 pLsize=0, pCsize=0;
  PRUint32 pLineIndex, pColIndex;
  PRUint16 pNodeType;
  nsCOMPtr<nsIDOMElement> pResult;
  nsCOMPtr<nsIDOMNodeList> pLines, pValues;
  nsCOMPtr<nsIDOMNode> pLine, pValue, pContent;
  rv = pParameters[0]->GetElement(getter_AddRefs(pResult));
  NS_ENSURE_SUCCESS(rv,rv);
  rv = pResult->GetChildNodes(getter_AddRefs(pLines));
  NS_ENSURE_SUCCESS(rv,rv);
  pLines->GetLength(&pLsize);
  for (pLineIndex=0;pLineIndex<pLsize;pLineIndex++) {
    do {
      rv = pLines->Item(pLineIndex, getter_AddRefs(pLine));
      NS_ENSURE_SUCCESS(rv,rv);
      pLine->GetNodeType(&pNodeType);
      if (pNodeType!=nsIDOMNode::ELEMENT_NODE) pLineIndex++;
    } while (pLineIndex<pLsize && pNodeType!=nsIDOMNode::ELEMENT_NODE);
    if (pLineIndex>=pLsize) break;
    rv = pLine->GetChildNodes(getter_AddRefs(pValues));
    NS_ENSURE_SUCCESS(rv,rv);
    pValues->GetLength(&pCsize);
    for (pColIndex=0;pColIndex<pCsize;pColIndex++) {
      do {
        rv = pValues->Item(pColIndex, getter_AddRefs(pValue));
        NS_ENSURE_SUCCESS(rv,rv);
        pValue->GetNodeType(&pNodeType);
        if (pNodeType!=nsIDOMNode::ELEMENT_NODE) pColIndex++;
      } while (pColIndex<pCsize && pNodeType!=nsIDOMNode::ELEMENT_NODE);
      if (pColIndex>=pCsize) break;
      rv = pValue->GetFirstChild(getter_AddRefs(pContent));
      NS_ENSURE_SUCCESS(rv,rv);
      pVariant = do_CreateInstance(NS_VARIANT_CONTRACTID, &rv);
      NS_ENSURE_SUCCESS(rv,rv);
      if (pContent) {
        rv = pContent->GetNodeValue(pText);
        NS_ENSURE_SUCCESS(rv,rv);
        pVariant->SetAsAString(pText);
        printf("%s|",ToNewCString(pText));
      } else {
        pVariant->SetAsAString(NS_LITERAL_STRING(""));
      }
      rv = pArray.AppendObject(pVariant);
    }
  }
  rv = mComponent->TreatP0058(pArray, pLsize, pCsize, mKey);
  return rv;
}


/* Generated by Pygmalion */


NS_IMPL_ISUPPORTS1(mozListenerP0059, nsISOAPResponseListener)

mozListenerP0059::mozListenerP0059(mozC02gestsea* aComponent, const nsAString & aKey)
{
  mComponent = aComponent;
  mKey = aKey;
}
mozListenerP0059::~mozListenerP0059()
{
}

NS_IMETHODIMP mozListenerP0059::HandleResponse(nsISOAPResponse *aResponse, nsISOAPCall *aCall, PRUint32 aStatus, PRBool aLast, PRBool *aReturn)
{
  nsresult rv;
  nsCOMPtr<nsISOAPFault> pFault;
  rv = aResponse->GetFault(getter_AddRefs(pFault));
  NS_ENSURE_SUCCESS(rv, rv);
  if (pFault) {
    nsAutoString pFaute, pDetail, pTitle;
    nsCOMPtr<nsIDOMElement> pTheDetail;
    nsCOMPtr<nsIDOMNode> pNode;
    rv = pFault->GetDetail(getter_AddRefs(pTheDetail));
    NS_ENSURE_SUCCESS(rv,rv);
    rv = pTheDetail->GetFirstChild(getter_AddRefs(pNode));
    NS_ENSURE_SUCCESS(rv,rv);
    if (pNode) {
      nsCOMPtr<nsIDOMNamedNodeMap> pAttributes;
      nsCOMPtr<nsIDOMNode> pAttribute, pFirstNode;
      nsAutoString pNodeValue;
      rv = pNode->GetFirstChild(getter_AddRefs(pFirstNode));
      NS_ENSURE_SUCCESS(rv,rv);
      if (pFirstNode) {
        pFirstNode->GetNodeValue(pNodeValue);
        NS_ENSURE_SUCCESS(rv,rv);
        pDetail  = pNodeValue;
      }
      pNode->GetAttributes(getter_AddRefs(pAttributes));
      NS_ENSURE_SUCCESS(rv,rv);
      pAttributes->GetNamedItem(NS_LITERAL_STRING("code"), getter_AddRefs(pAttribute));
      NS_ENSURE_SUCCESS(rv,rv);
      if (pAttribute) {
        pAttribute->GetNodeValue(pNodeValue);
        NS_ENSURE_SUCCESS(rv,rv);
        pDetail += NS_LITERAL_STRING("\n(Erreur ");
        pDetail += pNodeValue;
        pDetail += NS_LITERAL_STRING(")");
      }
    } else pDetail = NS_LITERAL_STRING("Erreur sans message.");
    pFaute = pDetail;
    rv = pFault->GetFaultString(pTitle);
    NS_ENSURE_SUCCESS(rv,rv);
    nsCOMPtr<nsIPrompt> pPrompt= do_GetService(NS_DEFAULTPROMPT_CONTRACTID, &rv);
    NS_ENSURE_SUCCESS(rv,rv);
    pPrompt->Alert(ToNewUnicode(pTitle), ToNewUnicode(pFaute));
    return NS_ERROR_FAILURE;
  }

  nsISOAPParameter ** pParameters;
  PRUint32 pTotal;
  rv = aResponse->GetParameters(PR_FALSE, &pTotal, &pParameters);
  NS_ENSURE_SUCCESS(rv,rv);
  if (pTotal!=1) {
    nsCOMPtr<nsIPrompt> pPrompt= do_GetService(NS_DEFAULTPROMPT_CONTRACTID, &rv);
    NS_ENSURE_SUCCESS(rv,rv);
    pPrompt->Alert(ToNewUnicode(NS_LITERAL_CSTRING("Erreur système")), ToNewUnicode(NS_LITERAL_CSTRING("Le nombre total de paramètres reçus est incorrect.")));
    return NS_ERROR_FAILURE;
  }

  nsAutoString pText;
  nsCOMArray<nsIVariant> pArray;
  nsCOMPtr<nsIWritableVariant> pVariant;
  PRUint32 pLsize=0, pCsize=0;
  PRUint32 pLineIndex, pColIndex;
  PRUint16 pNodeType;
  nsCOMPtr<nsIDOMElement> pResult;
  nsCOMPtr<nsIDOMNodeList> pLines, pValues;
  nsCOMPtr<nsIDOMNode> pLine, pValue, pContent;
  rv = pParameters[0]->GetElement(getter_AddRefs(pResult));
  NS_ENSURE_SUCCESS(rv,rv);
  rv = pResult->GetChildNodes(getter_AddRefs(pLines));
  NS_ENSURE_SUCCESS(rv,rv);
  pLines->GetLength(&pLsize);
  for (pLineIndex=0;pLineIndex<pLsize;pLineIndex++) {
    do {
      rv = pLines->Item(pLineIndex, getter_AddRefs(pLine));
      NS_ENSURE_SUCCESS(rv,rv);
      pLine->GetNodeType(&pNodeType);
      if (pNodeType!=nsIDOMNode::ELEMENT_NODE) pLineIndex++;
    } while (pLineIndex<pLsize && pNodeType!=nsIDOMNode::ELEMENT_NODE);
    if (pLineIndex>=pLsize) break;
    rv = pLine->GetChildNodes(getter_AddRefs(pValues));
    NS_ENSURE_SUCCESS(rv,rv);
    pValues->GetLength(&pCsize);
    for (pColIndex=0;pColIndex<pCsize;pColIndex++) {
      do {
        rv = pValues->Item(pColIndex, getter_AddRefs(pValue));
        NS_ENSURE_SUCCESS(rv,rv);
        pValue->GetNodeType(&pNodeType);
        if (pNodeType!=nsIDOMNode::ELEMENT_NODE) pColIndex++;
      } while (pColIndex<pCsize && pNodeType!=nsIDOMNode::ELEMENT_NODE);
      if (pColIndex>=pCsize) break;
      rv = pValue->GetFirstChild(getter_AddRefs(pContent));
      NS_ENSURE_SUCCESS(rv,rv);
      pVariant = do_CreateInstance(NS_VARIANT_CONTRACTID, &rv);
      NS_ENSURE_SUCCESS(rv,rv);
      if (pContent) {
        rv = pContent->GetNodeValue(pText);
        NS_ENSURE_SUCCESS(rv,rv);
        pVariant->SetAsAString(pText);
        printf("%s|",ToNewCString(pText));
      } else {
        pVariant->SetAsAString(NS_LITERAL_STRING(""));
      }
      rv = pArray.AppendObject(pVariant);
    }
  }
  rv = mComponent->TreatP0059(pArray, pLsize, pCsize, mKey);
  return rv;
}


/* Generated by Pygmalion */


NS_IMPL_ISUPPORTS1(mozListenerP005A, nsISOAPResponseListener)

mozListenerP005A::mozListenerP005A(mozC02gestsea* aComponent, const nsAString & aKey)
{
  mComponent = aComponent;
  mKey = aKey;
}
mozListenerP005A::~mozListenerP005A()
{
}

NS_IMETHODIMP mozListenerP005A::HandleResponse(nsISOAPResponse *aResponse, nsISOAPCall *aCall, PRUint32 aStatus, PRBool aLast, PRBool *aReturn)
{
  nsresult rv;
  nsCOMPtr<nsISOAPFault> pFault;
  rv = aResponse->GetFault(getter_AddRefs(pFault));
  NS_ENSURE_SUCCESS(rv, rv);
  if (pFault) {
    nsAutoString pFaute, pDetail, pTitle;
    nsCOMPtr<nsIDOMElement> pTheDetail;
    nsCOMPtr<nsIDOMNode> pNode;
    rv = pFault->GetDetail(getter_AddRefs(pTheDetail));
    NS_ENSURE_SUCCESS(rv,rv);
    rv = pTheDetail->GetFirstChild(getter_AddRefs(pNode));
    NS_ENSURE_SUCCESS(rv,rv);
    if (pNode) {
      nsCOMPtr<nsIDOMNamedNodeMap> pAttributes;
      nsCOMPtr<nsIDOMNode> pAttribute, pFirstNode;
      nsAutoString pNodeValue;
      rv = pNode->GetFirstChild(getter_AddRefs(pFirstNode));
      NS_ENSURE_SUCCESS(rv,rv);
      if (pFirstNode) {
        pFirstNode->GetNodeValue(pNodeValue);
        NS_ENSURE_SUCCESS(rv,rv);
        pDetail  = pNodeValue;
      }
      pNode->GetAttributes(getter_AddRefs(pAttributes));
      NS_ENSURE_SUCCESS(rv,rv);
      pAttributes->GetNamedItem(NS_LITERAL_STRING("code"), getter_AddRefs(pAttribute));
      NS_ENSURE_SUCCESS(rv,rv);
      if (pAttribute) {
        pAttribute->GetNodeValue(pNodeValue);
        NS_ENSURE_SUCCESS(rv,rv);
        pDetail += NS_LITERAL_STRING("\n(Erreur ");
        pDetail += pNodeValue;
        pDetail += NS_LITERAL_STRING(")");
      }
    } else pDetail = NS_LITERAL_STRING("Erreur sans message.");
    pFaute = pDetail;
    rv = pFault->GetFaultString(pTitle);
    NS_ENSURE_SUCCESS(rv,rv);
    nsCOMPtr<nsIPrompt> pPrompt= do_GetService(NS_DEFAULTPROMPT_CONTRACTID, &rv);
    NS_ENSURE_SUCCESS(rv,rv);
    pPrompt->Alert(ToNewUnicode(pTitle), ToNewUnicode(pFaute));
    return NS_ERROR_FAILURE;
  }

  nsISOAPParameter ** pParameters;
  PRUint32 pTotal;
  rv = aResponse->GetParameters(PR_FALSE, &pTotal, &pParameters);
  NS_ENSURE_SUCCESS(rv,rv);
  if (pTotal!=1) {
    nsCOMPtr<nsIPrompt> pPrompt= do_GetService(NS_DEFAULTPROMPT_CONTRACTID, &rv);
    NS_ENSURE_SUCCESS(rv,rv);
    pPrompt->Alert(ToNewUnicode(NS_LITERAL_CSTRING("Erreur système")), ToNewUnicode(NS_LITERAL_CSTRING("Le nombre total de paramètres reçus est incorrect.")));
    return NS_ERROR_FAILURE;
  }

  nsAutoString pText;
  nsCOMArray<nsIVariant> pArray;
  nsCOMPtr<nsIWritableVariant> pVariant;
  PRUint32 pLsize=0, pCsize=0;
  PRUint32 pLineIndex, pColIndex;
  PRUint16 pNodeType;
  nsCOMPtr<nsIDOMElement> pResult;
  nsCOMPtr<nsIDOMNodeList> pLines, pValues;
  nsCOMPtr<nsIDOMNode> pLine, pValue, pContent;
  rv = pParameters[0]->GetElement(getter_AddRefs(pResult));
  NS_ENSURE_SUCCESS(rv,rv);
  rv = pResult->GetChildNodes(getter_AddRefs(pLines));
  NS_ENSURE_SUCCESS(rv,rv);
  pLines->GetLength(&pLsize);
  for (pLineIndex=0;pLineIndex<pLsize;pLineIndex++) {
    do {
      rv = pLines->Item(pLineIndex, getter_AddRefs(pLine));
      NS_ENSURE_SUCCESS(rv,rv);
      pLine->GetNodeType(&pNodeType);
      if (pNodeType!=nsIDOMNode::ELEMENT_NODE) pLineIndex++;
    } while (pLineIndex<pLsize && pNodeType!=nsIDOMNode::ELEMENT_NODE);
    if (pLineIndex>=pLsize) break;
    rv = pLine->GetChildNodes(getter_AddRefs(pValues));
    NS_ENSURE_SUCCESS(rv,rv);
    pValues->GetLength(&pCsize);
    for (pColIndex=0;pColIndex<pCsize;pColIndex++) {
      do {
        rv = pValues->Item(pColIndex, getter_AddRefs(pValue));
        NS_ENSURE_SUCCESS(rv,rv);
        pValue->GetNodeType(&pNodeType);
        if (pNodeType!=nsIDOMNode::ELEMENT_NODE) pColIndex++;
      } while (pColIndex<pCsize && pNodeType!=nsIDOMNode::ELEMENT_NODE);
      if (pColIndex>=pCsize) break;
      rv = pValue->GetFirstChild(getter_AddRefs(pContent));
      NS_ENSURE_SUCCESS(rv,rv);
      pVariant = do_CreateInstance(NS_VARIANT_CONTRACTID, &rv);
      NS_ENSURE_SUCCESS(rv,rv);
      if (pContent) {
        rv = pContent->GetNodeValue(pText);
        NS_ENSURE_SUCCESS(rv,rv);
        pVariant->SetAsAString(pText);
        printf("%s|",ToNewCString(pText));
      } else {
        pVariant->SetAsAString(NS_LITERAL_STRING(""));
      }
      rv = pArray.AppendObject(pVariant);
    }
  }
  rv = mComponent->TreatP005A(pArray, pLsize, pCsize, mKey);
  return rv;
}


/* Generated by Pygmalion */


NS_IMPL_ISUPPORTS1(mozListenerP005B, nsISOAPResponseListener)

mozListenerP005B::mozListenerP005B(mozC02gestsea* aComponent, const nsACString & aSearch)
{
  mComponent = aComponent;
  mSearch = aSearch;
}
mozListenerP005B::~mozListenerP005B()
{
}

NS_IMETHODIMP mozListenerP005B::HandleResponse(nsISOAPResponse *aResponse, nsISOAPCall *aCall, PRUint32 aStatus, PRBool aLast, PRBool *aReturn)
{
  nsresult rv;
  nsCOMPtr<nsISOAPFault> pFault;
  rv = aResponse->GetFault(getter_AddRefs(pFault));
  NS_ENSURE_SUCCESS(rv, rv);
  if (pFault) {
    nsAutoString pFaute, pDetail, pTitle;
    nsCOMPtr<nsIDOMElement> pTheDetail;
    nsCOMPtr<nsIDOMNode> pNode;
    rv = pFault->GetDetail(getter_AddRefs(pTheDetail));
    NS_ENSURE_SUCCESS(rv,rv);
    rv = pTheDetail->GetFirstChild(getter_AddRefs(pNode));
    NS_ENSURE_SUCCESS(rv,rv);
    if (pNode) {
      nsCOMPtr<nsIDOMNamedNodeMap> pAttributes;
      nsCOMPtr<nsIDOMNode> pAttribute, pFirstNode;
      nsAutoString pNodeValue;
      rv = pNode->GetFirstChild(getter_AddRefs(pFirstNode));
      NS_ENSURE_SUCCESS(rv,rv);
      if (pFirstNode) {
        pFirstNode->GetNodeValue(pNodeValue);
        NS_ENSURE_SUCCESS(rv,rv);
        pDetail  = pNodeValue;
      }
      pNode->GetAttributes(getter_AddRefs(pAttributes));
      NS_ENSURE_SUCCESS(rv,rv);
      pAttributes->GetNamedItem(NS_LITERAL_STRING("code"), getter_AddRefs(pAttribute));
      NS_ENSURE_SUCCESS(rv,rv);
      if (pAttribute) {
        pAttribute->GetNodeValue(pNodeValue);
        NS_ENSURE_SUCCESS(rv,rv);
        pDetail += NS_LITERAL_STRING("\n(Erreur ");
        pDetail += pNodeValue;
        pDetail += NS_LITERAL_STRING(")");
      }
    } else pDetail = NS_LITERAL_STRING("Erreur sans message.");
    pFaute = pDetail;
    rv = pFault->GetFaultString(pTitle);
    NS_ENSURE_SUCCESS(rv,rv);
    nsCOMPtr<nsIPrompt> pPrompt= do_GetService(NS_DEFAULTPROMPT_CONTRACTID, &rv);
    NS_ENSURE_SUCCESS(rv,rv);
    pPrompt->Alert(ToNewUnicode(pTitle), ToNewUnicode(pFaute));
    return NS_ERROR_FAILURE;
  }

  nsISOAPParameter ** pParameters;
  PRUint32 pTotal;
  rv = aResponse->GetParameters(PR_FALSE, &pTotal, &pParameters);
  NS_ENSURE_SUCCESS(rv,rv);
  if (pTotal!=1) {
    nsCOMPtr<nsIPrompt> pPrompt= do_GetService(NS_DEFAULTPROMPT_CONTRACTID, &rv);
    NS_ENSURE_SUCCESS(rv,rv);
    pPrompt->Alert(ToNewUnicode(NS_LITERAL_CSTRING("Erreur système")), ToNewUnicode(NS_LITERAL_CSTRING("Le nombre total de paramètres reçus est incorrect.")));
    return NS_ERROR_FAILURE;
  }

  nsAutoString pText;
  nsCOMArray<nsIVariant> pArray;
  nsCOMPtr<nsIWritableVariant> pVariant;
  PRUint32 pLsize=0, pCsize=0;
  PRUint32 pLineIndex, pColIndex;
  PRUint16 pNodeType;
  nsCOMPtr<nsIDOMElement> pResult;
  nsCOMPtr<nsIDOMNodeList> pLines, pValues;
  nsCOMPtr<nsIDOMNode> pLine, pValue, pContent;
  rv = pParameters[0]->GetElement(getter_AddRefs(pResult));
  NS_ENSURE_SUCCESS(rv,rv);
  rv = pResult->GetChildNodes(getter_AddRefs(pLines));
  NS_ENSURE_SUCCESS(rv,rv);
  pLines->GetLength(&pLsize);
  for (pLineIndex=0;pLineIndex<pLsize;pLineIndex++) {
    do {
      rv = pLines->Item(pLineIndex, getter_AddRefs(pLine));
      NS_ENSURE_SUCCESS(rv,rv);
      pLine->GetNodeType(&pNodeType);
      if (pNodeType!=nsIDOMNode::ELEMENT_NODE) pLineIndex++;
    } while (pLineIndex<pLsize && pNodeType!=nsIDOMNode::ELEMENT_NODE);
    if (pLineIndex>=pLsize) break;
    rv = pLine->GetChildNodes(getter_AddRefs(pValues));
    NS_ENSURE_SUCCESS(rv,rv);
    pValues->GetLength(&pCsize);
    for (pColIndex=0;pColIndex<pCsize;pColIndex++) {
      do {
        rv = pValues->Item(pColIndex, getter_AddRefs(pValue));
        NS_ENSURE_SUCCESS(rv,rv);
        pValue->GetNodeType(&pNodeType);
        if (pNodeType!=nsIDOMNode::ELEMENT_NODE) pColIndex++;
      } while (pColIndex<pCsize && pNodeType!=nsIDOMNode::ELEMENT_NODE);
      if (pColIndex>=pCsize) break;
      rv = pValue->GetFirstChild(getter_AddRefs(pContent));
      NS_ENSURE_SUCCESS(rv,rv);
      pVariant = do_CreateInstance(NS_VARIANT_CONTRACTID, &rv);
      NS_ENSURE_SUCCESS(rv,rv);
      if (pContent) {
        rv = pContent->GetNodeValue(pText);
        NS_ENSURE_SUCCESS(rv,rv);
        pVariant->SetAsAString(pText);
        printf("%s|",ToNewCString(pText));
      } else {
        pVariant->SetAsAString(NS_LITERAL_STRING(""));
      }
      rv = pArray.AppendObject(pVariant);
    }
  }
  rv = mComponent->TreatP005B(pArray, pLsize, pCsize, mSearch);
  return rv;
}


/* Generated by Pygmalion */


NS_IMPL_ISUPPORTS1(mozListenerP005C, nsISOAPResponseListener)

mozListenerP005C::mozListenerP005C(mozC02gestsea* aComponent, const nsACString & aSearch)
{
  mComponent = aComponent;
  mSearch = aSearch;
}
mozListenerP005C::~mozListenerP005C()
{
}

NS_IMETHODIMP mozListenerP005C::HandleResponse(nsISOAPResponse *aResponse, nsISOAPCall *aCall, PRUint32 aStatus, PRBool aLast, PRBool *aReturn)
{
  nsresult rv;
  nsCOMPtr<nsISOAPFault> pFault;
  rv = aResponse->GetFault(getter_AddRefs(pFault));
  NS_ENSURE_SUCCESS(rv, rv);
  if (pFault) {
    nsAutoString pFaute, pDetail, pTitle;
    nsCOMPtr<nsIDOMElement> pTheDetail;
    nsCOMPtr<nsIDOMNode> pNode;
    rv = pFault->GetDetail(getter_AddRefs(pTheDetail));
    NS_ENSURE_SUCCESS(rv,rv);
    rv = pTheDetail->GetFirstChild(getter_AddRefs(pNode));
    NS_ENSURE_SUCCESS(rv,rv);
    if (pNode) {
      nsCOMPtr<nsIDOMNamedNodeMap> pAttributes;
      nsCOMPtr<nsIDOMNode> pAttribute, pFirstNode;
      nsAutoString pNodeValue;
      rv = pNode->GetFirstChild(getter_AddRefs(pFirstNode));
      NS_ENSURE_SUCCESS(rv,rv);
      if (pFirstNode) {
        pFirstNode->GetNodeValue(pNodeValue);
        NS_ENSURE_SUCCESS(rv,rv);
        pDetail  = pNodeValue;
      }
      pNode->GetAttributes(getter_AddRefs(pAttributes));
      NS_ENSURE_SUCCESS(rv,rv);
      pAttributes->GetNamedItem(NS_LITERAL_STRING("code"), getter_AddRefs(pAttribute));
      NS_ENSURE_SUCCESS(rv,rv);
      if (pAttribute) {
        pAttribute->GetNodeValue(pNodeValue);
        NS_ENSURE_SUCCESS(rv,rv);
        pDetail += NS_LITERAL_STRING("\n(Erreur ");
        pDetail += pNodeValue;
        pDetail += NS_LITERAL_STRING(")");
      }
    } else pDetail = NS_LITERAL_STRING("Erreur sans message.");
    pFaute = pDetail;
    rv = pFault->GetFaultString(pTitle);
    NS_ENSURE_SUCCESS(rv,rv);
    nsCOMPtr<nsIPrompt> pPrompt= do_GetService(NS_DEFAULTPROMPT_CONTRACTID, &rv);
    NS_ENSURE_SUCCESS(rv,rv);
    pPrompt->Alert(ToNewUnicode(pTitle), ToNewUnicode(pFaute));
    return NS_ERROR_FAILURE;
  }

  nsISOAPParameter ** pParameters;
  PRUint32 pTotal;
  rv = aResponse->GetParameters(PR_FALSE, &pTotal, &pParameters);
  NS_ENSURE_SUCCESS(rv,rv);
  if (pTotal!=1) {
    nsCOMPtr<nsIPrompt> pPrompt= do_GetService(NS_DEFAULTPROMPT_CONTRACTID, &rv);
    NS_ENSURE_SUCCESS(rv,rv);
    pPrompt->Alert(ToNewUnicode(NS_LITERAL_CSTRING("Erreur système")), ToNewUnicode(NS_LITERAL_CSTRING("Le nombre total de paramètres reçus est incorrect.")));
    return NS_ERROR_FAILURE;
  }

  nsAutoString pText;
  nsCOMArray<nsIVariant> pArray;
  nsCOMPtr<nsIWritableVariant> pVariant;
  PRUint32 pLsize=0, pCsize=0;
  PRUint32 pLineIndex, pColIndex;
  PRUint16 pNodeType;
  nsCOMPtr<nsIDOMElement> pResult;
  nsCOMPtr<nsIDOMNodeList> pLines, pValues;
  nsCOMPtr<nsIDOMNode> pLine, pValue, pContent;
  rv = pParameters[0]->GetElement(getter_AddRefs(pResult));
  NS_ENSURE_SUCCESS(rv,rv);
  rv = pResult->GetChildNodes(getter_AddRefs(pLines));
  NS_ENSURE_SUCCESS(rv,rv);
  pLines->GetLength(&pLsize);
  for (pLineIndex=0;pLineIndex<pLsize;pLineIndex++) {
    do {
      rv = pLines->Item(pLineIndex, getter_AddRefs(pLine));
      NS_ENSURE_SUCCESS(rv,rv);
      pLine->GetNodeType(&pNodeType);
      if (pNodeType!=nsIDOMNode::ELEMENT_NODE) pLineIndex++;
    } while (pLineIndex<pLsize && pNodeType!=nsIDOMNode::ELEMENT_NODE);
    if (pLineIndex>=pLsize) break;
    rv = pLine->GetChildNodes(getter_AddRefs(pValues));
    NS_ENSURE_SUCCESS(rv,rv);
    pValues->GetLength(&pCsize);
    for (pColIndex=0;pColIndex<pCsize;pColIndex++) {
      do {
        rv = pValues->Item(pColIndex, getter_AddRefs(pValue));
        NS_ENSURE_SUCCESS(rv,rv);
        pValue->GetNodeType(&pNodeType);
        if (pNodeType!=nsIDOMNode::ELEMENT_NODE) pColIndex++;
      } while (pColIndex<pCsize && pNodeType!=nsIDOMNode::ELEMENT_NODE);
      if (pColIndex>=pCsize) break;
      rv = pValue->GetFirstChild(getter_AddRefs(pContent));
      NS_ENSURE_SUCCESS(rv,rv);
      pVariant = do_CreateInstance(NS_VARIANT_CONTRACTID, &rv);
      NS_ENSURE_SUCCESS(rv,rv);
      if (pContent) {
        rv = pContent->GetNodeValue(pText);
        NS_ENSURE_SUCCESS(rv,rv);
        pVariant->SetAsAString(pText);
        printf("%s|",ToNewCString(pText));
      } else {
        pVariant->SetAsAString(NS_LITERAL_STRING(""));
      }
      rv = pArray.AppendObject(pVariant);
    }
  }
  rv = mComponent->TreatP005C(pArray, pLsize, pCsize, mSearch);
  return rv;
}


/* Generated by Pygmalion */


NS_IMPL_ISUPPORTS1(mozListenerP005D, nsISOAPResponseListener)

mozListenerP005D::mozListenerP005D(mozC02gestsea* aComponent, const nsAString & aKey)
{
  mComponent = aComponent;
  mKey = aKey;
}
mozListenerP005D::~mozListenerP005D()
{
}

NS_IMETHODIMP mozListenerP005D::HandleResponse(nsISOAPResponse *aResponse, nsISOAPCall *aCall, PRUint32 aStatus, PRBool aLast, PRBool *aReturn)
{
  nsresult rv;
  nsCOMPtr<nsISOAPFault> pFault;
  rv = aResponse->GetFault(getter_AddRefs(pFault));
  NS_ENSURE_SUCCESS(rv, rv);
  if (pFault) {
    nsAutoString pFaute, pDetail, pTitle;
    nsCOMPtr<nsIDOMElement> pTheDetail;
    nsCOMPtr<nsIDOMNode> pNode;
    rv = pFault->GetDetail(getter_AddRefs(pTheDetail));
    NS_ENSURE_SUCCESS(rv,rv);
    rv = pTheDetail->GetFirstChild(getter_AddRefs(pNode));
    NS_ENSURE_SUCCESS(rv,rv);
    if (pNode) {
      nsCOMPtr<nsIDOMNamedNodeMap> pAttributes;
      nsCOMPtr<nsIDOMNode> pAttribute, pFirstNode;
      nsAutoString pNodeValue;
      rv = pNode->GetFirstChild(getter_AddRefs(pFirstNode));
      NS_ENSURE_SUCCESS(rv,rv);
      if (pFirstNode) {
        pFirstNode->GetNodeValue(pNodeValue);
        NS_ENSURE_SUCCESS(rv,rv);
        pDetail  = pNodeValue;
      }
      pNode->GetAttributes(getter_AddRefs(pAttributes));
      NS_ENSURE_SUCCESS(rv,rv);
      pAttributes->GetNamedItem(NS_LITERAL_STRING("code"), getter_AddRefs(pAttribute));
      NS_ENSURE_SUCCESS(rv,rv);
      if (pAttribute) {
        pAttribute->GetNodeValue(pNodeValue);
        NS_ENSURE_SUCCESS(rv,rv);
        pDetail += NS_LITERAL_STRING("\n(Erreur ");
        pDetail += pNodeValue;
        pDetail += NS_LITERAL_STRING(")");
      }
    } else pDetail = NS_LITERAL_STRING("Erreur sans message.");
    pFaute = pDetail;
    rv = pFault->GetFaultString(pTitle);
    NS_ENSURE_SUCCESS(rv,rv);
    nsCOMPtr<nsIPrompt> pPrompt= do_GetService(NS_DEFAULTPROMPT_CONTRACTID, &rv);
    NS_ENSURE_SUCCESS(rv,rv);
    pPrompt->Alert(ToNewUnicode(pTitle), ToNewUnicode(pFaute));
    return NS_ERROR_FAILURE;
  }

  nsISOAPParameter ** pParameters;
  PRUint32 pTotal;
  rv = aResponse->GetParameters(PR_FALSE, &pTotal, &pParameters);
  NS_ENSURE_SUCCESS(rv,rv);
  if (pTotal!=1) {
    nsCOMPtr<nsIPrompt> pPrompt= do_GetService(NS_DEFAULTPROMPT_CONTRACTID, &rv);
    NS_ENSURE_SUCCESS(rv,rv);
    pPrompt->Alert(ToNewUnicode(NS_LITERAL_CSTRING("Erreur système")), ToNewUnicode(NS_LITERAL_CSTRING("Le nombre total de paramètres reçus est incorrect.")));
    return NS_ERROR_FAILURE;
  }

  nsAutoString pText;
  nsCOMArray<nsIVariant> pArray;
  nsCOMPtr<nsIWritableVariant> pVariant;
  PRUint32 pLsize=0, pCsize=0;
  PRUint32 pLineIndex, pColIndex;
  PRUint16 pNodeType;
  nsCOMPtr<nsIDOMElement> pResult;
  nsCOMPtr<nsIDOMNodeList> pLines, pValues;
  nsCOMPtr<nsIDOMNode> pLine, pValue, pContent;
  rv = pParameters[0]->GetElement(getter_AddRefs(pResult));
  NS_ENSURE_SUCCESS(rv,rv);
  rv = pResult->GetChildNodes(getter_AddRefs(pLines));
  NS_ENSURE_SUCCESS(rv,rv);
  pLines->GetLength(&pLsize);
  for (pLineIndex=0;pLineIndex<pLsize;pLineIndex++) {
    do {
      rv = pLines->Item(pLineIndex, getter_AddRefs(pLine));
      NS_ENSURE_SUCCESS(rv,rv);
      pLine->GetNodeType(&pNodeType);
      if (pNodeType!=nsIDOMNode::ELEMENT_NODE) pLineIndex++;
    } while (pLineIndex<pLsize && pNodeType!=nsIDOMNode::ELEMENT_NODE);
    if (pLineIndex>=pLsize) break;
    rv = pLine->GetChildNodes(getter_AddRefs(pValues));
    NS_ENSURE_SUCCESS(rv,rv);
    pValues->GetLength(&pCsize);
    for (pColIndex=0;pColIndex<pCsize;pColIndex++) {
      do {
        rv = pValues->Item(pColIndex, getter_AddRefs(pValue));
        NS_ENSURE_SUCCESS(rv,rv);
        pValue->GetNodeType(&pNodeType);
        if (pNodeType!=nsIDOMNode::ELEMENT_NODE) pColIndex++;
      } while (pColIndex<pCsize && pNodeType!=nsIDOMNode::ELEMENT_NODE);
      if (pColIndex>=pCsize) break;
      rv = pValue->GetFirstChild(getter_AddRefs(pContent));
      NS_ENSURE_SUCCESS(rv,rv);
      pVariant = do_CreateInstance(NS_VARIANT_CONTRACTID, &rv);
      NS_ENSURE_SUCCESS(rv,rv);
      if (pContent) {
        rv = pContent->GetNodeValue(pText);
        NS_ENSURE_SUCCESS(rv,rv);
        pVariant->SetAsAString(pText);
        printf("%s|",ToNewCString(pText));
      } else {
        pVariant->SetAsAString(NS_LITERAL_STRING(""));
      }
      rv = pArray.AppendObject(pVariant);
    }
  }
  rv = mComponent->TreatP005D(pArray, pLsize, pCsize, mKey);
  return rv;
}


/* Generated by Pygmalion */


NS_IMPL_ISUPPORTS1(mozListenerP005E, nsISOAPResponseListener)

mozListenerP005E::mozListenerP005E(mozC02gestsea* aComponent, const nsACString & aSearch)
{
  mComponent = aComponent;
  mSearch = aSearch;
}
mozListenerP005E::~mozListenerP005E()
{
}

NS_IMETHODIMP mozListenerP005E::HandleResponse(nsISOAPResponse *aResponse, nsISOAPCall *aCall, PRUint32 aStatus, PRBool aLast, PRBool *aReturn)
{
  nsresult rv;
  nsCOMPtr<nsISOAPFault> pFault;
  rv = aResponse->GetFault(getter_AddRefs(pFault));
  NS_ENSURE_SUCCESS(rv, rv);
  if (pFault) {
    nsAutoString pFaute, pDetail, pTitle;
    nsCOMPtr<nsIDOMElement> pTheDetail;
    nsCOMPtr<nsIDOMNode> pNode;
    rv = pFault->GetDetail(getter_AddRefs(pTheDetail));
    NS_ENSURE_SUCCESS(rv,rv);
    rv = pTheDetail->GetFirstChild(getter_AddRefs(pNode));
    NS_ENSURE_SUCCESS(rv,rv);
    if (pNode) {
      nsCOMPtr<nsIDOMNamedNodeMap> pAttributes;
      nsCOMPtr<nsIDOMNode> pAttribute, pFirstNode;
      nsAutoString pNodeValue;
      rv = pNode->GetFirstChild(getter_AddRefs(pFirstNode));
      NS_ENSURE_SUCCESS(rv,rv);
      if (pFirstNode) {
        pFirstNode->GetNodeValue(pNodeValue);
        NS_ENSURE_SUCCESS(rv,rv);
        pDetail  = pNodeValue;
      }
      pNode->GetAttributes(getter_AddRefs(pAttributes));
      NS_ENSURE_SUCCESS(rv,rv);
      pAttributes->GetNamedItem(NS_LITERAL_STRING("code"), getter_AddRefs(pAttribute));
      NS_ENSURE_SUCCESS(rv,rv);
      if (pAttribute) {
        pAttribute->GetNodeValue(pNodeValue);
        NS_ENSURE_SUCCESS(rv,rv);
        pDetail += NS_LITERAL_STRING("\n(Erreur ");
        pDetail += pNodeValue;
        pDetail += NS_LITERAL_STRING(")");
      }
    } else pDetail = NS_LITERAL_STRING("Erreur sans message.");
    pFaute = pDetail;
    rv = pFault->GetFaultString(pTitle);
    NS_ENSURE_SUCCESS(rv,rv);
    nsCOMPtr<nsIPrompt> pPrompt= do_GetService(NS_DEFAULTPROMPT_CONTRACTID, &rv);
    NS_ENSURE_SUCCESS(rv,rv);
    pPrompt->Alert(ToNewUnicode(pTitle), ToNewUnicode(pFaute));
    return NS_ERROR_FAILURE;
  }

  nsISOAPParameter ** pParameters;
  PRUint32 pTotal;
  rv = aResponse->GetParameters(PR_FALSE, &pTotal, &pParameters);
  NS_ENSURE_SUCCESS(rv,rv);
  if (pTotal!=1) {
    nsCOMPtr<nsIPrompt> pPrompt= do_GetService(NS_DEFAULTPROMPT_CONTRACTID, &rv);
    NS_ENSURE_SUCCESS(rv,rv);
    pPrompt->Alert(ToNewUnicode(NS_LITERAL_CSTRING("Erreur système")), ToNewUnicode(NS_LITERAL_CSTRING("Le nombre total de paramètres reçus est incorrect.")));
    return NS_ERROR_FAILURE;
  }

  nsAutoString pText;
  nsCOMArray<nsIVariant> pArray;
  nsCOMPtr<nsIWritableVariant> pVariant;
  PRUint32 pLsize=0, pCsize=0;
  PRUint32 pLineIndex, pColIndex;
  PRUint16 pNodeType;
  nsCOMPtr<nsIDOMElement> pResult;
  nsCOMPtr<nsIDOMNodeList> pLines, pValues;
  nsCOMPtr<nsIDOMNode> pLine, pValue, pContent;
  rv = pParameters[0]->GetElement(getter_AddRefs(pResult));
  NS_ENSURE_SUCCESS(rv,rv);
  rv = pResult->GetChildNodes(getter_AddRefs(pLines));
  NS_ENSURE_SUCCESS(rv,rv);
  pLines->GetLength(&pLsize);
  for (pLineIndex=0;pLineIndex<pLsize;pLineIndex++) {
    do {
      rv = pLines->Item(pLineIndex, getter_AddRefs(pLine));
      NS_ENSURE_SUCCESS(rv,rv);
      pLine->GetNodeType(&pNodeType);
      if (pNodeType!=nsIDOMNode::ELEMENT_NODE) pLineIndex++;
    } while (pLineIndex<pLsize && pNodeType!=nsIDOMNode::ELEMENT_NODE);
    if (pLineIndex>=pLsize) break;
    rv = pLine->GetChildNodes(getter_AddRefs(pValues));
    NS_ENSURE_SUCCESS(rv,rv);
    pValues->GetLength(&pCsize);
    for (pColIndex=0;pColIndex<pCsize;pColIndex++) {
      do {
        rv = pValues->Item(pColIndex, getter_AddRefs(pValue));
        NS_ENSURE_SUCCESS(rv,rv);
        pValue->GetNodeType(&pNodeType);
        if (pNodeType!=nsIDOMNode::ELEMENT_NODE) pColIndex++;
      } while (pColIndex<pCsize && pNodeType!=nsIDOMNode::ELEMENT_NODE);
      if (pColIndex>=pCsize) break;
      rv = pValue->GetFirstChild(getter_AddRefs(pContent));
      NS_ENSURE_SUCCESS(rv,rv);
      pVariant = do_CreateInstance(NS_VARIANT_CONTRACTID, &rv);
      NS_ENSURE_SUCCESS(rv,rv);
      if (pContent) {
        rv = pContent->GetNodeValue(pText);
        NS_ENSURE_SUCCESS(rv,rv);
        pVariant->SetAsAString(pText);
        printf("%s|",ToNewCString(pText));
      } else {
        pVariant->SetAsAString(NS_LITERAL_STRING(""));
      }
      rv = pArray.AppendObject(pVariant);
    }
  }
  rv = mComponent->TreatP005E(pArray, pLsize, pCsize, mSearch);
  return rv;
}


/* Generated by Pygmalion */


NS_IMPL_ISUPPORTS1(mozListenerP005F, nsISOAPResponseListener)

mozListenerP005F::mozListenerP005F(mozC02gestsea* aComponent, const nsACString & aSearch)
{
  mComponent = aComponent;
  mSearch = aSearch;
}
mozListenerP005F::~mozListenerP005F()
{
}

NS_IMETHODIMP mozListenerP005F::HandleResponse(nsISOAPResponse *aResponse, nsISOAPCall *aCall, PRUint32 aStatus, PRBool aLast, PRBool *aReturn)
{
  nsresult rv;
  nsCOMPtr<nsISOAPFault> pFault;
  rv = aResponse->GetFault(getter_AddRefs(pFault));
  NS_ENSURE_SUCCESS(rv, rv);
  if (pFault) {
    nsAutoString pFaute, pDetail, pTitle;
    nsCOMPtr<nsIDOMElement> pTheDetail;
    nsCOMPtr<nsIDOMNode> pNode;
    rv = pFault->GetDetail(getter_AddRefs(pTheDetail));
    NS_ENSURE_SUCCESS(rv,rv);
    rv = pTheDetail->GetFirstChild(getter_AddRefs(pNode));
    NS_ENSURE_SUCCESS(rv,rv);
    if (pNode) {
      nsCOMPtr<nsIDOMNamedNodeMap> pAttributes;
      nsCOMPtr<nsIDOMNode> pAttribute, pFirstNode;
      nsAutoString pNodeValue;
      rv = pNode->GetFirstChild(getter_AddRefs(pFirstNode));
      NS_ENSURE_SUCCESS(rv,rv);
      if (pFirstNode) {
        pFirstNode->GetNodeValue(pNodeValue);
        NS_ENSURE_SUCCESS(rv,rv);
        pDetail  = pNodeValue;
      }
      pNode->GetAttributes(getter_AddRefs(pAttributes));
      NS_ENSURE_SUCCESS(rv,rv);
      pAttributes->GetNamedItem(NS_LITERAL_STRING("code"), getter_AddRefs(pAttribute));
      NS_ENSURE_SUCCESS(rv,rv);
      if (pAttribute) {
        pAttribute->GetNodeValue(pNodeValue);
        NS_ENSURE_SUCCESS(rv,rv);
        pDetail += NS_LITERAL_STRING("\n(Erreur ");
        pDetail += pNodeValue;
        pDetail += NS_LITERAL_STRING(")");
      }
    } else pDetail = NS_LITERAL_STRING("Erreur sans message.");
    pFaute = pDetail;
    rv = pFault->GetFaultString(pTitle);
    NS_ENSURE_SUCCESS(rv,rv);
    nsCOMPtr<nsIPrompt> pPrompt= do_GetService(NS_DEFAULTPROMPT_CONTRACTID, &rv);
    NS_ENSURE_SUCCESS(rv,rv);
    pPrompt->Alert(ToNewUnicode(pTitle), ToNewUnicode(pFaute));
    return NS_ERROR_FAILURE;
  }

  nsISOAPParameter ** pParameters;
  PRUint32 pTotal;
  rv = aResponse->GetParameters(PR_FALSE, &pTotal, &pParameters);
  NS_ENSURE_SUCCESS(rv,rv);
  if (pTotal!=1) {
    nsCOMPtr<nsIPrompt> pPrompt= do_GetService(NS_DEFAULTPROMPT_CONTRACTID, &rv);
    NS_ENSURE_SUCCESS(rv,rv);
    pPrompt->Alert(ToNewUnicode(NS_LITERAL_CSTRING("Erreur système")), ToNewUnicode(NS_LITERAL_CSTRING("Le nombre total de paramètres reçus est incorrect.")));
    return NS_ERROR_FAILURE;
  }

  nsAutoString pText;
  nsCOMArray<nsIVariant> pArray;
  nsCOMPtr<nsIWritableVariant> pVariant;
  PRUint32 pLsize=0, pCsize=0;
  PRUint32 pLineIndex, pColIndex;
  PRUint16 pNodeType;
  nsCOMPtr<nsIDOMElement> pResult;
  nsCOMPtr<nsIDOMNodeList> pLines, pValues;
  nsCOMPtr<nsIDOMNode> pLine, pValue, pContent;
  rv = pParameters[0]->GetElement(getter_AddRefs(pResult));
  NS_ENSURE_SUCCESS(rv,rv);
  rv = pResult->GetChildNodes(getter_AddRefs(pLines));
  NS_ENSURE_SUCCESS(rv,rv);
  pLines->GetLength(&pLsize);
  for (pLineIndex=0;pLineIndex<pLsize;pLineIndex++) {
    do {
      rv = pLines->Item(pLineIndex, getter_AddRefs(pLine));
      NS_ENSURE_SUCCESS(rv,rv);
      pLine->GetNodeType(&pNodeType);
      if (pNodeType!=nsIDOMNode::ELEMENT_NODE) pLineIndex++;
    } while (pLineIndex<pLsize && pNodeType!=nsIDOMNode::ELEMENT_NODE);
    if (pLineIndex>=pLsize) break;
    rv = pLine->GetChildNodes(getter_AddRefs(pValues));
    NS_ENSURE_SUCCESS(rv,rv);
    pValues->GetLength(&pCsize);
    for (pColIndex=0;pColIndex<pCsize;pColIndex++) {
      do {
        rv = pValues->Item(pColIndex, getter_AddRefs(pValue));
        NS_ENSURE_SUCCESS(rv,rv);
        pValue->GetNodeType(&pNodeType);
        if (pNodeType!=nsIDOMNode::ELEMENT_NODE) pColIndex++;
      } while (pColIndex<pCsize && pNodeType!=nsIDOMNode::ELEMENT_NODE);
      if (pColIndex>=pCsize) break;
      rv = pValue->GetFirstChild(getter_AddRefs(pContent));
      NS_ENSURE_SUCCESS(rv,rv);
      pVariant = do_CreateInstance(NS_VARIANT_CONTRACTID, &rv);
      NS_ENSURE_SUCCESS(rv,rv);
      if (pContent) {
        rv = pContent->GetNodeValue(pText);
        NS_ENSURE_SUCCESS(rv,rv);
        pVariant->SetAsAString(pText);
        printf("%s|",ToNewCString(pText));
      } else {
        pVariant->SetAsAString(NS_LITERAL_STRING(""));
      }
      rv = pArray.AppendObject(pVariant);
    }
  }
  rv = mComponent->TreatP005F(pArray, pLsize, pCsize, mSearch);
  return rv;
}


/* Generated by Pygmalion */


NS_IMPL_ISUPPORTS1(mozListenerP0060, nsISOAPResponseListener)

mozListenerP0060::mozListenerP0060(mozC02gestsea* aComponent, const nsAString & aKey)
{
  mComponent = aComponent;
  mKey = aKey;
}
mozListenerP0060::~mozListenerP0060()
{
}

NS_IMETHODIMP mozListenerP0060::HandleResponse(nsISOAPResponse *aResponse, nsISOAPCall *aCall, PRUint32 aStatus, PRBool aLast, PRBool *aReturn)
{
  nsresult rv;
  nsCOMPtr<nsISOAPFault> pFault;
  rv = aResponse->GetFault(getter_AddRefs(pFault));
  NS_ENSURE_SUCCESS(rv, rv);
  if (pFault) {
    nsAutoString pFaute, pDetail, pTitle;
    nsCOMPtr<nsIDOMElement> pTheDetail;
    nsCOMPtr<nsIDOMNode> pNode;
    rv = pFault->GetDetail(getter_AddRefs(pTheDetail));
    NS_ENSURE_SUCCESS(rv,rv);
    rv = pTheDetail->GetFirstChild(getter_AddRefs(pNode));
    NS_ENSURE_SUCCESS(rv,rv);
    if (pNode) {
      nsCOMPtr<nsIDOMNamedNodeMap> pAttributes;
      nsCOMPtr<nsIDOMNode> pAttribute, pFirstNode;
      nsAutoString pNodeValue;
      rv = pNode->GetFirstChild(getter_AddRefs(pFirstNode));
      NS_ENSURE_SUCCESS(rv,rv);
      if (pFirstNode) {
        pFirstNode->GetNodeValue(pNodeValue);
        NS_ENSURE_SUCCESS(rv,rv);
        pDetail  = pNodeValue;
      }
      pNode->GetAttributes(getter_AddRefs(pAttributes));
      NS_ENSURE_SUCCESS(rv,rv);
      pAttributes->GetNamedItem(NS_LITERAL_STRING("code"), getter_AddRefs(pAttribute));
      NS_ENSURE_SUCCESS(rv,rv);
      if (pAttribute) {
        pAttribute->GetNodeValue(pNodeValue);
        NS_ENSURE_SUCCESS(rv,rv);
        pDetail += NS_LITERAL_STRING("\n(Erreur ");
        pDetail += pNodeValue;
        pDetail += NS_LITERAL_STRING(")");
      }
    } else pDetail = NS_LITERAL_STRING("Erreur sans message.");
    pFaute = pDetail;
    rv = pFault->GetFaultString(pTitle);
    NS_ENSURE_SUCCESS(rv,rv);
    nsCOMPtr<nsIPrompt> pPrompt= do_GetService(NS_DEFAULTPROMPT_CONTRACTID, &rv);
    NS_ENSURE_SUCCESS(rv,rv);
    pPrompt->Alert(ToNewUnicode(pTitle), ToNewUnicode(pFaute));
    return NS_ERROR_FAILURE;
  }

  nsISOAPParameter ** pParameters;
  PRUint32 pTotal;
  rv = aResponse->GetParameters(PR_FALSE, &pTotal, &pParameters);
  NS_ENSURE_SUCCESS(rv,rv);
  if (pTotal!=1) {
    nsCOMPtr<nsIPrompt> pPrompt= do_GetService(NS_DEFAULTPROMPT_CONTRACTID, &rv);
    NS_ENSURE_SUCCESS(rv,rv);
    pPrompt->Alert(ToNewUnicode(NS_LITERAL_CSTRING("Erreur système")), ToNewUnicode(NS_LITERAL_CSTRING("Le nombre total de paramètres reçus est incorrect.")));
    return NS_ERROR_FAILURE;
  }

  nsAutoString pText;
  nsCOMArray<nsIVariant> pArray;
  nsCOMPtr<nsIWritableVariant> pVariant;
  PRUint32 pLsize=0, pCsize=0;
  PRUint32 pLineIndex, pColIndex;
  PRUint16 pNodeType;
  nsCOMPtr<nsIDOMElement> pResult;
  nsCOMPtr<nsIDOMNodeList> pLines, pValues;
  nsCOMPtr<nsIDOMNode> pLine, pValue, pContent;
  rv = pParameters[0]->GetElement(getter_AddRefs(pResult));
  NS_ENSURE_SUCCESS(rv,rv);
  rv = pResult->GetChildNodes(getter_AddRefs(pLines));
  NS_ENSURE_SUCCESS(rv,rv);
  pLines->GetLength(&pLsize);
  for (pLineIndex=0;pLineIndex<pLsize;pLineIndex++) {
    do {
      rv = pLines->Item(pLineIndex, getter_AddRefs(pLine));
      NS_ENSURE_SUCCESS(rv,rv);
      pLine->GetNodeType(&pNodeType);
      if (pNodeType!=nsIDOMNode::ELEMENT_NODE) pLineIndex++;
    } while (pLineIndex<pLsize && pNodeType!=nsIDOMNode::ELEMENT_NODE);
    if (pLineIndex>=pLsize) break;
    rv = pLine->GetChildNodes(getter_AddRefs(pValues));
    NS_ENSURE_SUCCESS(rv,rv);
    pValues->GetLength(&pCsize);
    for (pColIndex=0;pColIndex<pCsize;pColIndex++) {
      do {
        rv = pValues->Item(pColIndex, getter_AddRefs(pValue));
        NS_ENSURE_SUCCESS(rv,rv);
        pValue->GetNodeType(&pNodeType);
        if (pNodeType!=nsIDOMNode::ELEMENT_NODE) pColIndex++;
      } while (pColIndex<pCsize && pNodeType!=nsIDOMNode::ELEMENT_NODE);
      if (pColIndex>=pCsize) break;
      rv = pValue->GetFirstChild(getter_AddRefs(pContent));
      NS_ENSURE_SUCCESS(rv,rv);
      pVariant = do_CreateInstance(NS_VARIANT_CONTRACTID, &rv);
      NS_ENSURE_SUCCESS(rv,rv);
      if (pContent) {
        rv = pContent->GetNodeValue(pText);
        NS_ENSURE_SUCCESS(rv,rv);
        pVariant->SetAsAString(pText);
        printf("%s|",ToNewCString(pText));
      } else {
        pVariant->SetAsAString(NS_LITERAL_STRING(""));
      }
      rv = pArray.AppendObject(pVariant);
    }
  }
  rv = mComponent->TreatP0060(pArray, pLsize, pCsize, mKey);
  return rv;
}


/* Generated by Pygmalion */


NS_IMPL_ISUPPORTS1(mozListenerP0061, nsISOAPResponseListener)

mozListenerP0061::mozListenerP0061(mozC02gestsea* aComponent, const nsACString & aSearch)
{
  mComponent = aComponent;
  mSearch = aSearch;
}
mozListenerP0061::~mozListenerP0061()
{
}

NS_IMETHODIMP mozListenerP0061::HandleResponse(nsISOAPResponse *aResponse, nsISOAPCall *aCall, PRUint32 aStatus, PRBool aLast, PRBool *aReturn)
{
  nsresult rv;
  nsCOMPtr<nsISOAPFault> pFault;
  rv = aResponse->GetFault(getter_AddRefs(pFault));
  NS_ENSURE_SUCCESS(rv, rv);
  if (pFault) {
    nsAutoString pFaute, pDetail, pTitle;
    nsCOMPtr<nsIDOMElement> pTheDetail;
    nsCOMPtr<nsIDOMNode> pNode;
    rv = pFault->GetDetail(getter_AddRefs(pTheDetail));
    NS_ENSURE_SUCCESS(rv,rv);
    rv = pTheDetail->GetFirstChild(getter_AddRefs(pNode));
    NS_ENSURE_SUCCESS(rv,rv);
    if (pNode) {
      nsCOMPtr<nsIDOMNamedNodeMap> pAttributes;
      nsCOMPtr<nsIDOMNode> pAttribute, pFirstNode;
      nsAutoString pNodeValue;
      rv = pNode->GetFirstChild(getter_AddRefs(pFirstNode));
      NS_ENSURE_SUCCESS(rv,rv);
      if (pFirstNode) {
        pFirstNode->GetNodeValue(pNodeValue);
        NS_ENSURE_SUCCESS(rv,rv);
        pDetail  = pNodeValue;
      }
      pNode->GetAttributes(getter_AddRefs(pAttributes));
      NS_ENSURE_SUCCESS(rv,rv);
      pAttributes->GetNamedItem(NS_LITERAL_STRING("code"), getter_AddRefs(pAttribute));
      NS_ENSURE_SUCCESS(rv,rv);
      if (pAttribute) {
        pAttribute->GetNodeValue(pNodeValue);
        NS_ENSURE_SUCCESS(rv,rv);
        pDetail += NS_LITERAL_STRING("\n(Erreur ");
        pDetail += pNodeValue;
        pDetail += NS_LITERAL_STRING(")");
      }
    } else pDetail = NS_LITERAL_STRING("Erreur sans message.");
    pFaute = pDetail;
    rv = pFault->GetFaultString(pTitle);
    NS_ENSURE_SUCCESS(rv,rv);
    nsCOMPtr<nsIPrompt> pPrompt= do_GetService(NS_DEFAULTPROMPT_CONTRACTID, &rv);
    NS_ENSURE_SUCCESS(rv,rv);
    pPrompt->Alert(ToNewUnicode(pTitle), ToNewUnicode(pFaute));
    return NS_ERROR_FAILURE;
  }

  nsISOAPParameter ** pParameters;
  PRUint32 pTotal;
  rv = aResponse->GetParameters(PR_FALSE, &pTotal, &pParameters);
  NS_ENSURE_SUCCESS(rv,rv);
  if (pTotal!=1) {
    nsCOMPtr<nsIPrompt> pPrompt= do_GetService(NS_DEFAULTPROMPT_CONTRACTID, &rv);
    NS_ENSURE_SUCCESS(rv,rv);
    pPrompt->Alert(ToNewUnicode(NS_LITERAL_CSTRING("Erreur système")), ToNewUnicode(NS_LITERAL_CSTRING("Le nombre total de paramètres reçus est incorrect.")));
    return NS_ERROR_FAILURE;
  }

  nsAutoString pText;
  nsCOMArray<nsIVariant> pArray;
  nsCOMPtr<nsIWritableVariant> pVariant;
  PRUint32 pLsize=0, pCsize=0;
  PRUint32 pLineIndex, pColIndex;
  PRUint16 pNodeType;
  nsCOMPtr<nsIDOMElement> pResult;
  nsCOMPtr<nsIDOMNodeList> pLines, pValues;
  nsCOMPtr<nsIDOMNode> pLine, pValue, pContent;
  rv = pParameters[0]->GetElement(getter_AddRefs(pResult));
  NS_ENSURE_SUCCESS(rv,rv);
  rv = pResult->GetChildNodes(getter_AddRefs(pLines));
  NS_ENSURE_SUCCESS(rv,rv);
  pLines->GetLength(&pLsize);
  for (pLineIndex=0;pLineIndex<pLsize;pLineIndex++) {
    do {
      rv = pLines->Item(pLineIndex, getter_AddRefs(pLine));
      NS_ENSURE_SUCCESS(rv,rv);
      pLine->GetNodeType(&pNodeType);
      if (pNodeType!=nsIDOMNode::ELEMENT_NODE) pLineIndex++;
    } while (pLineIndex<pLsize && pNodeType!=nsIDOMNode::ELEMENT_NODE);
    if (pLineIndex>=pLsize) break;
    rv = pLine->GetChildNodes(getter_AddRefs(pValues));
    NS_ENSURE_SUCCESS(rv,rv);
    pValues->GetLength(&pCsize);
    for (pColIndex=0;pColIndex<pCsize;pColIndex++) {
      do {
        rv = pValues->Item(pColIndex, getter_AddRefs(pValue));
        NS_ENSURE_SUCCESS(rv,rv);
        pValue->GetNodeType(&pNodeType);
        if (pNodeType!=nsIDOMNode::ELEMENT_NODE) pColIndex++;
      } while (pColIndex<pCsize && pNodeType!=nsIDOMNode::ELEMENT_NODE);
      if (pColIndex>=pCsize) break;
      rv = pValue->GetFirstChild(getter_AddRefs(pContent));
      NS_ENSURE_SUCCESS(rv,rv);
      pVariant = do_CreateInstance(NS_VARIANT_CONTRACTID, &rv);
      NS_ENSURE_SUCCESS(rv,rv);
      if (pContent) {
        rv = pContent->GetNodeValue(pText);
        NS_ENSURE_SUCCESS(rv,rv);
        pVariant->SetAsAString(pText);
        printf("%s|",ToNewCString(pText));
      } else {
        pVariant->SetAsAString(NS_LITERAL_STRING(""));
      }
      rv = pArray.AppendObject(pVariant);
    }
  }
  rv = mComponent->TreatP0061(pArray, pLsize, pCsize, mSearch);
  return rv;
}


/* Generated by Pygmalion */


NS_IMPL_ISUPPORTS1(mozListenerP0062, nsISOAPResponseListener)

mozListenerP0062::mozListenerP0062(mozC02gestsea* aComponent, const nsACString & aSearch)
{
  mComponent = aComponent;
  mSearch = aSearch;
}
mozListenerP0062::~mozListenerP0062()
{
}

NS_IMETHODIMP mozListenerP0062::HandleResponse(nsISOAPResponse *aResponse, nsISOAPCall *aCall, PRUint32 aStatus, PRBool aLast, PRBool *aReturn)
{
  nsresult rv;
  nsCOMPtr<nsISOAPFault> pFault;
  rv = aResponse->GetFault(getter_AddRefs(pFault));
  NS_ENSURE_SUCCESS(rv, rv);
  if (pFault) {
    nsAutoString pFaute, pDetail, pTitle;
    nsCOMPtr<nsIDOMElement> pTheDetail;
    nsCOMPtr<nsIDOMNode> pNode;
    rv = pFault->GetDetail(getter_AddRefs(pTheDetail));
    NS_ENSURE_SUCCESS(rv,rv);
    rv = pTheDetail->GetFirstChild(getter_AddRefs(pNode));
    NS_ENSURE_SUCCESS(rv,rv);
    if (pNode) {
      nsCOMPtr<nsIDOMNamedNodeMap> pAttributes;
      nsCOMPtr<nsIDOMNode> pAttribute, pFirstNode;
      nsAutoString pNodeValue;
      rv = pNode->GetFirstChild(getter_AddRefs(pFirstNode));
      NS_ENSURE_SUCCESS(rv,rv);
      if (pFirstNode) {
        pFirstNode->GetNodeValue(pNodeValue);
        NS_ENSURE_SUCCESS(rv,rv);
        pDetail  = pNodeValue;
      }
      pNode->GetAttributes(getter_AddRefs(pAttributes));
      NS_ENSURE_SUCCESS(rv,rv);
      pAttributes->GetNamedItem(NS_LITERAL_STRING("code"), getter_AddRefs(pAttribute));
      NS_ENSURE_SUCCESS(rv,rv);
      if (pAttribute) {
        pAttribute->GetNodeValue(pNodeValue);
        NS_ENSURE_SUCCESS(rv,rv);
        pDetail += NS_LITERAL_STRING("\n(Erreur ");
        pDetail += pNodeValue;
        pDetail += NS_LITERAL_STRING(")");
      }
    } else pDetail = NS_LITERAL_STRING("Erreur sans message.");
    pFaute = pDetail;
    rv = pFault->GetFaultString(pTitle);
    NS_ENSURE_SUCCESS(rv,rv);
    nsCOMPtr<nsIPrompt> pPrompt= do_GetService(NS_DEFAULTPROMPT_CONTRACTID, &rv);
    NS_ENSURE_SUCCESS(rv,rv);
    pPrompt->Alert(ToNewUnicode(pTitle), ToNewUnicode(pFaute));
    return NS_ERROR_FAILURE;
  }

  nsISOAPParameter ** pParameters;
  PRUint32 pTotal;
  rv = aResponse->GetParameters(PR_FALSE, &pTotal, &pParameters);
  NS_ENSURE_SUCCESS(rv,rv);
  if (pTotal!=1) {
    nsCOMPtr<nsIPrompt> pPrompt= do_GetService(NS_DEFAULTPROMPT_CONTRACTID, &rv);
    NS_ENSURE_SUCCESS(rv,rv);
    pPrompt->Alert(ToNewUnicode(NS_LITERAL_CSTRING("Erreur système")), ToNewUnicode(NS_LITERAL_CSTRING("Le nombre total de paramètres reçus est incorrect.")));
    return NS_ERROR_FAILURE;
  }

  nsAutoString pText;
  nsCOMArray<nsIVariant> pArray;
  nsCOMPtr<nsIWritableVariant> pVariant;
  PRUint32 pLsize=0, pCsize=0;
  PRUint32 pLineIndex, pColIndex;
  PRUint16 pNodeType;
  nsCOMPtr<nsIDOMElement> pResult;
  nsCOMPtr<nsIDOMNodeList> pLines, pValues;
  nsCOMPtr<nsIDOMNode> pLine, pValue, pContent;
  rv = pParameters[0]->GetElement(getter_AddRefs(pResult));
  NS_ENSURE_SUCCESS(rv,rv);
  rv = pResult->GetChildNodes(getter_AddRefs(pLines));
  NS_ENSURE_SUCCESS(rv,rv);
  pLines->GetLength(&pLsize);
  for (pLineIndex=0;pLineIndex<pLsize;pLineIndex++) {
    do {
      rv = pLines->Item(pLineIndex, getter_AddRefs(pLine));
      NS_ENSURE_SUCCESS(rv,rv);
      pLine->GetNodeType(&pNodeType);
      if (pNodeType!=nsIDOMNode::ELEMENT_NODE) pLineIndex++;
    } while (pLineIndex<pLsize && pNodeType!=nsIDOMNode::ELEMENT_NODE);
    if (pLineIndex>=pLsize) break;
    rv = pLine->GetChildNodes(getter_AddRefs(pValues));
    NS_ENSURE_SUCCESS(rv,rv);
    pValues->GetLength(&pCsize);
    for (pColIndex=0;pColIndex<pCsize;pColIndex++) {
      do {
        rv = pValues->Item(pColIndex, getter_AddRefs(pValue));
        NS_ENSURE_SUCCESS(rv,rv);
        pValue->GetNodeType(&pNodeType);
        if (pNodeType!=nsIDOMNode::ELEMENT_NODE) pColIndex++;
      } while (pColIndex<pCsize && pNodeType!=nsIDOMNode::ELEMENT_NODE);
      if (pColIndex>=pCsize) break;
      rv = pValue->GetFirstChild(getter_AddRefs(pContent));
      NS_ENSURE_SUCCESS(rv,rv);
      pVariant = do_CreateInstance(NS_VARIANT_CONTRACTID, &rv);
      NS_ENSURE_SUCCESS(rv,rv);
      if (pContent) {
        rv = pContent->GetNodeValue(pText);
        NS_ENSURE_SUCCESS(rv,rv);
        pVariant->SetAsAString(pText);
        printf("%s|",ToNewCString(pText));
      } else {
        pVariant->SetAsAString(NS_LITERAL_STRING(""));
      }
      rv = pArray.AppendObject(pVariant);
    }
  }
  rv = mComponent->TreatP0062(pArray, pLsize, pCsize, mSearch);
  return rv;
}


/* Generated by Pygmalion */


NS_IMPL_ISUPPORTS1(mozListenerP0063, nsISOAPResponseListener)

mozListenerP0063::mozListenerP0063(mozC02gestsea* aComponent, const nsAString & aKey)
{
  mComponent = aComponent;
  mKey = aKey;
}
mozListenerP0063::~mozListenerP0063()
{
}

NS_IMETHODIMP mozListenerP0063::HandleResponse(nsISOAPResponse *aResponse, nsISOAPCall *aCall, PRUint32 aStatus, PRBool aLast, PRBool *aReturn)
{
  nsresult rv;
  nsCOMPtr<nsISOAPFault> pFault;
  rv = aResponse->GetFault(getter_AddRefs(pFault));
  NS_ENSURE_SUCCESS(rv, rv);
  if (pFault) {
    nsAutoString pFaute, pDetail, pTitle;
    nsCOMPtr<nsIDOMElement> pTheDetail;
    nsCOMPtr<nsIDOMNode> pNode;
    rv = pFault->GetDetail(getter_AddRefs(pTheDetail));
    NS_ENSURE_SUCCESS(rv,rv);
    rv = pTheDetail->GetFirstChild(getter_AddRefs(pNode));
    NS_ENSURE_SUCCESS(rv,rv);
    if (pNode) {
      nsCOMPtr<nsIDOMNamedNodeMap> pAttributes;
      nsCOMPtr<nsIDOMNode> pAttribute, pFirstNode;
      nsAutoString pNodeValue;
      rv = pNode->GetFirstChild(getter_AddRefs(pFirstNode));
      NS_ENSURE_SUCCESS(rv,rv);
      if (pFirstNode) {
        pFirstNode->GetNodeValue(pNodeValue);
        NS_ENSURE_SUCCESS(rv,rv);
        pDetail  = pNodeValue;
      }
      pNode->GetAttributes(getter_AddRefs(pAttributes));
      NS_ENSURE_SUCCESS(rv,rv);
      pAttributes->GetNamedItem(NS_LITERAL_STRING("code"), getter_AddRefs(pAttribute));
      NS_ENSURE_SUCCESS(rv,rv);
      if (pAttribute) {
        pAttribute->GetNodeValue(pNodeValue);
        NS_ENSURE_SUCCESS(rv,rv);
        pDetail += NS_LITERAL_STRING("\n(Erreur ");
        pDetail += pNodeValue;
        pDetail += NS_LITERAL_STRING(")");
      }
    } else pDetail = NS_LITERAL_STRING("Erreur sans message.");
    pFaute = pDetail;
    rv = pFault->GetFaultString(pTitle);
    NS_ENSURE_SUCCESS(rv,rv);
    nsCOMPtr<nsIPrompt> pPrompt= do_GetService(NS_DEFAULTPROMPT_CONTRACTID, &rv);
    NS_ENSURE_SUCCESS(rv,rv);
    pPrompt->Alert(ToNewUnicode(pTitle), ToNewUnicode(pFaute));
    return NS_ERROR_FAILURE;
  }

  nsISOAPParameter ** pParameters;
  PRUint32 pTotal;
  rv = aResponse->GetParameters(PR_FALSE, &pTotal, &pParameters);
  NS_ENSURE_SUCCESS(rv,rv);
  if (pTotal!=1) {
    nsCOMPtr<nsIPrompt> pPrompt= do_GetService(NS_DEFAULTPROMPT_CONTRACTID, &rv);
    NS_ENSURE_SUCCESS(rv,rv);
    pPrompt->Alert(ToNewUnicode(NS_LITERAL_CSTRING("Erreur système")), ToNewUnicode(NS_LITERAL_CSTRING("Le nombre total de paramètres reçus est incorrect.")));
    return NS_ERROR_FAILURE;
  }

  nsAutoString pText;
  nsCOMArray<nsIVariant> pArray;
  nsCOMPtr<nsIWritableVariant> pVariant;
  PRUint32 pLsize=0, pCsize=0;
  PRUint32 pLineIndex, pColIndex;
  PRUint16 pNodeType;
  nsCOMPtr<nsIDOMElement> pResult;
  nsCOMPtr<nsIDOMNodeList> pLines, pValues;
  nsCOMPtr<nsIDOMNode> pLine, pValue, pContent;
  rv = pParameters[0]->GetElement(getter_AddRefs(pResult));
  NS_ENSURE_SUCCESS(rv,rv);
  rv = pResult->GetChildNodes(getter_AddRefs(pLines));
  NS_ENSURE_SUCCESS(rv,rv);
  pLines->GetLength(&pLsize);
  for (pLineIndex=0;pLineIndex<pLsize;pLineIndex++) {
    do {
      rv = pLines->Item(pLineIndex, getter_AddRefs(pLine));
      NS_ENSURE_SUCCESS(rv,rv);
      pLine->GetNodeType(&pNodeType);
      if (pNodeType!=nsIDOMNode::ELEMENT_NODE) pLineIndex++;
    } while (pLineIndex<pLsize && pNodeType!=nsIDOMNode::ELEMENT_NODE);
    if (pLineIndex>=pLsize) break;
    rv = pLine->GetChildNodes(getter_AddRefs(pValues));
    NS_ENSURE_SUCCESS(rv,rv);
    pValues->GetLength(&pCsize);
    for (pColIndex=0;pColIndex<pCsize;pColIndex++) {
      do {
        rv = pValues->Item(pColIndex, getter_AddRefs(pValue));
        NS_ENSURE_SUCCESS(rv,rv);
        pValue->GetNodeType(&pNodeType);
        if (pNodeType!=nsIDOMNode::ELEMENT_NODE) pColIndex++;
      } while (pColIndex<pCsize && pNodeType!=nsIDOMNode::ELEMENT_NODE);
      if (pColIndex>=pCsize) break;
      rv = pValue->GetFirstChild(getter_AddRefs(pContent));
      NS_ENSURE_SUCCESS(rv,rv);
      pVariant = do_CreateInstance(NS_VARIANT_CONTRACTID, &rv);
      NS_ENSURE_SUCCESS(rv,rv);
      if (pContent) {
        rv = pContent->GetNodeValue(pText);
        NS_ENSURE_SUCCESS(rv,rv);
        pVariant->SetAsAString(pText);
        printf("%s|",ToNewCString(pText));
      } else {
        pVariant->SetAsAString(NS_LITERAL_STRING(""));
      }
      rv = pArray.AppendObject(pVariant);
    }
  }
  rv = mComponent->TreatP0063(pArray, pLsize, pCsize, mKey);
  return rv;
}


/* Generated by Pygmalion */


NS_IMPL_ISUPPORTS1(mozListenerP0064, nsISOAPResponseListener)

mozListenerP0064::mozListenerP0064(mozC02gestsea* aComponent, const nsACString & aSearch)
{
  mComponent = aComponent;
  mSearch = aSearch;
}
mozListenerP0064::~mozListenerP0064()
{
}

NS_IMETHODIMP mozListenerP0064::HandleResponse(nsISOAPResponse *aResponse, nsISOAPCall *aCall, PRUint32 aStatus, PRBool aLast, PRBool *aReturn)
{
  nsresult rv;
  nsCOMPtr<nsISOAPFault> pFault;
  rv = aResponse->GetFault(getter_AddRefs(pFault));
  NS_ENSURE_SUCCESS(rv, rv);
  if (pFault) {
    nsAutoString pFaute, pDetail, pTitle;
    nsCOMPtr<nsIDOMElement> pTheDetail;
    nsCOMPtr<nsIDOMNode> pNode;
    rv = pFault->GetDetail(getter_AddRefs(pTheDetail));
    NS_ENSURE_SUCCESS(rv,rv);
    rv = pTheDetail->GetFirstChild(getter_AddRefs(pNode));
    NS_ENSURE_SUCCESS(rv,rv);
    if (pNode) {
      nsCOMPtr<nsIDOMNamedNodeMap> pAttributes;
      nsCOMPtr<nsIDOMNode> pAttribute, pFirstNode;
      nsAutoString pNodeValue;
      rv = pNode->GetFirstChild(getter_AddRefs(pFirstNode));
      NS_ENSURE_SUCCESS(rv,rv);
      if (pFirstNode) {
        pFirstNode->GetNodeValue(pNodeValue);
        NS_ENSURE_SUCCESS(rv,rv);
        pDetail  = pNodeValue;
      }
      pNode->GetAttributes(getter_AddRefs(pAttributes));
      NS_ENSURE_SUCCESS(rv,rv);
      pAttributes->GetNamedItem(NS_LITERAL_STRING("code"), getter_AddRefs(pAttribute));
      NS_ENSURE_SUCCESS(rv,rv);
      if (pAttribute) {
        pAttribute->GetNodeValue(pNodeValue);
        NS_ENSURE_SUCCESS(rv,rv);
        pDetail += NS_LITERAL_STRING("\n(Erreur ");
        pDetail += pNodeValue;
        pDetail += NS_LITERAL_STRING(")");
      }
    } else pDetail = NS_LITERAL_STRING("Erreur sans message.");
    pFaute = pDetail;
    rv = pFault->GetFaultString(pTitle);
    NS_ENSURE_SUCCESS(rv,rv);
    nsCOMPtr<nsIPrompt> pPrompt= do_GetService(NS_DEFAULTPROMPT_CONTRACTID, &rv);
    NS_ENSURE_SUCCESS(rv,rv);
    pPrompt->Alert(ToNewUnicode(pTitle), ToNewUnicode(pFaute));
    return NS_ERROR_FAILURE;
  }

  nsISOAPParameter ** pParameters;
  PRUint32 pTotal;
  rv = aResponse->GetParameters(PR_FALSE, &pTotal, &pParameters);
  NS_ENSURE_SUCCESS(rv,rv);
  if (pTotal!=1) {
    nsCOMPtr<nsIPrompt> pPrompt= do_GetService(NS_DEFAULTPROMPT_CONTRACTID, &rv);
    NS_ENSURE_SUCCESS(rv,rv);
    pPrompt->Alert(ToNewUnicode(NS_LITERAL_CSTRING("Erreur système")), ToNewUnicode(NS_LITERAL_CSTRING("Le nombre total de paramètres reçus est incorrect.")));
    return NS_ERROR_FAILURE;
  }

  nsAutoString pText;
  nsCOMArray<nsIVariant> pArray;
  nsCOMPtr<nsIWritableVariant> pVariant;
  PRUint32 pLsize=0, pCsize=0;
  PRUint32 pLineIndex, pColIndex;
  PRUint16 pNodeType;
  nsCOMPtr<nsIDOMElement> pResult;
  nsCOMPtr<nsIDOMNodeList> pLines, pValues;
  nsCOMPtr<nsIDOMNode> pLine, pValue, pContent;
  rv = pParameters[0]->GetElement(getter_AddRefs(pResult));
  NS_ENSURE_SUCCESS(rv,rv);
  rv = pResult->GetChildNodes(getter_AddRefs(pLines));
  NS_ENSURE_SUCCESS(rv,rv);
  pLines->GetLength(&pLsize);
  for (pLineIndex=0;pLineIndex<pLsize;pLineIndex++) {
    do {
      rv = pLines->Item(pLineIndex, getter_AddRefs(pLine));
      NS_ENSURE_SUCCESS(rv,rv);
      pLine->GetNodeType(&pNodeType);
      if (pNodeType!=nsIDOMNode::ELEMENT_NODE) pLineIndex++;
    } while (pLineIndex<pLsize && pNodeType!=nsIDOMNode::ELEMENT_NODE);
    if (pLineIndex>=pLsize) break;
    rv = pLine->GetChildNodes(getter_AddRefs(pValues));
    NS_ENSURE_SUCCESS(rv,rv);
    pValues->GetLength(&pCsize);
    for (pColIndex=0;pColIndex<pCsize;pColIndex++) {
      do {
        rv = pValues->Item(pColIndex, getter_AddRefs(pValue));
        NS_ENSURE_SUCCESS(rv,rv);
        pValue->GetNodeType(&pNodeType);
        if (pNodeType!=nsIDOMNode::ELEMENT_NODE) pColIndex++;
      } while (pColIndex<pCsize && pNodeType!=nsIDOMNode::ELEMENT_NODE);
      if (pColIndex>=pCsize) break;
      rv = pValue->GetFirstChild(getter_AddRefs(pContent));
      NS_ENSURE_SUCCESS(rv,rv);
      pVariant = do_CreateInstance(NS_VARIANT_CONTRACTID, &rv);
      NS_ENSURE_SUCCESS(rv,rv);
      if (pContent) {
        rv = pContent->GetNodeValue(pText);
        NS_ENSURE_SUCCESS(rv,rv);
        pVariant->SetAsAString(pText);
        printf("%s|",ToNewCString(pText));
      } else {
        pVariant->SetAsAString(NS_LITERAL_STRING(""));
      }
      rv = pArray.AppendObject(pVariant);
    }
  }
  rv = mComponent->TreatP0064(pArray, pLsize, pCsize, mSearch);
  return rv;
}


/* Generated by Pygmalion */


NS_IMPL_ISUPPORTS1(mozListenerP0065, nsISOAPResponseListener)

mozListenerP0065::mozListenerP0065(mozC02gestsea* aComponent, const nsACString & aSearch)
{
  mComponent = aComponent;
  mSearch = aSearch;
}
mozListenerP0065::~mozListenerP0065()
{
}

NS_IMETHODIMP mozListenerP0065::HandleResponse(nsISOAPResponse *aResponse, nsISOAPCall *aCall, PRUint32 aStatus, PRBool aLast, PRBool *aReturn)
{
  nsresult rv;
  nsCOMPtr<nsISOAPFault> pFault;
  rv = aResponse->GetFault(getter_AddRefs(pFault));
  NS_ENSURE_SUCCESS(rv, rv);
  if (pFault) {
    nsAutoString pFaute, pDetail, pTitle;
    nsCOMPtr<nsIDOMElement> pTheDetail;
    nsCOMPtr<nsIDOMNode> pNode;
    rv = pFault->GetDetail(getter_AddRefs(pTheDetail));
    NS_ENSURE_SUCCESS(rv,rv);
    rv = pTheDetail->GetFirstChild(getter_AddRefs(pNode));
    NS_ENSURE_SUCCESS(rv,rv);
    if (pNode) {
      nsCOMPtr<nsIDOMNamedNodeMap> pAttributes;
      nsCOMPtr<nsIDOMNode> pAttribute, pFirstNode;
      nsAutoString pNodeValue;
      rv = pNode->GetFirstChild(getter_AddRefs(pFirstNode));
      NS_ENSURE_SUCCESS(rv,rv);
      if (pFirstNode) {
        pFirstNode->GetNodeValue(pNodeValue);
        NS_ENSURE_SUCCESS(rv,rv);
        pDetail  = pNodeValue;
      }
      pNode->GetAttributes(getter_AddRefs(pAttributes));
      NS_ENSURE_SUCCESS(rv,rv);
      pAttributes->GetNamedItem(NS_LITERAL_STRING("code"), getter_AddRefs(pAttribute));
      NS_ENSURE_SUCCESS(rv,rv);
      if (pAttribute) {
        pAttribute->GetNodeValue(pNodeValue);
        NS_ENSURE_SUCCESS(rv,rv);
        pDetail += NS_LITERAL_STRING("\n(Erreur ");
        pDetail += pNodeValue;
        pDetail += NS_LITERAL_STRING(")");
      }
    } else pDetail = NS_LITERAL_STRING("Erreur sans message.");
    pFaute = pDetail;
    rv = pFault->GetFaultString(pTitle);
    NS_ENSURE_SUCCESS(rv,rv);
    nsCOMPtr<nsIPrompt> pPrompt= do_GetService(NS_DEFAULTPROMPT_CONTRACTID, &rv);
    NS_ENSURE_SUCCESS(rv,rv);
    pPrompt->Alert(ToNewUnicode(pTitle), ToNewUnicode(pFaute));
    return NS_ERROR_FAILURE;
  }

  nsISOAPParameter ** pParameters;
  PRUint32 pTotal;
  rv = aResponse->GetParameters(PR_FALSE, &pTotal, &pParameters);
  NS_ENSURE_SUCCESS(rv,rv);
  if (pTotal!=1) {
    nsCOMPtr<nsIPrompt> pPrompt= do_GetService(NS_DEFAULTPROMPT_CONTRACTID, &rv);
    NS_ENSURE_SUCCESS(rv,rv);
    pPrompt->Alert(ToNewUnicode(NS_LITERAL_CSTRING("Erreur système")), ToNewUnicode(NS_LITERAL_CSTRING("Le nombre total de paramètres reçus est incorrect.")));
    return NS_ERROR_FAILURE;
  }

  nsAutoString pText;
  nsCOMArray<nsIVariant> pArray;
  nsCOMPtr<nsIWritableVariant> pVariant;
  PRUint32 pLsize=0, pCsize=0;
  PRUint32 pLineIndex, pColIndex;
  PRUint16 pNodeType;
  nsCOMPtr<nsIDOMElement> pResult;
  nsCOMPtr<nsIDOMNodeList> pLines, pValues;
  nsCOMPtr<nsIDOMNode> pLine, pValue, pContent;
  rv = pParameters[0]->GetElement(getter_AddRefs(pResult));
  NS_ENSURE_SUCCESS(rv,rv);
  rv = pResult->GetChildNodes(getter_AddRefs(pLines));
  NS_ENSURE_SUCCESS(rv,rv);
  pLines->GetLength(&pLsize);
  for (pLineIndex=0;pLineIndex<pLsize;pLineIndex++) {
    do {
      rv = pLines->Item(pLineIndex, getter_AddRefs(pLine));
      NS_ENSURE_SUCCESS(rv,rv);
      pLine->GetNodeType(&pNodeType);
      if (pNodeType!=nsIDOMNode::ELEMENT_NODE) pLineIndex++;
    } while (pLineIndex<pLsize && pNodeType!=nsIDOMNode::ELEMENT_NODE);
    if (pLineIndex>=pLsize) break;
    rv = pLine->GetChildNodes(getter_AddRefs(pValues));
    NS_ENSURE_SUCCESS(rv,rv);
    pValues->GetLength(&pCsize);
    for (pColIndex=0;pColIndex<pCsize;pColIndex++) {
      do {
        rv = pValues->Item(pColIndex, getter_AddRefs(pValue));
        NS_ENSURE_SUCCESS(rv,rv);
        pValue->GetNodeType(&pNodeType);
        if (pNodeType!=nsIDOMNode::ELEMENT_NODE) pColIndex++;
      } while (pColIndex<pCsize && pNodeType!=nsIDOMNode::ELEMENT_NODE);
      if (pColIndex>=pCsize) break;
      rv = pValue->GetFirstChild(getter_AddRefs(pContent));
      NS_ENSURE_SUCCESS(rv,rv);
      pVariant = do_CreateInstance(NS_VARIANT_CONTRACTID, &rv);
      NS_ENSURE_SUCCESS(rv,rv);
      if (pContent) {
        rv = pContent->GetNodeValue(pText);
        NS_ENSURE_SUCCESS(rv,rv);
        pVariant->SetAsAString(pText);
        printf("%s|",ToNewCString(pText));
      } else {
        pVariant->SetAsAString(NS_LITERAL_STRING(""));
      }
      rv = pArray.AppendObject(pVariant);
    }
  }
  rv = mComponent->TreatP0065(pArray, pLsize, pCsize, mSearch);
  return rv;
}


/* Generated by Pygmalion */


NS_IMPL_ISUPPORTS1(mozListenerP0066, nsISOAPResponseListener)

mozListenerP0066::mozListenerP0066(mozC02gestsea* aComponent, const nsAString & aKey)
{
  mComponent = aComponent;
  mKey = aKey;
}
mozListenerP0066::~mozListenerP0066()
{
}

NS_IMETHODIMP mozListenerP0066::HandleResponse(nsISOAPResponse *aResponse, nsISOAPCall *aCall, PRUint32 aStatus, PRBool aLast, PRBool *aReturn)
{
  nsresult rv;
  nsCOMPtr<nsISOAPFault> pFault;
  rv = aResponse->GetFault(getter_AddRefs(pFault));
  NS_ENSURE_SUCCESS(rv, rv);
  if (pFault) {
    nsAutoString pFaute, pDetail, pTitle;
    nsCOMPtr<nsIDOMElement> pTheDetail;
    nsCOMPtr<nsIDOMNode> pNode;
    rv = pFault->GetDetail(getter_AddRefs(pTheDetail));
    NS_ENSURE_SUCCESS(rv,rv);
    rv = pTheDetail->GetFirstChild(getter_AddRefs(pNode));
    NS_ENSURE_SUCCESS(rv,rv);
    if (pNode) {
      nsCOMPtr<nsIDOMNamedNodeMap> pAttributes;
      nsCOMPtr<nsIDOMNode> pAttribute, pFirstNode;
      nsAutoString pNodeValue;
      rv = pNode->GetFirstChild(getter_AddRefs(pFirstNode));
      NS_ENSURE_SUCCESS(rv,rv);
      if (pFirstNode) {
        pFirstNode->GetNodeValue(pNodeValue);
        NS_ENSURE_SUCCESS(rv,rv);
        pDetail  = pNodeValue;
      }
      pNode->GetAttributes(getter_AddRefs(pAttributes));
      NS_ENSURE_SUCCESS(rv,rv);
      pAttributes->GetNamedItem(NS_LITERAL_STRING("code"), getter_AddRefs(pAttribute));
      NS_ENSURE_SUCCESS(rv,rv);
      if (pAttribute) {
        pAttribute->GetNodeValue(pNodeValue);
        NS_ENSURE_SUCCESS(rv,rv);
        pDetail += NS_LITERAL_STRING("\n(Erreur ");
        pDetail += pNodeValue;
        pDetail += NS_LITERAL_STRING(")");
      }
    } else pDetail = NS_LITERAL_STRING("Erreur sans message.");
    pFaute = pDetail;
    rv = pFault->GetFaultString(pTitle);
    NS_ENSURE_SUCCESS(rv,rv);
    nsCOMPtr<nsIPrompt> pPrompt= do_GetService(NS_DEFAULTPROMPT_CONTRACTID, &rv);
    NS_ENSURE_SUCCESS(rv,rv);
    pPrompt->Alert(ToNewUnicode(pTitle), ToNewUnicode(pFaute));
    return NS_ERROR_FAILURE;
  }

  nsISOAPParameter ** pParameters;
  PRUint32 pTotal;
  rv = aResponse->GetParameters(PR_FALSE, &pTotal, &pParameters);
  NS_ENSURE_SUCCESS(rv,rv);
  if (pTotal!=1) {
    nsCOMPtr<nsIPrompt> pPrompt= do_GetService(NS_DEFAULTPROMPT_CONTRACTID, &rv);
    NS_ENSURE_SUCCESS(rv,rv);
    pPrompt->Alert(ToNewUnicode(NS_LITERAL_CSTRING("Erreur système")), ToNewUnicode(NS_LITERAL_CSTRING("Le nombre total de paramètres reçus est incorrect.")));
    return NS_ERROR_FAILURE;
  }

  nsAutoString pText;
  nsCOMArray<nsIVariant> pArray;
  nsCOMPtr<nsIWritableVariant> pVariant;
  PRUint32 pLsize=0, pCsize=0;
  PRUint32 pLineIndex, pColIndex;
  PRUint16 pNodeType;
  nsCOMPtr<nsIDOMElement> pResult;
  nsCOMPtr<nsIDOMNodeList> pLines, pValues;
  nsCOMPtr<nsIDOMNode> pLine, pValue, pContent;
  rv = pParameters[0]->GetElement(getter_AddRefs(pResult));
  NS_ENSURE_SUCCESS(rv,rv);
  rv = pResult->GetChildNodes(getter_AddRefs(pLines));
  NS_ENSURE_SUCCESS(rv,rv);
  pLines->GetLength(&pLsize);
  for (pLineIndex=0;pLineIndex<pLsize;pLineIndex++) {
    do {
      rv = pLines->Item(pLineIndex, getter_AddRefs(pLine));
      NS_ENSURE_SUCCESS(rv,rv);
      pLine->GetNodeType(&pNodeType);
      if (pNodeType!=nsIDOMNode::ELEMENT_NODE) pLineIndex++;
    } while (pLineIndex<pLsize && pNodeType!=nsIDOMNode::ELEMENT_NODE);
    if (pLineIndex>=pLsize) break;
    rv = pLine->GetChildNodes(getter_AddRefs(pValues));
    NS_ENSURE_SUCCESS(rv,rv);
    pValues->GetLength(&pCsize);
    for (pColIndex=0;pColIndex<pCsize;pColIndex++) {
      do {
        rv = pValues->Item(pColIndex, getter_AddRefs(pValue));
        NS_ENSURE_SUCCESS(rv,rv);
        pValue->GetNodeType(&pNodeType);
        if (pNodeType!=nsIDOMNode::ELEMENT_NODE) pColIndex++;
      } while (pColIndex<pCsize && pNodeType!=nsIDOMNode::ELEMENT_NODE);
      if (pColIndex>=pCsize) break;
      rv = pValue->GetFirstChild(getter_AddRefs(pContent));
      NS_ENSURE_SUCCESS(rv,rv);
      pVariant = do_CreateInstance(NS_VARIANT_CONTRACTID, &rv);
      NS_ENSURE_SUCCESS(rv,rv);
      if (pContent) {
        rv = pContent->GetNodeValue(pText);
        NS_ENSURE_SUCCESS(rv,rv);
        pVariant->SetAsAString(pText);
        printf("%s|",ToNewCString(pText));
      } else {
        pVariant->SetAsAString(NS_LITERAL_STRING(""));
      }
      rv = pArray.AppendObject(pVariant);
    }
  }
  rv = mComponent->TreatP0066(pArray, pLsize, pCsize, mKey);
  return rv;
}


/* Generated by Pygmalion */


NS_IMPL_ISUPPORTS1(mozListenerP0067, nsISOAPResponseListener)

mozListenerP0067::mozListenerP0067(mozC02gestsea* aComponent, const nsACString & aSearch)
{
  mComponent = aComponent;
  mSearch = aSearch;
}
mozListenerP0067::~mozListenerP0067()
{
}

NS_IMETHODIMP mozListenerP0067::HandleResponse(nsISOAPResponse *aResponse, nsISOAPCall *aCall, PRUint32 aStatus, PRBool aLast, PRBool *aReturn)
{
  nsresult rv;
  nsCOMPtr<nsISOAPFault> pFault;
  rv = aResponse->GetFault(getter_AddRefs(pFault));
  NS_ENSURE_SUCCESS(rv, rv);
  if (pFault) {
    nsAutoString pFaute, pDetail, pTitle;
    nsCOMPtr<nsIDOMElement> pTheDetail;
    nsCOMPtr<nsIDOMNode> pNode;
    rv = pFault->GetDetail(getter_AddRefs(pTheDetail));
    NS_ENSURE_SUCCESS(rv,rv);
    rv = pTheDetail->GetFirstChild(getter_AddRefs(pNode));
    NS_ENSURE_SUCCESS(rv,rv);
    if (pNode) {
      nsCOMPtr<nsIDOMNamedNodeMap> pAttributes;
      nsCOMPtr<nsIDOMNode> pAttribute, pFirstNode;
      nsAutoString pNodeValue;
      rv = pNode->GetFirstChild(getter_AddRefs(pFirstNode));
      NS_ENSURE_SUCCESS(rv,rv);
      if (pFirstNode) {
        pFirstNode->GetNodeValue(pNodeValue);
        NS_ENSURE_SUCCESS(rv,rv);
        pDetail  = pNodeValue;
      }
      pNode->GetAttributes(getter_AddRefs(pAttributes));
      NS_ENSURE_SUCCESS(rv,rv);
      pAttributes->GetNamedItem(NS_LITERAL_STRING("code"), getter_AddRefs(pAttribute));
      NS_ENSURE_SUCCESS(rv,rv);
      if (pAttribute) {
        pAttribute->GetNodeValue(pNodeValue);
        NS_ENSURE_SUCCESS(rv,rv);
        pDetail += NS_LITERAL_STRING("\n(Erreur ");
        pDetail += pNodeValue;
        pDetail += NS_LITERAL_STRING(")");
      }
    } else pDetail = NS_LITERAL_STRING("Erreur sans message.");
    pFaute = pDetail;
    rv = pFault->GetFaultString(pTitle);
    NS_ENSURE_SUCCESS(rv,rv);
    nsCOMPtr<nsIPrompt> pPrompt= do_GetService(NS_DEFAULTPROMPT_CONTRACTID, &rv);
    NS_ENSURE_SUCCESS(rv,rv);
    pPrompt->Alert(ToNewUnicode(pTitle), ToNewUnicode(pFaute));
    return NS_ERROR_FAILURE;
  }

  nsISOAPParameter ** pParameters;
  PRUint32 pTotal;
  rv = aResponse->GetParameters(PR_FALSE, &pTotal, &pParameters);
  NS_ENSURE_SUCCESS(rv,rv);
  if (pTotal!=1) {
    nsCOMPtr<nsIPrompt> pPrompt= do_GetService(NS_DEFAULTPROMPT_CONTRACTID, &rv);
    NS_ENSURE_SUCCESS(rv,rv);
    pPrompt->Alert(ToNewUnicode(NS_LITERAL_CSTRING("Erreur système")), ToNewUnicode(NS_LITERAL_CSTRING("Le nombre total de paramètres reçus est incorrect.")));
    return NS_ERROR_FAILURE;
  }

  nsAutoString pText;
  nsCOMArray<nsIVariant> pArray;
  nsCOMPtr<nsIWritableVariant> pVariant;
  PRUint32 pLsize=0, pCsize=0;
  PRUint32 pLineIndex, pColIndex;
  PRUint16 pNodeType;
  nsCOMPtr<nsIDOMElement> pResult;
  nsCOMPtr<nsIDOMNodeList> pLines, pValues;
  nsCOMPtr<nsIDOMNode> pLine, pValue, pContent;
  rv = pParameters[0]->GetElement(getter_AddRefs(pResult));
  NS_ENSURE_SUCCESS(rv,rv);
  rv = pResult->GetChildNodes(getter_AddRefs(pLines));
  NS_ENSURE_SUCCESS(rv,rv);
  pLines->GetLength(&pLsize);
  for (pLineIndex=0;pLineIndex<pLsize;pLineIndex++) {
    do {
      rv = pLines->Item(pLineIndex, getter_AddRefs(pLine));
      NS_ENSURE_SUCCESS(rv,rv);
      pLine->GetNodeType(&pNodeType);
      if (pNodeType!=nsIDOMNode::ELEMENT_NODE) pLineIndex++;
    } while (pLineIndex<pLsize && pNodeType!=nsIDOMNode::ELEMENT_NODE);
    if (pLineIndex>=pLsize) break;
    rv = pLine->GetChildNodes(getter_AddRefs(pValues));
    NS_ENSURE_SUCCESS(rv,rv);
    pValues->GetLength(&pCsize);
    for (pColIndex=0;pColIndex<pCsize;pColIndex++) {
      do {
        rv = pValues->Item(pColIndex, getter_AddRefs(pValue));
        NS_ENSURE_SUCCESS(rv,rv);
        pValue->GetNodeType(&pNodeType);
        if (pNodeType!=nsIDOMNode::ELEMENT_NODE) pColIndex++;
      } while (pColIndex<pCsize && pNodeType!=nsIDOMNode::ELEMENT_NODE);
      if (pColIndex>=pCsize) break;
      rv = pValue->GetFirstChild(getter_AddRefs(pContent));
      NS_ENSURE_SUCCESS(rv,rv);
      pVariant = do_CreateInstance(NS_VARIANT_CONTRACTID, &rv);
      NS_ENSURE_SUCCESS(rv,rv);
      if (pContent) {
        rv = pContent->GetNodeValue(pText);
        NS_ENSURE_SUCCESS(rv,rv);
        pVariant->SetAsAString(pText);
        printf("%s|",ToNewCString(pText));
      } else {
        pVariant->SetAsAString(NS_LITERAL_STRING(""));
      }
      rv = pArray.AppendObject(pVariant);
    }
  }
  rv = mComponent->TreatP0067(pArray, pLsize, pCsize, mSearch);
  return rv;
}


/* Generated by Pygmalion */


NS_IMPL_ISUPPORTS1(mozListenerP0068, nsISOAPResponseListener)

mozListenerP0068::mozListenerP0068(mozC02gestsea* aComponent, const nsACString & aSearch)
{
  mComponent = aComponent;
  mSearch = aSearch;
}
mozListenerP0068::~mozListenerP0068()
{
}

NS_IMETHODIMP mozListenerP0068::HandleResponse(nsISOAPResponse *aResponse, nsISOAPCall *aCall, PRUint32 aStatus, PRBool aLast, PRBool *aReturn)
{
  nsresult rv;
  nsCOMPtr<nsISOAPFault> pFault;
  rv = aResponse->GetFault(getter_AddRefs(pFault));
  NS_ENSURE_SUCCESS(rv, rv);
  if (pFault) {
    nsAutoString pFaute, pDetail, pTitle;
    nsCOMPtr<nsIDOMElement> pTheDetail;
    nsCOMPtr<nsIDOMNode> pNode;
    rv = pFault->GetDetail(getter_AddRefs(pTheDetail));
    NS_ENSURE_SUCCESS(rv,rv);
    rv = pTheDetail->GetFirstChild(getter_AddRefs(pNode));
    NS_ENSURE_SUCCESS(rv,rv);
    if (pNode) {
      nsCOMPtr<nsIDOMNamedNodeMap> pAttributes;
      nsCOMPtr<nsIDOMNode> pAttribute, pFirstNode;
      nsAutoString pNodeValue;
      rv = pNode->GetFirstChild(getter_AddRefs(pFirstNode));
      NS_ENSURE_SUCCESS(rv,rv);
      if (pFirstNode) {
        pFirstNode->GetNodeValue(pNodeValue);
        NS_ENSURE_SUCCESS(rv,rv);
        pDetail  = pNodeValue;
      }
      pNode->GetAttributes(getter_AddRefs(pAttributes));
      NS_ENSURE_SUCCESS(rv,rv);
      pAttributes->GetNamedItem(NS_LITERAL_STRING("code"), getter_AddRefs(pAttribute));
      NS_ENSURE_SUCCESS(rv,rv);
      if (pAttribute) {
        pAttribute->GetNodeValue(pNodeValue);
        NS_ENSURE_SUCCESS(rv,rv);
        pDetail += NS_LITERAL_STRING("\n(Erreur ");
        pDetail += pNodeValue;
        pDetail += NS_LITERAL_STRING(")");
      }
    } else pDetail = NS_LITERAL_STRING("Erreur sans message.");
    pFaute = pDetail;
    rv = pFault->GetFaultString(pTitle);
    NS_ENSURE_SUCCESS(rv,rv);
    nsCOMPtr<nsIPrompt> pPrompt= do_GetService(NS_DEFAULTPROMPT_CONTRACTID, &rv);
    NS_ENSURE_SUCCESS(rv,rv);
    pPrompt->Alert(ToNewUnicode(pTitle), ToNewUnicode(pFaute));
    return NS_ERROR_FAILURE;
  }

  nsISOAPParameter ** pParameters;
  PRUint32 pTotal;
  rv = aResponse->GetParameters(PR_FALSE, &pTotal, &pParameters);
  NS_ENSURE_SUCCESS(rv,rv);
  if (pTotal!=1) {
    nsCOMPtr<nsIPrompt> pPrompt= do_GetService(NS_DEFAULTPROMPT_CONTRACTID, &rv);
    NS_ENSURE_SUCCESS(rv,rv);
    pPrompt->Alert(ToNewUnicode(NS_LITERAL_CSTRING("Erreur système")), ToNewUnicode(NS_LITERAL_CSTRING("Le nombre total de paramètres reçus est incorrect.")));
    return NS_ERROR_FAILURE;
  }

  nsAutoString pText;
  nsCOMArray<nsIVariant> pArray;
  nsCOMPtr<nsIWritableVariant> pVariant;
  PRUint32 pLsize=0, pCsize=0;
  PRUint32 pLineIndex, pColIndex;
  PRUint16 pNodeType;
  nsCOMPtr<nsIDOMElement> pResult;
  nsCOMPtr<nsIDOMNodeList> pLines, pValues;
  nsCOMPtr<nsIDOMNode> pLine, pValue, pContent;
  rv = pParameters[0]->GetElement(getter_AddRefs(pResult));
  NS_ENSURE_SUCCESS(rv,rv);
  rv = pResult->GetChildNodes(getter_AddRefs(pLines));
  NS_ENSURE_SUCCESS(rv,rv);
  pLines->GetLength(&pLsize);
  for (pLineIndex=0;pLineIndex<pLsize;pLineIndex++) {
    do {
      rv = pLines->Item(pLineIndex, getter_AddRefs(pLine));
      NS_ENSURE_SUCCESS(rv,rv);
      pLine->GetNodeType(&pNodeType);
      if (pNodeType!=nsIDOMNode::ELEMENT_NODE) pLineIndex++;
    } while (pLineIndex<pLsize && pNodeType!=nsIDOMNode::ELEMENT_NODE);
    if (pLineIndex>=pLsize) break;
    rv = pLine->GetChildNodes(getter_AddRefs(pValues));
    NS_ENSURE_SUCCESS(rv,rv);
    pValues->GetLength(&pCsize);
    for (pColIndex=0;pColIndex<pCsize;pColIndex++) {
      do {
        rv = pValues->Item(pColIndex, getter_AddRefs(pValue));
        NS_ENSURE_SUCCESS(rv,rv);
        pValue->GetNodeType(&pNodeType);
        if (pNodeType!=nsIDOMNode::ELEMENT_NODE) pColIndex++;
      } while (pColIndex<pCsize && pNodeType!=nsIDOMNode::ELEMENT_NODE);
      if (pColIndex>=pCsize) break;
      rv = pValue->GetFirstChild(getter_AddRefs(pContent));
      NS_ENSURE_SUCCESS(rv,rv);
      pVariant = do_CreateInstance(NS_VARIANT_CONTRACTID, &rv);
      NS_ENSURE_SUCCESS(rv,rv);
      if (pContent) {
        rv = pContent->GetNodeValue(pText);
        NS_ENSURE_SUCCESS(rv,rv);
        pVariant->SetAsAString(pText);
        printf("%s|",ToNewCString(pText));
      } else {
        pVariant->SetAsAString(NS_LITERAL_STRING(""));
      }
      rv = pArray.AppendObject(pVariant);
    }
  }
  rv = mComponent->TreatP0068(pArray, pLsize, pCsize, mSearch);
  return rv;
}


/* Generated by Pygmalion */


NS_IMPL_ISUPPORTS1(mozListenerP0069, nsISOAPResponseListener)

mozListenerP0069::mozListenerP0069(mozC02gestsea* aComponent, const nsAString & aKey)
{
  mComponent = aComponent;
  mKey = aKey;
}
mozListenerP0069::~mozListenerP0069()
{
}

NS_IMETHODIMP mozListenerP0069::HandleResponse(nsISOAPResponse *aResponse, nsISOAPCall *aCall, PRUint32 aStatus, PRBool aLast, PRBool *aReturn)
{
  nsresult rv;
  nsCOMPtr<nsISOAPFault> pFault;
  rv = aResponse->GetFault(getter_AddRefs(pFault));
  NS_ENSURE_SUCCESS(rv, rv);
  if (pFault) {
    nsAutoString pFaute, pDetail, pTitle;
    nsCOMPtr<nsIDOMElement> pTheDetail;
    nsCOMPtr<nsIDOMNode> pNode;
    rv = pFault->GetDetail(getter_AddRefs(pTheDetail));
    NS_ENSURE_SUCCESS(rv,rv);
    rv = pTheDetail->GetFirstChild(getter_AddRefs(pNode));
    NS_ENSURE_SUCCESS(rv,rv);
    if (pNode) {
      nsCOMPtr<nsIDOMNamedNodeMap> pAttributes;
      nsCOMPtr<nsIDOMNode> pAttribute, pFirstNode;
      nsAutoString pNodeValue;
      rv = pNode->GetFirstChild(getter_AddRefs(pFirstNode));
      NS_ENSURE_SUCCESS(rv,rv);
      if (pFirstNode) {
        pFirstNode->GetNodeValue(pNodeValue);
        NS_ENSURE_SUCCESS(rv,rv);
        pDetail  = pNodeValue;
      }
      pNode->GetAttributes(getter_AddRefs(pAttributes));
      NS_ENSURE_SUCCESS(rv,rv);
      pAttributes->GetNamedItem(NS_LITERAL_STRING("code"), getter_AddRefs(pAttribute));
      NS_ENSURE_SUCCESS(rv,rv);
      if (pAttribute) {
        pAttribute->GetNodeValue(pNodeValue);
        NS_ENSURE_SUCCESS(rv,rv);
        pDetail += NS_LITERAL_STRING("\n(Erreur ");
        pDetail += pNodeValue;
        pDetail += NS_LITERAL_STRING(")");
      }
    } else pDetail = NS_LITERAL_STRING("Erreur sans message.");
    pFaute = pDetail;
    rv = pFault->GetFaultString(pTitle);
    NS_ENSURE_SUCCESS(rv,rv);
    nsCOMPtr<nsIPrompt> pPrompt= do_GetService(NS_DEFAULTPROMPT_CONTRACTID, &rv);
    NS_ENSURE_SUCCESS(rv,rv);
    pPrompt->Alert(ToNewUnicode(pTitle), ToNewUnicode(pFaute));
    return NS_ERROR_FAILURE;
  }

  nsISOAPParameter ** pParameters;
  PRUint32 pTotal;
  rv = aResponse->GetParameters(PR_FALSE, &pTotal, &pParameters);
  NS_ENSURE_SUCCESS(rv,rv);
  if (pTotal!=1) {
    nsCOMPtr<nsIPrompt> pPrompt= do_GetService(NS_DEFAULTPROMPT_CONTRACTID, &rv);
    NS_ENSURE_SUCCESS(rv,rv);
    pPrompt->Alert(ToNewUnicode(NS_LITERAL_CSTRING("Erreur système")), ToNewUnicode(NS_LITERAL_CSTRING("Le nombre total de paramètres reçus est incorrect.")));
    return NS_ERROR_FAILURE;
  }

  nsAutoString pText;
  nsCOMArray<nsIVariant> pArray;
  nsCOMPtr<nsIWritableVariant> pVariant;
  PRUint32 pLsize=0, pCsize=0;
  PRUint32 pLineIndex, pColIndex;
  PRUint16 pNodeType;
  nsCOMPtr<nsIDOMElement> pResult;
  nsCOMPtr<nsIDOMNodeList> pLines, pValues;
  nsCOMPtr<nsIDOMNode> pLine, pValue, pContent;
  rv = pParameters[0]->GetElement(getter_AddRefs(pResult));
  NS_ENSURE_SUCCESS(rv,rv);
  rv = pResult->GetChildNodes(getter_AddRefs(pLines));
  NS_ENSURE_SUCCESS(rv,rv);
  pLines->GetLength(&pLsize);
  for (pLineIndex=0;pLineIndex<pLsize;pLineIndex++) {
    do {
      rv = pLines->Item(pLineIndex, getter_AddRefs(pLine));
      NS_ENSURE_SUCCESS(rv,rv);
      pLine->GetNodeType(&pNodeType);
      if (pNodeType!=nsIDOMNode::ELEMENT_NODE) pLineIndex++;
    } while (pLineIndex<pLsize && pNodeType!=nsIDOMNode::ELEMENT_NODE);
    if (pLineIndex>=pLsize) break;
    rv = pLine->GetChildNodes(getter_AddRefs(pValues));
    NS_ENSURE_SUCCESS(rv,rv);
    pValues->GetLength(&pCsize);
    for (pColIndex=0;pColIndex<pCsize;pColIndex++) {
      do {
        rv = pValues->Item(pColIndex, getter_AddRefs(pValue));
        NS_ENSURE_SUCCESS(rv,rv);
        pValue->GetNodeType(&pNodeType);
        if (pNodeType!=nsIDOMNode::ELEMENT_NODE) pColIndex++;
      } while (pColIndex<pCsize && pNodeType!=nsIDOMNode::ELEMENT_NODE);
      if (pColIndex>=pCsize) break;
      rv = pValue->GetFirstChild(getter_AddRefs(pContent));
      NS_ENSURE_SUCCESS(rv,rv);
      pVariant = do_CreateInstance(NS_VARIANT_CONTRACTID, &rv);
      NS_ENSURE_SUCCESS(rv,rv);
      if (pContent) {
        rv = pContent->GetNodeValue(pText);
        NS_ENSURE_SUCCESS(rv,rv);
        pVariant->SetAsAString(pText);
        printf("%s|",ToNewCString(pText));
      } else {
        pVariant->SetAsAString(NS_LITERAL_STRING(""));
      }
      rv = pArray.AppendObject(pVariant);
    }
  }
  rv = mComponent->TreatP0069(pArray, pLsize, pCsize, mKey);
  return rv;
}


/* Generated by Pygmalion */


NS_IMPL_ISUPPORTS1(mozListenerP006A, nsISOAPResponseListener)

mozListenerP006A::mozListenerP006A(mozC02gestsea* aComponent, const nsACString & aSearch)
{
  mComponent = aComponent;
  mSearch = aSearch;
}
mozListenerP006A::~mozListenerP006A()
{
}

NS_IMETHODIMP mozListenerP006A::HandleResponse(nsISOAPResponse *aResponse, nsISOAPCall *aCall, PRUint32 aStatus, PRBool aLast, PRBool *aReturn)
{
  nsresult rv;
  nsCOMPtr<nsISOAPFault> pFault;
  rv = aResponse->GetFault(getter_AddRefs(pFault));
  NS_ENSURE_SUCCESS(rv, rv);
  if (pFault) {
    nsAutoString pFaute, pDetail, pTitle;
    nsCOMPtr<nsIDOMElement> pTheDetail;
    nsCOMPtr<nsIDOMNode> pNode;
    rv = pFault->GetDetail(getter_AddRefs(pTheDetail));
    NS_ENSURE_SUCCESS(rv,rv);
    rv = pTheDetail->GetFirstChild(getter_AddRefs(pNode));
    NS_ENSURE_SUCCESS(rv,rv);
    if (pNode) {
      nsCOMPtr<nsIDOMNamedNodeMap> pAttributes;
      nsCOMPtr<nsIDOMNode> pAttribute, pFirstNode;
      nsAutoString pNodeValue;
      rv = pNode->GetFirstChild(getter_AddRefs(pFirstNode));
      NS_ENSURE_SUCCESS(rv,rv);
      if (pFirstNode) {
        pFirstNode->GetNodeValue(pNodeValue);
        NS_ENSURE_SUCCESS(rv,rv);
        pDetail  = pNodeValue;
      }
      pNode->GetAttributes(getter_AddRefs(pAttributes));
      NS_ENSURE_SUCCESS(rv,rv);
      pAttributes->GetNamedItem(NS_LITERAL_STRING("code"), getter_AddRefs(pAttribute));
      NS_ENSURE_SUCCESS(rv,rv);
      if (pAttribute) {
        pAttribute->GetNodeValue(pNodeValue);
        NS_ENSURE_SUCCESS(rv,rv);
        pDetail += NS_LITERAL_STRING("\n(Erreur ");
        pDetail += pNodeValue;
        pDetail += NS_LITERAL_STRING(")");
      }
    } else pDetail = NS_LITERAL_STRING("Erreur sans message.");
    pFaute = pDetail;
    rv = pFault->GetFaultString(pTitle);
    NS_ENSURE_SUCCESS(rv,rv);
    nsCOMPtr<nsIPrompt> pPrompt= do_GetService(NS_DEFAULTPROMPT_CONTRACTID, &rv);
    NS_ENSURE_SUCCESS(rv,rv);
    pPrompt->Alert(ToNewUnicode(pTitle), ToNewUnicode(pFaute));
    return NS_ERROR_FAILURE;
  }

  nsISOAPParameter ** pParameters;
  PRUint32 pTotal;
  rv = aResponse->GetParameters(PR_FALSE, &pTotal, &pParameters);
  NS_ENSURE_SUCCESS(rv,rv);
  if (pTotal!=1) {
    nsCOMPtr<nsIPrompt> pPrompt= do_GetService(NS_DEFAULTPROMPT_CONTRACTID, &rv);
    NS_ENSURE_SUCCESS(rv,rv);
    pPrompt->Alert(ToNewUnicode(NS_LITERAL_CSTRING("Erreur système")), ToNewUnicode(NS_LITERAL_CSTRING("Le nombre total de paramètres reçus est incorrect.")));
    return NS_ERROR_FAILURE;
  }

  nsAutoString pText;
  nsCOMArray<nsIVariant> pArray;
  nsCOMPtr<nsIWritableVariant> pVariant;
  PRUint32 pLsize=0, pCsize=0;
  PRUint32 pLineIndex, pColIndex;
  PRUint16 pNodeType;
  nsCOMPtr<nsIDOMElement> pResult;
  nsCOMPtr<nsIDOMNodeList> pLines, pValues;
  nsCOMPtr<nsIDOMNode> pLine, pValue, pContent;
  rv = pParameters[0]->GetElement(getter_AddRefs(pResult));
  NS_ENSURE_SUCCESS(rv,rv);
  rv = pResult->GetChildNodes(getter_AddRefs(pLines));
  NS_ENSURE_SUCCESS(rv,rv);
  pLines->GetLength(&pLsize);
  for (pLineIndex=0;pLineIndex<pLsize;pLineIndex++) {
    do {
      rv = pLines->Item(pLineIndex, getter_AddRefs(pLine));
      NS_ENSURE_SUCCESS(rv,rv);
      pLine->GetNodeType(&pNodeType);
      if (pNodeType!=nsIDOMNode::ELEMENT_NODE) pLineIndex++;
    } while (pLineIndex<pLsize && pNodeType!=nsIDOMNode::ELEMENT_NODE);
    if (pLineIndex>=pLsize) break;
    rv = pLine->GetChildNodes(getter_AddRefs(pValues));
    NS_ENSURE_SUCCESS(rv,rv);
    pValues->GetLength(&pCsize);
    for (pColIndex=0;pColIndex<pCsize;pColIndex++) {
      do {
        rv = pValues->Item(pColIndex, getter_AddRefs(pValue));
        NS_ENSURE_SUCCESS(rv,rv);
        pValue->GetNodeType(&pNodeType);
        if (pNodeType!=nsIDOMNode::ELEMENT_NODE) pColIndex++;
      } while (pColIndex<pCsize && pNodeType!=nsIDOMNode::ELEMENT_NODE);
      if (pColIndex>=pCsize) break;
      rv = pValue->GetFirstChild(getter_AddRefs(pContent));
      NS_ENSURE_SUCCESS(rv,rv);
      pVariant = do_CreateInstance(NS_VARIANT_CONTRACTID, &rv);
      NS_ENSURE_SUCCESS(rv,rv);
      if (pContent) {
        rv = pContent->GetNodeValue(pText);
        NS_ENSURE_SUCCESS(rv,rv);
        pVariant->SetAsAString(pText);
        printf("%s|",ToNewCString(pText));
      } else {
        pVariant->SetAsAString(NS_LITERAL_STRING(""));
      }
      rv = pArray.AppendObject(pVariant);
    }
  }
  rv = mComponent->TreatP006A(pArray, pLsize, pCsize, mSearch);
  return rv;
}


/* Generated by Pygmalion */


NS_IMPL_ISUPPORTS1(mozListenerP006B, nsISOAPResponseListener)

mozListenerP006B::mozListenerP006B(mozC02gestsea* aComponent, const nsACString & aSearch)
{
  mComponent = aComponent;
  mSearch = aSearch;
}
mozListenerP006B::~mozListenerP006B()
{
}

NS_IMETHODIMP mozListenerP006B::HandleResponse(nsISOAPResponse *aResponse, nsISOAPCall *aCall, PRUint32 aStatus, PRBool aLast, PRBool *aReturn)
{
  nsresult rv;
  nsCOMPtr<nsISOAPFault> pFault;
  rv = aResponse->GetFault(getter_AddRefs(pFault));
  NS_ENSURE_SUCCESS(rv, rv);
  if (pFault) {
    nsAutoString pFaute, pDetail, pTitle;
    nsCOMPtr<nsIDOMElement> pTheDetail;
    nsCOMPtr<nsIDOMNode> pNode;
    rv = pFault->GetDetail(getter_AddRefs(pTheDetail));
    NS_ENSURE_SUCCESS(rv,rv);
    rv = pTheDetail->GetFirstChild(getter_AddRefs(pNode));
    NS_ENSURE_SUCCESS(rv,rv);
    if (pNode) {
      nsCOMPtr<nsIDOMNamedNodeMap> pAttributes;
      nsCOMPtr<nsIDOMNode> pAttribute, pFirstNode;
      nsAutoString pNodeValue;
      rv = pNode->GetFirstChild(getter_AddRefs(pFirstNode));
      NS_ENSURE_SUCCESS(rv,rv);
      if (pFirstNode) {
        pFirstNode->GetNodeValue(pNodeValue);
        NS_ENSURE_SUCCESS(rv,rv);
        pDetail  = pNodeValue;
      }
      pNode->GetAttributes(getter_AddRefs(pAttributes));
      NS_ENSURE_SUCCESS(rv,rv);
      pAttributes->GetNamedItem(NS_LITERAL_STRING("code"), getter_AddRefs(pAttribute));
      NS_ENSURE_SUCCESS(rv,rv);
      if (pAttribute) {
        pAttribute->GetNodeValue(pNodeValue);
        NS_ENSURE_SUCCESS(rv,rv);
        pDetail += NS_LITERAL_STRING("\n(Erreur ");
        pDetail += pNodeValue;
        pDetail += NS_LITERAL_STRING(")");
      }
    } else pDetail = NS_LITERAL_STRING("Erreur sans message.");
    pFaute = pDetail;
    rv = pFault->GetFaultString(pTitle);
    NS_ENSURE_SUCCESS(rv,rv);
    nsCOMPtr<nsIPrompt> pPrompt= do_GetService(NS_DEFAULTPROMPT_CONTRACTID, &rv);
    NS_ENSURE_SUCCESS(rv,rv);
    pPrompt->Alert(ToNewUnicode(pTitle), ToNewUnicode(pFaute));
    return NS_ERROR_FAILURE;
  }

  nsISOAPParameter ** pParameters;
  PRUint32 pTotal;
  rv = aResponse->GetParameters(PR_FALSE, &pTotal, &pParameters);
  NS_ENSURE_SUCCESS(rv,rv);
  if (pTotal!=1) {
    nsCOMPtr<nsIPrompt> pPrompt= do_GetService(NS_DEFAULTPROMPT_CONTRACTID, &rv);
    NS_ENSURE_SUCCESS(rv,rv);
    pPrompt->Alert(ToNewUnicode(NS_LITERAL_CSTRING("Erreur système")), ToNewUnicode(NS_LITERAL_CSTRING("Le nombre total de paramètres reçus est incorrect.")));
    return NS_ERROR_FAILURE;
  }

  nsAutoString pText;
  nsCOMArray<nsIVariant> pArray;
  nsCOMPtr<nsIWritableVariant> pVariant;
  PRUint32 pLsize=0, pCsize=0;
  PRUint32 pLineIndex, pColIndex;
  PRUint16 pNodeType;
  nsCOMPtr<nsIDOMElement> pResult;
  nsCOMPtr<nsIDOMNodeList> pLines, pValues;
  nsCOMPtr<nsIDOMNode> pLine, pValue, pContent;
  rv = pParameters[0]->GetElement(getter_AddRefs(pResult));
  NS_ENSURE_SUCCESS(rv,rv);
  rv = pResult->GetChildNodes(getter_AddRefs(pLines));
  NS_ENSURE_SUCCESS(rv,rv);
  pLines->GetLength(&pLsize);
  for (pLineIndex=0;pLineIndex<pLsize;pLineIndex++) {
    do {
      rv = pLines->Item(pLineIndex, getter_AddRefs(pLine));
      NS_ENSURE_SUCCESS(rv,rv);
      pLine->GetNodeType(&pNodeType);
      if (pNodeType!=nsIDOMNode::ELEMENT_NODE) pLineIndex++;
    } while (pLineIndex<pLsize && pNodeType!=nsIDOMNode::ELEMENT_NODE);
    if (pLineIndex>=pLsize) break;
    rv = pLine->GetChildNodes(getter_AddRefs(pValues));
    NS_ENSURE_SUCCESS(rv,rv);
    pValues->GetLength(&pCsize);
    for (pColIndex=0;pColIndex<pCsize;pColIndex++) {
      do {
        rv = pValues->Item(pColIndex, getter_AddRefs(pValue));
        NS_ENSURE_SUCCESS(rv,rv);
        pValue->GetNodeType(&pNodeType);
        if (pNodeType!=nsIDOMNode::ELEMENT_NODE) pColIndex++;
      } while (pColIndex<pCsize && pNodeType!=nsIDOMNode::ELEMENT_NODE);
      if (pColIndex>=pCsize) break;
      rv = pValue->GetFirstChild(getter_AddRefs(pContent));
      NS_ENSURE_SUCCESS(rv,rv);
      pVariant = do_CreateInstance(NS_VARIANT_CONTRACTID, &rv);
      NS_ENSURE_SUCCESS(rv,rv);
      if (pContent) {
        rv = pContent->GetNodeValue(pText);
        NS_ENSURE_SUCCESS(rv,rv);
        pVariant->SetAsAString(pText);
        printf("%s|",ToNewCString(pText));
      } else {
        pVariant->SetAsAString(NS_LITERAL_STRING(""));
      }
      rv = pArray.AppendObject(pVariant);
    }
  }
  rv = mComponent->TreatP006B(pArray, pLsize, pCsize, mSearch);
  return rv;
}


/* Generated by Pygmalion */


NS_IMPL_ISUPPORTS1(mozListenerP006C, nsISOAPResponseListener)

mozListenerP006C::mozListenerP006C(mozC02gestsea* aComponent, const nsAString & aKey)
{
  mComponent = aComponent;
  mKey = aKey;
}
mozListenerP006C::~mozListenerP006C()
{
}

NS_IMETHODIMP mozListenerP006C::HandleResponse(nsISOAPResponse *aResponse, nsISOAPCall *aCall, PRUint32 aStatus, PRBool aLast, PRBool *aReturn)
{
  nsresult rv;
  nsCOMPtr<nsISOAPFault> pFault;
  rv = aResponse->GetFault(getter_AddRefs(pFault));
  NS_ENSURE_SUCCESS(rv, rv);
  if (pFault) {
    nsAutoString pFaute, pDetail, pTitle;
    nsCOMPtr<nsIDOMElement> pTheDetail;
    nsCOMPtr<nsIDOMNode> pNode;
    rv = pFault->GetDetail(getter_AddRefs(pTheDetail));
    NS_ENSURE_SUCCESS(rv,rv);
    rv = pTheDetail->GetFirstChild(getter_AddRefs(pNode));
    NS_ENSURE_SUCCESS(rv,rv);
    if (pNode) {
      nsCOMPtr<nsIDOMNamedNodeMap> pAttributes;
      nsCOMPtr<nsIDOMNode> pAttribute, pFirstNode;
      nsAutoString pNodeValue;
      rv = pNode->GetFirstChild(getter_AddRefs(pFirstNode));
      NS_ENSURE_SUCCESS(rv,rv);
      if (pFirstNode) {
        pFirstNode->GetNodeValue(pNodeValue);
        NS_ENSURE_SUCCESS(rv,rv);
        pDetail  = pNodeValue;
      }
      pNode->GetAttributes(getter_AddRefs(pAttributes));
      NS_ENSURE_SUCCESS(rv,rv);
      pAttributes->GetNamedItem(NS_LITERAL_STRING("code"), getter_AddRefs(pAttribute));
      NS_ENSURE_SUCCESS(rv,rv);
      if (pAttribute) {
        pAttribute->GetNodeValue(pNodeValue);
        NS_ENSURE_SUCCESS(rv,rv);
        pDetail += NS_LITERAL_STRING("\n(Erreur ");
        pDetail += pNodeValue;
        pDetail += NS_LITERAL_STRING(")");
      }
    } else pDetail = NS_LITERAL_STRING("Erreur sans message.");
    pFaute = pDetail;
    rv = pFault->GetFaultString(pTitle);
    NS_ENSURE_SUCCESS(rv,rv);
    nsCOMPtr<nsIPrompt> pPrompt= do_GetService(NS_DEFAULTPROMPT_CONTRACTID, &rv);
    NS_ENSURE_SUCCESS(rv,rv);
    pPrompt->Alert(ToNewUnicode(pTitle), ToNewUnicode(pFaute));
    return NS_ERROR_FAILURE;
  }

  nsISOAPParameter ** pParameters;
  PRUint32 pTotal;
  rv = aResponse->GetParameters(PR_FALSE, &pTotal, &pParameters);
  NS_ENSURE_SUCCESS(rv,rv);
  if (pTotal!=1) {
    nsCOMPtr<nsIPrompt> pPrompt= do_GetService(NS_DEFAULTPROMPT_CONTRACTID, &rv);
    NS_ENSURE_SUCCESS(rv,rv);
    pPrompt->Alert(ToNewUnicode(NS_LITERAL_CSTRING("Erreur système")), ToNewUnicode(NS_LITERAL_CSTRING("Le nombre total de paramètres reçus est incorrect.")));
    return NS_ERROR_FAILURE;
  }

  nsAutoString pText;
  nsCOMArray<nsIVariant> pArray;
  nsCOMPtr<nsIWritableVariant> pVariant;
  PRUint32 pLsize=0, pCsize=0;
  PRUint32 pLineIndex, pColIndex;
  PRUint16 pNodeType;
  nsCOMPtr<nsIDOMElement> pResult;
  nsCOMPtr<nsIDOMNodeList> pLines, pValues;
  nsCOMPtr<nsIDOMNode> pLine, pValue, pContent;
  rv = pParameters[0]->GetElement(getter_AddRefs(pResult));
  NS_ENSURE_SUCCESS(rv,rv);
  rv = pResult->GetChildNodes(getter_AddRefs(pLines));
  NS_ENSURE_SUCCESS(rv,rv);
  pLines->GetLength(&pLsize);
  for (pLineIndex=0;pLineIndex<pLsize;pLineIndex++) {
    do {
      rv = pLines->Item(pLineIndex, getter_AddRefs(pLine));
      NS_ENSURE_SUCCESS(rv,rv);
      pLine->GetNodeType(&pNodeType);
      if (pNodeType!=nsIDOMNode::ELEMENT_NODE) pLineIndex++;
    } while (pLineIndex<pLsize && pNodeType!=nsIDOMNode::ELEMENT_NODE);
    if (pLineIndex>=pLsize) break;
    rv = pLine->GetChildNodes(getter_AddRefs(pValues));
    NS_ENSURE_SUCCESS(rv,rv);
    pValues->GetLength(&pCsize);
    for (pColIndex=0;pColIndex<pCsize;pColIndex++) {
      do {
        rv = pValues->Item(pColIndex, getter_AddRefs(pValue));
        NS_ENSURE_SUCCESS(rv,rv);
        pValue->GetNodeType(&pNodeType);
        if (pNodeType!=nsIDOMNode::ELEMENT_NODE) pColIndex++;
      } while (pColIndex<pCsize && pNodeType!=nsIDOMNode::ELEMENT_NODE);
      if (pColIndex>=pCsize) break;
      rv = pValue->GetFirstChild(getter_AddRefs(pContent));
      NS_ENSURE_SUCCESS(rv,rv);
      pVariant = do_CreateInstance(NS_VARIANT_CONTRACTID, &rv);
      NS_ENSURE_SUCCESS(rv,rv);
      if (pContent) {
        rv = pContent->GetNodeValue(pText);
        NS_ENSURE_SUCCESS(rv,rv);
        pVariant->SetAsAString(pText);
        printf("%s|",ToNewCString(pText));
      } else {
        pVariant->SetAsAString(NS_LITERAL_STRING(""));
      }
      rv = pArray.AppendObject(pVariant);
    }
  }
  rv = mComponent->TreatP006C(pArray, pLsize, pCsize, mKey);
  return rv;
}


/* Generated by Pygmalion */


NS_IMPL_ISUPPORTS1(mozListenerP006D, nsISOAPResponseListener)

mozListenerP006D::mozListenerP006D(mozC02gestsea* aComponent, const nsACString & aSearch)
{
  mComponent = aComponent;
  mSearch = aSearch;
}
mozListenerP006D::~mozListenerP006D()
{
}

NS_IMETHODIMP mozListenerP006D::HandleResponse(nsISOAPResponse *aResponse, nsISOAPCall *aCall, PRUint32 aStatus, PRBool aLast, PRBool *aReturn)
{
  nsresult rv;
  nsCOMPtr<nsISOAPFault> pFault;
  rv = aResponse->GetFault(getter_AddRefs(pFault));
  NS_ENSURE_SUCCESS(rv, rv);
  if (pFault) {
    nsAutoString pFaute, pDetail, pTitle;
    nsCOMPtr<nsIDOMElement> pTheDetail;
    nsCOMPtr<nsIDOMNode> pNode;
    rv = pFault->GetDetail(getter_AddRefs(pTheDetail));
    NS_ENSURE_SUCCESS(rv,rv);
    rv = pTheDetail->GetFirstChild(getter_AddRefs(pNode));
    NS_ENSURE_SUCCESS(rv,rv);
    if (pNode) {
      nsCOMPtr<nsIDOMNamedNodeMap> pAttributes;
      nsCOMPtr<nsIDOMNode> pAttribute, pFirstNode;
      nsAutoString pNodeValue;
      rv = pNode->GetFirstChild(getter_AddRefs(pFirstNode));
      NS_ENSURE_SUCCESS(rv,rv);
      if (pFirstNode) {
        pFirstNode->GetNodeValue(pNodeValue);
        NS_ENSURE_SUCCESS(rv,rv);
        pDetail  = pNodeValue;
      }
      pNode->GetAttributes(getter_AddRefs(pAttributes));
      NS_ENSURE_SUCCESS(rv,rv);
      pAttributes->GetNamedItem(NS_LITERAL_STRING("code"), getter_AddRefs(pAttribute));
      NS_ENSURE_SUCCESS(rv,rv);
      if (pAttribute) {
        pAttribute->GetNodeValue(pNodeValue);
        NS_ENSURE_SUCCESS(rv,rv);
        pDetail += NS_LITERAL_STRING("\n(Erreur ");
        pDetail += pNodeValue;
        pDetail += NS_LITERAL_STRING(")");
      }
    } else pDetail = NS_LITERAL_STRING("Erreur sans message.");
    pFaute = pDetail;
    rv = pFault->GetFaultString(pTitle);
    NS_ENSURE_SUCCESS(rv,rv);
    nsCOMPtr<nsIPrompt> pPrompt= do_GetService(NS_DEFAULTPROMPT_CONTRACTID, &rv);
    NS_ENSURE_SUCCESS(rv,rv);
    pPrompt->Alert(ToNewUnicode(pTitle), ToNewUnicode(pFaute));
    return NS_ERROR_FAILURE;
  }

  nsISOAPParameter ** pParameters;
  PRUint32 pTotal;
  rv = aResponse->GetParameters(PR_FALSE, &pTotal, &pParameters);
  NS_ENSURE_SUCCESS(rv,rv);
  if (pTotal!=1) {
    nsCOMPtr<nsIPrompt> pPrompt= do_GetService(NS_DEFAULTPROMPT_CONTRACTID, &rv);
    NS_ENSURE_SUCCESS(rv,rv);
    pPrompt->Alert(ToNewUnicode(NS_LITERAL_CSTRING("Erreur système")), ToNewUnicode(NS_LITERAL_CSTRING("Le nombre total de paramètres reçus est incorrect.")));
    return NS_ERROR_FAILURE;
  }

  nsAutoString pText;
  nsCOMArray<nsIVariant> pArray;
  nsCOMPtr<nsIWritableVariant> pVariant;
  PRUint32 pLsize=0, pCsize=0;
  PRUint32 pLineIndex, pColIndex;
  PRUint16 pNodeType;
  nsCOMPtr<nsIDOMElement> pResult;
  nsCOMPtr<nsIDOMNodeList> pLines, pValues;
  nsCOMPtr<nsIDOMNode> pLine, pValue, pContent;
  rv = pParameters[0]->GetElement(getter_AddRefs(pResult));
  NS_ENSURE_SUCCESS(rv,rv);
  rv = pResult->GetChildNodes(getter_AddRefs(pLines));
  NS_ENSURE_SUCCESS(rv,rv);
  pLines->GetLength(&pLsize);
  for (pLineIndex=0;pLineIndex<pLsize;pLineIndex++) {
    do {
      rv = pLines->Item(pLineIndex, getter_AddRefs(pLine));
      NS_ENSURE_SUCCESS(rv,rv);
      pLine->GetNodeType(&pNodeType);
      if (pNodeType!=nsIDOMNode::ELEMENT_NODE) pLineIndex++;
    } while (pLineIndex<pLsize && pNodeType!=nsIDOMNode::ELEMENT_NODE);
    if (pLineIndex>=pLsize) break;
    rv = pLine->GetChildNodes(getter_AddRefs(pValues));
    NS_ENSURE_SUCCESS(rv,rv);
    pValues->GetLength(&pCsize);
    for (pColIndex=0;pColIndex<pCsize;pColIndex++) {
      do {
        rv = pValues->Item(pColIndex, getter_AddRefs(pValue));
        NS_ENSURE_SUCCESS(rv,rv);
        pValue->GetNodeType(&pNodeType);
        if (pNodeType!=nsIDOMNode::ELEMENT_NODE) pColIndex++;
      } while (pColIndex<pCsize && pNodeType!=nsIDOMNode::ELEMENT_NODE);
      if (pColIndex>=pCsize) break;
      rv = pValue->GetFirstChild(getter_AddRefs(pContent));
      NS_ENSURE_SUCCESS(rv,rv);
      pVariant = do_CreateInstance(NS_VARIANT_CONTRACTID, &rv);
      NS_ENSURE_SUCCESS(rv,rv);
      if (pContent) {
        rv = pContent->GetNodeValue(pText);
        NS_ENSURE_SUCCESS(rv,rv);
        pVariant->SetAsAString(pText);
        printf("%s|",ToNewCString(pText));
      } else {
        pVariant->SetAsAString(NS_LITERAL_STRING(""));
      }
      rv = pArray.AppendObject(pVariant);
    }
  }
  rv = mComponent->TreatP006D(pArray, pLsize, pCsize, mSearch);
  return rv;
}


/* Generated by Pygmalion */


NS_IMPL_ISUPPORTS1(mozListenerP006E, nsISOAPResponseListener)

mozListenerP006E::mozListenerP006E(mozC02gestsea* aComponent, const nsACString & aSearch)
{
  mComponent = aComponent;
  mSearch = aSearch;
}
mozListenerP006E::~mozListenerP006E()
{
}

NS_IMETHODIMP mozListenerP006E::HandleResponse(nsISOAPResponse *aResponse, nsISOAPCall *aCall, PRUint32 aStatus, PRBool aLast, PRBool *aReturn)
{
  nsresult rv;
  nsCOMPtr<nsISOAPFault> pFault;
  rv = aResponse->GetFault(getter_AddRefs(pFault));
  NS_ENSURE_SUCCESS(rv, rv);
  if (pFault) {
    nsAutoString pFaute, pDetail, pTitle;
    nsCOMPtr<nsIDOMElement> pTheDetail;
    nsCOMPtr<nsIDOMNode> pNode;
    rv = pFault->GetDetail(getter_AddRefs(pTheDetail));
    NS_ENSURE_SUCCESS(rv,rv);
    rv = pTheDetail->GetFirstChild(getter_AddRefs(pNode));
    NS_ENSURE_SUCCESS(rv,rv);
    if (pNode) {
      nsCOMPtr<nsIDOMNamedNodeMap> pAttributes;
      nsCOMPtr<nsIDOMNode> pAttribute, pFirstNode;
      nsAutoString pNodeValue;
      rv = pNode->GetFirstChild(getter_AddRefs(pFirstNode));
      NS_ENSURE_SUCCESS(rv,rv);
      if (pFirstNode) {
        pFirstNode->GetNodeValue(pNodeValue);
        NS_ENSURE_SUCCESS(rv,rv);
        pDetail  = pNodeValue;
      }
      pNode->GetAttributes(getter_AddRefs(pAttributes));
      NS_ENSURE_SUCCESS(rv,rv);
      pAttributes->GetNamedItem(NS_LITERAL_STRING("code"), getter_AddRefs(pAttribute));
      NS_ENSURE_SUCCESS(rv,rv);
      if (pAttribute) {
        pAttribute->GetNodeValue(pNodeValue);
        NS_ENSURE_SUCCESS(rv,rv);
        pDetail += NS_LITERAL_STRING("\n(Erreur ");
        pDetail += pNodeValue;
        pDetail += NS_LITERAL_STRING(")");
      }
    } else pDetail = NS_LITERAL_STRING("Erreur sans message.");
    pFaute = pDetail;
    rv = pFault->GetFaultString(pTitle);
    NS_ENSURE_SUCCESS(rv,rv);
    nsCOMPtr<nsIPrompt> pPrompt= do_GetService(NS_DEFAULTPROMPT_CONTRACTID, &rv);
    NS_ENSURE_SUCCESS(rv,rv);
    pPrompt->Alert(ToNewUnicode(pTitle), ToNewUnicode(pFaute));
    return NS_ERROR_FAILURE;
  }

  nsISOAPParameter ** pParameters;
  PRUint32 pTotal;
  rv = aResponse->GetParameters(PR_FALSE, &pTotal, &pParameters);
  NS_ENSURE_SUCCESS(rv,rv);
  if (pTotal!=1) {
    nsCOMPtr<nsIPrompt> pPrompt= do_GetService(NS_DEFAULTPROMPT_CONTRACTID, &rv);
    NS_ENSURE_SUCCESS(rv,rv);
    pPrompt->Alert(ToNewUnicode(NS_LITERAL_CSTRING("Erreur système")), ToNewUnicode(NS_LITERAL_CSTRING("Le nombre total de paramètres reçus est incorrect.")));
    return NS_ERROR_FAILURE;
  }

  nsAutoString pText;
  nsCOMArray<nsIVariant> pArray;
  nsCOMPtr<nsIWritableVariant> pVariant;
  PRUint32 pLsize=0, pCsize=0;
  PRUint32 pLineIndex, pColIndex;
  PRUint16 pNodeType;
  nsCOMPtr<nsIDOMElement> pResult;
  nsCOMPtr<nsIDOMNodeList> pLines, pValues;
  nsCOMPtr<nsIDOMNode> pLine, pValue, pContent;
  rv = pParameters[0]->GetElement(getter_AddRefs(pResult));
  NS_ENSURE_SUCCESS(rv,rv);
  rv = pResult->GetChildNodes(getter_AddRefs(pLines));
  NS_ENSURE_SUCCESS(rv,rv);
  pLines->GetLength(&pLsize);
  for (pLineIndex=0;pLineIndex<pLsize;pLineIndex++) {
    do {
      rv = pLines->Item(pLineIndex, getter_AddRefs(pLine));
      NS_ENSURE_SUCCESS(rv,rv);
      pLine->GetNodeType(&pNodeType);
      if (pNodeType!=nsIDOMNode::ELEMENT_NODE) pLineIndex++;
    } while (pLineIndex<pLsize && pNodeType!=nsIDOMNode::ELEMENT_NODE);
    if (pLineIndex>=pLsize) break;
    rv = pLine->GetChildNodes(getter_AddRefs(pValues));
    NS_ENSURE_SUCCESS(rv,rv);
    pValues->GetLength(&pCsize);
    for (pColIndex=0;pColIndex<pCsize;pColIndex++) {
      do {
        rv = pValues->Item(pColIndex, getter_AddRefs(pValue));
        NS_ENSURE_SUCCESS(rv,rv);
        pValue->GetNodeType(&pNodeType);
        if (pNodeType!=nsIDOMNode::ELEMENT_NODE) pColIndex++;
      } while (pColIndex<pCsize && pNodeType!=nsIDOMNode::ELEMENT_NODE);
      if (pColIndex>=pCsize) break;
      rv = pValue->GetFirstChild(getter_AddRefs(pContent));
      NS_ENSURE_SUCCESS(rv,rv);
      pVariant = do_CreateInstance(NS_VARIANT_CONTRACTID, &rv);
      NS_ENSURE_SUCCESS(rv,rv);
      if (pContent) {
        rv = pContent->GetNodeValue(pText);
        NS_ENSURE_SUCCESS(rv,rv);
        pVariant->SetAsAString(pText);
        printf("%s|",ToNewCString(pText));
      } else {
        pVariant->SetAsAString(NS_LITERAL_STRING(""));
      }
      rv = pArray.AppendObject(pVariant);
    }
  }
  rv = mComponent->TreatP006E(pArray, pLsize, pCsize, mSearch);
  return rv;
}


/* Generated by Pygmalion */


NS_IMPL_ISUPPORTS1(mozListenerP006F, nsISOAPResponseListener)

mozListenerP006F::mozListenerP006F(mozC02gestsea* aComponent, const nsAString & aKey)
{
  mComponent = aComponent;
  mKey = aKey;
}
mozListenerP006F::~mozListenerP006F()
{
}

NS_IMETHODIMP mozListenerP006F::HandleResponse(nsISOAPResponse *aResponse, nsISOAPCall *aCall, PRUint32 aStatus, PRBool aLast, PRBool *aReturn)
{
  nsresult rv;
  nsCOMPtr<nsISOAPFault> pFault;
  rv = aResponse->GetFault(getter_AddRefs(pFault));
  NS_ENSURE_SUCCESS(rv, rv);
  if (pFault) {
    nsAutoString pFaute, pDetail, pTitle;
    nsCOMPtr<nsIDOMElement> pTheDetail;
    nsCOMPtr<nsIDOMNode> pNode;
    rv = pFault->GetDetail(getter_AddRefs(pTheDetail));
    NS_ENSURE_SUCCESS(rv,rv);
    rv = pTheDetail->GetFirstChild(getter_AddRefs(pNode));
    NS_ENSURE_SUCCESS(rv,rv);
    if (pNode) {
      nsCOMPtr<nsIDOMNamedNodeMap> pAttributes;
      nsCOMPtr<nsIDOMNode> pAttribute, pFirstNode;
      nsAutoString pNodeValue;
      rv = pNode->GetFirstChild(getter_AddRefs(pFirstNode));
      NS_ENSURE_SUCCESS(rv,rv);
      if (pFirstNode) {
        pFirstNode->GetNodeValue(pNodeValue);
        NS_ENSURE_SUCCESS(rv,rv);
        pDetail  = pNodeValue;
      }
      pNode->GetAttributes(getter_AddRefs(pAttributes));
      NS_ENSURE_SUCCESS(rv,rv);
      pAttributes->GetNamedItem(NS_LITERAL_STRING("code"), getter_AddRefs(pAttribute));
      NS_ENSURE_SUCCESS(rv,rv);
      if (pAttribute) {
        pAttribute->GetNodeValue(pNodeValue);
        NS_ENSURE_SUCCESS(rv,rv);
        pDetail += NS_LITERAL_STRING("\n(Erreur ");
        pDetail += pNodeValue;
        pDetail += NS_LITERAL_STRING(")");
      }
    } else pDetail = NS_LITERAL_STRING("Erreur sans message.");
    pFaute = pDetail;
    rv = pFault->GetFaultString(pTitle);
    NS_ENSURE_SUCCESS(rv,rv);
    nsCOMPtr<nsIPrompt> pPrompt= do_GetService(NS_DEFAULTPROMPT_CONTRACTID, &rv);
    NS_ENSURE_SUCCESS(rv,rv);
    pPrompt->Alert(ToNewUnicode(pTitle), ToNewUnicode(pFaute));
    return NS_ERROR_FAILURE;
  }

  nsISOAPParameter ** pParameters;
  PRUint32 pTotal;
  rv = aResponse->GetParameters(PR_FALSE, &pTotal, &pParameters);
  NS_ENSURE_SUCCESS(rv,rv);
  if (pTotal!=1) {
    nsCOMPtr<nsIPrompt> pPrompt= do_GetService(NS_DEFAULTPROMPT_CONTRACTID, &rv);
    NS_ENSURE_SUCCESS(rv,rv);
    pPrompt->Alert(ToNewUnicode(NS_LITERAL_CSTRING("Erreur système")), ToNewUnicode(NS_LITERAL_CSTRING("Le nombre total de paramètres reçus est incorrect.")));
    return NS_ERROR_FAILURE;
  }

  nsAutoString pText;
  nsCOMArray<nsIVariant> pArray;
  nsCOMPtr<nsIWritableVariant> pVariant;
  PRUint32 pLsize=0, pCsize=0;
  PRUint32 pLineIndex, pColIndex;
  PRUint16 pNodeType;
  nsCOMPtr<nsIDOMElement> pResult;
  nsCOMPtr<nsIDOMNodeList> pLines, pValues;
  nsCOMPtr<nsIDOMNode> pLine, pValue, pContent;
  rv = pParameters[0]->GetElement(getter_AddRefs(pResult));
  NS_ENSURE_SUCCESS(rv,rv);
  rv = pResult->GetChildNodes(getter_AddRefs(pLines));
  NS_ENSURE_SUCCESS(rv,rv);
  pLines->GetLength(&pLsize);
  for (pLineIndex=0;pLineIndex<pLsize;pLineIndex++) {
    do {
      rv = pLines->Item(pLineIndex, getter_AddRefs(pLine));
      NS_ENSURE_SUCCESS(rv,rv);
      pLine->GetNodeType(&pNodeType);
      if (pNodeType!=nsIDOMNode::ELEMENT_NODE) pLineIndex++;
    } while (pLineIndex<pLsize && pNodeType!=nsIDOMNode::ELEMENT_NODE);
    if (pLineIndex>=pLsize) break;
    rv = pLine->GetChildNodes(getter_AddRefs(pValues));
    NS_ENSURE_SUCCESS(rv,rv);
    pValues->GetLength(&pCsize);
    for (pColIndex=0;pColIndex<pCsize;pColIndex++) {
      do {
        rv = pValues->Item(pColIndex, getter_AddRefs(pValue));
        NS_ENSURE_SUCCESS(rv,rv);
        pValue->GetNodeType(&pNodeType);
        if (pNodeType!=nsIDOMNode::ELEMENT_NODE) pColIndex++;
      } while (pColIndex<pCsize && pNodeType!=nsIDOMNode::ELEMENT_NODE);
      if (pColIndex>=pCsize) break;
      rv = pValue->GetFirstChild(getter_AddRefs(pContent));
      NS_ENSURE_SUCCESS(rv,rv);
      pVariant = do_CreateInstance(NS_VARIANT_CONTRACTID, &rv);
      NS_ENSURE_SUCCESS(rv,rv);
      if (pContent) {
        rv = pContent->GetNodeValue(pText);
        NS_ENSURE_SUCCESS(rv,rv);
        pVariant->SetAsAString(pText);
        printf("%s|",ToNewCString(pText));
      } else {
        pVariant->SetAsAString(NS_LITERAL_STRING(""));
      }
      rv = pArray.AppendObject(pVariant);
    }
  }
  rv = mComponent->TreatP006F(pArray, pLsize, pCsize, mKey);
  return rv;
}


/* Generated by Pygmalion */


NS_IMPL_ISUPPORTS1(mozListenerP0070, nsISOAPResponseListener)

mozListenerP0070::mozListenerP0070(mozC02gestsea* aComponent, const nsAString & aKey)
{
  mComponent = aComponent;
  mKey = aKey;
}
mozListenerP0070::~mozListenerP0070()
{
}

NS_IMETHODIMP mozListenerP0070::HandleResponse(nsISOAPResponse *aResponse, nsISOAPCall *aCall, PRUint32 aStatus, PRBool aLast, PRBool *aReturn)
{
  nsresult rv;
  nsCOMPtr<nsISOAPFault> pFault;
  rv = aResponse->GetFault(getter_AddRefs(pFault));
  NS_ENSURE_SUCCESS(rv, rv);
  if (pFault) {
    nsAutoString pFaute, pDetail, pTitle;
    nsCOMPtr<nsIDOMElement> pTheDetail;
    nsCOMPtr<nsIDOMNode> pNode;
    rv = pFault->GetDetail(getter_AddRefs(pTheDetail));
    NS_ENSURE_SUCCESS(rv,rv);
    rv = pTheDetail->GetFirstChild(getter_AddRefs(pNode));
    NS_ENSURE_SUCCESS(rv,rv);
    if (pNode) {
      nsCOMPtr<nsIDOMNamedNodeMap> pAttributes;
      nsCOMPtr<nsIDOMNode> pAttribute, pFirstNode;
      nsAutoString pNodeValue;
      rv = pNode->GetFirstChild(getter_AddRefs(pFirstNode));
      NS_ENSURE_SUCCESS(rv,rv);
      if (pFirstNode) {
        pFirstNode->GetNodeValue(pNodeValue);
        NS_ENSURE_SUCCESS(rv,rv);
        pDetail  = pNodeValue;
      }
      pNode->GetAttributes(getter_AddRefs(pAttributes));
      NS_ENSURE_SUCCESS(rv,rv);
      pAttributes->GetNamedItem(NS_LITERAL_STRING("code"), getter_AddRefs(pAttribute));
      NS_ENSURE_SUCCESS(rv,rv);
      if (pAttribute) {
        pAttribute->GetNodeValue(pNodeValue);
        NS_ENSURE_SUCCESS(rv,rv);
        pDetail += NS_LITERAL_STRING("\n(Erreur ");
        pDetail += pNodeValue;
        pDetail += NS_LITERAL_STRING(")");
      }
    } else pDetail = NS_LITERAL_STRING("Erreur sans message.");
    pFaute = pDetail;
    rv = pFault->GetFaultString(pTitle);
    NS_ENSURE_SUCCESS(rv,rv);
    nsCOMPtr<nsIPrompt> pPrompt= do_GetService(NS_DEFAULTPROMPT_CONTRACTID, &rv);
    NS_ENSURE_SUCCESS(rv,rv);
    pPrompt->Alert(ToNewUnicode(pTitle), ToNewUnicode(pFaute));
    return NS_ERROR_FAILURE;
  }

  nsISOAPParameter ** pParameters;
  PRUint32 pTotal;
  rv = aResponse->GetParameters(PR_FALSE, &pTotal, &pParameters);
  NS_ENSURE_SUCCESS(rv,rv);
  if (pTotal!=1) {
    nsCOMPtr<nsIPrompt> pPrompt= do_GetService(NS_DEFAULTPROMPT_CONTRACTID, &rv);
    NS_ENSURE_SUCCESS(rv,rv);
    pPrompt->Alert(ToNewUnicode(NS_LITERAL_CSTRING("Erreur système")), ToNewUnicode(NS_LITERAL_CSTRING("Le nombre total de paramètres reçus est incorrect.")));
    return NS_ERROR_FAILURE;
  }

  nsAutoString pText;
  nsCOMArray<nsIVariant> pArray;
  nsCOMPtr<nsIWritableVariant> pVariant;
  PRUint32 pLsize=0, pCsize=0;
  PRUint32 pLineIndex, pColIndex;
  PRUint16 pNodeType;
  nsCOMPtr<nsIDOMElement> pResult;
  nsCOMPtr<nsIDOMNodeList> pLines, pValues;
  nsCOMPtr<nsIDOMNode> pLine, pValue, pContent;
  rv = pParameters[0]->GetElement(getter_AddRefs(pResult));
  NS_ENSURE_SUCCESS(rv,rv);
  rv = pResult->GetChildNodes(getter_AddRefs(pLines));
  NS_ENSURE_SUCCESS(rv,rv);
  pLines->GetLength(&pLsize);
  for (pLineIndex=0;pLineIndex<pLsize;pLineIndex++) {
    do {
      rv = pLines->Item(pLineIndex, getter_AddRefs(pLine));
      NS_ENSURE_SUCCESS(rv,rv);
      pLine->GetNodeType(&pNodeType);
      if (pNodeType!=nsIDOMNode::ELEMENT_NODE) pLineIndex++;
    } while (pLineIndex<pLsize && pNodeType!=nsIDOMNode::ELEMENT_NODE);
    if (pLineIndex>=pLsize) break;
    rv = pLine->GetChildNodes(getter_AddRefs(pValues));
    NS_ENSURE_SUCCESS(rv,rv);
    pValues->GetLength(&pCsize);
    for (pColIndex=0;pColIndex<pCsize;pColIndex++) {
      do {
        rv = pValues->Item(pColIndex, getter_AddRefs(pValue));
        NS_ENSURE_SUCCESS(rv,rv);
        pValue->GetNodeType(&pNodeType);
        if (pNodeType!=nsIDOMNode::ELEMENT_NODE) pColIndex++;
      } while (pColIndex<pCsize && pNodeType!=nsIDOMNode::ELEMENT_NODE);
      if (pColIndex>=pCsize) break;
      rv = pValue->GetFirstChild(getter_AddRefs(pContent));
      NS_ENSURE_SUCCESS(rv,rv);
      pVariant = do_CreateInstance(NS_VARIANT_CONTRACTID, &rv);
      NS_ENSURE_SUCCESS(rv,rv);
      if (pContent) {
        rv = pContent->GetNodeValue(pText);
        NS_ENSURE_SUCCESS(rv,rv);
        pVariant->SetAsAString(pText);
        printf("%s|",ToNewCString(pText));
      } else {
        pVariant->SetAsAString(NS_LITERAL_STRING(""));
      }
      rv = pArray.AppendObject(pVariant);
    }
  }
  rv = mComponent->TreatP0070(pArray, pLsize, pCsize, mKey);
  return rv;
}


/* Generated by Pygmalion */


NS_IMPL_ISUPPORTS1(mozListenerP0071, nsISOAPResponseListener)

mozListenerP0071::mozListenerP0071(mozC02gestsea* aComponent, const nsAString & aKey, const nsACString & aField1, const nsACString & aField2, const nsACString & aField3, const nsACString & aField4, const nsACString & aField5, const nsACString & aField6, const nsACString & aField7, const nsACString & aField8, const nsACString & aField9, const nsACString & aField10, const nsACString & aField11, const nsACString & aField12, const nsACString & aField13, const nsACString & aField14, const nsACString & aField15, const nsACString & aField16, const nsACString & aField17)
{
  mComponent = aComponent;
  mKey = aKey;
  mField1 = aField1;
  mField2 = aField2;
  mField3 = aField3;
  mField4 = aField4;
  mField5 = aField5;
  mField6 = aField6;
  mField7 = aField7;
  mField8 = aField8;
  mField9 = aField9;
  mField10 = aField10;
  mField11 = aField11;
  mField12 = aField12;
  mField13 = aField13;
  mField14 = aField14;
  mField15 = aField15;
  mField16 = aField16;
  mField17 = aField17;
}
mozListenerP0071::~mozListenerP0071()
{
}

NS_IMETHODIMP mozListenerP0071::HandleResponse(nsISOAPResponse *aResponse, nsISOAPCall *aCall, PRUint32 aStatus, PRBool aLast, PRBool *aReturn)
{
  nsresult rv;
  nsCOMPtr<nsISOAPFault> pFault;
  rv = aResponse->GetFault(getter_AddRefs(pFault));
  NS_ENSURE_SUCCESS(rv, rv);
  if (pFault) {
    nsAutoString pFaute, pDetail, pTitle;
    nsCOMPtr<nsIDOMElement> pTheDetail;
    nsCOMPtr<nsIDOMNode> pNode;
    rv = pFault->GetDetail(getter_AddRefs(pTheDetail));
    NS_ENSURE_SUCCESS(rv,rv);
    rv = pTheDetail->GetFirstChild(getter_AddRefs(pNode));
    NS_ENSURE_SUCCESS(rv,rv);
    if (pNode) {
      nsCOMPtr<nsIDOMNamedNodeMap> pAttributes;
      nsCOMPtr<nsIDOMNode> pAttribute, pFirstNode;
      nsAutoString pNodeValue;
      rv = pNode->GetFirstChild(getter_AddRefs(pFirstNode));
      NS_ENSURE_SUCCESS(rv,rv);
      if (pFirstNode) {
        pFirstNode->GetNodeValue(pNodeValue);
        NS_ENSURE_SUCCESS(rv,rv);
        pDetail  = pNodeValue;
      }
      pNode->GetAttributes(getter_AddRefs(pAttributes));
      NS_ENSURE_SUCCESS(rv,rv);
      pAttributes->GetNamedItem(NS_LITERAL_STRING("code"), getter_AddRefs(pAttribute));
      NS_ENSURE_SUCCESS(rv,rv);
      if (pAttribute) {
        pAttribute->GetNodeValue(pNodeValue);
        NS_ENSURE_SUCCESS(rv,rv);
        pDetail += NS_LITERAL_STRING("\n(Erreur ");
        pDetail += pNodeValue;
        pDetail += NS_LITERAL_STRING(")");
      }
    } else pDetail = NS_LITERAL_STRING("Erreur sans message.");
    pFaute = pDetail;
    rv = pFault->GetFaultString(pTitle);
    NS_ENSURE_SUCCESS(rv,rv);
    nsCOMPtr<nsIPrompt> pPrompt= do_GetService(NS_DEFAULTPROMPT_CONTRACTID, &rv);
    NS_ENSURE_SUCCESS(rv,rv);
    pPrompt->Alert(ToNewUnicode(pTitle), ToNewUnicode(pFaute));
    return NS_ERROR_FAILURE;
  }

  nsISOAPParameter ** pParameters;
  PRUint32 pTotal;
  rv = aResponse->GetParameters(PR_FALSE, &pTotal, &pParameters);
  NS_ENSURE_SUCCESS(rv,rv);
  if (pTotal!=1) {
    nsCOMPtr<nsIPrompt> pPrompt= do_GetService(NS_DEFAULTPROMPT_CONTRACTID, &rv);
    NS_ENSURE_SUCCESS(rv,rv);
    pPrompt->Alert(ToNewUnicode(NS_LITERAL_CSTRING("Erreur système")), ToNewUnicode(NS_LITERAL_CSTRING("Le nombre total de paramètres reçus est incorrect.")));
    return NS_ERROR_FAILURE;
  }

  nsAutoString pText;
  nsCOMPtr<nsIVariant> pValue;
  rv = pParameters[0]->GetValue(getter_AddRefs(pValue));
  NS_ENSURE_SUCCESS(rv,rv);
  rv = pValue->GetAsAString(pText);
  NS_ENSURE_SUCCESS(rv,rv);
  rv = mComponent->TreatP0071(pText, mKey, mField1, mField2, mField3, mField4, mField5, mField6, mField7, mField8, mField9, mField10, mField11, mField12, mField13, mField14, mField15, mField16, mField17);
  return rv;
}


/* Generated by Pygmalion */


NS_IMPL_ISUPPORTS1(mozListenerP0072, nsISOAPResponseListener)

mozListenerP0072::mozListenerP0072(mozC02gestsea* aComponent, const nsACString & aSearch)
{
  mComponent = aComponent;
  mSearch = aSearch;
}
mozListenerP0072::~mozListenerP0072()
{
}

NS_IMETHODIMP mozListenerP0072::HandleResponse(nsISOAPResponse *aResponse, nsISOAPCall *aCall, PRUint32 aStatus, PRBool aLast, PRBool *aReturn)
{
  nsresult rv;
  nsCOMPtr<nsISOAPFault> pFault;
  rv = aResponse->GetFault(getter_AddRefs(pFault));
  NS_ENSURE_SUCCESS(rv, rv);
  if (pFault) {
    nsAutoString pFaute, pDetail, pTitle;
    nsCOMPtr<nsIDOMElement> pTheDetail;
    nsCOMPtr<nsIDOMNode> pNode;
    rv = pFault->GetDetail(getter_AddRefs(pTheDetail));
    NS_ENSURE_SUCCESS(rv,rv);
    rv = pTheDetail->GetFirstChild(getter_AddRefs(pNode));
    NS_ENSURE_SUCCESS(rv,rv);
    if (pNode) {
      nsCOMPtr<nsIDOMNamedNodeMap> pAttributes;
      nsCOMPtr<nsIDOMNode> pAttribute, pFirstNode;
      nsAutoString pNodeValue;
      rv = pNode->GetFirstChild(getter_AddRefs(pFirstNode));
      NS_ENSURE_SUCCESS(rv,rv);
      if (pFirstNode) {
        pFirstNode->GetNodeValue(pNodeValue);
        NS_ENSURE_SUCCESS(rv,rv);
        pDetail  = pNodeValue;
      }
      pNode->GetAttributes(getter_AddRefs(pAttributes));
      NS_ENSURE_SUCCESS(rv,rv);
      pAttributes->GetNamedItem(NS_LITERAL_STRING("code"), getter_AddRefs(pAttribute));
      NS_ENSURE_SUCCESS(rv,rv);
      if (pAttribute) {
        pAttribute->GetNodeValue(pNodeValue);
        NS_ENSURE_SUCCESS(rv,rv);
        pDetail += NS_LITERAL_STRING("\n(Erreur ");
        pDetail += pNodeValue;
        pDetail += NS_LITERAL_STRING(")");
      }
    } else pDetail = NS_LITERAL_STRING("Erreur sans message.");
    pFaute = pDetail;
    rv = pFault->GetFaultString(pTitle);
    NS_ENSURE_SUCCESS(rv,rv);
    nsCOMPtr<nsIPrompt> pPrompt= do_GetService(NS_DEFAULTPROMPT_CONTRACTID, &rv);
    NS_ENSURE_SUCCESS(rv,rv);
    pPrompt->Alert(ToNewUnicode(pTitle), ToNewUnicode(pFaute));
    return NS_ERROR_FAILURE;
  }

  nsISOAPParameter ** pParameters;
  PRUint32 pTotal;
  rv = aResponse->GetParameters(PR_FALSE, &pTotal, &pParameters);
  NS_ENSURE_SUCCESS(rv,rv);
  if (pTotal!=1) {
    nsCOMPtr<nsIPrompt> pPrompt= do_GetService(NS_DEFAULTPROMPT_CONTRACTID, &rv);
    NS_ENSURE_SUCCESS(rv,rv);
    pPrompt->Alert(ToNewUnicode(NS_LITERAL_CSTRING("Erreur système")), ToNewUnicode(NS_LITERAL_CSTRING("Le nombre total de paramètres reçus est incorrect.")));
    return NS_ERROR_FAILURE;
  }

  nsAutoString pText;
  nsCOMArray<nsIVariant> pArray;
  nsCOMPtr<nsIWritableVariant> pVariant;
  PRUint32 pLsize=0, pCsize=0;
  PRUint32 pLineIndex, pColIndex;
  PRUint16 pNodeType;
  nsCOMPtr<nsIDOMElement> pResult;
  nsCOMPtr<nsIDOMNodeList> pLines, pValues;
  nsCOMPtr<nsIDOMNode> pLine, pValue, pContent;
  rv = pParameters[0]->GetElement(getter_AddRefs(pResult));
  NS_ENSURE_SUCCESS(rv,rv);
  rv = pResult->GetChildNodes(getter_AddRefs(pLines));
  NS_ENSURE_SUCCESS(rv,rv);
  pLines->GetLength(&pLsize);
  for (pLineIndex=0;pLineIndex<pLsize;pLineIndex++) {
    do {
      rv = pLines->Item(pLineIndex, getter_AddRefs(pLine));
      NS_ENSURE_SUCCESS(rv,rv);
      pLine->GetNodeType(&pNodeType);
      if (pNodeType!=nsIDOMNode::ELEMENT_NODE) pLineIndex++;
    } while (pLineIndex<pLsize && pNodeType!=nsIDOMNode::ELEMENT_NODE);
    if (pLineIndex>=pLsize) break;
    rv = pLine->GetChildNodes(getter_AddRefs(pValues));
    NS_ENSURE_SUCCESS(rv,rv);
    pValues->GetLength(&pCsize);
    for (pColIndex=0;pColIndex<pCsize;pColIndex++) {
      do {
        rv = pValues->Item(pColIndex, getter_AddRefs(pValue));
        NS_ENSURE_SUCCESS(rv,rv);
        pValue->GetNodeType(&pNodeType);
        if (pNodeType!=nsIDOMNode::ELEMENT_NODE) pColIndex++;
      } while (pColIndex<pCsize && pNodeType!=nsIDOMNode::ELEMENT_NODE);
      if (pColIndex>=pCsize) break;
      rv = pValue->GetFirstChild(getter_AddRefs(pContent));
      NS_ENSURE_SUCCESS(rv,rv);
      pVariant = do_CreateInstance(NS_VARIANT_CONTRACTID, &rv);
      NS_ENSURE_SUCCESS(rv,rv);
      if (pContent) {
        rv = pContent->GetNodeValue(pText);
        NS_ENSURE_SUCCESS(rv,rv);
        pVariant->SetAsAString(pText);
        printf("%s|",ToNewCString(pText));
      } else {
        pVariant->SetAsAString(NS_LITERAL_STRING(""));
      }
      rv = pArray.AppendObject(pVariant);
    }
  }
  rv = mComponent->TreatP0072(pArray, pLsize, pCsize, mSearch);
  return rv;
}


/* Generated by Pygmalion */


NS_IMPL_ISUPPORTS1(mozListenerP0073, nsISOAPResponseListener)

mozListenerP0073::mozListenerP0073(mozC02gestsea* aComponent, const nsACString & aSearch)
{
  mComponent = aComponent;
  mSearch = aSearch;
}
mozListenerP0073::~mozListenerP0073()
{
}

NS_IMETHODIMP mozListenerP0073::HandleResponse(nsISOAPResponse *aResponse, nsISOAPCall *aCall, PRUint32 aStatus, PRBool aLast, PRBool *aReturn)
{
  nsresult rv;
  nsCOMPtr<nsISOAPFault> pFault;
  rv = aResponse->GetFault(getter_AddRefs(pFault));
  NS_ENSURE_SUCCESS(rv, rv);
  if (pFault) {
    nsAutoString pFaute, pDetail, pTitle;
    nsCOMPtr<nsIDOMElement> pTheDetail;
    nsCOMPtr<nsIDOMNode> pNode;
    rv = pFault->GetDetail(getter_AddRefs(pTheDetail));
    NS_ENSURE_SUCCESS(rv,rv);
    rv = pTheDetail->GetFirstChild(getter_AddRefs(pNode));
    NS_ENSURE_SUCCESS(rv,rv);
    if (pNode) {
      nsCOMPtr<nsIDOMNamedNodeMap> pAttributes;
      nsCOMPtr<nsIDOMNode> pAttribute, pFirstNode;
      nsAutoString pNodeValue;
      rv = pNode->GetFirstChild(getter_AddRefs(pFirstNode));
      NS_ENSURE_SUCCESS(rv,rv);
      if (pFirstNode) {
        pFirstNode->GetNodeValue(pNodeValue);
        NS_ENSURE_SUCCESS(rv,rv);
        pDetail  = pNodeValue;
      }
      pNode->GetAttributes(getter_AddRefs(pAttributes));
      NS_ENSURE_SUCCESS(rv,rv);
      pAttributes->GetNamedItem(NS_LITERAL_STRING("code"), getter_AddRefs(pAttribute));
      NS_ENSURE_SUCCESS(rv,rv);
      if (pAttribute) {
        pAttribute->GetNodeValue(pNodeValue);
        NS_ENSURE_SUCCESS(rv,rv);
        pDetail += NS_LITERAL_STRING("\n(Erreur ");
        pDetail += pNodeValue;
        pDetail += NS_LITERAL_STRING(")");
      }
    } else pDetail = NS_LITERAL_STRING("Erreur sans message.");
    pFaute = pDetail;
    rv = pFault->GetFaultString(pTitle);
    NS_ENSURE_SUCCESS(rv,rv);
    nsCOMPtr<nsIPrompt> pPrompt= do_GetService(NS_DEFAULTPROMPT_CONTRACTID, &rv);
    NS_ENSURE_SUCCESS(rv,rv);
    pPrompt->Alert(ToNewUnicode(pTitle), ToNewUnicode(pFaute));
    return NS_ERROR_FAILURE;
  }

  nsISOAPParameter ** pParameters;
  PRUint32 pTotal;
  rv = aResponse->GetParameters(PR_FALSE, &pTotal, &pParameters);
  NS_ENSURE_SUCCESS(rv,rv);
  if (pTotal!=1) {
    nsCOMPtr<nsIPrompt> pPrompt= do_GetService(NS_DEFAULTPROMPT_CONTRACTID, &rv);
    NS_ENSURE_SUCCESS(rv,rv);
    pPrompt->Alert(ToNewUnicode(NS_LITERAL_CSTRING("Erreur système")), ToNewUnicode(NS_LITERAL_CSTRING("Le nombre total de paramètres reçus est incorrect.")));
    return NS_ERROR_FAILURE;
  }

  nsAutoString pText;
  nsCOMArray<nsIVariant> pArray;
  nsCOMPtr<nsIWritableVariant> pVariant;
  PRUint32 pLsize=0, pCsize=0;
  PRUint32 pLineIndex, pColIndex;
  PRUint16 pNodeType;
  nsCOMPtr<nsIDOMElement> pResult;
  nsCOMPtr<nsIDOMNodeList> pLines, pValues;
  nsCOMPtr<nsIDOMNode> pLine, pValue, pContent;
  rv = pParameters[0]->GetElement(getter_AddRefs(pResult));
  NS_ENSURE_SUCCESS(rv,rv);
  rv = pResult->GetChildNodes(getter_AddRefs(pLines));
  NS_ENSURE_SUCCESS(rv,rv);
  pLines->GetLength(&pLsize);
  for (pLineIndex=0;pLineIndex<pLsize;pLineIndex++) {
    do {
      rv = pLines->Item(pLineIndex, getter_AddRefs(pLine));
      NS_ENSURE_SUCCESS(rv,rv);
      pLine->GetNodeType(&pNodeType);
      if (pNodeType!=nsIDOMNode::ELEMENT_NODE) pLineIndex++;
    } while (pLineIndex<pLsize && pNodeType!=nsIDOMNode::ELEMENT_NODE);
    if (pLineIndex>=pLsize) break;
    rv = pLine->GetChildNodes(getter_AddRefs(pValues));
    NS_ENSURE_SUCCESS(rv,rv);
    pValues->GetLength(&pCsize);
    for (pColIndex=0;pColIndex<pCsize;pColIndex++) {
      do {
        rv = pValues->Item(pColIndex, getter_AddRefs(pValue));
        NS_ENSURE_SUCCESS(rv,rv);
        pValue->GetNodeType(&pNodeType);
        if (pNodeType!=nsIDOMNode::ELEMENT_NODE) pColIndex++;
      } while (pColIndex<pCsize && pNodeType!=nsIDOMNode::ELEMENT_NODE);
      if (pColIndex>=pCsize) break;
      rv = pValue->GetFirstChild(getter_AddRefs(pContent));
      NS_ENSURE_SUCCESS(rv,rv);
      pVariant = do_CreateInstance(NS_VARIANT_CONTRACTID, &rv);
      NS_ENSURE_SUCCESS(rv,rv);
      if (pContent) {
        rv = pContent->GetNodeValue(pText);
        NS_ENSURE_SUCCESS(rv,rv);
        pVariant->SetAsAString(pText);
        printf("%s|",ToNewCString(pText));
      } else {
        pVariant->SetAsAString(NS_LITERAL_STRING(""));
      }
      rv = pArray.AppendObject(pVariant);
    }
  }
  rv = mComponent->TreatP0073(pArray, pLsize, pCsize, mSearch);
  return rv;
}


/* Generated by Pygmalion */


NS_IMPL_ISUPPORTS1(mozListenerP0074, nsISOAPResponseListener)

mozListenerP0074::mozListenerP0074(mozC02gestsea* aComponent, const nsAString & aKey)
{
  mComponent = aComponent;
  mKey = aKey;
}
mozListenerP0074::~mozListenerP0074()
{
}

NS_IMETHODIMP mozListenerP0074::HandleResponse(nsISOAPResponse *aResponse, nsISOAPCall *aCall, PRUint32 aStatus, PRBool aLast, PRBool *aReturn)
{
  nsresult rv;
  nsCOMPtr<nsISOAPFault> pFault;
  rv = aResponse->GetFault(getter_AddRefs(pFault));
  NS_ENSURE_SUCCESS(rv, rv);
  if (pFault) {
    nsAutoString pFaute, pDetail, pTitle;
    nsCOMPtr<nsIDOMElement> pTheDetail;
    nsCOMPtr<nsIDOMNode> pNode;
    rv = pFault->GetDetail(getter_AddRefs(pTheDetail));
    NS_ENSURE_SUCCESS(rv,rv);
    rv = pTheDetail->GetFirstChild(getter_AddRefs(pNode));
    NS_ENSURE_SUCCESS(rv,rv);
    if (pNode) {
      nsCOMPtr<nsIDOMNamedNodeMap> pAttributes;
      nsCOMPtr<nsIDOMNode> pAttribute, pFirstNode;
      nsAutoString pNodeValue;
      rv = pNode->GetFirstChild(getter_AddRefs(pFirstNode));
      NS_ENSURE_SUCCESS(rv,rv);
      if (pFirstNode) {
        pFirstNode->GetNodeValue(pNodeValue);
        NS_ENSURE_SUCCESS(rv,rv);
        pDetail  = pNodeValue;
      }
      pNode->GetAttributes(getter_AddRefs(pAttributes));
      NS_ENSURE_SUCCESS(rv,rv);
      pAttributes->GetNamedItem(NS_LITERAL_STRING("code"), getter_AddRefs(pAttribute));
      NS_ENSURE_SUCCESS(rv,rv);
      if (pAttribute) {
        pAttribute->GetNodeValue(pNodeValue);
        NS_ENSURE_SUCCESS(rv,rv);
        pDetail += NS_LITERAL_STRING("\n(Erreur ");
        pDetail += pNodeValue;
        pDetail += NS_LITERAL_STRING(")");
      }
    } else pDetail = NS_LITERAL_STRING("Erreur sans message.");
    pFaute = pDetail;
    rv = pFault->GetFaultString(pTitle);
    NS_ENSURE_SUCCESS(rv,rv);
    nsCOMPtr<nsIPrompt> pPrompt= do_GetService(NS_DEFAULTPROMPT_CONTRACTID, &rv);
    NS_ENSURE_SUCCESS(rv,rv);
    pPrompt->Alert(ToNewUnicode(pTitle), ToNewUnicode(pFaute));
    return NS_ERROR_FAILURE;
  }

  nsISOAPParameter ** pParameters;
  PRUint32 pTotal;
  rv = aResponse->GetParameters(PR_FALSE, &pTotal, &pParameters);
  NS_ENSURE_SUCCESS(rv,rv);
  if (pTotal!=1) {
    nsCOMPtr<nsIPrompt> pPrompt= do_GetService(NS_DEFAULTPROMPT_CONTRACTID, &rv);
    NS_ENSURE_SUCCESS(rv,rv);
    pPrompt->Alert(ToNewUnicode(NS_LITERAL_CSTRING("Erreur système")), ToNewUnicode(NS_LITERAL_CSTRING("Le nombre total de paramètres reçus est incorrect.")));
    return NS_ERROR_FAILURE;
  }

  nsAutoString pText;
  nsCOMArray<nsIVariant> pArray;
  nsCOMPtr<nsIWritableVariant> pVariant;
  PRUint32 pLsize=0, pCsize=0;
  PRUint32 pLineIndex, pColIndex;
  PRUint16 pNodeType;
  nsCOMPtr<nsIDOMElement> pResult;
  nsCOMPtr<nsIDOMNodeList> pLines, pValues;
  nsCOMPtr<nsIDOMNode> pLine, pValue, pContent;
  rv = pParameters[0]->GetElement(getter_AddRefs(pResult));
  NS_ENSURE_SUCCESS(rv,rv);
  rv = pResult->GetChildNodes(getter_AddRefs(pLines));
  NS_ENSURE_SUCCESS(rv,rv);
  pLines->GetLength(&pLsize);
  for (pLineIndex=0;pLineIndex<pLsize;pLineIndex++) {
    do {
      rv = pLines->Item(pLineIndex, getter_AddRefs(pLine));
      NS_ENSURE_SUCCESS(rv,rv);
      pLine->GetNodeType(&pNodeType);
      if (pNodeType!=nsIDOMNode::ELEMENT_NODE) pLineIndex++;
    } while (pLineIndex<pLsize && pNodeType!=nsIDOMNode::ELEMENT_NODE);
    if (pLineIndex>=pLsize) break;
    rv = pLine->GetChildNodes(getter_AddRefs(pValues));
    NS_ENSURE_SUCCESS(rv,rv);
    pValues->GetLength(&pCsize);
    for (pColIndex=0;pColIndex<pCsize;pColIndex++) {
      do {
        rv = pValues->Item(pColIndex, getter_AddRefs(pValue));
        NS_ENSURE_SUCCESS(rv,rv);
        pValue->GetNodeType(&pNodeType);
        if (pNodeType!=nsIDOMNode::ELEMENT_NODE) pColIndex++;
      } while (pColIndex<pCsize && pNodeType!=nsIDOMNode::ELEMENT_NODE);
      if (pColIndex>=pCsize) break;
      rv = pValue->GetFirstChild(getter_AddRefs(pContent));
      NS_ENSURE_SUCCESS(rv,rv);
      pVariant = do_CreateInstance(NS_VARIANT_CONTRACTID, &rv);
      NS_ENSURE_SUCCESS(rv,rv);
      if (pContent) {
        rv = pContent->GetNodeValue(pText);
        NS_ENSURE_SUCCESS(rv,rv);
        pVariant->SetAsAString(pText);
        printf("%s|",ToNewCString(pText));
      } else {
        pVariant->SetAsAString(NS_LITERAL_STRING(""));
      }
      rv = pArray.AppendObject(pVariant);
    }
  }
  rv = mComponent->TreatP0074(pArray, pLsize, pCsize, mKey);
  return rv;
}


/* Generated by Pygmalion */


NS_IMPL_ISUPPORTS1(mozListenerP0075, nsISOAPResponseListener)

mozListenerP0075::mozListenerP0075(mozC02gestsea* aComponent, const nsACString & aSearch)
{
  mComponent = aComponent;
  mSearch = aSearch;
}
mozListenerP0075::~mozListenerP0075()
{
}

NS_IMETHODIMP mozListenerP0075::HandleResponse(nsISOAPResponse *aResponse, nsISOAPCall *aCall, PRUint32 aStatus, PRBool aLast, PRBool *aReturn)
{
  nsresult rv;
  nsCOMPtr<nsISOAPFault> pFault;
  rv = aResponse->GetFault(getter_AddRefs(pFault));
  NS_ENSURE_SUCCESS(rv, rv);
  if (pFault) {
    nsAutoString pFaute, pDetail, pTitle;
    nsCOMPtr<nsIDOMElement> pTheDetail;
    nsCOMPtr<nsIDOMNode> pNode;
    rv = pFault->GetDetail(getter_AddRefs(pTheDetail));
    NS_ENSURE_SUCCESS(rv,rv);
    rv = pTheDetail->GetFirstChild(getter_AddRefs(pNode));
    NS_ENSURE_SUCCESS(rv,rv);
    if (pNode) {
      nsCOMPtr<nsIDOMNamedNodeMap> pAttributes;
      nsCOMPtr<nsIDOMNode> pAttribute, pFirstNode;
      nsAutoString pNodeValue;
      rv = pNode->GetFirstChild(getter_AddRefs(pFirstNode));
      NS_ENSURE_SUCCESS(rv,rv);
      if (pFirstNode) {
        pFirstNode->GetNodeValue(pNodeValue);
        NS_ENSURE_SUCCESS(rv,rv);
        pDetail  = pNodeValue;
      }
      pNode->GetAttributes(getter_AddRefs(pAttributes));
      NS_ENSURE_SUCCESS(rv,rv);
      pAttributes->GetNamedItem(NS_LITERAL_STRING("code"), getter_AddRefs(pAttribute));
      NS_ENSURE_SUCCESS(rv,rv);
      if (pAttribute) {
        pAttribute->GetNodeValue(pNodeValue);
        NS_ENSURE_SUCCESS(rv,rv);
        pDetail += NS_LITERAL_STRING("\n(Erreur ");
        pDetail += pNodeValue;
        pDetail += NS_LITERAL_STRING(")");
      }
    } else pDetail = NS_LITERAL_STRING("Erreur sans message.");
    pFaute = pDetail;
    rv = pFault->GetFaultString(pTitle);
    NS_ENSURE_SUCCESS(rv,rv);
    nsCOMPtr<nsIPrompt> pPrompt= do_GetService(NS_DEFAULTPROMPT_CONTRACTID, &rv);
    NS_ENSURE_SUCCESS(rv,rv);
    pPrompt->Alert(ToNewUnicode(pTitle), ToNewUnicode(pFaute));
    return NS_ERROR_FAILURE;
  }

  nsISOAPParameter ** pParameters;
  PRUint32 pTotal;
  rv = aResponse->GetParameters(PR_FALSE, &pTotal, &pParameters);
  NS_ENSURE_SUCCESS(rv,rv);
  if (pTotal!=1) {
    nsCOMPtr<nsIPrompt> pPrompt= do_GetService(NS_DEFAULTPROMPT_CONTRACTID, &rv);
    NS_ENSURE_SUCCESS(rv,rv);
    pPrompt->Alert(ToNewUnicode(NS_LITERAL_CSTRING("Erreur système")), ToNewUnicode(NS_LITERAL_CSTRING("Le nombre total de paramètres reçus est incorrect.")));
    return NS_ERROR_FAILURE;
  }

  nsAutoString pText;
  nsCOMArray<nsIVariant> pArray;
  nsCOMPtr<nsIWritableVariant> pVariant;
  PRUint32 pLsize=0, pCsize=0;
  PRUint32 pLineIndex, pColIndex;
  PRUint16 pNodeType;
  nsCOMPtr<nsIDOMElement> pResult;
  nsCOMPtr<nsIDOMNodeList> pLines, pValues;
  nsCOMPtr<nsIDOMNode> pLine, pValue, pContent;
  rv = pParameters[0]->GetElement(getter_AddRefs(pResult));
  NS_ENSURE_SUCCESS(rv,rv);
  rv = pResult->GetChildNodes(getter_AddRefs(pLines));
  NS_ENSURE_SUCCESS(rv,rv);
  pLines->GetLength(&pLsize);
  for (pLineIndex=0;pLineIndex<pLsize;pLineIndex++) {
    do {
      rv = pLines->Item(pLineIndex, getter_AddRefs(pLine));
      NS_ENSURE_SUCCESS(rv,rv);
      pLine->GetNodeType(&pNodeType);
      if (pNodeType!=nsIDOMNode::ELEMENT_NODE) pLineIndex++;
    } while (pLineIndex<pLsize && pNodeType!=nsIDOMNode::ELEMENT_NODE);
    if (pLineIndex>=pLsize) break;
    rv = pLine->GetChildNodes(getter_AddRefs(pValues));
    NS_ENSURE_SUCCESS(rv,rv);
    pValues->GetLength(&pCsize);
    for (pColIndex=0;pColIndex<pCsize;pColIndex++) {
      do {
        rv = pValues->Item(pColIndex, getter_AddRefs(pValue));
        NS_ENSURE_SUCCESS(rv,rv);
        pValue->GetNodeType(&pNodeType);
        if (pNodeType!=nsIDOMNode::ELEMENT_NODE) pColIndex++;
      } while (pColIndex<pCsize && pNodeType!=nsIDOMNode::ELEMENT_NODE);
      if (pColIndex>=pCsize) break;
      rv = pValue->GetFirstChild(getter_AddRefs(pContent));
      NS_ENSURE_SUCCESS(rv,rv);
      pVariant = do_CreateInstance(NS_VARIANT_CONTRACTID, &rv);
      NS_ENSURE_SUCCESS(rv,rv);
      if (pContent) {
        rv = pContent->GetNodeValue(pText);
        NS_ENSURE_SUCCESS(rv,rv);
        pVariant->SetAsAString(pText);
        printf("%s|",ToNewCString(pText));
      } else {
        pVariant->SetAsAString(NS_LITERAL_STRING(""));
      }
      rv = pArray.AppendObject(pVariant);
    }
  }
  rv = mComponent->TreatP0075(pArray, pLsize, pCsize, mSearch);
  return rv;
}


/* Generated by Pygmalion */


NS_IMPL_ISUPPORTS1(mozListenerP0076, nsISOAPResponseListener)

mozListenerP0076::mozListenerP0076(mozC02gestsea* aComponent, const nsACString & aSearch)
{
  mComponent = aComponent;
  mSearch = aSearch;
}
mozListenerP0076::~mozListenerP0076()
{
}

NS_IMETHODIMP mozListenerP0076::HandleResponse(nsISOAPResponse *aResponse, nsISOAPCall *aCall, PRUint32 aStatus, PRBool aLast, PRBool *aReturn)
{
  nsresult rv;
  nsCOMPtr<nsISOAPFault> pFault;
  rv = aResponse->GetFault(getter_AddRefs(pFault));
  NS_ENSURE_SUCCESS(rv, rv);
  if (pFault) {
    nsAutoString pFaute, pDetail, pTitle;
    nsCOMPtr<nsIDOMElement> pTheDetail;
    nsCOMPtr<nsIDOMNode> pNode;
    rv = pFault->GetDetail(getter_AddRefs(pTheDetail));
    NS_ENSURE_SUCCESS(rv,rv);
    rv = pTheDetail->GetFirstChild(getter_AddRefs(pNode));
    NS_ENSURE_SUCCESS(rv,rv);
    if (pNode) {
      nsCOMPtr<nsIDOMNamedNodeMap> pAttributes;
      nsCOMPtr<nsIDOMNode> pAttribute, pFirstNode;
      nsAutoString pNodeValue;
      rv = pNode->GetFirstChild(getter_AddRefs(pFirstNode));
      NS_ENSURE_SUCCESS(rv,rv);
      if (pFirstNode) {
        pFirstNode->GetNodeValue(pNodeValue);
        NS_ENSURE_SUCCESS(rv,rv);
        pDetail  = pNodeValue;
      }
      pNode->GetAttributes(getter_AddRefs(pAttributes));
      NS_ENSURE_SUCCESS(rv,rv);
      pAttributes->GetNamedItem(NS_LITERAL_STRING("code"), getter_AddRefs(pAttribute));
      NS_ENSURE_SUCCESS(rv,rv);
      if (pAttribute) {
        pAttribute->GetNodeValue(pNodeValue);
        NS_ENSURE_SUCCESS(rv,rv);
        pDetail += NS_LITERAL_STRING("\n(Erreur ");
        pDetail += pNodeValue;
        pDetail += NS_LITERAL_STRING(")");
      }
    } else pDetail = NS_LITERAL_STRING("Erreur sans message.");
    pFaute = pDetail;
    rv = pFault->GetFaultString(pTitle);
    NS_ENSURE_SUCCESS(rv,rv);
    nsCOMPtr<nsIPrompt> pPrompt= do_GetService(NS_DEFAULTPROMPT_CONTRACTID, &rv);
    NS_ENSURE_SUCCESS(rv,rv);
    pPrompt->Alert(ToNewUnicode(pTitle), ToNewUnicode(pFaute));
    return NS_ERROR_FAILURE;
  }

  nsISOAPParameter ** pParameters;
  PRUint32 pTotal;
  rv = aResponse->GetParameters(PR_FALSE, &pTotal, &pParameters);
  NS_ENSURE_SUCCESS(rv,rv);
  if (pTotal!=1) {
    nsCOMPtr<nsIPrompt> pPrompt= do_GetService(NS_DEFAULTPROMPT_CONTRACTID, &rv);
    NS_ENSURE_SUCCESS(rv,rv);
    pPrompt->Alert(ToNewUnicode(NS_LITERAL_CSTRING("Erreur système")), ToNewUnicode(NS_LITERAL_CSTRING("Le nombre total de paramètres reçus est incorrect.")));
    return NS_ERROR_FAILURE;
  }

  nsAutoString pText;
  nsCOMArray<nsIVariant> pArray;
  nsCOMPtr<nsIWritableVariant> pVariant;
  PRUint32 pLsize=0, pCsize=0;
  PRUint32 pLineIndex, pColIndex;
  PRUint16 pNodeType;
  nsCOMPtr<nsIDOMElement> pResult;
  nsCOMPtr<nsIDOMNodeList> pLines, pValues;
  nsCOMPtr<nsIDOMNode> pLine, pValue, pContent;
  rv = pParameters[0]->GetElement(getter_AddRefs(pResult));
  NS_ENSURE_SUCCESS(rv,rv);
  rv = pResult->GetChildNodes(getter_AddRefs(pLines));
  NS_ENSURE_SUCCESS(rv,rv);
  pLines->GetLength(&pLsize);
  for (pLineIndex=0;pLineIndex<pLsize;pLineIndex++) {
    do {
      rv = pLines->Item(pLineIndex, getter_AddRefs(pLine));
      NS_ENSURE_SUCCESS(rv,rv);
      pLine->GetNodeType(&pNodeType);
      if (pNodeType!=nsIDOMNode::ELEMENT_NODE) pLineIndex++;
    } while (pLineIndex<pLsize && pNodeType!=nsIDOMNode::ELEMENT_NODE);
    if (pLineIndex>=pLsize) break;
    rv = pLine->GetChildNodes(getter_AddRefs(pValues));
    NS_ENSURE_SUCCESS(rv,rv);
    pValues->GetLength(&pCsize);
    for (pColIndex=0;pColIndex<pCsize;pColIndex++) {
      do {
        rv = pValues->Item(pColIndex, getter_AddRefs(pValue));
        NS_ENSURE_SUCCESS(rv,rv);
        pValue->GetNodeType(&pNodeType);
        if (pNodeType!=nsIDOMNode::ELEMENT_NODE) pColIndex++;
      } while (pColIndex<pCsize && pNodeType!=nsIDOMNode::ELEMENT_NODE);
      if (pColIndex>=pCsize) break;
      rv = pValue->GetFirstChild(getter_AddRefs(pContent));
      NS_ENSURE_SUCCESS(rv,rv);
      pVariant = do_CreateInstance(NS_VARIANT_CONTRACTID, &rv);
      NS_ENSURE_SUCCESS(rv,rv);
      if (pContent) {
        rv = pContent->GetNodeValue(pText);
        NS_ENSURE_SUCCESS(rv,rv);
        pVariant->SetAsAString(pText);
        printf("%s|",ToNewCString(pText));
      } else {
        pVariant->SetAsAString(NS_LITERAL_STRING(""));
      }
      rv = pArray.AppendObject(pVariant);
    }
  }
  rv = mComponent->TreatP0076(pArray, pLsize, pCsize, mSearch);
  return rv;
}


/* Generated by Pygmalion */


NS_IMPL_ISUPPORTS1(mozListenerP0077, nsISOAPResponseListener)

mozListenerP0077::mozListenerP0077(mozC02gestsea* aComponent, const nsAString & aKey)
{
  mComponent = aComponent;
  mKey = aKey;
}
mozListenerP0077::~mozListenerP0077()
{
}

NS_IMETHODIMP mozListenerP0077::HandleResponse(nsISOAPResponse *aResponse, nsISOAPCall *aCall, PRUint32 aStatus, PRBool aLast, PRBool *aReturn)
{
  nsresult rv;
  nsCOMPtr<nsISOAPFault> pFault;
  rv = aResponse->GetFault(getter_AddRefs(pFault));
  NS_ENSURE_SUCCESS(rv, rv);
  if (pFault) {
    nsAutoString pFaute, pDetail, pTitle;
    nsCOMPtr<nsIDOMElement> pTheDetail;
    nsCOMPtr<nsIDOMNode> pNode;
    rv = pFault->GetDetail(getter_AddRefs(pTheDetail));
    NS_ENSURE_SUCCESS(rv,rv);
    rv = pTheDetail->GetFirstChild(getter_AddRefs(pNode));
    NS_ENSURE_SUCCESS(rv,rv);
    if (pNode) {
      nsCOMPtr<nsIDOMNamedNodeMap> pAttributes;
      nsCOMPtr<nsIDOMNode> pAttribute, pFirstNode;
      nsAutoString pNodeValue;
      rv = pNode->GetFirstChild(getter_AddRefs(pFirstNode));
      NS_ENSURE_SUCCESS(rv,rv);
      if (pFirstNode) {
        pFirstNode->GetNodeValue(pNodeValue);
        NS_ENSURE_SUCCESS(rv,rv);
        pDetail  = pNodeValue;
      }
      pNode->GetAttributes(getter_AddRefs(pAttributes));
      NS_ENSURE_SUCCESS(rv,rv);
      pAttributes->GetNamedItem(NS_LITERAL_STRING("code"), getter_AddRefs(pAttribute));
      NS_ENSURE_SUCCESS(rv,rv);
      if (pAttribute) {
        pAttribute->GetNodeValue(pNodeValue);
        NS_ENSURE_SUCCESS(rv,rv);
        pDetail += NS_LITERAL_STRING("\n(Erreur ");
        pDetail += pNodeValue;
        pDetail += NS_LITERAL_STRING(")");
      }
    } else pDetail = NS_LITERAL_STRING("Erreur sans message.");
    pFaute = pDetail;
    rv = pFault->GetFaultString(pTitle);
    NS_ENSURE_SUCCESS(rv,rv);
    nsCOMPtr<nsIPrompt> pPrompt= do_GetService(NS_DEFAULTPROMPT_CONTRACTID, &rv);
    NS_ENSURE_SUCCESS(rv,rv);
    pPrompt->Alert(ToNewUnicode(pTitle), ToNewUnicode(pFaute));
    return NS_ERROR_FAILURE;
  }

  nsISOAPParameter ** pParameters;
  PRUint32 pTotal;
  rv = aResponse->GetParameters(PR_FALSE, &pTotal, &pParameters);
  NS_ENSURE_SUCCESS(rv,rv);
  if (pTotal!=1) {
    nsCOMPtr<nsIPrompt> pPrompt= do_GetService(NS_DEFAULTPROMPT_CONTRACTID, &rv);
    NS_ENSURE_SUCCESS(rv,rv);
    pPrompt->Alert(ToNewUnicode(NS_LITERAL_CSTRING("Erreur système")), ToNewUnicode(NS_LITERAL_CSTRING("Le nombre total de paramètres reçus est incorrect.")));
    return NS_ERROR_FAILURE;
  }

  nsAutoString pText;
  nsCOMArray<nsIVariant> pArray;
  nsCOMPtr<nsIWritableVariant> pVariant;
  PRUint32 pLsize=0, pCsize=0;
  PRUint32 pLineIndex, pColIndex;
  PRUint16 pNodeType;
  nsCOMPtr<nsIDOMElement> pResult;
  nsCOMPtr<nsIDOMNodeList> pLines, pValues;
  nsCOMPtr<nsIDOMNode> pLine, pValue, pContent;
  rv = pParameters[0]->GetElement(getter_AddRefs(pResult));
  NS_ENSURE_SUCCESS(rv,rv);
  rv = pResult->GetChildNodes(getter_AddRefs(pLines));
  NS_ENSURE_SUCCESS(rv,rv);
  pLines->GetLength(&pLsize);
  for (pLineIndex=0;pLineIndex<pLsize;pLineIndex++) {
    do {
      rv = pLines->Item(pLineIndex, getter_AddRefs(pLine));
      NS_ENSURE_SUCCESS(rv,rv);
      pLine->GetNodeType(&pNodeType);
      if (pNodeType!=nsIDOMNode::ELEMENT_NODE) pLineIndex++;
    } while (pLineIndex<pLsize && pNodeType!=nsIDOMNode::ELEMENT_NODE);
    if (pLineIndex>=pLsize) break;
    rv = pLine->GetChildNodes(getter_AddRefs(pValues));
    NS_ENSURE_SUCCESS(rv,rv);
    pValues->GetLength(&pCsize);
    for (pColIndex=0;pColIndex<pCsize;pColIndex++) {
      do {
        rv = pValues->Item(pColIndex, getter_AddRefs(pValue));
        NS_ENSURE_SUCCESS(rv,rv);
        pValue->GetNodeType(&pNodeType);
        if (pNodeType!=nsIDOMNode::ELEMENT_NODE) pColIndex++;
      } while (pColIndex<pCsize && pNodeType!=nsIDOMNode::ELEMENT_NODE);
      if (pColIndex>=pCsize) break;
      rv = pValue->GetFirstChild(getter_AddRefs(pContent));
      NS_ENSURE_SUCCESS(rv,rv);
      pVariant = do_CreateInstance(NS_VARIANT_CONTRACTID, &rv);
      NS_ENSURE_SUCCESS(rv,rv);
      if (pContent) {
        rv = pContent->GetNodeValue(pText);
        NS_ENSURE_SUCCESS(rv,rv);
        pVariant->SetAsAString(pText);
        printf("%s|",ToNewCString(pText));
      } else {
        pVariant->SetAsAString(NS_LITERAL_STRING(""));
      }
      rv = pArray.AppendObject(pVariant);
    }
  }
  rv = mComponent->TreatP0077(pArray, pLsize, pCsize, mKey);
  return rv;
}


/* Generated by Pygmalion */


NS_IMPL_ISUPPORTS1(mozListenerP0078, nsISOAPResponseListener)

mozListenerP0078::mozListenerP0078(mozC02gestsea* aComponent, const nsACString & aSearch)
{
  mComponent = aComponent;
  mSearch = aSearch;
}
mozListenerP0078::~mozListenerP0078()
{
}

NS_IMETHODIMP mozListenerP0078::HandleResponse(nsISOAPResponse *aResponse, nsISOAPCall *aCall, PRUint32 aStatus, PRBool aLast, PRBool *aReturn)
{
  nsresult rv;
  nsCOMPtr<nsISOAPFault> pFault;
  rv = aResponse->GetFault(getter_AddRefs(pFault));
  NS_ENSURE_SUCCESS(rv, rv);
  if (pFault) {
    nsAutoString pFaute, pDetail, pTitle;
    nsCOMPtr<nsIDOMElement> pTheDetail;
    nsCOMPtr<nsIDOMNode> pNode;
    rv = pFault->GetDetail(getter_AddRefs(pTheDetail));
    NS_ENSURE_SUCCESS(rv,rv);
    rv = pTheDetail->GetFirstChild(getter_AddRefs(pNode));
    NS_ENSURE_SUCCESS(rv,rv);
    if (pNode) {
      nsCOMPtr<nsIDOMNamedNodeMap> pAttributes;
      nsCOMPtr<nsIDOMNode> pAttribute, pFirstNode;
      nsAutoString pNodeValue;
      rv = pNode->GetFirstChild(getter_AddRefs(pFirstNode));
      NS_ENSURE_SUCCESS(rv,rv);
      if (pFirstNode) {
        pFirstNode->GetNodeValue(pNodeValue);
        NS_ENSURE_SUCCESS(rv,rv);
        pDetail  = pNodeValue;
      }
      pNode->GetAttributes(getter_AddRefs(pAttributes));
      NS_ENSURE_SUCCESS(rv,rv);
      pAttributes->GetNamedItem(NS_LITERAL_STRING("code"), getter_AddRefs(pAttribute));
      NS_ENSURE_SUCCESS(rv,rv);
      if (pAttribute) {
        pAttribute->GetNodeValue(pNodeValue);
        NS_ENSURE_SUCCESS(rv,rv);
        pDetail += NS_LITERAL_STRING("\n(Erreur ");
        pDetail += pNodeValue;
        pDetail += NS_LITERAL_STRING(")");
      }
    } else pDetail = NS_LITERAL_STRING("Erreur sans message.");
    pFaute = pDetail;
    rv = pFault->GetFaultString(pTitle);
    NS_ENSURE_SUCCESS(rv,rv);
    nsCOMPtr<nsIPrompt> pPrompt= do_GetService(NS_DEFAULTPROMPT_CONTRACTID, &rv);
    NS_ENSURE_SUCCESS(rv,rv);
    pPrompt->Alert(ToNewUnicode(pTitle), ToNewUnicode(pFaute));
    return NS_ERROR_FAILURE;
  }

  nsISOAPParameter ** pParameters;
  PRUint32 pTotal;
  rv = aResponse->GetParameters(PR_FALSE, &pTotal, &pParameters);
  NS_ENSURE_SUCCESS(rv,rv);
  if (pTotal!=1) {
    nsCOMPtr<nsIPrompt> pPrompt= do_GetService(NS_DEFAULTPROMPT_CONTRACTID, &rv);
    NS_ENSURE_SUCCESS(rv,rv);
    pPrompt->Alert(ToNewUnicode(NS_LITERAL_CSTRING("Erreur système")), ToNewUnicode(NS_LITERAL_CSTRING("Le nombre total de paramètres reçus est incorrect.")));
    return NS_ERROR_FAILURE;
  }

  nsAutoString pText;
  nsCOMArray<nsIVariant> pArray;
  nsCOMPtr<nsIWritableVariant> pVariant;
  PRUint32 pLsize=0, pCsize=0;
  PRUint32 pLineIndex, pColIndex;
  PRUint16 pNodeType;
  nsCOMPtr<nsIDOMElement> pResult;
  nsCOMPtr<nsIDOMNodeList> pLines, pValues;
  nsCOMPtr<nsIDOMNode> pLine, pValue, pContent;
  rv = pParameters[0]->GetElement(getter_AddRefs(pResult));
  NS_ENSURE_SUCCESS(rv,rv);
  rv = pResult->GetChildNodes(getter_AddRefs(pLines));
  NS_ENSURE_SUCCESS(rv,rv);
  pLines->GetLength(&pLsize);
  for (pLineIndex=0;pLineIndex<pLsize;pLineIndex++) {
    do {
      rv = pLines->Item(pLineIndex, getter_AddRefs(pLine));
      NS_ENSURE_SUCCESS(rv,rv);
      pLine->GetNodeType(&pNodeType);
      if (pNodeType!=nsIDOMNode::ELEMENT_NODE) pLineIndex++;
    } while (pLineIndex<pLsize && pNodeType!=nsIDOMNode::ELEMENT_NODE);
    if (pLineIndex>=pLsize) break;
    rv = pLine->GetChildNodes(getter_AddRefs(pValues));
    NS_ENSURE_SUCCESS(rv,rv);
    pValues->GetLength(&pCsize);
    for (pColIndex=0;pColIndex<pCsize;pColIndex++) {
      do {
        rv = pValues->Item(pColIndex, getter_AddRefs(pValue));
        NS_ENSURE_SUCCESS(rv,rv);
        pValue->GetNodeType(&pNodeType);
        if (pNodeType!=nsIDOMNode::ELEMENT_NODE) pColIndex++;
      } while (pColIndex<pCsize && pNodeType!=nsIDOMNode::ELEMENT_NODE);
      if (pColIndex>=pCsize) break;
      rv = pValue->GetFirstChild(getter_AddRefs(pContent));
      NS_ENSURE_SUCCESS(rv,rv);
      pVariant = do_CreateInstance(NS_VARIANT_CONTRACTID, &rv);
      NS_ENSURE_SUCCESS(rv,rv);
      if (pContent) {
        rv = pContent->GetNodeValue(pText);
        NS_ENSURE_SUCCESS(rv,rv);
        pVariant->SetAsAString(pText);
        printf("%s|",ToNewCString(pText));
      } else {
        pVariant->SetAsAString(NS_LITERAL_STRING(""));
      }
      rv = pArray.AppendObject(pVariant);
    }
  }
  rv = mComponent->TreatP0078(pArray, pLsize, pCsize, mSearch);
  return rv;
}


/* Generated by Pygmalion */


NS_IMPL_ISUPPORTS1(mozListenerP0079, nsISOAPResponseListener)

mozListenerP0079::mozListenerP0079(mozC02gestsea* aComponent, const nsACString & aSearch)
{
  mComponent = aComponent;
  mSearch = aSearch;
}
mozListenerP0079::~mozListenerP0079()
{
}

NS_IMETHODIMP mozListenerP0079::HandleResponse(nsISOAPResponse *aResponse, nsISOAPCall *aCall, PRUint32 aStatus, PRBool aLast, PRBool *aReturn)
{
  nsresult rv;
  nsCOMPtr<nsISOAPFault> pFault;
  rv = aResponse->GetFault(getter_AddRefs(pFault));
  NS_ENSURE_SUCCESS(rv, rv);
  if (pFault) {
    nsAutoString pFaute, pDetail, pTitle;
    nsCOMPtr<nsIDOMElement> pTheDetail;
    nsCOMPtr<nsIDOMNode> pNode;
    rv = pFault->GetDetail(getter_AddRefs(pTheDetail));
    NS_ENSURE_SUCCESS(rv,rv);
    rv = pTheDetail->GetFirstChild(getter_AddRefs(pNode));
    NS_ENSURE_SUCCESS(rv,rv);
    if (pNode) {
      nsCOMPtr<nsIDOMNamedNodeMap> pAttributes;
      nsCOMPtr<nsIDOMNode> pAttribute, pFirstNode;
      nsAutoString pNodeValue;
      rv = pNode->GetFirstChild(getter_AddRefs(pFirstNode));
      NS_ENSURE_SUCCESS(rv,rv);
      if (pFirstNode) {
        pFirstNode->GetNodeValue(pNodeValue);
        NS_ENSURE_SUCCESS(rv,rv);
        pDetail  = pNodeValue;
      }
      pNode->GetAttributes(getter_AddRefs(pAttributes));
      NS_ENSURE_SUCCESS(rv,rv);
      pAttributes->GetNamedItem(NS_LITERAL_STRING("code"), getter_AddRefs(pAttribute));
      NS_ENSURE_SUCCESS(rv,rv);
      if (pAttribute) {
        pAttribute->GetNodeValue(pNodeValue);
        NS_ENSURE_SUCCESS(rv,rv);
        pDetail += NS_LITERAL_STRING("\n(Erreur ");
        pDetail += pNodeValue;
        pDetail += NS_LITERAL_STRING(")");
      }
    } else pDetail = NS_LITERAL_STRING("Erreur sans message.");
    pFaute = pDetail;
    rv = pFault->GetFaultString(pTitle);
    NS_ENSURE_SUCCESS(rv,rv);
    nsCOMPtr<nsIPrompt> pPrompt= do_GetService(NS_DEFAULTPROMPT_CONTRACTID, &rv);
    NS_ENSURE_SUCCESS(rv,rv);
    pPrompt->Alert(ToNewUnicode(pTitle), ToNewUnicode(pFaute));
    return NS_ERROR_FAILURE;
  }

  nsISOAPParameter ** pParameters;
  PRUint32 pTotal;
  rv = aResponse->GetParameters(PR_FALSE, &pTotal, &pParameters);
  NS_ENSURE_SUCCESS(rv,rv);
  if (pTotal!=1) {
    nsCOMPtr<nsIPrompt> pPrompt= do_GetService(NS_DEFAULTPROMPT_CONTRACTID, &rv);
    NS_ENSURE_SUCCESS(rv,rv);
    pPrompt->Alert(ToNewUnicode(NS_LITERAL_CSTRING("Erreur système")), ToNewUnicode(NS_LITERAL_CSTRING("Le nombre total de paramètres reçus est incorrect.")));
    return NS_ERROR_FAILURE;
  }

  nsAutoString pText;
  nsCOMArray<nsIVariant> pArray;
  nsCOMPtr<nsIWritableVariant> pVariant;
  PRUint32 pLsize=0, pCsize=0;
  PRUint32 pLineIndex, pColIndex;
  PRUint16 pNodeType;
  nsCOMPtr<nsIDOMElement> pResult;
  nsCOMPtr<nsIDOMNodeList> pLines, pValues;
  nsCOMPtr<nsIDOMNode> pLine, pValue, pContent;
  rv = pParameters[0]->GetElement(getter_AddRefs(pResult));
  NS_ENSURE_SUCCESS(rv,rv);
  rv = pResult->GetChildNodes(getter_AddRefs(pLines));
  NS_ENSURE_SUCCESS(rv,rv);
  pLines->GetLength(&pLsize);
  for (pLineIndex=0;pLineIndex<pLsize;pLineIndex++) {
    do {
      rv = pLines->Item(pLineIndex, getter_AddRefs(pLine));
      NS_ENSURE_SUCCESS(rv,rv);
      pLine->GetNodeType(&pNodeType);
      if (pNodeType!=nsIDOMNode::ELEMENT_NODE) pLineIndex++;
    } while (pLineIndex<pLsize && pNodeType!=nsIDOMNode::ELEMENT_NODE);
    if (pLineIndex>=pLsize) break;
    rv = pLine->GetChildNodes(getter_AddRefs(pValues));
    NS_ENSURE_SUCCESS(rv,rv);
    pValues->GetLength(&pCsize);
    for (pColIndex=0;pColIndex<pCsize;pColIndex++) {
      do {
        rv = pValues->Item(pColIndex, getter_AddRefs(pValue));
        NS_ENSURE_SUCCESS(rv,rv);
        pValue->GetNodeType(&pNodeType);
        if (pNodeType!=nsIDOMNode::ELEMENT_NODE) pColIndex++;
      } while (pColIndex<pCsize && pNodeType!=nsIDOMNode::ELEMENT_NODE);
      if (pColIndex>=pCsize) break;
      rv = pValue->GetFirstChild(getter_AddRefs(pContent));
      NS_ENSURE_SUCCESS(rv,rv);
      pVariant = do_CreateInstance(NS_VARIANT_CONTRACTID, &rv);
      NS_ENSURE_SUCCESS(rv,rv);
      if (pContent) {
        rv = pContent->GetNodeValue(pText);
        NS_ENSURE_SUCCESS(rv,rv);
        pVariant->SetAsAString(pText);
        printf("%s|",ToNewCString(pText));
      } else {
        pVariant->SetAsAString(NS_LITERAL_STRING(""));
      }
      rv = pArray.AppendObject(pVariant);
    }
  }
  rv = mComponent->TreatP0079(pArray, pLsize, pCsize, mSearch);
  return rv;
}


/* Generated by Pygmalion */


NS_IMPL_ISUPPORTS1(mozListenerP007A, nsISOAPResponseListener)

mozListenerP007A::mozListenerP007A(mozC02gestsea* aComponent, const nsAString & aKey)
{
  mComponent = aComponent;
  mKey = aKey;
}
mozListenerP007A::~mozListenerP007A()
{
}

NS_IMETHODIMP mozListenerP007A::HandleResponse(nsISOAPResponse *aResponse, nsISOAPCall *aCall, PRUint32 aStatus, PRBool aLast, PRBool *aReturn)
{
  nsresult rv;
  nsCOMPtr<nsISOAPFault> pFault;
  rv = aResponse->GetFault(getter_AddRefs(pFault));
  NS_ENSURE_SUCCESS(rv, rv);
  if (pFault) {
    nsAutoString pFaute, pDetail, pTitle;
    nsCOMPtr<nsIDOMElement> pTheDetail;
    nsCOMPtr<nsIDOMNode> pNode;
    rv = pFault->GetDetail(getter_AddRefs(pTheDetail));
    NS_ENSURE_SUCCESS(rv,rv);
    rv = pTheDetail->GetFirstChild(getter_AddRefs(pNode));
    NS_ENSURE_SUCCESS(rv,rv);
    if (pNode) {
      nsCOMPtr<nsIDOMNamedNodeMap> pAttributes;
      nsCOMPtr<nsIDOMNode> pAttribute, pFirstNode;
      nsAutoString pNodeValue;
      rv = pNode->GetFirstChild(getter_AddRefs(pFirstNode));
      NS_ENSURE_SUCCESS(rv,rv);
      if (pFirstNode) {
        pFirstNode->GetNodeValue(pNodeValue);
        NS_ENSURE_SUCCESS(rv,rv);
        pDetail  = pNodeValue;
      }
      pNode->GetAttributes(getter_AddRefs(pAttributes));
      NS_ENSURE_SUCCESS(rv,rv);
      pAttributes->GetNamedItem(NS_LITERAL_STRING("code"), getter_AddRefs(pAttribute));
      NS_ENSURE_SUCCESS(rv,rv);
      if (pAttribute) {
        pAttribute->GetNodeValue(pNodeValue);
        NS_ENSURE_SUCCESS(rv,rv);
        pDetail += NS_LITERAL_STRING("\n(Erreur ");
        pDetail += pNodeValue;
        pDetail += NS_LITERAL_STRING(")");
      }
    } else pDetail = NS_LITERAL_STRING("Erreur sans message.");
    pFaute = pDetail;
    rv = pFault->GetFaultString(pTitle);
    NS_ENSURE_SUCCESS(rv,rv);
    nsCOMPtr<nsIPrompt> pPrompt= do_GetService(NS_DEFAULTPROMPT_CONTRACTID, &rv);
    NS_ENSURE_SUCCESS(rv,rv);
    pPrompt->Alert(ToNewUnicode(pTitle), ToNewUnicode(pFaute));
    return NS_ERROR_FAILURE;
  }

  nsISOAPParameter ** pParameters;
  PRUint32 pTotal;
  rv = aResponse->GetParameters(PR_FALSE, &pTotal, &pParameters);
  NS_ENSURE_SUCCESS(rv,rv);
  if (pTotal!=1) {
    nsCOMPtr<nsIPrompt> pPrompt= do_GetService(NS_DEFAULTPROMPT_CONTRACTID, &rv);
    NS_ENSURE_SUCCESS(rv,rv);
    pPrompt->Alert(ToNewUnicode(NS_LITERAL_CSTRING("Erreur système")), ToNewUnicode(NS_LITERAL_CSTRING("Le nombre total de paramètres reçus est incorrect.")));
    return NS_ERROR_FAILURE;
  }

  nsAutoString pText;
  nsCOMArray<nsIVariant> pArray;
  nsCOMPtr<nsIWritableVariant> pVariant;
  PRUint32 pLsize=0, pCsize=0;
  PRUint32 pLineIndex, pColIndex;
  PRUint16 pNodeType;
  nsCOMPtr<nsIDOMElement> pResult;
  nsCOMPtr<nsIDOMNodeList> pLines, pValues;
  nsCOMPtr<nsIDOMNode> pLine, pValue, pContent;
  rv = pParameters[0]->GetElement(getter_AddRefs(pResult));
  NS_ENSURE_SUCCESS(rv,rv);
  rv = pResult->GetChildNodes(getter_AddRefs(pLines));
  NS_ENSURE_SUCCESS(rv,rv);
  pLines->GetLength(&pLsize);
  for (pLineIndex=0;pLineIndex<pLsize;pLineIndex++) {
    do {
      rv = pLines->Item(pLineIndex, getter_AddRefs(pLine));
      NS_ENSURE_SUCCESS(rv,rv);
      pLine->GetNodeType(&pNodeType);
      if (pNodeType!=nsIDOMNode::ELEMENT_NODE) pLineIndex++;
    } while (pLineIndex<pLsize && pNodeType!=nsIDOMNode::ELEMENT_NODE);
    if (pLineIndex>=pLsize) break;
    rv = pLine->GetChildNodes(getter_AddRefs(pValues));
    NS_ENSURE_SUCCESS(rv,rv);
    pValues->GetLength(&pCsize);
    for (pColIndex=0;pColIndex<pCsize;pColIndex++) {
      do {
        rv = pValues->Item(pColIndex, getter_AddRefs(pValue));
        NS_ENSURE_SUCCESS(rv,rv);
        pValue->GetNodeType(&pNodeType);
        if (pNodeType!=nsIDOMNode::ELEMENT_NODE) pColIndex++;
      } while (pColIndex<pCsize && pNodeType!=nsIDOMNode::ELEMENT_NODE);
      if (pColIndex>=pCsize) break;
      rv = pValue->GetFirstChild(getter_AddRefs(pContent));
      NS_ENSURE_SUCCESS(rv,rv);
      pVariant = do_CreateInstance(NS_VARIANT_CONTRACTID, &rv);
      NS_ENSURE_SUCCESS(rv,rv);
      if (pContent) {
        rv = pContent->GetNodeValue(pText);
        NS_ENSURE_SUCCESS(rv,rv);
        pVariant->SetAsAString(pText);
        printf("%s|",ToNewCString(pText));
      } else {
        pVariant->SetAsAString(NS_LITERAL_STRING(""));
      }
      rv = pArray.AppendObject(pVariant);
    }
  }
  rv = mComponent->TreatP007A(pArray, pLsize, pCsize, mKey);
  return rv;
}


/* Generated by Pygmalion */


NS_IMPL_ISUPPORTS1(mozListenerP007B, nsISOAPResponseListener)

mozListenerP007B::mozListenerP007B(mozC02gestsea* aComponent, const nsACString & aSearch)
{
  mComponent = aComponent;
  mSearch = aSearch;
}
mozListenerP007B::~mozListenerP007B()
{
}

NS_IMETHODIMP mozListenerP007B::HandleResponse(nsISOAPResponse *aResponse, nsISOAPCall *aCall, PRUint32 aStatus, PRBool aLast, PRBool *aReturn)
{
  nsresult rv;
  nsCOMPtr<nsISOAPFault> pFault;
  rv = aResponse->GetFault(getter_AddRefs(pFault));
  NS_ENSURE_SUCCESS(rv, rv);
  if (pFault) {
    nsAutoString pFaute, pDetail, pTitle;
    nsCOMPtr<nsIDOMElement> pTheDetail;
    nsCOMPtr<nsIDOMNode> pNode;
    rv = pFault->GetDetail(getter_AddRefs(pTheDetail));
    NS_ENSURE_SUCCESS(rv,rv);
    rv = pTheDetail->GetFirstChild(getter_AddRefs(pNode));
    NS_ENSURE_SUCCESS(rv,rv);
    if (pNode) {
      nsCOMPtr<nsIDOMNamedNodeMap> pAttributes;
      nsCOMPtr<nsIDOMNode> pAttribute, pFirstNode;
      nsAutoString pNodeValue;
      rv = pNode->GetFirstChild(getter_AddRefs(pFirstNode));
      NS_ENSURE_SUCCESS(rv,rv);
      if (pFirstNode) {
        pFirstNode->GetNodeValue(pNodeValue);
        NS_ENSURE_SUCCESS(rv,rv);
        pDetail  = pNodeValue;
      }
      pNode->GetAttributes(getter_AddRefs(pAttributes));
      NS_ENSURE_SUCCESS(rv,rv);
      pAttributes->GetNamedItem(NS_LITERAL_STRING("code"), getter_AddRefs(pAttribute));
      NS_ENSURE_SUCCESS(rv,rv);
      if (pAttribute) {
        pAttribute->GetNodeValue(pNodeValue);
        NS_ENSURE_SUCCESS(rv,rv);
        pDetail += NS_LITERAL_STRING("\n(Erreur ");
        pDetail += pNodeValue;
        pDetail += NS_LITERAL_STRING(")");
      }
    } else pDetail = NS_LITERAL_STRING("Erreur sans message.");
    pFaute = pDetail;
    rv = pFault->GetFaultString(pTitle);
    NS_ENSURE_SUCCESS(rv,rv);
    nsCOMPtr<nsIPrompt> pPrompt= do_GetService(NS_DEFAULTPROMPT_CONTRACTID, &rv);
    NS_ENSURE_SUCCESS(rv,rv);
    pPrompt->Alert(ToNewUnicode(pTitle), ToNewUnicode(pFaute));
    return NS_ERROR_FAILURE;
  }

  nsISOAPParameter ** pParameters;
  PRUint32 pTotal;
  rv = aResponse->GetParameters(PR_FALSE, &pTotal, &pParameters);
  NS_ENSURE_SUCCESS(rv,rv);
  if (pTotal!=1) {
    nsCOMPtr<nsIPrompt> pPrompt= do_GetService(NS_DEFAULTPROMPT_CONTRACTID, &rv);
    NS_ENSURE_SUCCESS(rv,rv);
    pPrompt->Alert(ToNewUnicode(NS_LITERAL_CSTRING("Erreur système")), ToNewUnicode(NS_LITERAL_CSTRING("Le nombre total de paramètres reçus est incorrect.")));
    return NS_ERROR_FAILURE;
  }

  nsAutoString pText;
  nsCOMArray<nsIVariant> pArray;
  nsCOMPtr<nsIWritableVariant> pVariant;
  PRUint32 pLsize=0, pCsize=0;
  PRUint32 pLineIndex, pColIndex;
  PRUint16 pNodeType;
  nsCOMPtr<nsIDOMElement> pResult;
  nsCOMPtr<nsIDOMNodeList> pLines, pValues;
  nsCOMPtr<nsIDOMNode> pLine, pValue, pContent;
  rv = pParameters[0]->GetElement(getter_AddRefs(pResult));
  NS_ENSURE_SUCCESS(rv,rv);
  rv = pResult->GetChildNodes(getter_AddRefs(pLines));
  NS_ENSURE_SUCCESS(rv,rv);
  pLines->GetLength(&pLsize);
  for (pLineIndex=0;pLineIndex<pLsize;pLineIndex++) {
    do {
      rv = pLines->Item(pLineIndex, getter_AddRefs(pLine));
      NS_ENSURE_SUCCESS(rv,rv);
      pLine->GetNodeType(&pNodeType);
      if (pNodeType!=nsIDOMNode::ELEMENT_NODE) pLineIndex++;
    } while (pLineIndex<pLsize && pNodeType!=nsIDOMNode::ELEMENT_NODE);
    if (pLineIndex>=pLsize) break;
    rv = pLine->GetChildNodes(getter_AddRefs(pValues));
    NS_ENSURE_SUCCESS(rv,rv);
    pValues->GetLength(&pCsize);
    for (pColIndex=0;pColIndex<pCsize;pColIndex++) {
      do {
        rv = pValues->Item(pColIndex, getter_AddRefs(pValue));
        NS_ENSURE_SUCCESS(rv,rv);
        pValue->GetNodeType(&pNodeType);
        if (pNodeType!=nsIDOMNode::ELEMENT_NODE) pColIndex++;
      } while (pColIndex<pCsize && pNodeType!=nsIDOMNode::ELEMENT_NODE);
      if (pColIndex>=pCsize) break;
      rv = pValue->GetFirstChild(getter_AddRefs(pContent));
      NS_ENSURE_SUCCESS(rv,rv);
      pVariant = do_CreateInstance(NS_VARIANT_CONTRACTID, &rv);
      NS_ENSURE_SUCCESS(rv,rv);
      if (pContent) {
        rv = pContent->GetNodeValue(pText);
        NS_ENSURE_SUCCESS(rv,rv);
        pVariant->SetAsAString(pText);
        printf("%s|",ToNewCString(pText));
      } else {
        pVariant->SetAsAString(NS_LITERAL_STRING(""));
      }
      rv = pArray.AppendObject(pVariant);
    }
  }
  rv = mComponent->TreatP007B(pArray, pLsize, pCsize, mSearch);
  return rv;
}


/* Generated by Pygmalion */


NS_IMPL_ISUPPORTS1(mozListenerP007C, nsISOAPResponseListener)

mozListenerP007C::mozListenerP007C(mozC02gestsea* aComponent, const nsACString & aSearch)
{
  mComponent = aComponent;
  mSearch = aSearch;
}
mozListenerP007C::~mozListenerP007C()
{
}

NS_IMETHODIMP mozListenerP007C::HandleResponse(nsISOAPResponse *aResponse, nsISOAPCall *aCall, PRUint32 aStatus, PRBool aLast, PRBool *aReturn)
{
  nsresult rv;
  nsCOMPtr<nsISOAPFault> pFault;
  rv = aResponse->GetFault(getter_AddRefs(pFault));
  NS_ENSURE_SUCCESS(rv, rv);
  if (pFault) {
    nsAutoString pFaute, pDetail, pTitle;
    nsCOMPtr<nsIDOMElement> pTheDetail;
    nsCOMPtr<nsIDOMNode> pNode;
    rv = pFault->GetDetail(getter_AddRefs(pTheDetail));
    NS_ENSURE_SUCCESS(rv,rv);
    rv = pTheDetail->GetFirstChild(getter_AddRefs(pNode));
    NS_ENSURE_SUCCESS(rv,rv);
    if (pNode) {
      nsCOMPtr<nsIDOMNamedNodeMap> pAttributes;
      nsCOMPtr<nsIDOMNode> pAttribute, pFirstNode;
      nsAutoString pNodeValue;
      rv = pNode->GetFirstChild(getter_AddRefs(pFirstNode));
      NS_ENSURE_SUCCESS(rv,rv);
      if (pFirstNode) {
        pFirstNode->GetNodeValue(pNodeValue);
        NS_ENSURE_SUCCESS(rv,rv);
        pDetail  = pNodeValue;
      }
      pNode->GetAttributes(getter_AddRefs(pAttributes));
      NS_ENSURE_SUCCESS(rv,rv);
      pAttributes->GetNamedItem(NS_LITERAL_STRING("code"), getter_AddRefs(pAttribute));
      NS_ENSURE_SUCCESS(rv,rv);
      if (pAttribute) {
        pAttribute->GetNodeValue(pNodeValue);
        NS_ENSURE_SUCCESS(rv,rv);
        pDetail += NS_LITERAL_STRING("\n(Erreur ");
        pDetail += pNodeValue;
        pDetail += NS_LITERAL_STRING(")");
      }
    } else pDetail = NS_LITERAL_STRING("Erreur sans message.");
    pFaute = pDetail;
    rv = pFault->GetFaultString(pTitle);
    NS_ENSURE_SUCCESS(rv,rv);
    nsCOMPtr<nsIPrompt> pPrompt= do_GetService(NS_DEFAULTPROMPT_CONTRACTID, &rv);
    NS_ENSURE_SUCCESS(rv,rv);
    pPrompt->Alert(ToNewUnicode(pTitle), ToNewUnicode(pFaute));
    return NS_ERROR_FAILURE;
  }

  nsISOAPParameter ** pParameters;
  PRUint32 pTotal;
  rv = aResponse->GetParameters(PR_FALSE, &pTotal, &pParameters);
  NS_ENSURE_SUCCESS(rv,rv);
  if (pTotal!=1) {
    nsCOMPtr<nsIPrompt> pPrompt= do_GetService(NS_DEFAULTPROMPT_CONTRACTID, &rv);
    NS_ENSURE_SUCCESS(rv,rv);
    pPrompt->Alert(ToNewUnicode(NS_LITERAL_CSTRING("Erreur système")), ToNewUnicode(NS_LITERAL_CSTRING("Le nombre total de paramètres reçus est incorrect.")));
    return NS_ERROR_FAILURE;
  }

  nsAutoString pText;
  nsCOMArray<nsIVariant> pArray;
  nsCOMPtr<nsIWritableVariant> pVariant;
  PRUint32 pLsize=0, pCsize=0;
  PRUint32 pLineIndex, pColIndex;
  PRUint16 pNodeType;
  nsCOMPtr<nsIDOMElement> pResult;
  nsCOMPtr<nsIDOMNodeList> pLines, pValues;
  nsCOMPtr<nsIDOMNode> pLine, pValue, pContent;
  rv = pParameters[0]->GetElement(getter_AddRefs(pResult));
  NS_ENSURE_SUCCESS(rv,rv);
  rv = pResult->GetChildNodes(getter_AddRefs(pLines));
  NS_ENSURE_SUCCESS(rv,rv);
  pLines->GetLength(&pLsize);
  for (pLineIndex=0;pLineIndex<pLsize;pLineIndex++) {
    do {
      rv = pLines->Item(pLineIndex, getter_AddRefs(pLine));
      NS_ENSURE_SUCCESS(rv,rv);
      pLine->GetNodeType(&pNodeType);
      if (pNodeType!=nsIDOMNode::ELEMENT_NODE) pLineIndex++;
    } while (pLineIndex<pLsize && pNodeType!=nsIDOMNode::ELEMENT_NODE);
    if (pLineIndex>=pLsize) break;
    rv = pLine->GetChildNodes(getter_AddRefs(pValues));
    NS_ENSURE_SUCCESS(rv,rv);
    pValues->GetLength(&pCsize);
    for (pColIndex=0;pColIndex<pCsize;pColIndex++) {
      do {
        rv = pValues->Item(pColIndex, getter_AddRefs(pValue));
        NS_ENSURE_SUCCESS(rv,rv);
        pValue->GetNodeType(&pNodeType);
        if (pNodeType!=nsIDOMNode::ELEMENT_NODE) pColIndex++;
      } while (pColIndex<pCsize && pNodeType!=nsIDOMNode::ELEMENT_NODE);
      if (pColIndex>=pCsize) break;
      rv = pValue->GetFirstChild(getter_AddRefs(pContent));
      NS_ENSURE_SUCCESS(rv,rv);
      pVariant = do_CreateInstance(NS_VARIANT_CONTRACTID, &rv);
      NS_ENSURE_SUCCESS(rv,rv);
      if (pContent) {
        rv = pContent->GetNodeValue(pText);
        NS_ENSURE_SUCCESS(rv,rv);
        pVariant->SetAsAString(pText);
        printf("%s|",ToNewCString(pText));
      } else {
        pVariant->SetAsAString(NS_LITERAL_STRING(""));
      }
      rv = pArray.AppendObject(pVariant);
    }
  }
  rv = mComponent->TreatP007C(pArray, pLsize, pCsize, mSearch);
  return rv;
}


/* Generated by Pygmalion */


NS_IMPL_ISUPPORTS1(mozListenerP007D, nsISOAPResponseListener)

mozListenerP007D::mozListenerP007D(mozC02gestsea* aComponent, const nsAString & aKey)
{
  mComponent = aComponent;
  mKey = aKey;
}
mozListenerP007D::~mozListenerP007D()
{
}

NS_IMETHODIMP mozListenerP007D::HandleResponse(nsISOAPResponse *aResponse, nsISOAPCall *aCall, PRUint32 aStatus, PRBool aLast, PRBool *aReturn)
{
  nsresult rv;
  nsCOMPtr<nsISOAPFault> pFault;
  rv = aResponse->GetFault(getter_AddRefs(pFault));
  NS_ENSURE_SUCCESS(rv, rv);
  if (pFault) {
    nsAutoString pFaute, pDetail, pTitle;
    nsCOMPtr<nsIDOMElement> pTheDetail;
    nsCOMPtr<nsIDOMNode> pNode;
    rv = pFault->GetDetail(getter_AddRefs(pTheDetail));
    NS_ENSURE_SUCCESS(rv,rv);
    rv = pTheDetail->GetFirstChild(getter_AddRefs(pNode));
    NS_ENSURE_SUCCESS(rv,rv);
    if (pNode) {
      nsCOMPtr<nsIDOMNamedNodeMap> pAttributes;
      nsCOMPtr<nsIDOMNode> pAttribute, pFirstNode;
      nsAutoString pNodeValue;
      rv = pNode->GetFirstChild(getter_AddRefs(pFirstNode));
      NS_ENSURE_SUCCESS(rv,rv);
      if (pFirstNode) {
        pFirstNode->GetNodeValue(pNodeValue);
        NS_ENSURE_SUCCESS(rv,rv);
        pDetail  = pNodeValue;
      }
      pNode->GetAttributes(getter_AddRefs(pAttributes));
      NS_ENSURE_SUCCESS(rv,rv);
      pAttributes->GetNamedItem(NS_LITERAL_STRING("code"), getter_AddRefs(pAttribute));
      NS_ENSURE_SUCCESS(rv,rv);
      if (pAttribute) {
        pAttribute->GetNodeValue(pNodeValue);
        NS_ENSURE_SUCCESS(rv,rv);
        pDetail += NS_LITERAL_STRING("\n(Erreur ");
        pDetail += pNodeValue;
        pDetail += NS_LITERAL_STRING(")");
      }
    } else pDetail = NS_LITERAL_STRING("Erreur sans message.");
    pFaute = pDetail;
    rv = pFault->GetFaultString(pTitle);
    NS_ENSURE_SUCCESS(rv,rv);
    nsCOMPtr<nsIPrompt> pPrompt= do_GetService(NS_DEFAULTPROMPT_CONTRACTID, &rv);
    NS_ENSURE_SUCCESS(rv,rv);
    pPrompt->Alert(ToNewUnicode(pTitle), ToNewUnicode(pFaute));
    return NS_ERROR_FAILURE;
  }

  nsISOAPParameter ** pParameters;
  PRUint32 pTotal;
  rv = aResponse->GetParameters(PR_FALSE, &pTotal, &pParameters);
  NS_ENSURE_SUCCESS(rv,rv);
  if (pTotal!=1) {
    nsCOMPtr<nsIPrompt> pPrompt= do_GetService(NS_DEFAULTPROMPT_CONTRACTID, &rv);
    NS_ENSURE_SUCCESS(rv,rv);
    pPrompt->Alert(ToNewUnicode(NS_LITERAL_CSTRING("Erreur système")), ToNewUnicode(NS_LITERAL_CSTRING("Le nombre total de paramètres reçus est incorrect.")));
    return NS_ERROR_FAILURE;
  }

  nsAutoString pText;
  nsCOMArray<nsIVariant> pArray;
  nsCOMPtr<nsIWritableVariant> pVariant;
  PRUint32 pLsize=0, pCsize=0;
  PRUint32 pLineIndex, pColIndex;
  PRUint16 pNodeType;
  nsCOMPtr<nsIDOMElement> pResult;
  nsCOMPtr<nsIDOMNodeList> pLines, pValues;
  nsCOMPtr<nsIDOMNode> pLine, pValue, pContent;
  rv = pParameters[0]->GetElement(getter_AddRefs(pResult));
  NS_ENSURE_SUCCESS(rv,rv);
  rv = pResult->GetChildNodes(getter_AddRefs(pLines));
  NS_ENSURE_SUCCESS(rv,rv);
  pLines->GetLength(&pLsize);
  for (pLineIndex=0;pLineIndex<pLsize;pLineIndex++) {
    do {
      rv = pLines->Item(pLineIndex, getter_AddRefs(pLine));
      NS_ENSURE_SUCCESS(rv,rv);
      pLine->GetNodeType(&pNodeType);
      if (pNodeType!=nsIDOMNode::ELEMENT_NODE) pLineIndex++;
    } while (pLineIndex<pLsize && pNodeType!=nsIDOMNode::ELEMENT_NODE);
    if (pLineIndex>=pLsize) break;
    rv = pLine->GetChildNodes(getter_AddRefs(pValues));
    NS_ENSURE_SUCCESS(rv,rv);
    pValues->GetLength(&pCsize);
    for (pColIndex=0;pColIndex<pCsize;pColIndex++) {
      do {
        rv = pValues->Item(pColIndex, getter_AddRefs(pValue));
        NS_ENSURE_SUCCESS(rv,rv);
        pValue->GetNodeType(&pNodeType);
        if (pNodeType!=nsIDOMNode::ELEMENT_NODE) pColIndex++;
      } while (pColIndex<pCsize && pNodeType!=nsIDOMNode::ELEMENT_NODE);
      if (pColIndex>=pCsize) break;
      rv = pValue->GetFirstChild(getter_AddRefs(pContent));
      NS_ENSURE_SUCCESS(rv,rv);
      pVariant = do_CreateInstance(NS_VARIANT_CONTRACTID, &rv);
      NS_ENSURE_SUCCESS(rv,rv);
      if (pContent) {
        rv = pContent->GetNodeValue(pText);
        NS_ENSURE_SUCCESS(rv,rv);
        pVariant->SetAsAString(pText);
        printf("%s|",ToNewCString(pText));
      } else {
        pVariant->SetAsAString(NS_LITERAL_STRING(""));
      }
      rv = pArray.AppendObject(pVariant);
    }
  }
  rv = mComponent->TreatP007D(pArray, pLsize, pCsize, mKey);
  return rv;
}


/* Generated by Pygmalion */


NS_IMPL_ISUPPORTS1(mozListenerP007E, nsISOAPResponseListener)

mozListenerP007E::mozListenerP007E(mozC02gestsea* aComponent, const nsACString & aSearch)
{
  mComponent = aComponent;
  mSearch = aSearch;
}
mozListenerP007E::~mozListenerP007E()
{
}

NS_IMETHODIMP mozListenerP007E::HandleResponse(nsISOAPResponse *aResponse, nsISOAPCall *aCall, PRUint32 aStatus, PRBool aLast, PRBool *aReturn)
{
  nsresult rv;
  nsCOMPtr<nsISOAPFault> pFault;
  rv = aResponse->GetFault(getter_AddRefs(pFault));
  NS_ENSURE_SUCCESS(rv, rv);
  if (pFault) {
    nsAutoString pFaute, pDetail, pTitle;
    nsCOMPtr<nsIDOMElement> pTheDetail;
    nsCOMPtr<nsIDOMNode> pNode;
    rv = pFault->GetDetail(getter_AddRefs(pTheDetail));
    NS_ENSURE_SUCCESS(rv,rv);
    rv = pTheDetail->GetFirstChild(getter_AddRefs(pNode));
    NS_ENSURE_SUCCESS(rv,rv);
    if (pNode) {
      nsCOMPtr<nsIDOMNamedNodeMap> pAttributes;
      nsCOMPtr<nsIDOMNode> pAttribute, pFirstNode;
      nsAutoString pNodeValue;
      rv = pNode->GetFirstChild(getter_AddRefs(pFirstNode));
      NS_ENSURE_SUCCESS(rv,rv);
      if (pFirstNode) {
        pFirstNode->GetNodeValue(pNodeValue);
        NS_ENSURE_SUCCESS(rv,rv);
        pDetail  = pNodeValue;
      }
      pNode->GetAttributes(getter_AddRefs(pAttributes));
      NS_ENSURE_SUCCESS(rv,rv);
      pAttributes->GetNamedItem(NS_LITERAL_STRING("code"), getter_AddRefs(pAttribute));
      NS_ENSURE_SUCCESS(rv,rv);
      if (pAttribute) {
        pAttribute->GetNodeValue(pNodeValue);
        NS_ENSURE_SUCCESS(rv,rv);
        pDetail += NS_LITERAL_STRING("\n(Erreur ");
        pDetail += pNodeValue;
        pDetail += NS_LITERAL_STRING(")");
      }
    } else pDetail = NS_LITERAL_STRING("Erreur sans message.");
    pFaute = pDetail;
    rv = pFault->GetFaultString(pTitle);
    NS_ENSURE_SUCCESS(rv,rv);
    nsCOMPtr<nsIPrompt> pPrompt= do_GetService(NS_DEFAULTPROMPT_CONTRACTID, &rv);
    NS_ENSURE_SUCCESS(rv,rv);
    pPrompt->Alert(ToNewUnicode(pTitle), ToNewUnicode(pFaute));
    return NS_ERROR_FAILURE;
  }

  nsISOAPParameter ** pParameters;
  PRUint32 pTotal;
  rv = aResponse->GetParameters(PR_FALSE, &pTotal, &pParameters);
  NS_ENSURE_SUCCESS(rv,rv);
  if (pTotal!=1) {
    nsCOMPtr<nsIPrompt> pPrompt= do_GetService(NS_DEFAULTPROMPT_CONTRACTID, &rv);
    NS_ENSURE_SUCCESS(rv,rv);
    pPrompt->Alert(ToNewUnicode(NS_LITERAL_CSTRING("Erreur système")), ToNewUnicode(NS_LITERAL_CSTRING("Le nombre total de paramètres reçus est incorrect.")));
    return NS_ERROR_FAILURE;
  }

  nsAutoString pText;
  nsCOMArray<nsIVariant> pArray;
  nsCOMPtr<nsIWritableVariant> pVariant;
  PRUint32 pLsize=0, pCsize=0;
  PRUint32 pLineIndex, pColIndex;
  PRUint16 pNodeType;
  nsCOMPtr<nsIDOMElement> pResult;
  nsCOMPtr<nsIDOMNodeList> pLines, pValues;
  nsCOMPtr<nsIDOMNode> pLine, pValue, pContent;
  rv = pParameters[0]->GetElement(getter_AddRefs(pResult));
  NS_ENSURE_SUCCESS(rv,rv);
  rv = pResult->GetChildNodes(getter_AddRefs(pLines));
  NS_ENSURE_SUCCESS(rv,rv);
  pLines->GetLength(&pLsize);
  for (pLineIndex=0;pLineIndex<pLsize;pLineIndex++) {
    do {
      rv = pLines->Item(pLineIndex, getter_AddRefs(pLine));
      NS_ENSURE_SUCCESS(rv,rv);
      pLine->GetNodeType(&pNodeType);
      if (pNodeType!=nsIDOMNode::ELEMENT_NODE) pLineIndex++;
    } while (pLineIndex<pLsize && pNodeType!=nsIDOMNode::ELEMENT_NODE);
    if (pLineIndex>=pLsize) break;
    rv = pLine->GetChildNodes(getter_AddRefs(pValues));
    NS_ENSURE_SUCCESS(rv,rv);
    pValues->GetLength(&pCsize);
    for (pColIndex=0;pColIndex<pCsize;pColIndex++) {
      do {
        rv = pValues->Item(pColIndex, getter_AddRefs(pValue));
        NS_ENSURE_SUCCESS(rv,rv);
        pValue->GetNodeType(&pNodeType);
        if (pNodeType!=nsIDOMNode::ELEMENT_NODE) pColIndex++;
      } while (pColIndex<pCsize && pNodeType!=nsIDOMNode::ELEMENT_NODE);
      if (pColIndex>=pCsize) break;
      rv = pValue->GetFirstChild(getter_AddRefs(pContent));
      NS_ENSURE_SUCCESS(rv,rv);
      pVariant = do_CreateInstance(NS_VARIANT_CONTRACTID, &rv);
      NS_ENSURE_SUCCESS(rv,rv);
      if (pContent) {
        rv = pContent->GetNodeValue(pText);
        NS_ENSURE_SUCCESS(rv,rv);
        pVariant->SetAsAString(pText);
        printf("%s|",ToNewCString(pText));
      } else {
        pVariant->SetAsAString(NS_LITERAL_STRING(""));
      }
      rv = pArray.AppendObject(pVariant);
    }
  }
  rv = mComponent->TreatP007E(pArray, pLsize, pCsize, mSearch);
  return rv;
}


/* Generated by Pygmalion */


NS_IMPL_ISUPPORTS1(mozListenerP007F, nsISOAPResponseListener)

mozListenerP007F::mozListenerP007F(mozC02gestsea* aComponent, const nsACString & aSearch)
{
  mComponent = aComponent;
  mSearch = aSearch;
}
mozListenerP007F::~mozListenerP007F()
{
}

NS_IMETHODIMP mozListenerP007F::HandleResponse(nsISOAPResponse *aResponse, nsISOAPCall *aCall, PRUint32 aStatus, PRBool aLast, PRBool *aReturn)
{
  nsresult rv;
  nsCOMPtr<nsISOAPFault> pFault;
  rv = aResponse->GetFault(getter_AddRefs(pFault));
  NS_ENSURE_SUCCESS(rv, rv);
  if (pFault) {
    nsAutoString pFaute, pDetail, pTitle;
    nsCOMPtr<nsIDOMElement> pTheDetail;
    nsCOMPtr<nsIDOMNode> pNode;
    rv = pFault->GetDetail(getter_AddRefs(pTheDetail));
    NS_ENSURE_SUCCESS(rv,rv);
    rv = pTheDetail->GetFirstChild(getter_AddRefs(pNode));
    NS_ENSURE_SUCCESS(rv,rv);
    if (pNode) {
      nsCOMPtr<nsIDOMNamedNodeMap> pAttributes;
      nsCOMPtr<nsIDOMNode> pAttribute, pFirstNode;
      nsAutoString pNodeValue;
      rv = pNode->GetFirstChild(getter_AddRefs(pFirstNode));
      NS_ENSURE_SUCCESS(rv,rv);
      if (pFirstNode) {
        pFirstNode->GetNodeValue(pNodeValue);
        NS_ENSURE_SUCCESS(rv,rv);
        pDetail  = pNodeValue;
      }
      pNode->GetAttributes(getter_AddRefs(pAttributes));
      NS_ENSURE_SUCCESS(rv,rv);
      pAttributes->GetNamedItem(NS_LITERAL_STRING("code"), getter_AddRefs(pAttribute));
      NS_ENSURE_SUCCESS(rv,rv);
      if (pAttribute) {
        pAttribute->GetNodeValue(pNodeValue);
        NS_ENSURE_SUCCESS(rv,rv);
        pDetail += NS_LITERAL_STRING("\n(Erreur ");
        pDetail += pNodeValue;
        pDetail += NS_LITERAL_STRING(")");
      }
    } else pDetail = NS_LITERAL_STRING("Erreur sans message.");
    pFaute = pDetail;
    rv = pFault->GetFaultString(pTitle);
    NS_ENSURE_SUCCESS(rv,rv);
    nsCOMPtr<nsIPrompt> pPrompt= do_GetService(NS_DEFAULTPROMPT_CONTRACTID, &rv);
    NS_ENSURE_SUCCESS(rv,rv);
    pPrompt->Alert(ToNewUnicode(pTitle), ToNewUnicode(pFaute));
    return NS_ERROR_FAILURE;
  }

  nsISOAPParameter ** pParameters;
  PRUint32 pTotal;
  rv = aResponse->GetParameters(PR_FALSE, &pTotal, &pParameters);
  NS_ENSURE_SUCCESS(rv,rv);
  if (pTotal!=1) {
    nsCOMPtr<nsIPrompt> pPrompt= do_GetService(NS_DEFAULTPROMPT_CONTRACTID, &rv);
    NS_ENSURE_SUCCESS(rv,rv);
    pPrompt->Alert(ToNewUnicode(NS_LITERAL_CSTRING("Erreur système")), ToNewUnicode(NS_LITERAL_CSTRING("Le nombre total de paramètres reçus est incorrect.")));
    return NS_ERROR_FAILURE;
  }

  nsAutoString pText;
  nsCOMArray<nsIVariant> pArray;
  nsCOMPtr<nsIWritableVariant> pVariant;
  PRUint32 pLsize=0, pCsize=0;
  PRUint32 pLineIndex, pColIndex;
  PRUint16 pNodeType;
  nsCOMPtr<nsIDOMElement> pResult;
  nsCOMPtr<nsIDOMNodeList> pLines, pValues;
  nsCOMPtr<nsIDOMNode> pLine, pValue, pContent;
  rv = pParameters[0]->GetElement(getter_AddRefs(pResult));
  NS_ENSURE_SUCCESS(rv,rv);
  rv = pResult->GetChildNodes(getter_AddRefs(pLines));
  NS_ENSURE_SUCCESS(rv,rv);
  pLines->GetLength(&pLsize);
  for (pLineIndex=0;pLineIndex<pLsize;pLineIndex++) {
    do {
      rv = pLines->Item(pLineIndex, getter_AddRefs(pLine));
      NS_ENSURE_SUCCESS(rv,rv);
      pLine->GetNodeType(&pNodeType);
      if (pNodeType!=nsIDOMNode::ELEMENT_NODE) pLineIndex++;
    } while (pLineIndex<pLsize && pNodeType!=nsIDOMNode::ELEMENT_NODE);
    if (pLineIndex>=pLsize) break;
    rv = pLine->GetChildNodes(getter_AddRefs(pValues));
    NS_ENSURE_SUCCESS(rv,rv);
    pValues->GetLength(&pCsize);
    for (pColIndex=0;pColIndex<pCsize;pColIndex++) {
      do {
        rv = pValues->Item(pColIndex, getter_AddRefs(pValue));
        NS_ENSURE_SUCCESS(rv,rv);
        pValue->GetNodeType(&pNodeType);
        if (pNodeType!=nsIDOMNode::ELEMENT_NODE) pColIndex++;
      } while (pColIndex<pCsize && pNodeType!=nsIDOMNode::ELEMENT_NODE);
      if (pColIndex>=pCsize) break;
      rv = pValue->GetFirstChild(getter_AddRefs(pContent));
      NS_ENSURE_SUCCESS(rv,rv);
      pVariant = do_CreateInstance(NS_VARIANT_CONTRACTID, &rv);
      NS_ENSURE_SUCCESS(rv,rv);
      if (pContent) {
        rv = pContent->GetNodeValue(pText);
        NS_ENSURE_SUCCESS(rv,rv);
        pVariant->SetAsAString(pText);
        printf("%s|",ToNewCString(pText));
      } else {
        pVariant->SetAsAString(NS_LITERAL_STRING(""));
      }
      rv = pArray.AppendObject(pVariant);
    }
  }
  rv = mComponent->TreatP007F(pArray, pLsize, pCsize, mSearch);
  return rv;
}


/* Generated by Pygmalion */


NS_IMPL_ISUPPORTS1(mozListenerP0080, nsISOAPResponseListener)

mozListenerP0080::mozListenerP0080(mozC02gestsea* aComponent, const nsAString & aKey)
{
  mComponent = aComponent;
  mKey = aKey;
}
mozListenerP0080::~mozListenerP0080()
{
}

NS_IMETHODIMP mozListenerP0080::HandleResponse(nsISOAPResponse *aResponse, nsISOAPCall *aCall, PRUint32 aStatus, PRBool aLast, PRBool *aReturn)
{
  nsresult rv;
  nsCOMPtr<nsISOAPFault> pFault;
  rv = aResponse->GetFault(getter_AddRefs(pFault));
  NS_ENSURE_SUCCESS(rv, rv);
  if (pFault) {
    nsAutoString pFaute, pDetail, pTitle;
    nsCOMPtr<nsIDOMElement> pTheDetail;
    nsCOMPtr<nsIDOMNode> pNode;
    rv = pFault->GetDetail(getter_AddRefs(pTheDetail));
    NS_ENSURE_SUCCESS(rv,rv);
    rv = pTheDetail->GetFirstChild(getter_AddRefs(pNode));
    NS_ENSURE_SUCCESS(rv,rv);
    if (pNode) {
      nsCOMPtr<nsIDOMNamedNodeMap> pAttributes;
      nsCOMPtr<nsIDOMNode> pAttribute, pFirstNode;
      nsAutoString pNodeValue;
      rv = pNode->GetFirstChild(getter_AddRefs(pFirstNode));
      NS_ENSURE_SUCCESS(rv,rv);
      if (pFirstNode) {
        pFirstNode->GetNodeValue(pNodeValue);
        NS_ENSURE_SUCCESS(rv,rv);
        pDetail  = pNodeValue;
      }
      pNode->GetAttributes(getter_AddRefs(pAttributes));
      NS_ENSURE_SUCCESS(rv,rv);
      pAttributes->GetNamedItem(NS_LITERAL_STRING("code"), getter_AddRefs(pAttribute));
      NS_ENSURE_SUCCESS(rv,rv);
      if (pAttribute) {
        pAttribute->GetNodeValue(pNodeValue);
        NS_ENSURE_SUCCESS(rv,rv);
        pDetail += NS_LITERAL_STRING("\n(Erreur ");
        pDetail += pNodeValue;
        pDetail += NS_LITERAL_STRING(")");
      }
    } else pDetail = NS_LITERAL_STRING("Erreur sans message.");
    pFaute = pDetail;
    rv = pFault->GetFaultString(pTitle);
    NS_ENSURE_SUCCESS(rv,rv);
    nsCOMPtr<nsIPrompt> pPrompt= do_GetService(NS_DEFAULTPROMPT_CONTRACTID, &rv);
    NS_ENSURE_SUCCESS(rv,rv);
    pPrompt->Alert(ToNewUnicode(pTitle), ToNewUnicode(pFaute));
    return NS_ERROR_FAILURE;
  }

  nsISOAPParameter ** pParameters;
  PRUint32 pTotal;
  rv = aResponse->GetParameters(PR_FALSE, &pTotal, &pParameters);
  NS_ENSURE_SUCCESS(rv,rv);
  if (pTotal!=1) {
    nsCOMPtr<nsIPrompt> pPrompt= do_GetService(NS_DEFAULTPROMPT_CONTRACTID, &rv);
    NS_ENSURE_SUCCESS(rv,rv);
    pPrompt->Alert(ToNewUnicode(NS_LITERAL_CSTRING("Erreur système")), ToNewUnicode(NS_LITERAL_CSTRING("Le nombre total de paramètres reçus est incorrect.")));
    return NS_ERROR_FAILURE;
  }

  nsAutoString pText;
  nsCOMArray<nsIVariant> pArray;
  nsCOMPtr<nsIWritableVariant> pVariant;
  PRUint32 pLsize=0, pCsize=0;
  PRUint32 pLineIndex, pColIndex;
  PRUint16 pNodeType;
  nsCOMPtr<nsIDOMElement> pResult;
  nsCOMPtr<nsIDOMNodeList> pLines, pValues;
  nsCOMPtr<nsIDOMNode> pLine, pValue, pContent;
  rv = pParameters[0]->GetElement(getter_AddRefs(pResult));
  NS_ENSURE_SUCCESS(rv,rv);
  rv = pResult->GetChildNodes(getter_AddRefs(pLines));
  NS_ENSURE_SUCCESS(rv,rv);
  pLines->GetLength(&pLsize);
  for (pLineIndex=0;pLineIndex<pLsize;pLineIndex++) {
    do {
      rv = pLines->Item(pLineIndex, getter_AddRefs(pLine));
      NS_ENSURE_SUCCESS(rv,rv);
      pLine->GetNodeType(&pNodeType);
      if (pNodeType!=nsIDOMNode::ELEMENT_NODE) pLineIndex++;
    } while (pLineIndex<pLsize && pNodeType!=nsIDOMNode::ELEMENT_NODE);
    if (pLineIndex>=pLsize) break;
    rv = pLine->GetChildNodes(getter_AddRefs(pValues));
    NS_ENSURE_SUCCESS(rv,rv);
    pValues->GetLength(&pCsize);
    for (pColIndex=0;pColIndex<pCsize;pColIndex++) {
      do {
        rv = pValues->Item(pColIndex, getter_AddRefs(pValue));
        NS_ENSURE_SUCCESS(rv,rv);
        pValue->GetNodeType(&pNodeType);
        if (pNodeType!=nsIDOMNode::ELEMENT_NODE) pColIndex++;
      } while (pColIndex<pCsize && pNodeType!=nsIDOMNode::ELEMENT_NODE);
      if (pColIndex>=pCsize) break;
      rv = pValue->GetFirstChild(getter_AddRefs(pContent));
      NS_ENSURE_SUCCESS(rv,rv);
      pVariant = do_CreateInstance(NS_VARIANT_CONTRACTID, &rv);
      NS_ENSURE_SUCCESS(rv,rv);
      if (pContent) {
        rv = pContent->GetNodeValue(pText);
        NS_ENSURE_SUCCESS(rv,rv);
        pVariant->SetAsAString(pText);
        printf("%s|",ToNewCString(pText));
      } else {
        pVariant->SetAsAString(NS_LITERAL_STRING(""));
      }
      rv = pArray.AppendObject(pVariant);
    }
  }
  rv = mComponent->TreatP0080(pArray, pLsize, pCsize, mKey);
  return rv;
}


/* Generated by Pygmalion */


NS_IMPL_ISUPPORTS1(mozListenerP0081, nsISOAPResponseListener)

mozListenerP0081::mozListenerP0081(mozC02gestsea* aComponent, const nsACString & aSearch)
{
  mComponent = aComponent;
  mSearch = aSearch;
}
mozListenerP0081::~mozListenerP0081()
{
}

NS_IMETHODIMP mozListenerP0081::HandleResponse(nsISOAPResponse *aResponse, nsISOAPCall *aCall, PRUint32 aStatus, PRBool aLast, PRBool *aReturn)
{
  nsresult rv;
  nsCOMPtr<nsISOAPFault> pFault;
  rv = aResponse->GetFault(getter_AddRefs(pFault));
  NS_ENSURE_SUCCESS(rv, rv);
  if (pFault) {
    nsAutoString pFaute, pDetail, pTitle;
    nsCOMPtr<nsIDOMElement> pTheDetail;
    nsCOMPtr<nsIDOMNode> pNode;
    rv = pFault->GetDetail(getter_AddRefs(pTheDetail));
    NS_ENSURE_SUCCESS(rv,rv);
    rv = pTheDetail->GetFirstChild(getter_AddRefs(pNode));
    NS_ENSURE_SUCCESS(rv,rv);
    if (pNode) {
      nsCOMPtr<nsIDOMNamedNodeMap> pAttributes;
      nsCOMPtr<nsIDOMNode> pAttribute, pFirstNode;
      nsAutoString pNodeValue;
      rv = pNode->GetFirstChild(getter_AddRefs(pFirstNode));
      NS_ENSURE_SUCCESS(rv,rv);
      if (pFirstNode) {
        pFirstNode->GetNodeValue(pNodeValue);
        NS_ENSURE_SUCCESS(rv,rv);
        pDetail  = pNodeValue;
      }
      pNode->GetAttributes(getter_AddRefs(pAttributes));
      NS_ENSURE_SUCCESS(rv,rv);
      pAttributes->GetNamedItem(NS_LITERAL_STRING("code"), getter_AddRefs(pAttribute));
      NS_ENSURE_SUCCESS(rv,rv);
      if (pAttribute) {
        pAttribute->GetNodeValue(pNodeValue);
        NS_ENSURE_SUCCESS(rv,rv);
        pDetail += NS_LITERAL_STRING("\n(Erreur ");
        pDetail += pNodeValue;
        pDetail += NS_LITERAL_STRING(")");
      }
    } else pDetail = NS_LITERAL_STRING("Erreur sans message.");
    pFaute = pDetail;
    rv = pFault->GetFaultString(pTitle);
    NS_ENSURE_SUCCESS(rv,rv);
    nsCOMPtr<nsIPrompt> pPrompt= do_GetService(NS_DEFAULTPROMPT_CONTRACTID, &rv);
    NS_ENSURE_SUCCESS(rv,rv);
    pPrompt->Alert(ToNewUnicode(pTitle), ToNewUnicode(pFaute));
    return NS_ERROR_FAILURE;
  }

  nsISOAPParameter ** pParameters;
  PRUint32 pTotal;
  rv = aResponse->GetParameters(PR_FALSE, &pTotal, &pParameters);
  NS_ENSURE_SUCCESS(rv,rv);
  if (pTotal!=1) {
    nsCOMPtr<nsIPrompt> pPrompt= do_GetService(NS_DEFAULTPROMPT_CONTRACTID, &rv);
    NS_ENSURE_SUCCESS(rv,rv);
    pPrompt->Alert(ToNewUnicode(NS_LITERAL_CSTRING("Erreur système")), ToNewUnicode(NS_LITERAL_CSTRING("Le nombre total de paramètres reçus est incorrect.")));
    return NS_ERROR_FAILURE;
  }

  nsAutoString pText;
  nsCOMArray<nsIVariant> pArray;
  nsCOMPtr<nsIWritableVariant> pVariant;
  PRUint32 pLsize=0, pCsize=0;
  PRUint32 pLineIndex, pColIndex;
  PRUint16 pNodeType;
  nsCOMPtr<nsIDOMElement> pResult;
  nsCOMPtr<nsIDOMNodeList> pLines, pValues;
  nsCOMPtr<nsIDOMNode> pLine, pValue, pContent;
  rv = pParameters[0]->GetElement(getter_AddRefs(pResult));
  NS_ENSURE_SUCCESS(rv,rv);
  rv = pResult->GetChildNodes(getter_AddRefs(pLines));
  NS_ENSURE_SUCCESS(rv,rv);
  pLines->GetLength(&pLsize);
  for (pLineIndex=0;pLineIndex<pLsize;pLineIndex++) {
    do {
      rv = pLines->Item(pLineIndex, getter_AddRefs(pLine));
      NS_ENSURE_SUCCESS(rv,rv);
      pLine->GetNodeType(&pNodeType);
      if (pNodeType!=nsIDOMNode::ELEMENT_NODE) pLineIndex++;
    } while (pLineIndex<pLsize && pNodeType!=nsIDOMNode::ELEMENT_NODE);
    if (pLineIndex>=pLsize) break;
    rv = pLine->GetChildNodes(getter_AddRefs(pValues));
    NS_ENSURE_SUCCESS(rv,rv);
    pValues->GetLength(&pCsize);
    for (pColIndex=0;pColIndex<pCsize;pColIndex++) {
      do {
        rv = pValues->Item(pColIndex, getter_AddRefs(pValue));
        NS_ENSURE_SUCCESS(rv,rv);
        pValue->GetNodeType(&pNodeType);
        if (pNodeType!=nsIDOMNode::ELEMENT_NODE) pColIndex++;
      } while (pColIndex<pCsize && pNodeType!=nsIDOMNode::ELEMENT_NODE);
      if (pColIndex>=pCsize) break;
      rv = pValue->GetFirstChild(getter_AddRefs(pContent));
      NS_ENSURE_SUCCESS(rv,rv);
      pVariant = do_CreateInstance(NS_VARIANT_CONTRACTID, &rv);
      NS_ENSURE_SUCCESS(rv,rv);
      if (pContent) {
        rv = pContent->GetNodeValue(pText);
        NS_ENSURE_SUCCESS(rv,rv);
        pVariant->SetAsAString(pText);
        printf("%s|",ToNewCString(pText));
      } else {
        pVariant->SetAsAString(NS_LITERAL_STRING(""));
      }
      rv = pArray.AppendObject(pVariant);
    }
  }
  rv = mComponent->TreatP0081(pArray, pLsize, pCsize, mSearch);
  return rv;
}


/* Generated by Pygmalion */


NS_IMPL_ISUPPORTS1(mozListenerP0082, nsISOAPResponseListener)

mozListenerP0082::mozListenerP0082(mozC02gestsea* aComponent, const nsACString & aSearch)
{
  mComponent = aComponent;
  mSearch = aSearch;
}
mozListenerP0082::~mozListenerP0082()
{
}

NS_IMETHODIMP mozListenerP0082::HandleResponse(nsISOAPResponse *aResponse, nsISOAPCall *aCall, PRUint32 aStatus, PRBool aLast, PRBool *aReturn)
{
  nsresult rv;
  nsCOMPtr<nsISOAPFault> pFault;
  rv = aResponse->GetFault(getter_AddRefs(pFault));
  NS_ENSURE_SUCCESS(rv, rv);
  if (pFault) {
    nsAutoString pFaute, pDetail, pTitle;
    nsCOMPtr<nsIDOMElement> pTheDetail;
    nsCOMPtr<nsIDOMNode> pNode;
    rv = pFault->GetDetail(getter_AddRefs(pTheDetail));
    NS_ENSURE_SUCCESS(rv,rv);
    rv = pTheDetail->GetFirstChild(getter_AddRefs(pNode));
    NS_ENSURE_SUCCESS(rv,rv);
    if (pNode) {
      nsCOMPtr<nsIDOMNamedNodeMap> pAttributes;
      nsCOMPtr<nsIDOMNode> pAttribute, pFirstNode;
      nsAutoString pNodeValue;
      rv = pNode->GetFirstChild(getter_AddRefs(pFirstNode));
      NS_ENSURE_SUCCESS(rv,rv);
      if (pFirstNode) {
        pFirstNode->GetNodeValue(pNodeValue);
        NS_ENSURE_SUCCESS(rv,rv);
        pDetail  = pNodeValue;
      }
      pNode->GetAttributes(getter_AddRefs(pAttributes));
      NS_ENSURE_SUCCESS(rv,rv);
      pAttributes->GetNamedItem(NS_LITERAL_STRING("code"), getter_AddRefs(pAttribute));
      NS_ENSURE_SUCCESS(rv,rv);
      if (pAttribute) {
        pAttribute->GetNodeValue(pNodeValue);
        NS_ENSURE_SUCCESS(rv,rv);
        pDetail += NS_LITERAL_STRING("\n(Erreur ");
        pDetail += pNodeValue;
        pDetail += NS_LITERAL_STRING(")");
      }
    } else pDetail = NS_LITERAL_STRING("Erreur sans message.");
    pFaute = pDetail;
    rv = pFault->GetFaultString(pTitle);
    NS_ENSURE_SUCCESS(rv,rv);
    nsCOMPtr<nsIPrompt> pPrompt= do_GetService(NS_DEFAULTPROMPT_CONTRACTID, &rv);
    NS_ENSURE_SUCCESS(rv,rv);
    pPrompt->Alert(ToNewUnicode(pTitle), ToNewUnicode(pFaute));
    return NS_ERROR_FAILURE;
  }

  nsISOAPParameter ** pParameters;
  PRUint32 pTotal;
  rv = aResponse->GetParameters(PR_FALSE, &pTotal, &pParameters);
  NS_ENSURE_SUCCESS(rv,rv);
  if (pTotal!=1) {
    nsCOMPtr<nsIPrompt> pPrompt= do_GetService(NS_DEFAULTPROMPT_CONTRACTID, &rv);
    NS_ENSURE_SUCCESS(rv,rv);
    pPrompt->Alert(ToNewUnicode(NS_LITERAL_CSTRING("Erreur système")), ToNewUnicode(NS_LITERAL_CSTRING("Le nombre total de paramètres reçus est incorrect.")));
    return NS_ERROR_FAILURE;
  }

  nsAutoString pText;
  nsCOMArray<nsIVariant> pArray;
  nsCOMPtr<nsIWritableVariant> pVariant;
  PRUint32 pLsize=0, pCsize=0;
  PRUint32 pLineIndex, pColIndex;
  PRUint16 pNodeType;
  nsCOMPtr<nsIDOMElement> pResult;
  nsCOMPtr<nsIDOMNodeList> pLines, pValues;
  nsCOMPtr<nsIDOMNode> pLine, pValue, pContent;
  rv = pParameters[0]->GetElement(getter_AddRefs(pResult));
  NS_ENSURE_SUCCESS(rv,rv);
  rv = pResult->GetChildNodes(getter_AddRefs(pLines));
  NS_ENSURE_SUCCESS(rv,rv);
  pLines->GetLength(&pLsize);
  for (pLineIndex=0;pLineIndex<pLsize;pLineIndex++) {
    do {
      rv = pLines->Item(pLineIndex, getter_AddRefs(pLine));
      NS_ENSURE_SUCCESS(rv,rv);
      pLine->GetNodeType(&pNodeType);
      if (pNodeType!=nsIDOMNode::ELEMENT_NODE) pLineIndex++;
    } while (pLineIndex<pLsize && pNodeType!=nsIDOMNode::ELEMENT_NODE);
    if (pLineIndex>=pLsize) break;
    rv = pLine->GetChildNodes(getter_AddRefs(pValues));
    NS_ENSURE_SUCCESS(rv,rv);
    pValues->GetLength(&pCsize);
    for (pColIndex=0;pColIndex<pCsize;pColIndex++) {
      do {
        rv = pValues->Item(pColIndex, getter_AddRefs(pValue));
        NS_ENSURE_SUCCESS(rv,rv);
        pValue->GetNodeType(&pNodeType);
        if (pNodeType!=nsIDOMNode::ELEMENT_NODE) pColIndex++;
      } while (pColIndex<pCsize && pNodeType!=nsIDOMNode::ELEMENT_NODE);
      if (pColIndex>=pCsize) break;
      rv = pValue->GetFirstChild(getter_AddRefs(pContent));
      NS_ENSURE_SUCCESS(rv,rv);
      pVariant = do_CreateInstance(NS_VARIANT_CONTRACTID, &rv);
      NS_ENSURE_SUCCESS(rv,rv);
      if (pContent) {
        rv = pContent->GetNodeValue(pText);
        NS_ENSURE_SUCCESS(rv,rv);
        pVariant->SetAsAString(pText);
        printf("%s|",ToNewCString(pText));
      } else {
        pVariant->SetAsAString(NS_LITERAL_STRING(""));
      }
      rv = pArray.AppendObject(pVariant);
    }
  }
  rv = mComponent->TreatP0082(pArray, pLsize, pCsize, mSearch);
  return rv;
}


/* Generated by Pygmalion */


NS_IMPL_ISUPPORTS1(mozListenerP0083, nsISOAPResponseListener)

mozListenerP0083::mozListenerP0083(mozC02gestsea* aComponent, const nsAString & aKey)
{
  mComponent = aComponent;
  mKey = aKey;
}
mozListenerP0083::~mozListenerP0083()
{
}

NS_IMETHODIMP mozListenerP0083::HandleResponse(nsISOAPResponse *aResponse, nsISOAPCall *aCall, PRUint32 aStatus, PRBool aLast, PRBool *aReturn)
{
  nsresult rv;
  nsCOMPtr<nsISOAPFault> pFault;
  rv = aResponse->GetFault(getter_AddRefs(pFault));
  NS_ENSURE_SUCCESS(rv, rv);
  if (pFault) {
    nsAutoString pFaute, pDetail, pTitle;
    nsCOMPtr<nsIDOMElement> pTheDetail;
    nsCOMPtr<nsIDOMNode> pNode;
    rv = pFault->GetDetail(getter_AddRefs(pTheDetail));
    NS_ENSURE_SUCCESS(rv,rv);
    rv = pTheDetail->GetFirstChild(getter_AddRefs(pNode));
    NS_ENSURE_SUCCESS(rv,rv);
    if (pNode) {
      nsCOMPtr<nsIDOMNamedNodeMap> pAttributes;
      nsCOMPtr<nsIDOMNode> pAttribute, pFirstNode;
      nsAutoString pNodeValue;
      rv = pNode->GetFirstChild(getter_AddRefs(pFirstNode));
      NS_ENSURE_SUCCESS(rv,rv);
      if (pFirstNode) {
        pFirstNode->GetNodeValue(pNodeValue);
        NS_ENSURE_SUCCESS(rv,rv);
        pDetail  = pNodeValue;
      }
      pNode->GetAttributes(getter_AddRefs(pAttributes));
      NS_ENSURE_SUCCESS(rv,rv);
      pAttributes->GetNamedItem(NS_LITERAL_STRING("code"), getter_AddRefs(pAttribute));
      NS_ENSURE_SUCCESS(rv,rv);
      if (pAttribute) {
        pAttribute->GetNodeValue(pNodeValue);
        NS_ENSURE_SUCCESS(rv,rv);
        pDetail += NS_LITERAL_STRING("\n(Erreur ");
        pDetail += pNodeValue;
        pDetail += NS_LITERAL_STRING(")");
      }
    } else pDetail = NS_LITERAL_STRING("Erreur sans message.");
    pFaute = pDetail;
    rv = pFault->GetFaultString(pTitle);
    NS_ENSURE_SUCCESS(rv,rv);
    nsCOMPtr<nsIPrompt> pPrompt= do_GetService(NS_DEFAULTPROMPT_CONTRACTID, &rv);
    NS_ENSURE_SUCCESS(rv,rv);
    pPrompt->Alert(ToNewUnicode(pTitle), ToNewUnicode(pFaute));
    return NS_ERROR_FAILURE;
  }

  nsISOAPParameter ** pParameters;
  PRUint32 pTotal;
  rv = aResponse->GetParameters(PR_FALSE, &pTotal, &pParameters);
  NS_ENSURE_SUCCESS(rv,rv);
  if (pTotal!=1) {
    nsCOMPtr<nsIPrompt> pPrompt= do_GetService(NS_DEFAULTPROMPT_CONTRACTID, &rv);
    NS_ENSURE_SUCCESS(rv,rv);
    pPrompt->Alert(ToNewUnicode(NS_LITERAL_CSTRING("Erreur système")), ToNewUnicode(NS_LITERAL_CSTRING("Le nombre total de paramètres reçus est incorrect.")));
    return NS_ERROR_FAILURE;
  }

  nsAutoString pText;
  nsCOMArray<nsIVariant> pArray;
  nsCOMPtr<nsIWritableVariant> pVariant;
  PRUint32 pLsize=0, pCsize=0;
  PRUint32 pLineIndex, pColIndex;
  PRUint16 pNodeType;
  nsCOMPtr<nsIDOMElement> pResult;
  nsCOMPtr<nsIDOMNodeList> pLines, pValues;
  nsCOMPtr<nsIDOMNode> pLine, pValue, pContent;
  rv = pParameters[0]->GetElement(getter_AddRefs(pResult));
  NS_ENSURE_SUCCESS(rv,rv);
  rv = pResult->GetChildNodes(getter_AddRefs(pLines));
  NS_ENSURE_SUCCESS(rv,rv);
  pLines->GetLength(&pLsize);
  for (pLineIndex=0;pLineIndex<pLsize;pLineIndex++) {
    do {
      rv = pLines->Item(pLineIndex, getter_AddRefs(pLine));
      NS_ENSURE_SUCCESS(rv,rv);
      pLine->GetNodeType(&pNodeType);
      if (pNodeType!=nsIDOMNode::ELEMENT_NODE) pLineIndex++;
    } while (pLineIndex<pLsize && pNodeType!=nsIDOMNode::ELEMENT_NODE);
    if (pLineIndex>=pLsize) break;
    rv = pLine->GetChildNodes(getter_AddRefs(pValues));
    NS_ENSURE_SUCCESS(rv,rv);
    pValues->GetLength(&pCsize);
    for (pColIndex=0;pColIndex<pCsize;pColIndex++) {
      do {
        rv = pValues->Item(pColIndex, getter_AddRefs(pValue));
        NS_ENSURE_SUCCESS(rv,rv);
        pValue->GetNodeType(&pNodeType);
        if (pNodeType!=nsIDOMNode::ELEMENT_NODE) pColIndex++;
      } while (pColIndex<pCsize && pNodeType!=nsIDOMNode::ELEMENT_NODE);
      if (pColIndex>=pCsize) break;
      rv = pValue->GetFirstChild(getter_AddRefs(pContent));
      NS_ENSURE_SUCCESS(rv,rv);
      pVariant = do_CreateInstance(NS_VARIANT_CONTRACTID, &rv);
      NS_ENSURE_SUCCESS(rv,rv);
      if (pContent) {
        rv = pContent->GetNodeValue(pText);
        NS_ENSURE_SUCCESS(rv,rv);
        pVariant->SetAsAString(pText);
        printf("%s|",ToNewCString(pText));
      } else {
        pVariant->SetAsAString(NS_LITERAL_STRING(""));
      }
      rv = pArray.AppendObject(pVariant);
    }
  }
  rv = mComponent->TreatP0083(pArray, pLsize, pCsize, mKey);
  return rv;
}


/* Generated by Pygmalion */


NS_IMPL_ISUPPORTS1(mozListenerP0084, nsISOAPResponseListener)

mozListenerP0084::mozListenerP0084(mozC02gestsea* aComponent, const nsACString & aSearch)
{
  mComponent = aComponent;
  mSearch = aSearch;
}
mozListenerP0084::~mozListenerP0084()
{
}

NS_IMETHODIMP mozListenerP0084::HandleResponse(nsISOAPResponse *aResponse, nsISOAPCall *aCall, PRUint32 aStatus, PRBool aLast, PRBool *aReturn)
{
  nsresult rv;
  nsCOMPtr<nsISOAPFault> pFault;
  rv = aResponse->GetFault(getter_AddRefs(pFault));
  NS_ENSURE_SUCCESS(rv, rv);
  if (pFault) {
    nsAutoString pFaute, pDetail, pTitle;
    nsCOMPtr<nsIDOMElement> pTheDetail;
    nsCOMPtr<nsIDOMNode> pNode;
    rv = pFault->GetDetail(getter_AddRefs(pTheDetail));
    NS_ENSURE_SUCCESS(rv,rv);
    rv = pTheDetail->GetFirstChild(getter_AddRefs(pNode));
    NS_ENSURE_SUCCESS(rv,rv);
    if (pNode) {
      nsCOMPtr<nsIDOMNamedNodeMap> pAttributes;
      nsCOMPtr<nsIDOMNode> pAttribute, pFirstNode;
      nsAutoString pNodeValue;
      rv = pNode->GetFirstChild(getter_AddRefs(pFirstNode));
      NS_ENSURE_SUCCESS(rv,rv);
      if (pFirstNode) {
        pFirstNode->GetNodeValue(pNodeValue);
        NS_ENSURE_SUCCESS(rv,rv);
        pDetail  = pNodeValue;
      }
      pNode->GetAttributes(getter_AddRefs(pAttributes));
      NS_ENSURE_SUCCESS(rv,rv);
      pAttributes->GetNamedItem(NS_LITERAL_STRING("code"), getter_AddRefs(pAttribute));
      NS_ENSURE_SUCCESS(rv,rv);
      if (pAttribute) {
        pAttribute->GetNodeValue(pNodeValue);
        NS_ENSURE_SUCCESS(rv,rv);
        pDetail += NS_LITERAL_STRING("\n(Erreur ");
        pDetail += pNodeValue;
        pDetail += NS_LITERAL_STRING(")");
      }
    } else pDetail = NS_LITERAL_STRING("Erreur sans message.");
    pFaute = pDetail;
    rv = pFault->GetFaultString(pTitle);
    NS_ENSURE_SUCCESS(rv,rv);
    nsCOMPtr<nsIPrompt> pPrompt= do_GetService(NS_DEFAULTPROMPT_CONTRACTID, &rv);
    NS_ENSURE_SUCCESS(rv,rv);
    pPrompt->Alert(ToNewUnicode(pTitle), ToNewUnicode(pFaute));
    return NS_ERROR_FAILURE;
  }

  nsISOAPParameter ** pParameters;
  PRUint32 pTotal;
  rv = aResponse->GetParameters(PR_FALSE, &pTotal, &pParameters);
  NS_ENSURE_SUCCESS(rv,rv);
  if (pTotal!=1) {
    nsCOMPtr<nsIPrompt> pPrompt= do_GetService(NS_DEFAULTPROMPT_CONTRACTID, &rv);
    NS_ENSURE_SUCCESS(rv,rv);
    pPrompt->Alert(ToNewUnicode(NS_LITERAL_CSTRING("Erreur système")), ToNewUnicode(NS_LITERAL_CSTRING("Le nombre total de paramètres reçus est incorrect.")));
    return NS_ERROR_FAILURE;
  }

  nsAutoString pText;
  nsCOMArray<nsIVariant> pArray;
  nsCOMPtr<nsIWritableVariant> pVariant;
  PRUint32 pLsize=0, pCsize=0;
  PRUint32 pLineIndex, pColIndex;
  PRUint16 pNodeType;
  nsCOMPtr<nsIDOMElement> pResult;
  nsCOMPtr<nsIDOMNodeList> pLines, pValues;
  nsCOMPtr<nsIDOMNode> pLine, pValue, pContent;
  rv = pParameters[0]->GetElement(getter_AddRefs(pResult));
  NS_ENSURE_SUCCESS(rv,rv);
  rv = pResult->GetChildNodes(getter_AddRefs(pLines));
  NS_ENSURE_SUCCESS(rv,rv);
  pLines->GetLength(&pLsize);
  for (pLineIndex=0;pLineIndex<pLsize;pLineIndex++) {
    do {
      rv = pLines->Item(pLineIndex, getter_AddRefs(pLine));
      NS_ENSURE_SUCCESS(rv,rv);
      pLine->GetNodeType(&pNodeType);
      if (pNodeType!=nsIDOMNode::ELEMENT_NODE) pLineIndex++;
    } while (pLineIndex<pLsize && pNodeType!=nsIDOMNode::ELEMENT_NODE);
    if (pLineIndex>=pLsize) break;
    rv = pLine->GetChildNodes(getter_AddRefs(pValues));
    NS_ENSURE_SUCCESS(rv,rv);
    pValues->GetLength(&pCsize);
    for (pColIndex=0;pColIndex<pCsize;pColIndex++) {
      do {
        rv = pValues->Item(pColIndex, getter_AddRefs(pValue));
        NS_ENSURE_SUCCESS(rv,rv);
        pValue->GetNodeType(&pNodeType);
        if (pNodeType!=nsIDOMNode::ELEMENT_NODE) pColIndex++;
      } while (pColIndex<pCsize && pNodeType!=nsIDOMNode::ELEMENT_NODE);
      if (pColIndex>=pCsize) break;
      rv = pValue->GetFirstChild(getter_AddRefs(pContent));
      NS_ENSURE_SUCCESS(rv,rv);
      pVariant = do_CreateInstance(NS_VARIANT_CONTRACTID, &rv);
      NS_ENSURE_SUCCESS(rv,rv);
      if (pContent) {
        rv = pContent->GetNodeValue(pText);
        NS_ENSURE_SUCCESS(rv,rv);
        pVariant->SetAsAString(pText);
        printf("%s|",ToNewCString(pText));
      } else {
        pVariant->SetAsAString(NS_LITERAL_STRING(""));
      }
      rv = pArray.AppendObject(pVariant);
    }
  }
  rv = mComponent->TreatP0084(pArray, pLsize, pCsize, mSearch);
  return rv;
}


/* Generated by Pygmalion */


NS_IMPL_ISUPPORTS1(mozListenerP0085, nsISOAPResponseListener)

mozListenerP0085::mozListenerP0085(mozC02gestsea* aComponent, const nsACString & aSearch)
{
  mComponent = aComponent;
  mSearch = aSearch;
}
mozListenerP0085::~mozListenerP0085()
{
}

NS_IMETHODIMP mozListenerP0085::HandleResponse(nsISOAPResponse *aResponse, nsISOAPCall *aCall, PRUint32 aStatus, PRBool aLast, PRBool *aReturn)
{
  nsresult rv;
  nsCOMPtr<nsISOAPFault> pFault;
  rv = aResponse->GetFault(getter_AddRefs(pFault));
  NS_ENSURE_SUCCESS(rv, rv);
  if (pFault) {
    nsAutoString pFaute, pDetail, pTitle;
    nsCOMPtr<nsIDOMElement> pTheDetail;
    nsCOMPtr<nsIDOMNode> pNode;
    rv = pFault->GetDetail(getter_AddRefs(pTheDetail));
    NS_ENSURE_SUCCESS(rv,rv);
    rv = pTheDetail->GetFirstChild(getter_AddRefs(pNode));
    NS_ENSURE_SUCCESS(rv,rv);
    if (pNode) {
      nsCOMPtr<nsIDOMNamedNodeMap> pAttributes;
      nsCOMPtr<nsIDOMNode> pAttribute, pFirstNode;
      nsAutoString pNodeValue;
      rv = pNode->GetFirstChild(getter_AddRefs(pFirstNode));
      NS_ENSURE_SUCCESS(rv,rv);
      if (pFirstNode) {
        pFirstNode->GetNodeValue(pNodeValue);
        NS_ENSURE_SUCCESS(rv,rv);
        pDetail  = pNodeValue;
      }
      pNode->GetAttributes(getter_AddRefs(pAttributes));
      NS_ENSURE_SUCCESS(rv,rv);
      pAttributes->GetNamedItem(NS_LITERAL_STRING("code"), getter_AddRefs(pAttribute));
      NS_ENSURE_SUCCESS(rv,rv);
      if (pAttribute) {
        pAttribute->GetNodeValue(pNodeValue);
        NS_ENSURE_SUCCESS(rv,rv);
        pDetail += NS_LITERAL_STRING("\n(Erreur ");
        pDetail += pNodeValue;
        pDetail += NS_LITERAL_STRING(")");
      }
    } else pDetail = NS_LITERAL_STRING("Erreur sans message.");
    pFaute = pDetail;
    rv = pFault->GetFaultString(pTitle);
    NS_ENSURE_SUCCESS(rv,rv);
    nsCOMPtr<nsIPrompt> pPrompt= do_GetService(NS_DEFAULTPROMPT_CONTRACTID, &rv);
    NS_ENSURE_SUCCESS(rv,rv);
    pPrompt->Alert(ToNewUnicode(pTitle), ToNewUnicode(pFaute));
    return NS_ERROR_FAILURE;
  }

  nsISOAPParameter ** pParameters;
  PRUint32 pTotal;
  rv = aResponse->GetParameters(PR_FALSE, &pTotal, &pParameters);
  NS_ENSURE_SUCCESS(rv,rv);
  if (pTotal!=1) {
    nsCOMPtr<nsIPrompt> pPrompt= do_GetService(NS_DEFAULTPROMPT_CONTRACTID, &rv);
    NS_ENSURE_SUCCESS(rv,rv);
    pPrompt->Alert(ToNewUnicode(NS_LITERAL_CSTRING("Erreur système")), ToNewUnicode(NS_LITERAL_CSTRING("Le nombre total de paramètres reçus est incorrect.")));
    return NS_ERROR_FAILURE;
  }

  nsAutoString pText;
  nsCOMArray<nsIVariant> pArray;
  nsCOMPtr<nsIWritableVariant> pVariant;
  PRUint32 pLsize=0, pCsize=0;
  PRUint32 pLineIndex, pColIndex;
  PRUint16 pNodeType;
  nsCOMPtr<nsIDOMElement> pResult;
  nsCOMPtr<nsIDOMNodeList> pLines, pValues;
  nsCOMPtr<nsIDOMNode> pLine, pValue, pContent;
  rv = pParameters[0]->GetElement(getter_AddRefs(pResult));
  NS_ENSURE_SUCCESS(rv,rv);
  rv = pResult->GetChildNodes(getter_AddRefs(pLines));
  NS_ENSURE_SUCCESS(rv,rv);
  pLines->GetLength(&pLsize);
  for (pLineIndex=0;pLineIndex<pLsize;pLineIndex++) {
    do {
      rv = pLines->Item(pLineIndex, getter_AddRefs(pLine));
      NS_ENSURE_SUCCESS(rv,rv);
      pLine->GetNodeType(&pNodeType);
      if (pNodeType!=nsIDOMNode::ELEMENT_NODE) pLineIndex++;
    } while (pLineIndex<pLsize && pNodeType!=nsIDOMNode::ELEMENT_NODE);
    if (pLineIndex>=pLsize) break;
    rv = pLine->GetChildNodes(getter_AddRefs(pValues));
    NS_ENSURE_SUCCESS(rv,rv);
    pValues->GetLength(&pCsize);
    for (pColIndex=0;pColIndex<pCsize;pColIndex++) {
      do {
        rv = pValues->Item(pColIndex, getter_AddRefs(pValue));
        NS_ENSURE_SUCCESS(rv,rv);
        pValue->GetNodeType(&pNodeType);
        if (pNodeType!=nsIDOMNode::ELEMENT_NODE) pColIndex++;
      } while (pColIndex<pCsize && pNodeType!=nsIDOMNode::ELEMENT_NODE);
      if (pColIndex>=pCsize) break;
      rv = pValue->GetFirstChild(getter_AddRefs(pContent));
      NS_ENSURE_SUCCESS(rv,rv);
      pVariant = do_CreateInstance(NS_VARIANT_CONTRACTID, &rv);
      NS_ENSURE_SUCCESS(rv,rv);
      if (pContent) {
        rv = pContent->GetNodeValue(pText);
        NS_ENSURE_SUCCESS(rv,rv);
        pVariant->SetAsAString(pText);
        printf("%s|",ToNewCString(pText));
      } else {
        pVariant->SetAsAString(NS_LITERAL_STRING(""));
      }
      rv = pArray.AppendObject(pVariant);
    }
  }
  rv = mComponent->TreatP0085(pArray, pLsize, pCsize, mSearch);
  return rv;
}


/* Generated by Pygmalion */


NS_IMPL_ISUPPORTS1(mozListenerP0086, nsISOAPResponseListener)

mozListenerP0086::mozListenerP0086(mozC02gestsea* aComponent, const nsAString & aKey)
{
  mComponent = aComponent;
  mKey = aKey;
}
mozListenerP0086::~mozListenerP0086()
{
}

NS_IMETHODIMP mozListenerP0086::HandleResponse(nsISOAPResponse *aResponse, nsISOAPCall *aCall, PRUint32 aStatus, PRBool aLast, PRBool *aReturn)
{
  nsresult rv;
  nsCOMPtr<nsISOAPFault> pFault;
  rv = aResponse->GetFault(getter_AddRefs(pFault));
  NS_ENSURE_SUCCESS(rv, rv);
  if (pFault) {
    nsAutoString pFaute, pDetail, pTitle;
    nsCOMPtr<nsIDOMElement> pTheDetail;
    nsCOMPtr<nsIDOMNode> pNode;
    rv = pFault->GetDetail(getter_AddRefs(pTheDetail));
    NS_ENSURE_SUCCESS(rv,rv);
    rv = pTheDetail->GetFirstChild(getter_AddRefs(pNode));
    NS_ENSURE_SUCCESS(rv,rv);
    if (pNode) {
      nsCOMPtr<nsIDOMNamedNodeMap> pAttributes;
      nsCOMPtr<nsIDOMNode> pAttribute, pFirstNode;
      nsAutoString pNodeValue;
      rv = pNode->GetFirstChild(getter_AddRefs(pFirstNode));
      NS_ENSURE_SUCCESS(rv,rv);
      if (pFirstNode) {
        pFirstNode->GetNodeValue(pNodeValue);
        NS_ENSURE_SUCCESS(rv,rv);
        pDetail  = pNodeValue;
      }
      pNode->GetAttributes(getter_AddRefs(pAttributes));
      NS_ENSURE_SUCCESS(rv,rv);
      pAttributes->GetNamedItem(NS_LITERAL_STRING("code"), getter_AddRefs(pAttribute));
      NS_ENSURE_SUCCESS(rv,rv);
      if (pAttribute) {
        pAttribute->GetNodeValue(pNodeValue);
        NS_ENSURE_SUCCESS(rv,rv);
        pDetail += NS_LITERAL_STRING("\n(Erreur ");
        pDetail += pNodeValue;
        pDetail += NS_LITERAL_STRING(")");
      }
    } else pDetail = NS_LITERAL_STRING("Erreur sans message.");
    pFaute = pDetail;
    rv = pFault->GetFaultString(pTitle);
    NS_ENSURE_SUCCESS(rv,rv);
    nsCOMPtr<nsIPrompt> pPrompt= do_GetService(NS_DEFAULTPROMPT_CONTRACTID, &rv);
    NS_ENSURE_SUCCESS(rv,rv);
    pPrompt->Alert(ToNewUnicode(pTitle), ToNewUnicode(pFaute));
    return NS_ERROR_FAILURE;
  }

  nsISOAPParameter ** pParameters;
  PRUint32 pTotal;
  rv = aResponse->GetParameters(PR_FALSE, &pTotal, &pParameters);
  NS_ENSURE_SUCCESS(rv,rv);
  if (pTotal!=1) {
    nsCOMPtr<nsIPrompt> pPrompt= do_GetService(NS_DEFAULTPROMPT_CONTRACTID, &rv);
    NS_ENSURE_SUCCESS(rv,rv);
    pPrompt->Alert(ToNewUnicode(NS_LITERAL_CSTRING("Erreur système")), ToNewUnicode(NS_LITERAL_CSTRING("Le nombre total de paramètres reçus est incorrect.")));
    return NS_ERROR_FAILURE;
  }

  nsAutoString pText;
  nsCOMArray<nsIVariant> pArray;
  nsCOMPtr<nsIWritableVariant> pVariant;
  PRUint32 pLsize=0, pCsize=0;
  PRUint32 pLineIndex, pColIndex;
  PRUint16 pNodeType;
  nsCOMPtr<nsIDOMElement> pResult;
  nsCOMPtr<nsIDOMNodeList> pLines, pValues;
  nsCOMPtr<nsIDOMNode> pLine, pValue, pContent;
  rv = pParameters[0]->GetElement(getter_AddRefs(pResult));
  NS_ENSURE_SUCCESS(rv,rv);
  rv = pResult->GetChildNodes(getter_AddRefs(pLines));
  NS_ENSURE_SUCCESS(rv,rv);
  pLines->GetLength(&pLsize);
  for (pLineIndex=0;pLineIndex<pLsize;pLineIndex++) {
    do {
      rv = pLines->Item(pLineIndex, getter_AddRefs(pLine));
      NS_ENSURE_SUCCESS(rv,rv);
      pLine->GetNodeType(&pNodeType);
      if (pNodeType!=nsIDOMNode::ELEMENT_NODE) pLineIndex++;
    } while (pLineIndex<pLsize && pNodeType!=nsIDOMNode::ELEMENT_NODE);
    if (pLineIndex>=pLsize) break;
    rv = pLine->GetChildNodes(getter_AddRefs(pValues));
    NS_ENSURE_SUCCESS(rv,rv);
    pValues->GetLength(&pCsize);
    for (pColIndex=0;pColIndex<pCsize;pColIndex++) {
      do {
        rv = pValues->Item(pColIndex, getter_AddRefs(pValue));
        NS_ENSURE_SUCCESS(rv,rv);
        pValue->GetNodeType(&pNodeType);
        if (pNodeType!=nsIDOMNode::ELEMENT_NODE) pColIndex++;
      } while (pColIndex<pCsize && pNodeType!=nsIDOMNode::ELEMENT_NODE);
      if (pColIndex>=pCsize) break;
      rv = pValue->GetFirstChild(getter_AddRefs(pContent));
      NS_ENSURE_SUCCESS(rv,rv);
      pVariant = do_CreateInstance(NS_VARIANT_CONTRACTID, &rv);
      NS_ENSURE_SUCCESS(rv,rv);
      if (pContent) {
        rv = pContent->GetNodeValue(pText);
        NS_ENSURE_SUCCESS(rv,rv);
        pVariant->SetAsAString(pText);
        printf("%s|",ToNewCString(pText));
      } else {
        pVariant->SetAsAString(NS_LITERAL_STRING(""));
      }
      rv = pArray.AppendObject(pVariant);
    }
  }
  rv = mComponent->TreatP0086(pArray, pLsize, pCsize, mKey);
  return rv;
}


/* Generated by Pygmalion */


NS_IMPL_ISUPPORTS1(mozListenerP0087, nsISOAPResponseListener)

mozListenerP0087::mozListenerP0087(mozC02gestsea* aComponent, const nsAString & aKey, const nsACString & aField1, const nsACString & aField2, const nsACString & aField3, const nsACString & aField4, const nsACString & aField5, const nsACString & aField6, const nsACString & aField7, const nsACString & aField8, const nsACString & aField9, const nsACString & aField10, const nsACString & aField11, const nsACString & aField12, const nsACString & aField13, const nsACString & aField14, const nsACString & aField15, const nsACString & aField16, const nsACString & aField17)
{
  mComponent = aComponent;
  mKey = aKey;
  mField1 = aField1;
  mField2 = aField2;
  mField3 = aField3;
  mField4 = aField4;
  mField5 = aField5;
  mField6 = aField6;
  mField7 = aField7;
  mField8 = aField8;
  mField9 = aField9;
  mField10 = aField10;
  mField11 = aField11;
  mField12 = aField12;
  mField13 = aField13;
  mField14 = aField14;
  mField15 = aField15;
  mField16 = aField16;
  mField17 = aField17;
}
mozListenerP0087::~mozListenerP0087()
{
}

NS_IMETHODIMP mozListenerP0087::HandleResponse(nsISOAPResponse *aResponse, nsISOAPCall *aCall, PRUint32 aStatus, PRBool aLast, PRBool *aReturn)
{
  nsresult rv;
  nsCOMPtr<nsISOAPFault> pFault;
  rv = aResponse->GetFault(getter_AddRefs(pFault));
  NS_ENSURE_SUCCESS(rv, rv);
  if (pFault) {
    nsAutoString pFaute, pDetail, pTitle;
    nsCOMPtr<nsIDOMElement> pTheDetail;
    nsCOMPtr<nsIDOMNode> pNode;
    rv = pFault->GetDetail(getter_AddRefs(pTheDetail));
    NS_ENSURE_SUCCESS(rv,rv);
    rv = pTheDetail->GetFirstChild(getter_AddRefs(pNode));
    NS_ENSURE_SUCCESS(rv,rv);
    if (pNode) {
      nsCOMPtr<nsIDOMNamedNodeMap> pAttributes;
      nsCOMPtr<nsIDOMNode> pAttribute, pFirstNode;
      nsAutoString pNodeValue;
      rv = pNode->GetFirstChild(getter_AddRefs(pFirstNode));
      NS_ENSURE_SUCCESS(rv,rv);
      if (pFirstNode) {
        pFirstNode->GetNodeValue(pNodeValue);
        NS_ENSURE_SUCCESS(rv,rv);
        pDetail  = pNodeValue;
      }
      pNode->GetAttributes(getter_AddRefs(pAttributes));
      NS_ENSURE_SUCCESS(rv,rv);
      pAttributes->GetNamedItem(NS_LITERAL_STRING("code"), getter_AddRefs(pAttribute));
      NS_ENSURE_SUCCESS(rv,rv);
      if (pAttribute) {
        pAttribute->GetNodeValue(pNodeValue);
        NS_ENSURE_SUCCESS(rv,rv);
        pDetail += NS_LITERAL_STRING("\n(Erreur ");
        pDetail += pNodeValue;
        pDetail += NS_LITERAL_STRING(")");
      }
    } else pDetail = NS_LITERAL_STRING("Erreur sans message.");
    pFaute = pDetail;
    rv = pFault->GetFaultString(pTitle);
    NS_ENSURE_SUCCESS(rv,rv);
    nsCOMPtr<nsIPrompt> pPrompt= do_GetService(NS_DEFAULTPROMPT_CONTRACTID, &rv);
    NS_ENSURE_SUCCESS(rv,rv);
    pPrompt->Alert(ToNewUnicode(pTitle), ToNewUnicode(pFaute));
    return NS_ERROR_FAILURE;
  }

  nsISOAPParameter ** pParameters;
  PRUint32 pTotal;
  rv = aResponse->GetParameters(PR_FALSE, &pTotal, &pParameters);
  NS_ENSURE_SUCCESS(rv,rv);
  if (pTotal!=1) {
    nsCOMPtr<nsIPrompt> pPrompt= do_GetService(NS_DEFAULTPROMPT_CONTRACTID, &rv);
    NS_ENSURE_SUCCESS(rv,rv);
    pPrompt->Alert(ToNewUnicode(NS_LITERAL_CSTRING("Erreur système")), ToNewUnicode(NS_LITERAL_CSTRING("Le nombre total de paramètres reçus est incorrect.")));
    return NS_ERROR_FAILURE;
  }

  nsAutoString pText;
  nsCOMPtr<nsIVariant> pValue;
  rv = pParameters[0]->GetValue(getter_AddRefs(pValue));
  NS_ENSURE_SUCCESS(rv,rv);
  rv = pValue->GetAsAString(pText);
  NS_ENSURE_SUCCESS(rv,rv);
  rv = mComponent->TreatP0087(pText, mKey, mField1, mField2, mField3, mField4, mField5, mField6, mField7, mField8, mField9, mField10, mField11, mField12, mField13, mField14, mField15, mField16, mField17);
  return rv;
}


/* Generated by Pygmalion */


NS_IMPL_ISUPPORTS1(mozListenerP0088, nsISOAPResponseListener)

mozListenerP0088::mozListenerP0088(mozC02gestsea* aComponent)
{
  mComponent = aComponent;
}
mozListenerP0088::~mozListenerP0088()
{
}

NS_IMETHODIMP mozListenerP0088::HandleResponse(nsISOAPResponse *aResponse, nsISOAPCall *aCall, PRUint32 aStatus, PRBool aLast, PRBool *aReturn)
{
  nsresult rv;
  nsCOMPtr<nsISOAPFault> pFault;
  rv = aResponse->GetFault(getter_AddRefs(pFault));
  NS_ENSURE_SUCCESS(rv, rv);
  if (pFault) {
    nsAutoString pFaute, pDetail, pTitle;
    nsCOMPtr<nsIDOMElement> pTheDetail;
    nsCOMPtr<nsIDOMNode> pNode;
    rv = pFault->GetDetail(getter_AddRefs(pTheDetail));
    NS_ENSURE_SUCCESS(rv,rv);
    rv = pTheDetail->GetFirstChild(getter_AddRefs(pNode));
    NS_ENSURE_SUCCESS(rv,rv);
    if (pNode) {
      nsCOMPtr<nsIDOMNamedNodeMap> pAttributes;
      nsCOMPtr<nsIDOMNode> pAttribute, pFirstNode;
      nsAutoString pNodeValue;
      rv = pNode->GetFirstChild(getter_AddRefs(pFirstNode));
      NS_ENSURE_SUCCESS(rv,rv);
      if (pFirstNode) {
        pFirstNode->GetNodeValue(pNodeValue);
        NS_ENSURE_SUCCESS(rv,rv);
        pDetail  = pNodeValue;
      }
      pNode->GetAttributes(getter_AddRefs(pAttributes));
      NS_ENSURE_SUCCESS(rv,rv);
      pAttributes->GetNamedItem(NS_LITERAL_STRING("code"), getter_AddRefs(pAttribute));
      NS_ENSURE_SUCCESS(rv,rv);
      if (pAttribute) {
        pAttribute->GetNodeValue(pNodeValue);
        NS_ENSURE_SUCCESS(rv,rv);
        pDetail += NS_LITERAL_STRING("\n(Erreur ");
        pDetail += pNodeValue;
        pDetail += NS_LITERAL_STRING(")");
      }
    } else pDetail = NS_LITERAL_STRING("Erreur sans message.");
    pFaute = pDetail;
    rv = pFault->GetFaultString(pTitle);
    NS_ENSURE_SUCCESS(rv,rv);
    nsCOMPtr<nsIPrompt> pPrompt= do_GetService(NS_DEFAULTPROMPT_CONTRACTID, &rv);
    NS_ENSURE_SUCCESS(rv,rv);
    pPrompt->Alert(ToNewUnicode(pTitle), ToNewUnicode(pFaute));
    return NS_ERROR_FAILURE;
  }

  nsISOAPParameter ** pParameters;
  PRUint32 pTotal;
  rv = aResponse->GetParameters(PR_FALSE, &pTotal, &pParameters);
  NS_ENSURE_SUCCESS(rv,rv);
  if (pTotal!=1) {
    nsCOMPtr<nsIPrompt> pPrompt= do_GetService(NS_DEFAULTPROMPT_CONTRACTID, &rv);
    NS_ENSURE_SUCCESS(rv,rv);
    pPrompt->Alert(ToNewUnicode(NS_LITERAL_CSTRING("Erreur système")), ToNewUnicode(NS_LITERAL_CSTRING("Le nombre total de paramètres reçus est incorrect.")));
    return NS_ERROR_FAILURE;
  }

  nsAutoString pText;
  nsCOMArray<nsIVariant> pArray;
  nsCOMPtr<nsIWritableVariant> pVariant;
  PRUint32 pLsize=0, pCsize=0;
  PRUint32 pLineIndex, pColIndex;
  PRUint16 pNodeType;
  nsCOMPtr<nsIDOMElement> pResult;
  nsCOMPtr<nsIDOMNodeList> pLines, pValues;
  nsCOMPtr<nsIDOMNode> pLine, pValue, pContent;
  rv = pParameters[0]->GetElement(getter_AddRefs(pResult));
  NS_ENSURE_SUCCESS(rv,rv);
  rv = pResult->GetChildNodes(getter_AddRefs(pLines));
  NS_ENSURE_SUCCESS(rv,rv);
  pLines->GetLength(&pLsize);
  for (pLineIndex=0;pLineIndex<pLsize;pLineIndex++) {
    do {
      rv = pLines->Item(pLineIndex, getter_AddRefs(pLine));
      NS_ENSURE_SUCCESS(rv,rv);
      pLine->GetNodeType(&pNodeType);
      if (pNodeType!=nsIDOMNode::ELEMENT_NODE) pLineIndex++;
    } while (pLineIndex<pLsize && pNodeType!=nsIDOMNode::ELEMENT_NODE);
    if (pLineIndex>=pLsize) break;
    rv = pLine->GetChildNodes(getter_AddRefs(pValues));
    NS_ENSURE_SUCCESS(rv,rv);
    pValues->GetLength(&pCsize);
    for (pColIndex=0;pColIndex<pCsize;pColIndex++) {
      do {
        rv = pValues->Item(pColIndex, getter_AddRefs(pValue));
        NS_ENSURE_SUCCESS(rv,rv);
        pValue->GetNodeType(&pNodeType);
        if (pNodeType!=nsIDOMNode::ELEMENT_NODE) pColIndex++;
      } while (pColIndex<pCsize && pNodeType!=nsIDOMNode::ELEMENT_NODE);
      if (pColIndex>=pCsize) break;
      rv = pValue->GetFirstChild(getter_AddRefs(pContent));
      NS_ENSURE_SUCCESS(rv,rv);
      pVariant = do_CreateInstance(NS_VARIANT_CONTRACTID, &rv);
      NS_ENSURE_SUCCESS(rv,rv);
      if (pContent) {
        rv = pContent->GetNodeValue(pText);
        NS_ENSURE_SUCCESS(rv,rv);
        pVariant->SetAsAString(pText);
        printf("%s|",ToNewCString(pText));
      } else {
        pVariant->SetAsAString(NS_LITERAL_STRING(""));
      }
      rv = pArray.AppendObject(pVariant);
    }
  }
  rv = mComponent->TreatP0088(pArray, pLsize, pCsize);
  return rv;
}


/* Generated by Pygmalion */


NS_IMPL_ISUPPORTS1(mozListenerP0089, nsISOAPResponseListener)

mozListenerP0089::mozListenerP0089(mozC02gestsea* aComponent, const nsAString & aKey)
{
  mComponent = aComponent;
  mKey = aKey;
}
mozListenerP0089::~mozListenerP0089()
{
}

NS_IMETHODIMP mozListenerP0089::HandleResponse(nsISOAPResponse *aResponse, nsISOAPCall *aCall, PRUint32 aStatus, PRBool aLast, PRBool *aReturn)
{
  nsresult rv;
  nsCOMPtr<nsISOAPFault> pFault;
  rv = aResponse->GetFault(getter_AddRefs(pFault));
  NS_ENSURE_SUCCESS(rv, rv);
  if (pFault) {
    nsAutoString pFaute, pDetail, pTitle;
    nsCOMPtr<nsIDOMElement> pTheDetail;
    nsCOMPtr<nsIDOMNode> pNode;
    rv = pFault->GetDetail(getter_AddRefs(pTheDetail));
    NS_ENSURE_SUCCESS(rv,rv);
    rv = pTheDetail->GetFirstChild(getter_AddRefs(pNode));
    NS_ENSURE_SUCCESS(rv,rv);
    if (pNode) {
      nsCOMPtr<nsIDOMNamedNodeMap> pAttributes;
      nsCOMPtr<nsIDOMNode> pAttribute, pFirstNode;
      nsAutoString pNodeValue;
      rv = pNode->GetFirstChild(getter_AddRefs(pFirstNode));
      NS_ENSURE_SUCCESS(rv,rv);
      if (pFirstNode) {
        pFirstNode->GetNodeValue(pNodeValue);
        NS_ENSURE_SUCCESS(rv,rv);
        pDetail  = pNodeValue;
      }
      pNode->GetAttributes(getter_AddRefs(pAttributes));
      NS_ENSURE_SUCCESS(rv,rv);
      pAttributes->GetNamedItem(NS_LITERAL_STRING("code"), getter_AddRefs(pAttribute));
      NS_ENSURE_SUCCESS(rv,rv);
      if (pAttribute) {
        pAttribute->GetNodeValue(pNodeValue);
        NS_ENSURE_SUCCESS(rv,rv);
        pDetail += NS_LITERAL_STRING("\n(Erreur ");
        pDetail += pNodeValue;
        pDetail += NS_LITERAL_STRING(")");
      }
    } else pDetail = NS_LITERAL_STRING("Erreur sans message.");
    pFaute = pDetail;
    rv = pFault->GetFaultString(pTitle);
    NS_ENSURE_SUCCESS(rv,rv);
    nsCOMPtr<nsIPrompt> pPrompt= do_GetService(NS_DEFAULTPROMPT_CONTRACTID, &rv);
    NS_ENSURE_SUCCESS(rv,rv);
    pPrompt->Alert(ToNewUnicode(pTitle), ToNewUnicode(pFaute));
    return NS_ERROR_FAILURE;
  }

  nsISOAPParameter ** pParameters;
  PRUint32 pTotal;
  rv = aResponse->GetParameters(PR_FALSE, &pTotal, &pParameters);
  NS_ENSURE_SUCCESS(rv,rv);
  if (pTotal!=1) {
    nsCOMPtr<nsIPrompt> pPrompt= do_GetService(NS_DEFAULTPROMPT_CONTRACTID, &rv);
    NS_ENSURE_SUCCESS(rv,rv);
    pPrompt->Alert(ToNewUnicode(NS_LITERAL_CSTRING("Erreur système")), ToNewUnicode(NS_LITERAL_CSTRING("Le nombre total de paramètres reçus est incorrect.")));
    return NS_ERROR_FAILURE;
  }

  nsAutoString pText;
  nsCOMPtr<nsIVariant> pValue;
  rv = pParameters[0]->GetValue(getter_AddRefs(pValue));
  NS_ENSURE_SUCCESS(rv,rv);
  rv = pValue->GetAsAString(pText);
  NS_ENSURE_SUCCESS(rv,rv);
  rv = mComponent->TreatP0089(pText, mKey);
  return rv;
}


/* Generated by Pygmalion */


NS_IMPL_ISUPPORTS1(mozListenerP008A, nsISOAPResponseListener)

mozListenerP008A::mozListenerP008A(mozC02gestsea* aComponent, const nsAString & aTarget)
{
  mComponent = aComponent;
  mTarget = aTarget;
}
mozListenerP008A::~mozListenerP008A()
{
}

NS_IMETHODIMP mozListenerP008A::HandleResponse(nsISOAPResponse *aResponse, nsISOAPCall *aCall, PRUint32 aStatus, PRBool aLast, PRBool *aReturn)
{
  nsresult rv;
  nsCOMPtr<nsISOAPFault> pFault;
  rv = aResponse->GetFault(getter_AddRefs(pFault));
  NS_ENSURE_SUCCESS(rv, rv);
  if (pFault) {
    nsAutoString pFaute, pDetail, pTitle;
    nsCOMPtr<nsIDOMElement> pTheDetail;
    nsCOMPtr<nsIDOMNode> pNode;
    rv = pFault->GetDetail(getter_AddRefs(pTheDetail));
    NS_ENSURE_SUCCESS(rv,rv);
    rv = pTheDetail->GetFirstChild(getter_AddRefs(pNode));
    NS_ENSURE_SUCCESS(rv,rv);
    if (pNode) {
      nsCOMPtr<nsIDOMNamedNodeMap> pAttributes;
      nsCOMPtr<nsIDOMNode> pAttribute, pFirstNode;
      nsAutoString pNodeValue;
      rv = pNode->GetFirstChild(getter_AddRefs(pFirstNode));
      NS_ENSURE_SUCCESS(rv,rv);
      if (pFirstNode) {
        pFirstNode->GetNodeValue(pNodeValue);
        NS_ENSURE_SUCCESS(rv,rv);
        pDetail  = pNodeValue;
      }
      pNode->GetAttributes(getter_AddRefs(pAttributes));
      NS_ENSURE_SUCCESS(rv,rv);
      pAttributes->GetNamedItem(NS_LITERAL_STRING("code"), getter_AddRefs(pAttribute));
      NS_ENSURE_SUCCESS(rv,rv);
      if (pAttribute) {
        pAttribute->GetNodeValue(pNodeValue);
        NS_ENSURE_SUCCESS(rv,rv);
        pDetail += NS_LITERAL_STRING("\n(Erreur ");
        pDetail += pNodeValue;
        pDetail += NS_LITERAL_STRING(")");
      }
    } else pDetail = NS_LITERAL_STRING("Erreur sans message.");
    pFaute = pDetail;
    rv = pFault->GetFaultString(pTitle);
    NS_ENSURE_SUCCESS(rv,rv);
    nsCOMPtr<nsIPrompt> pPrompt= do_GetService(NS_DEFAULTPROMPT_CONTRACTID, &rv);
    NS_ENSURE_SUCCESS(rv,rv);
    pPrompt->Alert(ToNewUnicode(pTitle), ToNewUnicode(pFaute));
    return NS_ERROR_FAILURE;
  }

  nsISOAPParameter ** pParameters;
  PRUint32 pTotal;
  rv = aResponse->GetParameters(PR_FALSE, &pTotal, &pParameters);
  NS_ENSURE_SUCCESS(rv,rv);
  if (pTotal!=1) {
    nsCOMPtr<nsIPrompt> pPrompt= do_GetService(NS_DEFAULTPROMPT_CONTRACTID, &rv);
    NS_ENSURE_SUCCESS(rv,rv);
    pPrompt->Alert(ToNewUnicode(NS_LITERAL_CSTRING("Erreur système")), ToNewUnicode(NS_LITERAL_CSTRING("Le nombre total de paramètres reçus est incorrect.")));
    return NS_ERROR_FAILURE;
  }

  nsAutoString pText;
  nsCOMArray<nsIVariant> pArray;
  nsCOMPtr<nsIWritableVariant> pVariant;
  PRUint32 pLsize=0, pCsize=0;
  PRUint32 pLineIndex, pColIndex;
  PRUint16 pNodeType;
  nsCOMPtr<nsIDOMElement> pResult;
  nsCOMPtr<nsIDOMNodeList> pLines, pValues;
  nsCOMPtr<nsIDOMNode> pLine, pValue, pContent;
  rv = pParameters[0]->GetElement(getter_AddRefs(pResult));
  NS_ENSURE_SUCCESS(rv,rv);
  rv = pResult->GetChildNodes(getter_AddRefs(pLines));
  NS_ENSURE_SUCCESS(rv,rv);
  pLines->GetLength(&pLsize);
  for (pLineIndex=0;pLineIndex<pLsize;pLineIndex++) {
    do {
      rv = pLines->Item(pLineIndex, getter_AddRefs(pLine));
      NS_ENSURE_SUCCESS(rv,rv);
      pLine->GetNodeType(&pNodeType);
      if (pNodeType!=nsIDOMNode::ELEMENT_NODE) pLineIndex++;
    } while (pLineIndex<pLsize && pNodeType!=nsIDOMNode::ELEMENT_NODE);
    if (pLineIndex>=pLsize) break;
    rv = pLine->GetChildNodes(getter_AddRefs(pValues));
    NS_ENSURE_SUCCESS(rv,rv);
    pValues->GetLength(&pCsize);
    for (pColIndex=0;pColIndex<pCsize;pColIndex++) {
      do {
        rv = pValues->Item(pColIndex, getter_AddRefs(pValue));
        NS_ENSURE_SUCCESS(rv,rv);
        pValue->GetNodeType(&pNodeType);
        if (pNodeType!=nsIDOMNode::ELEMENT_NODE) pColIndex++;
      } while (pColIndex<pCsize && pNodeType!=nsIDOMNode::ELEMENT_NODE);
      if (pColIndex>=pCsize) break;
      rv = pValue->GetFirstChild(getter_AddRefs(pContent));
      NS_ENSURE_SUCCESS(rv,rv);
      pVariant = do_CreateInstance(NS_VARIANT_CONTRACTID, &rv);
      NS_ENSURE_SUCCESS(rv,rv);
      if (pContent) {
        rv = pContent->GetNodeValue(pText);
        NS_ENSURE_SUCCESS(rv,rv);
        pVariant->SetAsAString(pText);
        printf("%s|",ToNewCString(pText));
      } else {
        pVariant->SetAsAString(NS_LITERAL_STRING(""));
      }
      rv = pArray.AppendObject(pVariant);
    }
  }
  rv = mComponent->TreatP008A(pArray, pLsize, pCsize, mTarget);
  return rv;
}


/* Generated by Pygmalion */


NS_IMPL_ISUPPORTS1(mozListenerP008B, nsISOAPResponseListener)

mozListenerP008B::mozListenerP008B(mozC02gestsea* aComponent, const nsAString & aTarget)
{
  mComponent = aComponent;
  mTarget = aTarget;
}
mozListenerP008B::~mozListenerP008B()
{
}

NS_IMETHODIMP mozListenerP008B::HandleResponse(nsISOAPResponse *aResponse, nsISOAPCall *aCall, PRUint32 aStatus, PRBool aLast, PRBool *aReturn)
{
  nsresult rv;
  nsCOMPtr<nsISOAPFault> pFault;
  rv = aResponse->GetFault(getter_AddRefs(pFault));
  NS_ENSURE_SUCCESS(rv, rv);
  if (pFault) {
    nsAutoString pFaute, pDetail, pTitle;
    nsCOMPtr<nsIDOMElement> pTheDetail;
    nsCOMPtr<nsIDOMNode> pNode;
    rv = pFault->GetDetail(getter_AddRefs(pTheDetail));
    NS_ENSURE_SUCCESS(rv,rv);
    rv = pTheDetail->GetFirstChild(getter_AddRefs(pNode));
    NS_ENSURE_SUCCESS(rv,rv);
    if (pNode) {
      nsCOMPtr<nsIDOMNamedNodeMap> pAttributes;
      nsCOMPtr<nsIDOMNode> pAttribute, pFirstNode;
      nsAutoString pNodeValue;
      rv = pNode->GetFirstChild(getter_AddRefs(pFirstNode));
      NS_ENSURE_SUCCESS(rv,rv);
      if (pFirstNode) {
        pFirstNode->GetNodeValue(pNodeValue);
        NS_ENSURE_SUCCESS(rv,rv);
        pDetail  = pNodeValue;
      }
      pNode->GetAttributes(getter_AddRefs(pAttributes));
      NS_ENSURE_SUCCESS(rv,rv);
      pAttributes->GetNamedItem(NS_LITERAL_STRING("code"), getter_AddRefs(pAttribute));
      NS_ENSURE_SUCCESS(rv,rv);
      if (pAttribute) {
        pAttribute->GetNodeValue(pNodeValue);
        NS_ENSURE_SUCCESS(rv,rv);
        pDetail += NS_LITERAL_STRING("\n(Erreur ");
        pDetail += pNodeValue;
        pDetail += NS_LITERAL_STRING(")");
      }
    } else pDetail = NS_LITERAL_STRING("Erreur sans message.");
    pFaute = pDetail;
    rv = pFault->GetFaultString(pTitle);
    NS_ENSURE_SUCCESS(rv,rv);
    nsCOMPtr<nsIPrompt> pPrompt= do_GetService(NS_DEFAULTPROMPT_CONTRACTID, &rv);
    NS_ENSURE_SUCCESS(rv,rv);
    pPrompt->Alert(ToNewUnicode(pTitle), ToNewUnicode(pFaute));
    return NS_ERROR_FAILURE;
  }

  nsISOAPParameter ** pParameters;
  PRUint32 pTotal;
  rv = aResponse->GetParameters(PR_FALSE, &pTotal, &pParameters);
  NS_ENSURE_SUCCESS(rv,rv);
  if (pTotal!=1) {
    nsCOMPtr<nsIPrompt> pPrompt= do_GetService(NS_DEFAULTPROMPT_CONTRACTID, &rv);
    NS_ENSURE_SUCCESS(rv,rv);
    pPrompt->Alert(ToNewUnicode(NS_LITERAL_CSTRING("Erreur système")), ToNewUnicode(NS_LITERAL_CSTRING("Le nombre total de paramètres reçus est incorrect.")));
    return NS_ERROR_FAILURE;
  }

  nsAutoString pText;
  nsCOMArray<nsIVariant> pArray;
  nsCOMPtr<nsIWritableVariant> pVariant;
  PRUint32 pLsize=0, pCsize=0;
  PRUint32 pLineIndex, pColIndex;
  PRUint16 pNodeType;
  nsCOMPtr<nsIDOMElement> pResult;
  nsCOMPtr<nsIDOMNodeList> pLines, pValues;
  nsCOMPtr<nsIDOMNode> pLine, pValue, pContent;
  rv = pParameters[0]->GetElement(getter_AddRefs(pResult));
  NS_ENSURE_SUCCESS(rv,rv);
  rv = pResult->GetChildNodes(getter_AddRefs(pLines));
  NS_ENSURE_SUCCESS(rv,rv);
  pLines->GetLength(&pLsize);
  for (pLineIndex=0;pLineIndex<pLsize;pLineIndex++) {
    do {
      rv = pLines->Item(pLineIndex, getter_AddRefs(pLine));
      NS_ENSURE_SUCCESS(rv,rv);
      pLine->GetNodeType(&pNodeType);
      if (pNodeType!=nsIDOMNode::ELEMENT_NODE) pLineIndex++;
    } while (pLineIndex<pLsize && pNodeType!=nsIDOMNode::ELEMENT_NODE);
    if (pLineIndex>=pLsize) break;
    rv = pLine->GetChildNodes(getter_AddRefs(pValues));
    NS_ENSURE_SUCCESS(rv,rv);
    pValues->GetLength(&pCsize);
    for (pColIndex=0;pColIndex<pCsize;pColIndex++) {
      do {
        rv = pValues->Item(pColIndex, getter_AddRefs(pValue));
        NS_ENSURE_SUCCESS(rv,rv);
        pValue->GetNodeType(&pNodeType);
        if (pNodeType!=nsIDOMNode::ELEMENT_NODE) pColIndex++;
      } while (pColIndex<pCsize && pNodeType!=nsIDOMNode::ELEMENT_NODE);
      if (pColIndex>=pCsize) break;
      rv = pValue->GetFirstChild(getter_AddRefs(pContent));
      NS_ENSURE_SUCCESS(rv,rv);
      pVariant = do_CreateInstance(NS_VARIANT_CONTRACTID, &rv);
      NS_ENSURE_SUCCESS(rv,rv);
      if (pContent) {
        rv = pContent->GetNodeValue(pText);
        NS_ENSURE_SUCCESS(rv,rv);
        pVariant->SetAsAString(pText);
        printf("%s|",ToNewCString(pText));
      } else {
        pVariant->SetAsAString(NS_LITERAL_STRING(""));
      }
      rv = pArray.AppendObject(pVariant);
    }
  }
  rv = mComponent->TreatP008B(pArray, pLsize, pCsize, mTarget);
  return rv;
}


/* Generated by Pygmalion */


NS_IMPL_ISUPPORTS1(mozListenerP008C, nsISOAPResponseListener)

mozListenerP008C::mozListenerP008C(mozC02gestsea* aComponent, const nsAString & aTarget)
{
  mComponent = aComponent;
  mTarget = aTarget;
}
mozListenerP008C::~mozListenerP008C()
{
}

NS_IMETHODIMP mozListenerP008C::HandleResponse(nsISOAPResponse *aResponse, nsISOAPCall *aCall, PRUint32 aStatus, PRBool aLast, PRBool *aReturn)
{
  nsresult rv;
  nsCOMPtr<nsISOAPFault> pFault;
  rv = aResponse->GetFault(getter_AddRefs(pFault));
  NS_ENSURE_SUCCESS(rv, rv);
  if (pFault) {
    nsAutoString pFaute, pDetail, pTitle;
    nsCOMPtr<nsIDOMElement> pTheDetail;
    nsCOMPtr<nsIDOMNode> pNode;
    rv = pFault->GetDetail(getter_AddRefs(pTheDetail));
    NS_ENSURE_SUCCESS(rv,rv);
    rv = pTheDetail->GetFirstChild(getter_AddRefs(pNode));
    NS_ENSURE_SUCCESS(rv,rv);
    if (pNode) {
      nsCOMPtr<nsIDOMNamedNodeMap> pAttributes;
      nsCOMPtr<nsIDOMNode> pAttribute, pFirstNode;
      nsAutoString pNodeValue;
      rv = pNode->GetFirstChild(getter_AddRefs(pFirstNode));
      NS_ENSURE_SUCCESS(rv,rv);
      if (pFirstNode) {
        pFirstNode->GetNodeValue(pNodeValue);
        NS_ENSURE_SUCCESS(rv,rv);
        pDetail  = pNodeValue;
      }
      pNode->GetAttributes(getter_AddRefs(pAttributes));
      NS_ENSURE_SUCCESS(rv,rv);
      pAttributes->GetNamedItem(NS_LITERAL_STRING("code"), getter_AddRefs(pAttribute));
      NS_ENSURE_SUCCESS(rv,rv);
      if (pAttribute) {
        pAttribute->GetNodeValue(pNodeValue);
        NS_ENSURE_SUCCESS(rv,rv);
        pDetail += NS_LITERAL_STRING("\n(Erreur ");
        pDetail += pNodeValue;
        pDetail += NS_LITERAL_STRING(")");
      }
    } else pDetail = NS_LITERAL_STRING("Erreur sans message.");
    pFaute = pDetail;
    rv = pFault->GetFaultString(pTitle);
    NS_ENSURE_SUCCESS(rv,rv);
    nsCOMPtr<nsIPrompt> pPrompt= do_GetService(NS_DEFAULTPROMPT_CONTRACTID, &rv);
    NS_ENSURE_SUCCESS(rv,rv);
    pPrompt->Alert(ToNewUnicode(pTitle), ToNewUnicode(pFaute));
    return NS_ERROR_FAILURE;
  }

  nsISOAPParameter ** pParameters;
  PRUint32 pTotal;
  rv = aResponse->GetParameters(PR_FALSE, &pTotal, &pParameters);
  NS_ENSURE_SUCCESS(rv,rv);
  if (pTotal!=1) {
    nsCOMPtr<nsIPrompt> pPrompt= do_GetService(NS_DEFAULTPROMPT_CONTRACTID, &rv);
    NS_ENSURE_SUCCESS(rv,rv);
    pPrompt->Alert(ToNewUnicode(NS_LITERAL_CSTRING("Erreur système")), ToNewUnicode(NS_LITERAL_CSTRING("Le nombre total de paramètres reçus est incorrect.")));
    return NS_ERROR_FAILURE;
  }

  nsAutoString pText;
  nsCOMArray<nsIVariant> pArray;
  nsCOMPtr<nsIWritableVariant> pVariant;
  PRUint32 pLsize=0, pCsize=0;
  PRUint32 pLineIndex, pColIndex;
  PRUint16 pNodeType;
  nsCOMPtr<nsIDOMElement> pResult;
  nsCOMPtr<nsIDOMNodeList> pLines, pValues;
  nsCOMPtr<nsIDOMNode> pLine, pValue, pContent;
  rv = pParameters[0]->GetElement(getter_AddRefs(pResult));
  NS_ENSURE_SUCCESS(rv,rv);
  rv = pResult->GetChildNodes(getter_AddRefs(pLines));
  NS_ENSURE_SUCCESS(rv,rv);
  pLines->GetLength(&pLsize);
  for (pLineIndex=0;pLineIndex<pLsize;pLineIndex++) {
    do {
      rv = pLines->Item(pLineIndex, getter_AddRefs(pLine));
      NS_ENSURE_SUCCESS(rv,rv);
      pLine->GetNodeType(&pNodeType);
      if (pNodeType!=nsIDOMNode::ELEMENT_NODE) pLineIndex++;
    } while (pLineIndex<pLsize && pNodeType!=nsIDOMNode::ELEMENT_NODE);
    if (pLineIndex>=pLsize) break;
    rv = pLine->GetChildNodes(getter_AddRefs(pValues));
    NS_ENSURE_SUCCESS(rv,rv);
    pValues->GetLength(&pCsize);
    for (pColIndex=0;pColIndex<pCsize;pColIndex++) {
      do {
        rv = pValues->Item(pColIndex, getter_AddRefs(pValue));
        NS_ENSURE_SUCCESS(rv,rv);
        pValue->GetNodeType(&pNodeType);
        if (pNodeType!=nsIDOMNode::ELEMENT_NODE) pColIndex++;
      } while (pColIndex<pCsize && pNodeType!=nsIDOMNode::ELEMENT_NODE);
      if (pColIndex>=pCsize) break;
      rv = pValue->GetFirstChild(getter_AddRefs(pContent));
      NS_ENSURE_SUCCESS(rv,rv);
      pVariant = do_CreateInstance(NS_VARIANT_CONTRACTID, &rv);
      NS_ENSURE_SUCCESS(rv,rv);
      if (pContent) {
        rv = pContent->GetNodeValue(pText);
        NS_ENSURE_SUCCESS(rv,rv);
        pVariant->SetAsAString(pText);
        printf("%s|",ToNewCString(pText));
      } else {
        pVariant->SetAsAString(NS_LITERAL_STRING(""));
      }
      rv = pArray.AppendObject(pVariant);
    }
  }
  rv = mComponent->TreatP008C(pArray, pLsize, pCsize, mTarget);
  return rv;
}


/* Generated by Pygmalion */


NS_IMPL_ISUPPORTS1(mozListenerP008D, nsISOAPResponseListener)

mozListenerP008D::mozListenerP008D(mozC02gestsea* aComponent, const nsAString & aTarget)
{
  mComponent = aComponent;
  mTarget = aTarget;
}
mozListenerP008D::~mozListenerP008D()
{
}

NS_IMETHODIMP mozListenerP008D::HandleResponse(nsISOAPResponse *aResponse, nsISOAPCall *aCall, PRUint32 aStatus, PRBool aLast, PRBool *aReturn)
{
  nsresult rv;
  nsCOMPtr<nsISOAPFault> pFault;
  rv = aResponse->GetFault(getter_AddRefs(pFault));
  NS_ENSURE_SUCCESS(rv, rv);
  if (pFault) {
    nsAutoString pFaute, pDetail, pTitle;
    nsCOMPtr<nsIDOMElement> pTheDetail;
    nsCOMPtr<nsIDOMNode> pNode;
    rv = pFault->GetDetail(getter_AddRefs(pTheDetail));
    NS_ENSURE_SUCCESS(rv,rv);
    rv = pTheDetail->GetFirstChild(getter_AddRefs(pNode));
    NS_ENSURE_SUCCESS(rv,rv);
    if (pNode) {
      nsCOMPtr<nsIDOMNamedNodeMap> pAttributes;
      nsCOMPtr<nsIDOMNode> pAttribute, pFirstNode;
      nsAutoString pNodeValue;
      rv = pNode->GetFirstChild(getter_AddRefs(pFirstNode));
      NS_ENSURE_SUCCESS(rv,rv);
      if (pFirstNode) {
        pFirstNode->GetNodeValue(pNodeValue);
        NS_ENSURE_SUCCESS(rv,rv);
        pDetail  = pNodeValue;
      }
      pNode->GetAttributes(getter_AddRefs(pAttributes));
      NS_ENSURE_SUCCESS(rv,rv);
      pAttributes->GetNamedItem(NS_LITERAL_STRING("code"), getter_AddRefs(pAttribute));
      NS_ENSURE_SUCCESS(rv,rv);
      if (pAttribute) {
        pAttribute->GetNodeValue(pNodeValue);
        NS_ENSURE_SUCCESS(rv,rv);
        pDetail += NS_LITERAL_STRING("\n(Erreur ");
        pDetail += pNodeValue;
        pDetail += NS_LITERAL_STRING(")");
      }
    } else pDetail = NS_LITERAL_STRING("Erreur sans message.");
    pFaute = pDetail;
    rv = pFault->GetFaultString(pTitle);
    NS_ENSURE_SUCCESS(rv,rv);
    nsCOMPtr<nsIPrompt> pPrompt= do_GetService(NS_DEFAULTPROMPT_CONTRACTID, &rv);
    NS_ENSURE_SUCCESS(rv,rv);
    pPrompt->Alert(ToNewUnicode(pTitle), ToNewUnicode(pFaute));
    return NS_ERROR_FAILURE;
  }

  nsISOAPParameter ** pParameters;
  PRUint32 pTotal;
  rv = aResponse->GetParameters(PR_FALSE, &pTotal, &pParameters);
  NS_ENSURE_SUCCESS(rv,rv);
  if (pTotal!=1) {
    nsCOMPtr<nsIPrompt> pPrompt= do_GetService(NS_DEFAULTPROMPT_CONTRACTID, &rv);
    NS_ENSURE_SUCCESS(rv,rv);
    pPrompt->Alert(ToNewUnicode(NS_LITERAL_CSTRING("Erreur système")), ToNewUnicode(NS_LITERAL_CSTRING("Le nombre total de paramètres reçus est incorrect.")));
    return NS_ERROR_FAILURE;
  }

  nsAutoString pText;
  nsCOMArray<nsIVariant> pArray;
  nsCOMPtr<nsIWritableVariant> pVariant;
  PRUint32 pLsize=0, pCsize=0;
  PRUint32 pLineIndex, pColIndex;
  PRUint16 pNodeType;
  nsCOMPtr<nsIDOMElement> pResult;
  nsCOMPtr<nsIDOMNodeList> pLines, pValues;
  nsCOMPtr<nsIDOMNode> pLine, pValue, pContent;
  rv = pParameters[0]->GetElement(getter_AddRefs(pResult));
  NS_ENSURE_SUCCESS(rv,rv);
  rv = pResult->GetChildNodes(getter_AddRefs(pLines));
  NS_ENSURE_SUCCESS(rv,rv);
  pLines->GetLength(&pLsize);
  for (pLineIndex=0;pLineIndex<pLsize;pLineIndex++) {
    do {
      rv = pLines->Item(pLineIndex, getter_AddRefs(pLine));
      NS_ENSURE_SUCCESS(rv,rv);
      pLine->GetNodeType(&pNodeType);
      if (pNodeType!=nsIDOMNode::ELEMENT_NODE) pLineIndex++;
    } while (pLineIndex<pLsize && pNodeType!=nsIDOMNode::ELEMENT_NODE);
    if (pLineIndex>=pLsize) break;
    rv = pLine->GetChildNodes(getter_AddRefs(pValues));
    NS_ENSURE_SUCCESS(rv,rv);
    pValues->GetLength(&pCsize);
    for (pColIndex=0;pColIndex<pCsize;pColIndex++) {
      do {
        rv = pValues->Item(pColIndex, getter_AddRefs(pValue));
        NS_ENSURE_SUCCESS(rv,rv);
        pValue->GetNodeType(&pNodeType);
        if (pNodeType!=nsIDOMNode::ELEMENT_NODE) pColIndex++;
      } while (pColIndex<pCsize && pNodeType!=nsIDOMNode::ELEMENT_NODE);
      if (pColIndex>=pCsize) break;
      rv = pValue->GetFirstChild(getter_AddRefs(pContent));
      NS_ENSURE_SUCCESS(rv,rv);
      pVariant = do_CreateInstance(NS_VARIANT_CONTRACTID, &rv);
      NS_ENSURE_SUCCESS(rv,rv);
      if (pContent) {
        rv = pContent->GetNodeValue(pText);
        NS_ENSURE_SUCCESS(rv,rv);
        pVariant->SetAsAString(pText);
        printf("%s|",ToNewCString(pText));
      } else {
        pVariant->SetAsAString(NS_LITERAL_STRING(""));
      }
      rv = pArray.AppendObject(pVariant);
    }
  }
  rv = mComponent->TreatP008D(pArray, pLsize, pCsize, mTarget);
  return rv;
}


/* Generated by Pygmalion */


NS_IMPL_ISUPPORTS1(mozListenerP008E, nsISOAPResponseListener)

mozListenerP008E::mozListenerP008E(mozC02gestsea* aComponent, const nsAString & aTarget)
{
  mComponent = aComponent;
  mTarget = aTarget;
}
mozListenerP008E::~mozListenerP008E()
{
}

NS_IMETHODIMP mozListenerP008E::HandleResponse(nsISOAPResponse *aResponse, nsISOAPCall *aCall, PRUint32 aStatus, PRBool aLast, PRBool *aReturn)
{
  nsresult rv;
  nsCOMPtr<nsISOAPFault> pFault;
  rv = aResponse->GetFault(getter_AddRefs(pFault));
  NS_ENSURE_SUCCESS(rv, rv);
  if (pFault) {
    nsAutoString pFaute, pDetail, pTitle;
    nsCOMPtr<nsIDOMElement> pTheDetail;
    nsCOMPtr<nsIDOMNode> pNode;
    rv = pFault->GetDetail(getter_AddRefs(pTheDetail));
    NS_ENSURE_SUCCESS(rv,rv);
    rv = pTheDetail->GetFirstChild(getter_AddRefs(pNode));
    NS_ENSURE_SUCCESS(rv,rv);
    if (pNode) {
      nsCOMPtr<nsIDOMNamedNodeMap> pAttributes;
      nsCOMPtr<nsIDOMNode> pAttribute, pFirstNode;
      nsAutoString pNodeValue;
      rv = pNode->GetFirstChild(getter_AddRefs(pFirstNode));
      NS_ENSURE_SUCCESS(rv,rv);
      if (pFirstNode) {
        pFirstNode->GetNodeValue(pNodeValue);
        NS_ENSURE_SUCCESS(rv,rv);
        pDetail  = pNodeValue;
      }
      pNode->GetAttributes(getter_AddRefs(pAttributes));
      NS_ENSURE_SUCCESS(rv,rv);
      pAttributes->GetNamedItem(NS_LITERAL_STRING("code"), getter_AddRefs(pAttribute));
      NS_ENSURE_SUCCESS(rv,rv);
      if (pAttribute) {
        pAttribute->GetNodeValue(pNodeValue);
        NS_ENSURE_SUCCESS(rv,rv);
        pDetail += NS_LITERAL_STRING("\n(Erreur ");
        pDetail += pNodeValue;
        pDetail += NS_LITERAL_STRING(")");
      }
    } else pDetail = NS_LITERAL_STRING("Erreur sans message.");
    pFaute = pDetail;
    rv = pFault->GetFaultString(pTitle);
    NS_ENSURE_SUCCESS(rv,rv);
    nsCOMPtr<nsIPrompt> pPrompt= do_GetService(NS_DEFAULTPROMPT_CONTRACTID, &rv);
    NS_ENSURE_SUCCESS(rv,rv);
    pPrompt->Alert(ToNewUnicode(pTitle), ToNewUnicode(pFaute));
    return NS_ERROR_FAILURE;
  }

  nsISOAPParameter ** pParameters;
  PRUint32 pTotal;
  rv = aResponse->GetParameters(PR_FALSE, &pTotal, &pParameters);
  NS_ENSURE_SUCCESS(rv,rv);
  if (pTotal!=1) {
    nsCOMPtr<nsIPrompt> pPrompt= do_GetService(NS_DEFAULTPROMPT_CONTRACTID, &rv);
    NS_ENSURE_SUCCESS(rv,rv);
    pPrompt->Alert(ToNewUnicode(NS_LITERAL_CSTRING("Erreur système")), ToNewUnicode(NS_LITERAL_CSTRING("Le nombre total de paramètres reçus est incorrect.")));
    return NS_ERROR_FAILURE;
  }

  nsAutoString pText;
  nsCOMArray<nsIVariant> pArray;
  nsCOMPtr<nsIWritableVariant> pVariant;
  PRUint32 pLsize=0, pCsize=0;
  PRUint32 pLineIndex, pColIndex;
  PRUint16 pNodeType;
  nsCOMPtr<nsIDOMElement> pResult;
  nsCOMPtr<nsIDOMNodeList> pLines, pValues;
  nsCOMPtr<nsIDOMNode> pLine, pValue, pContent;
  rv = pParameters[0]->GetElement(getter_AddRefs(pResult));
  NS_ENSURE_SUCCESS(rv,rv);
  rv = pResult->GetChildNodes(getter_AddRefs(pLines));
  NS_ENSURE_SUCCESS(rv,rv);
  pLines->GetLength(&pLsize);
  for (pLineIndex=0;pLineIndex<pLsize;pLineIndex++) {
    do {
      rv = pLines->Item(pLineIndex, getter_AddRefs(pLine));
      NS_ENSURE_SUCCESS(rv,rv);
      pLine->GetNodeType(&pNodeType);
      if (pNodeType!=nsIDOMNode::ELEMENT_NODE) pLineIndex++;
    } while (pLineIndex<pLsize && pNodeType!=nsIDOMNode::ELEMENT_NODE);
    if (pLineIndex>=pLsize) break;
    rv = pLine->GetChildNodes(getter_AddRefs(pValues));
    NS_ENSURE_SUCCESS(rv,rv);
    pValues->GetLength(&pCsize);
    for (pColIndex=0;pColIndex<pCsize;pColIndex++) {
      do {
        rv = pValues->Item(pColIndex, getter_AddRefs(pValue));
        NS_ENSURE_SUCCESS(rv,rv);
        pValue->GetNodeType(&pNodeType);
        if (pNodeType!=nsIDOMNode::ELEMENT_NODE) pColIndex++;
      } while (pColIndex<pCsize && pNodeType!=nsIDOMNode::ELEMENT_NODE);
      if (pColIndex>=pCsize) break;
      rv = pValue->GetFirstChild(getter_AddRefs(pContent));
      NS_ENSURE_SUCCESS(rv,rv);
      pVariant = do_CreateInstance(NS_VARIANT_CONTRACTID, &rv);
      NS_ENSURE_SUCCESS(rv,rv);
      if (pContent) {
        rv = pContent->GetNodeValue(pText);
        NS_ENSURE_SUCCESS(rv,rv);
        pVariant->SetAsAString(pText);
        printf("%s|",ToNewCString(pText));
      } else {
        pVariant->SetAsAString(NS_LITERAL_STRING(""));
      }
      rv = pArray.AppendObject(pVariant);
    }
  }
  rv = mComponent->TreatP008E(pArray, pLsize, pCsize, mTarget);
  return rv;
}


/* Generated by Pygmalion */


NS_IMPL_ISUPPORTS1(mozListenerP008F, nsISOAPResponseListener)

mozListenerP008F::mozListenerP008F(mozC02gestsea* aComponent, const nsAString & aTarget)
{
  mComponent = aComponent;
  mTarget = aTarget;
}
mozListenerP008F::~mozListenerP008F()
{
}

NS_IMETHODIMP mozListenerP008F::HandleResponse(nsISOAPResponse *aResponse, nsISOAPCall *aCall, PRUint32 aStatus, PRBool aLast, PRBool *aReturn)
{
  nsresult rv;
  nsCOMPtr<nsISOAPFault> pFault;
  rv = aResponse->GetFault(getter_AddRefs(pFault));
  NS_ENSURE_SUCCESS(rv, rv);
  if (pFault) {
    nsAutoString pFaute, pDetail, pTitle;
    nsCOMPtr<nsIDOMElement> pTheDetail;
    nsCOMPtr<nsIDOMNode> pNode;
    rv = pFault->GetDetail(getter_AddRefs(pTheDetail));
    NS_ENSURE_SUCCESS(rv,rv);
    rv = pTheDetail->GetFirstChild(getter_AddRefs(pNode));
    NS_ENSURE_SUCCESS(rv,rv);
    if (pNode) {
      nsCOMPtr<nsIDOMNamedNodeMap> pAttributes;
      nsCOMPtr<nsIDOMNode> pAttribute, pFirstNode;
      nsAutoString pNodeValue;
      rv = pNode->GetFirstChild(getter_AddRefs(pFirstNode));
      NS_ENSURE_SUCCESS(rv,rv);
      if (pFirstNode) {
        pFirstNode->GetNodeValue(pNodeValue);
        NS_ENSURE_SUCCESS(rv,rv);
        pDetail  = pNodeValue;
      }
      pNode->GetAttributes(getter_AddRefs(pAttributes));
      NS_ENSURE_SUCCESS(rv,rv);
      pAttributes->GetNamedItem(NS_LITERAL_STRING("code"), getter_AddRefs(pAttribute));
      NS_ENSURE_SUCCESS(rv,rv);
      if (pAttribute) {
        pAttribute->GetNodeValue(pNodeValue);
        NS_ENSURE_SUCCESS(rv,rv);
        pDetail += NS_LITERAL_STRING("\n(Erreur ");
        pDetail += pNodeValue;
        pDetail += NS_LITERAL_STRING(")");
      }
    } else pDetail = NS_LITERAL_STRING("Erreur sans message.");
    pFaute = pDetail;
    rv = pFault->GetFaultString(pTitle);
    NS_ENSURE_SUCCESS(rv,rv);
    nsCOMPtr<nsIPrompt> pPrompt= do_GetService(NS_DEFAULTPROMPT_CONTRACTID, &rv);
    NS_ENSURE_SUCCESS(rv,rv);
    pPrompt->Alert(ToNewUnicode(pTitle), ToNewUnicode(pFaute));
    return NS_ERROR_FAILURE;
  }

  nsISOAPParameter ** pParameters;
  PRUint32 pTotal;
  rv = aResponse->GetParameters(PR_FALSE, &pTotal, &pParameters);
  NS_ENSURE_SUCCESS(rv,rv);
  if (pTotal!=1) {
    nsCOMPtr<nsIPrompt> pPrompt= do_GetService(NS_DEFAULTPROMPT_CONTRACTID, &rv);
    NS_ENSURE_SUCCESS(rv,rv);
    pPrompt->Alert(ToNewUnicode(NS_LITERAL_CSTRING("Erreur système")), ToNewUnicode(NS_LITERAL_CSTRING("Le nombre total de paramètres reçus est incorrect.")));
    return NS_ERROR_FAILURE;
  }

  nsAutoString pText;
  nsCOMArray<nsIVariant> pArray;
  nsCOMPtr<nsIWritableVariant> pVariant;
  PRUint32 pLsize=0, pCsize=0;
  PRUint32 pLineIndex, pColIndex;
  PRUint16 pNodeType;
  nsCOMPtr<nsIDOMElement> pResult;
  nsCOMPtr<nsIDOMNodeList> pLines, pValues;
  nsCOMPtr<nsIDOMNode> pLine, pValue, pContent;
  rv = pParameters[0]->GetElement(getter_AddRefs(pResult));
  NS_ENSURE_SUCCESS(rv,rv);
  rv = pResult->GetChildNodes(getter_AddRefs(pLines));
  NS_ENSURE_SUCCESS(rv,rv);
  pLines->GetLength(&pLsize);
  for (pLineIndex=0;pLineIndex<pLsize;pLineIndex++) {
    do {
      rv = pLines->Item(pLineIndex, getter_AddRefs(pLine));
      NS_ENSURE_SUCCESS(rv,rv);
      pLine->GetNodeType(&pNodeType);
      if (pNodeType!=nsIDOMNode::ELEMENT_NODE) pLineIndex++;
    } while (pLineIndex<pLsize && pNodeType!=nsIDOMNode::ELEMENT_NODE);
    if (pLineIndex>=pLsize) break;
    rv = pLine->GetChildNodes(getter_AddRefs(pValues));
    NS_ENSURE_SUCCESS(rv,rv);
    pValues->GetLength(&pCsize);
    for (pColIndex=0;pColIndex<pCsize;pColIndex++) {
      do {
        rv = pValues->Item(pColIndex, getter_AddRefs(pValue));
        NS_ENSURE_SUCCESS(rv,rv);
        pValue->GetNodeType(&pNodeType);
        if (pNodeType!=nsIDOMNode::ELEMENT_NODE) pColIndex++;
      } while (pColIndex<pCsize && pNodeType!=nsIDOMNode::ELEMENT_NODE);
      if (pColIndex>=pCsize) break;
      rv = pValue->GetFirstChild(getter_AddRefs(pContent));
      NS_ENSURE_SUCCESS(rv,rv);
      pVariant = do_CreateInstance(NS_VARIANT_CONTRACTID, &rv);
      NS_ENSURE_SUCCESS(rv,rv);
      if (pContent) {
        rv = pContent->GetNodeValue(pText);
        NS_ENSURE_SUCCESS(rv,rv);
        pVariant->SetAsAString(pText);
        printf("%s|",ToNewCString(pText));
      } else {
        pVariant->SetAsAString(NS_LITERAL_STRING(""));
      }
      rv = pArray.AppendObject(pVariant);
    }
  }
  rv = mComponent->TreatP008F(pArray, pLsize, pCsize, mTarget);
  return rv;
}


/* Generated by Pygmalion */


NS_IMPL_ISUPPORTS1(mozListenerP0090, nsISOAPResponseListener)

mozListenerP0090::mozListenerP0090(mozC02gestsea* aComponent, const nsAString & aKey)
{
  mComponent = aComponent;
  mKey = aKey;
}
mozListenerP0090::~mozListenerP0090()
{
}

NS_IMETHODIMP mozListenerP0090::HandleResponse(nsISOAPResponse *aResponse, nsISOAPCall *aCall, PRUint32 aStatus, PRBool aLast, PRBool *aReturn)
{
  nsresult rv;
  nsCOMPtr<nsISOAPFault> pFault;
  rv = aResponse->GetFault(getter_AddRefs(pFault));
  NS_ENSURE_SUCCESS(rv, rv);
  if (pFault) {
    nsAutoString pFaute, pDetail, pTitle;
    nsCOMPtr<nsIDOMElement> pTheDetail;
    nsCOMPtr<nsIDOMNode> pNode;
    rv = pFault->GetDetail(getter_AddRefs(pTheDetail));
    NS_ENSURE_SUCCESS(rv,rv);
    rv = pTheDetail->GetFirstChild(getter_AddRefs(pNode));
    NS_ENSURE_SUCCESS(rv,rv);
    if (pNode) {
      nsCOMPtr<nsIDOMNamedNodeMap> pAttributes;
      nsCOMPtr<nsIDOMNode> pAttribute, pFirstNode;
      nsAutoString pNodeValue;
      rv = pNode->GetFirstChild(getter_AddRefs(pFirstNode));
      NS_ENSURE_SUCCESS(rv,rv);
      if (pFirstNode) {
        pFirstNode->GetNodeValue(pNodeValue);
        NS_ENSURE_SUCCESS(rv,rv);
        pDetail  = pNodeValue;
      }
      pNode->GetAttributes(getter_AddRefs(pAttributes));
      NS_ENSURE_SUCCESS(rv,rv);
      pAttributes->GetNamedItem(NS_LITERAL_STRING("code"), getter_AddRefs(pAttribute));
      NS_ENSURE_SUCCESS(rv,rv);
      if (pAttribute) {
        pAttribute->GetNodeValue(pNodeValue);
        NS_ENSURE_SUCCESS(rv,rv);
        pDetail += NS_LITERAL_STRING("\n(Erreur ");
        pDetail += pNodeValue;
        pDetail += NS_LITERAL_STRING(")");
      }
    } else pDetail = NS_LITERAL_STRING("Erreur sans message.");
    pFaute = pDetail;
    rv = pFault->GetFaultString(pTitle);
    NS_ENSURE_SUCCESS(rv,rv);
    nsCOMPtr<nsIPrompt> pPrompt= do_GetService(NS_DEFAULTPROMPT_CONTRACTID, &rv);
    NS_ENSURE_SUCCESS(rv,rv);
    pPrompt->Alert(ToNewUnicode(pTitle), ToNewUnicode(pFaute));
    return NS_ERROR_FAILURE;
  }

  nsISOAPParameter ** pParameters;
  PRUint32 pTotal;
  rv = aResponse->GetParameters(PR_FALSE, &pTotal, &pParameters);
  NS_ENSURE_SUCCESS(rv,rv);
  if (pTotal!=1) {
    nsCOMPtr<nsIPrompt> pPrompt= do_GetService(NS_DEFAULTPROMPT_CONTRACTID, &rv);
    NS_ENSURE_SUCCESS(rv,rv);
    pPrompt->Alert(ToNewUnicode(NS_LITERAL_CSTRING("Erreur système")), ToNewUnicode(NS_LITERAL_CSTRING("Le nombre total de paramètres reçus est incorrect.")));
    return NS_ERROR_FAILURE;
  }

  nsAutoString pText;
  nsCOMArray<nsIVariant> pArray;
  nsCOMPtr<nsIWritableVariant> pVariant;
  PRUint32 pLsize=0, pCsize=0;
  PRUint32 pLineIndex, pColIndex;
  PRUint16 pNodeType;
  nsCOMPtr<nsIDOMElement> pResult;
  nsCOMPtr<nsIDOMNodeList> pLines, pValues;
  nsCOMPtr<nsIDOMNode> pLine, pValue, pContent;
  rv = pParameters[0]->GetElement(getter_AddRefs(pResult));
  NS_ENSURE_SUCCESS(rv,rv);
  rv = pResult->GetChildNodes(getter_AddRefs(pLines));
  NS_ENSURE_SUCCESS(rv,rv);
  pLines->GetLength(&pLsize);
  for (pLineIndex=0;pLineIndex<pLsize;pLineIndex++) {
    do {
      rv = pLines->Item(pLineIndex, getter_AddRefs(pLine));
      NS_ENSURE_SUCCESS(rv,rv);
      pLine->GetNodeType(&pNodeType);
      if (pNodeType!=nsIDOMNode::ELEMENT_NODE) pLineIndex++;
    } while (pLineIndex<pLsize && pNodeType!=nsIDOMNode::ELEMENT_NODE);
    if (pLineIndex>=pLsize) break;
    rv = pLine->GetChildNodes(getter_AddRefs(pValues));
    NS_ENSURE_SUCCESS(rv,rv);
    pValues->GetLength(&pCsize);
    for (pColIndex=0;pColIndex<pCsize;pColIndex++) {
      do {
        rv = pValues->Item(pColIndex, getter_AddRefs(pValue));
        NS_ENSURE_SUCCESS(rv,rv);
        pValue->GetNodeType(&pNodeType);
        if (pNodeType!=nsIDOMNode::ELEMENT_NODE) pColIndex++;
      } while (pColIndex<pCsize && pNodeType!=nsIDOMNode::ELEMENT_NODE);
      if (pColIndex>=pCsize) break;
      rv = pValue->GetFirstChild(getter_AddRefs(pContent));
      NS_ENSURE_SUCCESS(rv,rv);
      pVariant = do_CreateInstance(NS_VARIANT_CONTRACTID, &rv);
      NS_ENSURE_SUCCESS(rv,rv);
      if (pContent) {
        rv = pContent->GetNodeValue(pText);
        NS_ENSURE_SUCCESS(rv,rv);
        pVariant->SetAsAString(pText);
        printf("%s|",ToNewCString(pText));
      } else {
        pVariant->SetAsAString(NS_LITERAL_STRING(""));
      }
      rv = pArray.AppendObject(pVariant);
    }
  }
  rv = mComponent->TreatP0090(pArray, pLsize, pCsize, mKey);
  return rv;
}


/* Generated by Pygmalion */


NS_IMPL_ISUPPORTS1(mozListenerP0091, nsISOAPResponseListener)

mozListenerP0091::mozListenerP0091(mozC02gestsea* aComponent, const nsAString & aKey)
{
  mComponent = aComponent;
  mKey = aKey;
}
mozListenerP0091::~mozListenerP0091()
{
}

NS_IMETHODIMP mozListenerP0091::HandleResponse(nsISOAPResponse *aResponse, nsISOAPCall *aCall, PRUint32 aStatus, PRBool aLast, PRBool *aReturn)
{
  nsresult rv;
  nsCOMPtr<nsISOAPFault> pFault;
  rv = aResponse->GetFault(getter_AddRefs(pFault));
  NS_ENSURE_SUCCESS(rv, rv);
  if (pFault) {
    nsAutoString pFaute, pDetail, pTitle;
    nsCOMPtr<nsIDOMElement> pTheDetail;
    nsCOMPtr<nsIDOMNode> pNode;
    rv = pFault->GetDetail(getter_AddRefs(pTheDetail));
    NS_ENSURE_SUCCESS(rv,rv);
    rv = pTheDetail->GetFirstChild(getter_AddRefs(pNode));
    NS_ENSURE_SUCCESS(rv,rv);
    if (pNode) {
      nsCOMPtr<nsIDOMNamedNodeMap> pAttributes;
      nsCOMPtr<nsIDOMNode> pAttribute, pFirstNode;
      nsAutoString pNodeValue;
      rv = pNode->GetFirstChild(getter_AddRefs(pFirstNode));
      NS_ENSURE_SUCCESS(rv,rv);
      if (pFirstNode) {
        pFirstNode->GetNodeValue(pNodeValue);
        NS_ENSURE_SUCCESS(rv,rv);
        pDetail  = pNodeValue;
      }
      pNode->GetAttributes(getter_AddRefs(pAttributes));
      NS_ENSURE_SUCCESS(rv,rv);
      pAttributes->GetNamedItem(NS_LITERAL_STRING("code"), getter_AddRefs(pAttribute));
      NS_ENSURE_SUCCESS(rv,rv);
      if (pAttribute) {
        pAttribute->GetNodeValue(pNodeValue);
        NS_ENSURE_SUCCESS(rv,rv);
        pDetail += NS_LITERAL_STRING("\n(Erreur ");
        pDetail += pNodeValue;
        pDetail += NS_LITERAL_STRING(")");
      }
    } else pDetail = NS_LITERAL_STRING("Erreur sans message.");
    pFaute = pDetail;
    rv = pFault->GetFaultString(pTitle);
    NS_ENSURE_SUCCESS(rv,rv);
    nsCOMPtr<nsIPrompt> pPrompt= do_GetService(NS_DEFAULTPROMPT_CONTRACTID, &rv);
    NS_ENSURE_SUCCESS(rv,rv);
    pPrompt->Alert(ToNewUnicode(pTitle), ToNewUnicode(pFaute));
    return NS_ERROR_FAILURE;
  }

  nsISOAPParameter ** pParameters;
  PRUint32 pTotal;
  rv = aResponse->GetParameters(PR_FALSE, &pTotal, &pParameters);
  NS_ENSURE_SUCCESS(rv,rv);
  if (pTotal!=1) {
    nsCOMPtr<nsIPrompt> pPrompt= do_GetService(NS_DEFAULTPROMPT_CONTRACTID, &rv);
    NS_ENSURE_SUCCESS(rv,rv);
    pPrompt->Alert(ToNewUnicode(NS_LITERAL_CSTRING("Erreur système")), ToNewUnicode(NS_LITERAL_CSTRING("Le nombre total de paramètres reçus est incorrect.")));
    return NS_ERROR_FAILURE;
  }

  nsAutoString pText;
  nsCOMArray<nsIVariant> pArray;
  nsCOMPtr<nsIWritableVariant> pVariant;
  PRUint32 pLsize=0, pCsize=0;
  PRUint32 pLineIndex, pColIndex;
  PRUint16 pNodeType;
  nsCOMPtr<nsIDOMElement> pResult;
  nsCOMPtr<nsIDOMNodeList> pLines, pValues;
  nsCOMPtr<nsIDOMNode> pLine, pValue, pContent;
  rv = pParameters[0]->GetElement(getter_AddRefs(pResult));
  NS_ENSURE_SUCCESS(rv,rv);
  rv = pResult->GetChildNodes(getter_AddRefs(pLines));
  NS_ENSURE_SUCCESS(rv,rv);
  pLines->GetLength(&pLsize);
  for (pLineIndex=0;pLineIndex<pLsize;pLineIndex++) {
    do {
      rv = pLines->Item(pLineIndex, getter_AddRefs(pLine));
      NS_ENSURE_SUCCESS(rv,rv);
      pLine->GetNodeType(&pNodeType);
      if (pNodeType!=nsIDOMNode::ELEMENT_NODE) pLineIndex++;
    } while (pLineIndex<pLsize && pNodeType!=nsIDOMNode::ELEMENT_NODE);
    if (pLineIndex>=pLsize) break;
    rv = pLine->GetChildNodes(getter_AddRefs(pValues));
    NS_ENSURE_SUCCESS(rv,rv);
    pValues->GetLength(&pCsize);
    for (pColIndex=0;pColIndex<pCsize;pColIndex++) {
      do {
        rv = pValues->Item(pColIndex, getter_AddRefs(pValue));
        NS_ENSURE_SUCCESS(rv,rv);
        pValue->GetNodeType(&pNodeType);
        if (pNodeType!=nsIDOMNode::ELEMENT_NODE) pColIndex++;
      } while (pColIndex<pCsize && pNodeType!=nsIDOMNode::ELEMENT_NODE);
      if (pColIndex>=pCsize) break;
      rv = pValue->GetFirstChild(getter_AddRefs(pContent));
      NS_ENSURE_SUCCESS(rv,rv);
      pVariant = do_CreateInstance(NS_VARIANT_CONTRACTID, &rv);
      NS_ENSURE_SUCCESS(rv,rv);
      if (pContent) {
        rv = pContent->GetNodeValue(pText);
        NS_ENSURE_SUCCESS(rv,rv);
        pVariant->SetAsAString(pText);
        printf("%s|",ToNewCString(pText));
      } else {
        pVariant->SetAsAString(NS_LITERAL_STRING(""));
      }
      rv = pArray.AppendObject(pVariant);
    }
  }
  rv = mComponent->TreatP0091(pArray, pLsize, pCsize, mKey);
  return rv;
}


/* Generated by Pygmalion */


NS_IMPL_ISUPPORTS1(mozListenerP0092, nsISOAPResponseListener)

mozListenerP0092::mozListenerP0092(mozC02gestsea* aComponent, const nsAString & aKey)
{
  mComponent = aComponent;
  mKey = aKey;
}
mozListenerP0092::~mozListenerP0092()
{
}

NS_IMETHODIMP mozListenerP0092::HandleResponse(nsISOAPResponse *aResponse, nsISOAPCall *aCall, PRUint32 aStatus, PRBool aLast, PRBool *aReturn)
{
  nsresult rv;
  nsCOMPtr<nsISOAPFault> pFault;
  rv = aResponse->GetFault(getter_AddRefs(pFault));
  NS_ENSURE_SUCCESS(rv, rv);
  if (pFault) {
    nsAutoString pFaute, pDetail, pTitle;
    nsCOMPtr<nsIDOMElement> pTheDetail;
    nsCOMPtr<nsIDOMNode> pNode;
    rv = pFault->GetDetail(getter_AddRefs(pTheDetail));
    NS_ENSURE_SUCCESS(rv,rv);
    rv = pTheDetail->GetFirstChild(getter_AddRefs(pNode));
    NS_ENSURE_SUCCESS(rv,rv);
    if (pNode) {
      nsCOMPtr<nsIDOMNamedNodeMap> pAttributes;
      nsCOMPtr<nsIDOMNode> pAttribute, pFirstNode;
      nsAutoString pNodeValue;
      rv = pNode->GetFirstChild(getter_AddRefs(pFirstNode));
      NS_ENSURE_SUCCESS(rv,rv);
      if (pFirstNode) {
        pFirstNode->GetNodeValue(pNodeValue);
        NS_ENSURE_SUCCESS(rv,rv);
        pDetail  = pNodeValue;
      }
      pNode->GetAttributes(getter_AddRefs(pAttributes));
      NS_ENSURE_SUCCESS(rv,rv);
      pAttributes->GetNamedItem(NS_LITERAL_STRING("code"), getter_AddRefs(pAttribute));
      NS_ENSURE_SUCCESS(rv,rv);
      if (pAttribute) {
        pAttribute->GetNodeValue(pNodeValue);
        NS_ENSURE_SUCCESS(rv,rv);
        pDetail += NS_LITERAL_STRING("\n(Erreur ");
        pDetail += pNodeValue;
        pDetail += NS_LITERAL_STRING(")");
      }
    } else pDetail = NS_LITERAL_STRING("Erreur sans message.");
    pFaute = pDetail;
    rv = pFault->GetFaultString(pTitle);
    NS_ENSURE_SUCCESS(rv,rv);
    nsCOMPtr<nsIPrompt> pPrompt= do_GetService(NS_DEFAULTPROMPT_CONTRACTID, &rv);
    NS_ENSURE_SUCCESS(rv,rv);
    pPrompt->Alert(ToNewUnicode(pTitle), ToNewUnicode(pFaute));
    return NS_ERROR_FAILURE;
  }

  nsISOAPParameter ** pParameters;
  PRUint32 pTotal;
  rv = aResponse->GetParameters(PR_FALSE, &pTotal, &pParameters);
  NS_ENSURE_SUCCESS(rv,rv);
  if (pTotal!=1) {
    nsCOMPtr<nsIPrompt> pPrompt= do_GetService(NS_DEFAULTPROMPT_CONTRACTID, &rv);
    NS_ENSURE_SUCCESS(rv,rv);
    pPrompt->Alert(ToNewUnicode(NS_LITERAL_CSTRING("Erreur système")), ToNewUnicode(NS_LITERAL_CSTRING("Le nombre total de paramètres reçus est incorrect.")));
    return NS_ERROR_FAILURE;
  }

  nsAutoString pText;
  nsCOMArray<nsIVariant> pArray;
  nsCOMPtr<nsIWritableVariant> pVariant;
  PRUint32 pLsize=0, pCsize=0;
  PRUint32 pLineIndex, pColIndex;
  PRUint16 pNodeType;
  nsCOMPtr<nsIDOMElement> pResult;
  nsCOMPtr<nsIDOMNodeList> pLines, pValues;
  nsCOMPtr<nsIDOMNode> pLine, pValue, pContent;
  rv = pParameters[0]->GetElement(getter_AddRefs(pResult));
  NS_ENSURE_SUCCESS(rv,rv);
  rv = pResult->GetChildNodes(getter_AddRefs(pLines));
  NS_ENSURE_SUCCESS(rv,rv);
  pLines->GetLength(&pLsize);
  for (pLineIndex=0;pLineIndex<pLsize;pLineIndex++) {
    do {
      rv = pLines->Item(pLineIndex, getter_AddRefs(pLine));
      NS_ENSURE_SUCCESS(rv,rv);
      pLine->GetNodeType(&pNodeType);
      if (pNodeType!=nsIDOMNode::ELEMENT_NODE) pLineIndex++;
    } while (pLineIndex<pLsize && pNodeType!=nsIDOMNode::ELEMENT_NODE);
    if (pLineIndex>=pLsize) break;
    rv = pLine->GetChildNodes(getter_AddRefs(pValues));
    NS_ENSURE_SUCCESS(rv,rv);
    pValues->GetLength(&pCsize);
    for (pColIndex=0;pColIndex<pCsize;pColIndex++) {
      do {
        rv = pValues->Item(pColIndex, getter_AddRefs(pValue));
        NS_ENSURE_SUCCESS(rv,rv);
        pValue->GetNodeType(&pNodeType);
        if (pNodeType!=nsIDOMNode::ELEMENT_NODE) pColIndex++;
      } while (pColIndex<pCsize && pNodeType!=nsIDOMNode::ELEMENT_NODE);
      if (pColIndex>=pCsize) break;
      rv = pValue->GetFirstChild(getter_AddRefs(pContent));
      NS_ENSURE_SUCCESS(rv,rv);
      pVariant = do_CreateInstance(NS_VARIANT_CONTRACTID, &rv);
      NS_ENSURE_SUCCESS(rv,rv);
      if (pContent) {
        rv = pContent->GetNodeValue(pText);
        NS_ENSURE_SUCCESS(rv,rv);
        pVariant->SetAsAString(pText);
        printf("%s|",ToNewCString(pText));
      } else {
        pVariant->SetAsAString(NS_LITERAL_STRING(""));
      }
      rv = pArray.AppendObject(pVariant);
    }
  }
  rv = mComponent->TreatP0092(pArray, pLsize, pCsize, mKey);
  return rv;
}


/* Generated by Pygmalion */


NS_IMPL_ISUPPORTS1(mozListenerP0093, nsISOAPResponseListener)

mozListenerP0093::mozListenerP0093(mozC02gestsea* aComponent, const nsAString & aKey)
{
  mComponent = aComponent;
  mKey = aKey;
}
mozListenerP0093::~mozListenerP0093()
{
}

NS_IMETHODIMP mozListenerP0093::HandleResponse(nsISOAPResponse *aResponse, nsISOAPCall *aCall, PRUint32 aStatus, PRBool aLast, PRBool *aReturn)
{
  nsresult rv;
  nsCOMPtr<nsISOAPFault> pFault;
  rv = aResponse->GetFault(getter_AddRefs(pFault));
  NS_ENSURE_SUCCESS(rv, rv);
  if (pFault) {
    nsAutoString pFaute, pDetail, pTitle;
    nsCOMPtr<nsIDOMElement> pTheDetail;
    nsCOMPtr<nsIDOMNode> pNode;
    rv = pFault->GetDetail(getter_AddRefs(pTheDetail));
    NS_ENSURE_SUCCESS(rv,rv);
    rv = pTheDetail->GetFirstChild(getter_AddRefs(pNode));
    NS_ENSURE_SUCCESS(rv,rv);
    if (pNode) {
      nsCOMPtr<nsIDOMNamedNodeMap> pAttributes;
      nsCOMPtr<nsIDOMNode> pAttribute, pFirstNode;
      nsAutoString pNodeValue;
      rv = pNode->GetFirstChild(getter_AddRefs(pFirstNode));
      NS_ENSURE_SUCCESS(rv,rv);
      if (pFirstNode) {
        pFirstNode->GetNodeValue(pNodeValue);
        NS_ENSURE_SUCCESS(rv,rv);
        pDetail  = pNodeValue;
      }
      pNode->GetAttributes(getter_AddRefs(pAttributes));
      NS_ENSURE_SUCCESS(rv,rv);
      pAttributes->GetNamedItem(NS_LITERAL_STRING("code"), getter_AddRefs(pAttribute));
      NS_ENSURE_SUCCESS(rv,rv);
      if (pAttribute) {
        pAttribute->GetNodeValue(pNodeValue);
        NS_ENSURE_SUCCESS(rv,rv);
        pDetail += NS_LITERAL_STRING("\n(Erreur ");
        pDetail += pNodeValue;
        pDetail += NS_LITERAL_STRING(")");
      }
    } else pDetail = NS_LITERAL_STRING("Erreur sans message.");
    pFaute = pDetail;
    rv = pFault->GetFaultString(pTitle);
    NS_ENSURE_SUCCESS(rv,rv);
    nsCOMPtr<nsIPrompt> pPrompt= do_GetService(NS_DEFAULTPROMPT_CONTRACTID, &rv);
    NS_ENSURE_SUCCESS(rv,rv);
    pPrompt->Alert(ToNewUnicode(pTitle), ToNewUnicode(pFaute));
    return NS_ERROR_FAILURE;
  }

  nsISOAPParameter ** pParameters;
  PRUint32 pTotal;
  rv = aResponse->GetParameters(PR_FALSE, &pTotal, &pParameters);
  NS_ENSURE_SUCCESS(rv,rv);
  if (pTotal!=1) {
    nsCOMPtr<nsIPrompt> pPrompt= do_GetService(NS_DEFAULTPROMPT_CONTRACTID, &rv);
    NS_ENSURE_SUCCESS(rv,rv);
    pPrompt->Alert(ToNewUnicode(NS_LITERAL_CSTRING("Erreur système")), ToNewUnicode(NS_LITERAL_CSTRING("Le nombre total de paramètres reçus est incorrect.")));
    return NS_ERROR_FAILURE;
  }

  nsAutoString pText;
  nsCOMArray<nsIVariant> pArray;
  nsCOMPtr<nsIWritableVariant> pVariant;
  PRUint32 pLsize=0, pCsize=0;
  PRUint32 pLineIndex, pColIndex;
  PRUint16 pNodeType;
  nsCOMPtr<nsIDOMElement> pResult;
  nsCOMPtr<nsIDOMNodeList> pLines, pValues;
  nsCOMPtr<nsIDOMNode> pLine, pValue, pContent;
  rv = pParameters[0]->GetElement(getter_AddRefs(pResult));
  NS_ENSURE_SUCCESS(rv,rv);
  rv = pResult->GetChildNodes(getter_AddRefs(pLines));
  NS_ENSURE_SUCCESS(rv,rv);
  pLines->GetLength(&pLsize);
  for (pLineIndex=0;pLineIndex<pLsize;pLineIndex++) {
    do {
      rv = pLines->Item(pLineIndex, getter_AddRefs(pLine));
      NS_ENSURE_SUCCESS(rv,rv);
      pLine->GetNodeType(&pNodeType);
      if (pNodeType!=nsIDOMNode::ELEMENT_NODE) pLineIndex++;
    } while (pLineIndex<pLsize && pNodeType!=nsIDOMNode::ELEMENT_NODE);
    if (pLineIndex>=pLsize) break;
    rv = pLine->GetChildNodes(getter_AddRefs(pValues));
    NS_ENSURE_SUCCESS(rv,rv);
    pValues->GetLength(&pCsize);
    for (pColIndex=0;pColIndex<pCsize;pColIndex++) {
      do {
        rv = pValues->Item(pColIndex, getter_AddRefs(pValue));
        NS_ENSURE_SUCCESS(rv,rv);
        pValue->GetNodeType(&pNodeType);
        if (pNodeType!=nsIDOMNode::ELEMENT_NODE) pColIndex++;
      } while (pColIndex<pCsize && pNodeType!=nsIDOMNode::ELEMENT_NODE);
      if (pColIndex>=pCsize) break;
      rv = pValue->GetFirstChild(getter_AddRefs(pContent));
      NS_ENSURE_SUCCESS(rv,rv);
      pVariant = do_CreateInstance(NS_VARIANT_CONTRACTID, &rv);
      NS_ENSURE_SUCCESS(rv,rv);
      if (pContent) {
        rv = pContent->GetNodeValue(pText);
        NS_ENSURE_SUCCESS(rv,rv);
        pVariant->SetAsAString(pText);
        printf("%s|",ToNewCString(pText));
      } else {
        pVariant->SetAsAString(NS_LITERAL_STRING(""));
      }
      rv = pArray.AppendObject(pVariant);
    }
  }
  rv = mComponent->TreatP0093(pArray, pLsize, pCsize, mKey);
  return rv;
}


/* Generated by Pygmalion */


NS_IMPL_ISUPPORTS1(mozListenerP0094, nsISOAPResponseListener)

mozListenerP0094::mozListenerP0094(mozC02gestsea* aComponent, const nsAString & aKey)
{
  mComponent = aComponent;
  mKey = aKey;
}
mozListenerP0094::~mozListenerP0094()
{
}

NS_IMETHODIMP mozListenerP0094::HandleResponse(nsISOAPResponse *aResponse, nsISOAPCall *aCall, PRUint32 aStatus, PRBool aLast, PRBool *aReturn)
{
  nsresult rv;
  nsCOMPtr<nsISOAPFault> pFault;
  rv = aResponse->GetFault(getter_AddRefs(pFault));
  NS_ENSURE_SUCCESS(rv, rv);
  if (pFault) {
    nsAutoString pFaute, pDetail, pTitle;
    nsCOMPtr<nsIDOMElement> pTheDetail;
    nsCOMPtr<nsIDOMNode> pNode;
    rv = pFault->GetDetail(getter_AddRefs(pTheDetail));
    NS_ENSURE_SUCCESS(rv,rv);
    rv = pTheDetail->GetFirstChild(getter_AddRefs(pNode));
    NS_ENSURE_SUCCESS(rv,rv);
    if (pNode) {
      nsCOMPtr<nsIDOMNamedNodeMap> pAttributes;
      nsCOMPtr<nsIDOMNode> pAttribute, pFirstNode;
      nsAutoString pNodeValue;
      rv = pNode->GetFirstChild(getter_AddRefs(pFirstNode));
      NS_ENSURE_SUCCESS(rv,rv);
      if (pFirstNode) {
        pFirstNode->GetNodeValue(pNodeValue);
        NS_ENSURE_SUCCESS(rv,rv);
        pDetail  = pNodeValue;
      }
      pNode->GetAttributes(getter_AddRefs(pAttributes));
      NS_ENSURE_SUCCESS(rv,rv);
      pAttributes->GetNamedItem(NS_LITERAL_STRING("code"), getter_AddRefs(pAttribute));
      NS_ENSURE_SUCCESS(rv,rv);
      if (pAttribute) {
        pAttribute->GetNodeValue(pNodeValue);
        NS_ENSURE_SUCCESS(rv,rv);
        pDetail += NS_LITERAL_STRING("\n(Erreur ");
        pDetail += pNodeValue;
        pDetail += NS_LITERAL_STRING(")");
      }
    } else pDetail = NS_LITERAL_STRING("Erreur sans message.");
    pFaute = pDetail;
    rv = pFault->GetFaultString(pTitle);
    NS_ENSURE_SUCCESS(rv,rv);
    nsCOMPtr<nsIPrompt> pPrompt= do_GetService(NS_DEFAULTPROMPT_CONTRACTID, &rv);
    NS_ENSURE_SUCCESS(rv,rv);
    pPrompt->Alert(ToNewUnicode(pTitle), ToNewUnicode(pFaute));
    return NS_ERROR_FAILURE;
  }

  nsISOAPParameter ** pParameters;
  PRUint32 pTotal;
  rv = aResponse->GetParameters(PR_FALSE, &pTotal, &pParameters);
  NS_ENSURE_SUCCESS(rv,rv);
  if (pTotal!=1) {
    nsCOMPtr<nsIPrompt> pPrompt= do_GetService(NS_DEFAULTPROMPT_CONTRACTID, &rv);
    NS_ENSURE_SUCCESS(rv,rv);
    pPrompt->Alert(ToNewUnicode(NS_LITERAL_CSTRING("Erreur système")), ToNewUnicode(NS_LITERAL_CSTRING("Le nombre total de paramètres reçus est incorrect.")));
    return NS_ERROR_FAILURE;
  }

  nsAutoString pText;
  nsCOMArray<nsIVariant> pArray;
  nsCOMPtr<nsIWritableVariant> pVariant;
  PRUint32 pLsize=0, pCsize=0;
  PRUint32 pLineIndex, pColIndex;
  PRUint16 pNodeType;
  nsCOMPtr<nsIDOMElement> pResult;
  nsCOMPtr<nsIDOMNodeList> pLines, pValues;
  nsCOMPtr<nsIDOMNode> pLine, pValue, pContent;
  rv = pParameters[0]->GetElement(getter_AddRefs(pResult));
  NS_ENSURE_SUCCESS(rv,rv);
  rv = pResult->GetChildNodes(getter_AddRefs(pLines));
  NS_ENSURE_SUCCESS(rv,rv);
  pLines->GetLength(&pLsize);
  for (pLineIndex=0;pLineIndex<pLsize;pLineIndex++) {
    do {
      rv = pLines->Item(pLineIndex, getter_AddRefs(pLine));
      NS_ENSURE_SUCCESS(rv,rv);
      pLine->GetNodeType(&pNodeType);
      if (pNodeType!=nsIDOMNode::ELEMENT_NODE) pLineIndex++;
    } while (pLineIndex<pLsize && pNodeType!=nsIDOMNode::ELEMENT_NODE);
    if (pLineIndex>=pLsize) break;
    rv = pLine->GetChildNodes(getter_AddRefs(pValues));
    NS_ENSURE_SUCCESS(rv,rv);
    pValues->GetLength(&pCsize);
    for (pColIndex=0;pColIndex<pCsize;pColIndex++) {
      do {
        rv = pValues->Item(pColIndex, getter_AddRefs(pValue));
        NS_ENSURE_SUCCESS(rv,rv);
        pValue->GetNodeType(&pNodeType);
        if (pNodeType!=nsIDOMNode::ELEMENT_NODE) pColIndex++;
      } while (pColIndex<pCsize && pNodeType!=nsIDOMNode::ELEMENT_NODE);
      if (pColIndex>=pCsize) break;
      rv = pValue->GetFirstChild(getter_AddRefs(pContent));
      NS_ENSURE_SUCCESS(rv,rv);
      pVariant = do_CreateInstance(NS_VARIANT_CONTRACTID, &rv);
      NS_ENSURE_SUCCESS(rv,rv);
      if (pContent) {
        rv = pContent->GetNodeValue(pText);
        NS_ENSURE_SUCCESS(rv,rv);
        pVariant->SetAsAString(pText);
        printf("%s|",ToNewCString(pText));
      } else {
        pVariant->SetAsAString(NS_LITERAL_STRING(""));
      }
      rv = pArray.AppendObject(pVariant);
    }
  }
  rv = mComponent->TreatP0094(pArray, pLsize, pCsize, mKey);
  return rv;
}


/* Generated by Pygmalion */


NS_IMPL_ISUPPORTS1(mozListenerP0095, nsISOAPResponseListener)

mozListenerP0095::mozListenerP0095(mozC02gestsea* aComponent, const nsAString & aKey)
{
  mComponent = aComponent;
  mKey = aKey;
}
mozListenerP0095::~mozListenerP0095()
{
}

NS_IMETHODIMP mozListenerP0095::HandleResponse(nsISOAPResponse *aResponse, nsISOAPCall *aCall, PRUint32 aStatus, PRBool aLast, PRBool *aReturn)
{
  nsresult rv;
  nsCOMPtr<nsISOAPFault> pFault;
  rv = aResponse->GetFault(getter_AddRefs(pFault));
  NS_ENSURE_SUCCESS(rv, rv);
  if (pFault) {
    nsAutoString pFaute, pDetail, pTitle;
    nsCOMPtr<nsIDOMElement> pTheDetail;
    nsCOMPtr<nsIDOMNode> pNode;
    rv = pFault->GetDetail(getter_AddRefs(pTheDetail));
    NS_ENSURE_SUCCESS(rv,rv);
    rv = pTheDetail->GetFirstChild(getter_AddRefs(pNode));
    NS_ENSURE_SUCCESS(rv,rv);
    if (pNode) {
      nsCOMPtr<nsIDOMNamedNodeMap> pAttributes;
      nsCOMPtr<nsIDOMNode> pAttribute, pFirstNode;
      nsAutoString pNodeValue;
      rv = pNode->GetFirstChild(getter_AddRefs(pFirstNode));
      NS_ENSURE_SUCCESS(rv,rv);
      if (pFirstNode) {
        pFirstNode->GetNodeValue(pNodeValue);
        NS_ENSURE_SUCCESS(rv,rv);
        pDetail  = pNodeValue;
      }
      pNode->GetAttributes(getter_AddRefs(pAttributes));
      NS_ENSURE_SUCCESS(rv,rv);
      pAttributes->GetNamedItem(NS_LITERAL_STRING("code"), getter_AddRefs(pAttribute));
      NS_ENSURE_SUCCESS(rv,rv);
      if (pAttribute) {
        pAttribute->GetNodeValue(pNodeValue);
        NS_ENSURE_SUCCESS(rv,rv);
        pDetail += NS_LITERAL_STRING("\n(Erreur ");
        pDetail += pNodeValue;
        pDetail += NS_LITERAL_STRING(")");
      }
    } else pDetail = NS_LITERAL_STRING("Erreur sans message.");
    pFaute = pDetail;
    rv = pFault->GetFaultString(pTitle);
    NS_ENSURE_SUCCESS(rv,rv);
    nsCOMPtr<nsIPrompt> pPrompt= do_GetService(NS_DEFAULTPROMPT_CONTRACTID, &rv);
    NS_ENSURE_SUCCESS(rv,rv);
    pPrompt->Alert(ToNewUnicode(pTitle), ToNewUnicode(pFaute));
    return NS_ERROR_FAILURE;
  }

  nsISOAPParameter ** pParameters;
  PRUint32 pTotal;
  rv = aResponse->GetParameters(PR_FALSE, &pTotal, &pParameters);
  NS_ENSURE_SUCCESS(rv,rv);
  if (pTotal!=1) {
    nsCOMPtr<nsIPrompt> pPrompt= do_GetService(NS_DEFAULTPROMPT_CONTRACTID, &rv);
    NS_ENSURE_SUCCESS(rv,rv);
    pPrompt->Alert(ToNewUnicode(NS_LITERAL_CSTRING("Erreur système")), ToNewUnicode(NS_LITERAL_CSTRING("Le nombre total de paramètres reçus est incorrect.")));
    return NS_ERROR_FAILURE;
  }

  nsAutoString pText;
  nsCOMArray<nsIVariant> pArray;
  nsCOMPtr<nsIWritableVariant> pVariant;
  PRUint32 pLsize=0, pCsize=0;
  PRUint32 pLineIndex, pColIndex;
  PRUint16 pNodeType;
  nsCOMPtr<nsIDOMElement> pResult;
  nsCOMPtr<nsIDOMNodeList> pLines, pValues;
  nsCOMPtr<nsIDOMNode> pLine, pValue, pContent;
  rv = pParameters[0]->GetElement(getter_AddRefs(pResult));
  NS_ENSURE_SUCCESS(rv,rv);
  rv = pResult->GetChildNodes(getter_AddRefs(pLines));
  NS_ENSURE_SUCCESS(rv,rv);
  pLines->GetLength(&pLsize);
  for (pLineIndex=0;pLineIndex<pLsize;pLineIndex++) {
    do {
      rv = pLines->Item(pLineIndex, getter_AddRefs(pLine));
      NS_ENSURE_SUCCESS(rv,rv);
      pLine->GetNodeType(&pNodeType);
      if (pNodeType!=nsIDOMNode::ELEMENT_NODE) pLineIndex++;
    } while (pLineIndex<pLsize && pNodeType!=nsIDOMNode::ELEMENT_NODE);
    if (pLineIndex>=pLsize) break;
    rv = pLine->GetChildNodes(getter_AddRefs(pValues));
    NS_ENSURE_SUCCESS(rv,rv);
    pValues->GetLength(&pCsize);
    for (pColIndex=0;pColIndex<pCsize;pColIndex++) {
      do {
        rv = pValues->Item(pColIndex, getter_AddRefs(pValue));
        NS_ENSURE_SUCCESS(rv,rv);
        pValue->GetNodeType(&pNodeType);
        if (pNodeType!=nsIDOMNode::ELEMENT_NODE) pColIndex++;
      } while (pColIndex<pCsize && pNodeType!=nsIDOMNode::ELEMENT_NODE);
      if (pColIndex>=pCsize) break;
      rv = pValue->GetFirstChild(getter_AddRefs(pContent));
      NS_ENSURE_SUCCESS(rv,rv);
      pVariant = do_CreateInstance(NS_VARIANT_CONTRACTID, &rv);
      NS_ENSURE_SUCCESS(rv,rv);
      if (pContent) {
        rv = pContent->GetNodeValue(pText);
        NS_ENSURE_SUCCESS(rv,rv);
        pVariant->SetAsAString(pText);
        printf("%s|",ToNewCString(pText));
      } else {
        pVariant->SetAsAString(NS_LITERAL_STRING(""));
      }
      rv = pArray.AppendObject(pVariant);
    }
  }
  rv = mComponent->TreatP0095(pArray, pLsize, pCsize, mKey);
  return rv;
}


/* Generated by Pygmalion */


NS_IMPL_ISUPPORTS1(mozListenerP0096, nsISOAPResponseListener)

mozListenerP0096::mozListenerP0096(mozC02gestsea* aComponent, const nsAString & aKey)
{
  mComponent = aComponent;
  mKey = aKey;
}
mozListenerP0096::~mozListenerP0096()
{
}

NS_IMETHODIMP mozListenerP0096::HandleResponse(nsISOAPResponse *aResponse, nsISOAPCall *aCall, PRUint32 aStatus, PRBool aLast, PRBool *aReturn)
{
  nsresult rv;
  nsCOMPtr<nsISOAPFault> pFault;
  rv = aResponse->GetFault(getter_AddRefs(pFault));
  NS_ENSURE_SUCCESS(rv, rv);
  if (pFault) {
    nsAutoString pFaute, pDetail, pTitle;
    nsCOMPtr<nsIDOMElement> pTheDetail;
    nsCOMPtr<nsIDOMNode> pNode;
    rv = pFault->GetDetail(getter_AddRefs(pTheDetail));
    NS_ENSURE_SUCCESS(rv,rv);
    rv = pTheDetail->GetFirstChild(getter_AddRefs(pNode));
    NS_ENSURE_SUCCESS(rv,rv);
    if (pNode) {
      nsCOMPtr<nsIDOMNamedNodeMap> pAttributes;
      nsCOMPtr<nsIDOMNode> pAttribute, pFirstNode;
      nsAutoString pNodeValue;
      rv = pNode->GetFirstChild(getter_AddRefs(pFirstNode));
      NS_ENSURE_SUCCESS(rv,rv);
      if (pFirstNode) {
        pFirstNode->GetNodeValue(pNodeValue);
        NS_ENSURE_SUCCESS(rv,rv);
        pDetail  = pNodeValue;
      }
      pNode->GetAttributes(getter_AddRefs(pAttributes));
      NS_ENSURE_SUCCESS(rv,rv);
      pAttributes->GetNamedItem(NS_LITERAL_STRING("code"), getter_AddRefs(pAttribute));
      NS_ENSURE_SUCCESS(rv,rv);
      if (pAttribute) {
        pAttribute->GetNodeValue(pNodeValue);
        NS_ENSURE_SUCCESS(rv,rv);
        pDetail += NS_LITERAL_STRING("\n(Erreur ");
        pDetail += pNodeValue;
        pDetail += NS_LITERAL_STRING(")");
      }
    } else pDetail = NS_LITERAL_STRING("Erreur sans message.");
    pFaute = pDetail;
    rv = pFault->GetFaultString(pTitle);
    NS_ENSURE_SUCCESS(rv,rv);
    nsCOMPtr<nsIPrompt> pPrompt= do_GetService(NS_DEFAULTPROMPT_CONTRACTID, &rv);
    NS_ENSURE_SUCCESS(rv,rv);
    pPrompt->Alert(ToNewUnicode(pTitle), ToNewUnicode(pFaute));
    return NS_ERROR_FAILURE;
  }

  nsISOAPParameter ** pParameters;
  PRUint32 pTotal;
  rv = aResponse->GetParameters(PR_FALSE, &pTotal, &pParameters);
  NS_ENSURE_SUCCESS(rv,rv);
  if (pTotal!=1) {
    nsCOMPtr<nsIPrompt> pPrompt= do_GetService(NS_DEFAULTPROMPT_CONTRACTID, &rv);
    NS_ENSURE_SUCCESS(rv,rv);
    pPrompt->Alert(ToNewUnicode(NS_LITERAL_CSTRING("Erreur système")), ToNewUnicode(NS_LITERAL_CSTRING("Le nombre total de paramètres reçus est incorrect.")));
    return NS_ERROR_FAILURE;
  }

  nsAutoString pText;
  nsCOMArray<nsIVariant> pArray;
  nsCOMPtr<nsIWritableVariant> pVariant;
  PRUint32 pLsize=0, pCsize=0;
  PRUint32 pLineIndex, pColIndex;
  PRUint16 pNodeType;
  nsCOMPtr<nsIDOMElement> pResult;
  nsCOMPtr<nsIDOMNodeList> pLines, pValues;
  nsCOMPtr<nsIDOMNode> pLine, pValue, pContent;
  rv = pParameters[0]->GetElement(getter_AddRefs(pResult));
  NS_ENSURE_SUCCESS(rv,rv);
  rv = pResult->GetChildNodes(getter_AddRefs(pLines));
  NS_ENSURE_SUCCESS(rv,rv);
  pLines->GetLength(&pLsize);
  for (pLineIndex=0;pLineIndex<pLsize;pLineIndex++) {
    do {
      rv = pLines->Item(pLineIndex, getter_AddRefs(pLine));
      NS_ENSURE_SUCCESS(rv,rv);
      pLine->GetNodeType(&pNodeType);
      if (pNodeType!=nsIDOMNode::ELEMENT_NODE) pLineIndex++;
    } while (pLineIndex<pLsize && pNodeType!=nsIDOMNode::ELEMENT_NODE);
    if (pLineIndex>=pLsize) break;
    rv = pLine->GetChildNodes(getter_AddRefs(pValues));
    NS_ENSURE_SUCCESS(rv,rv);
    pValues->GetLength(&pCsize);
    for (pColIndex=0;pColIndex<pCsize;pColIndex++) {
      do {
        rv = pValues->Item(pColIndex, getter_AddRefs(pValue));
        NS_ENSURE_SUCCESS(rv,rv);
        pValue->GetNodeType(&pNodeType);
        if (pNodeType!=nsIDOMNode::ELEMENT_NODE) pColIndex++;
      } while (pColIndex<pCsize && pNodeType!=nsIDOMNode::ELEMENT_NODE);
      if (pColIndex>=pCsize) break;
      rv = pValue->GetFirstChild(getter_AddRefs(pContent));
      NS_ENSURE_SUCCESS(rv,rv);
      pVariant = do_CreateInstance(NS_VARIANT_CONTRACTID, &rv);
      NS_ENSURE_SUCCESS(rv,rv);
      if (pContent) {
        rv = pContent->GetNodeValue(pText);
        NS_ENSURE_SUCCESS(rv,rv);
        pVariant->SetAsAString(pText);
        printf("%s|",ToNewCString(pText));
      } else {
        pVariant->SetAsAString(NS_LITERAL_STRING(""));
      }
      rv = pArray.AppendObject(pVariant);
    }
  }
  rv = mComponent->TreatP0096(pArray, pLsize, pCsize, mKey);
  return rv;
}


/* Generated by Pygmalion */


NS_IMPL_ISUPPORTS1(mozListenerP0097, nsISOAPResponseListener)

mozListenerP0097::mozListenerP0097(mozC02gestsea* aComponent, const nsAString & aKey)
{
  mComponent = aComponent;
  mKey = aKey;
}
mozListenerP0097::~mozListenerP0097()
{
}

NS_IMETHODIMP mozListenerP0097::HandleResponse(nsISOAPResponse *aResponse, nsISOAPCall *aCall, PRUint32 aStatus, PRBool aLast, PRBool *aReturn)
{
  nsresult rv;
  nsCOMPtr<nsISOAPFault> pFault;
  rv = aResponse->GetFault(getter_AddRefs(pFault));
  NS_ENSURE_SUCCESS(rv, rv);
  if (pFault) {
    nsAutoString pFaute, pDetail, pTitle;
    nsCOMPtr<nsIDOMElement> pTheDetail;
    nsCOMPtr<nsIDOMNode> pNode;
    rv = pFault->GetDetail(getter_AddRefs(pTheDetail));
    NS_ENSURE_SUCCESS(rv,rv);
    rv = pTheDetail->GetFirstChild(getter_AddRefs(pNode));
    NS_ENSURE_SUCCESS(rv,rv);
    if (pNode) {
      nsCOMPtr<nsIDOMNamedNodeMap> pAttributes;
      nsCOMPtr<nsIDOMNode> pAttribute, pFirstNode;
      nsAutoString pNodeValue;
      rv = pNode->GetFirstChild(getter_AddRefs(pFirstNode));
      NS_ENSURE_SUCCESS(rv,rv);
      if (pFirstNode) {
        pFirstNode->GetNodeValue(pNodeValue);
        NS_ENSURE_SUCCESS(rv,rv);
        pDetail  = pNodeValue;
      }
      pNode->GetAttributes(getter_AddRefs(pAttributes));
      NS_ENSURE_SUCCESS(rv,rv);
      pAttributes->GetNamedItem(NS_LITERAL_STRING("code"), getter_AddRefs(pAttribute));
      NS_ENSURE_SUCCESS(rv,rv);
      if (pAttribute) {
        pAttribute->GetNodeValue(pNodeValue);
        NS_ENSURE_SUCCESS(rv,rv);
        pDetail += NS_LITERAL_STRING("\n(Erreur ");
        pDetail += pNodeValue;
        pDetail += NS_LITERAL_STRING(")");
      }
    } else pDetail = NS_LITERAL_STRING("Erreur sans message.");
    pFaute = pDetail;
    rv = pFault->GetFaultString(pTitle);
    NS_ENSURE_SUCCESS(rv,rv);
    nsCOMPtr<nsIPrompt> pPrompt= do_GetService(NS_DEFAULTPROMPT_CONTRACTID, &rv);
    NS_ENSURE_SUCCESS(rv,rv);
    pPrompt->Alert(ToNewUnicode(pTitle), ToNewUnicode(pFaute));
    return NS_ERROR_FAILURE;
  }

  nsISOAPParameter ** pParameters;
  PRUint32 pTotal;
  rv = aResponse->GetParameters(PR_FALSE, &pTotal, &pParameters);
  NS_ENSURE_SUCCESS(rv,rv);
  if (pTotal!=1) {
    nsCOMPtr<nsIPrompt> pPrompt= do_GetService(NS_DEFAULTPROMPT_CONTRACTID, &rv);
    NS_ENSURE_SUCCESS(rv,rv);
    pPrompt->Alert(ToNewUnicode(NS_LITERAL_CSTRING("Erreur système")), ToNewUnicode(NS_LITERAL_CSTRING("Le nombre total de paramètres reçus est incorrect.")));
    return NS_ERROR_FAILURE;
  }

  nsAutoString pText;
  nsCOMArray<nsIVariant> pArray;
  nsCOMPtr<nsIWritableVariant> pVariant;
  PRUint32 pLsize=0, pCsize=0;
  PRUint32 pLineIndex, pColIndex;
  PRUint16 pNodeType;
  nsCOMPtr<nsIDOMElement> pResult;
  nsCOMPtr<nsIDOMNodeList> pLines, pValues;
  nsCOMPtr<nsIDOMNode> pLine, pValue, pContent;
  rv = pParameters[0]->GetElement(getter_AddRefs(pResult));
  NS_ENSURE_SUCCESS(rv,rv);
  rv = pResult->GetChildNodes(getter_AddRefs(pLines));
  NS_ENSURE_SUCCESS(rv,rv);
  pLines->GetLength(&pLsize);
  for (pLineIndex=0;pLineIndex<pLsize;pLineIndex++) {
    do {
      rv = pLines->Item(pLineIndex, getter_AddRefs(pLine));
      NS_ENSURE_SUCCESS(rv,rv);
      pLine->GetNodeType(&pNodeType);
      if (pNodeType!=nsIDOMNode::ELEMENT_NODE) pLineIndex++;
    } while (pLineIndex<pLsize && pNodeType!=nsIDOMNode::ELEMENT_NODE);
    if (pLineIndex>=pLsize) break;
    rv = pLine->GetChildNodes(getter_AddRefs(pValues));
    NS_ENSURE_SUCCESS(rv,rv);
    pValues->GetLength(&pCsize);
    for (pColIndex=0;pColIndex<pCsize;pColIndex++) {
      do {
        rv = pValues->Item(pColIndex, getter_AddRefs(pValue));
        NS_ENSURE_SUCCESS(rv,rv);
        pValue->GetNodeType(&pNodeType);
        if (pNodeType!=nsIDOMNode::ELEMENT_NODE) pColIndex++;
      } while (pColIndex<pCsize && pNodeType!=nsIDOMNode::ELEMENT_NODE);
      if (pColIndex>=pCsize) break;
      rv = pValue->GetFirstChild(getter_AddRefs(pContent));
      NS_ENSURE_SUCCESS(rv,rv);
      pVariant = do_CreateInstance(NS_VARIANT_CONTRACTID, &rv);
      NS_ENSURE_SUCCESS(rv,rv);
      if (pContent) {
        rv = pContent->GetNodeValue(pText);
        NS_ENSURE_SUCCESS(rv,rv);
        pVariant->SetAsAString(pText);
        printf("%s|",ToNewCString(pText));
      } else {
        pVariant->SetAsAString(NS_LITERAL_STRING(""));
      }
      rv = pArray.AppendObject(pVariant);
    }
  }
  rv = mComponent->TreatP0097(pArray, pLsize, pCsize, mKey);
  return rv;
}


/* Generated by Pygmalion */


NS_IMPL_ISUPPORTS1(mozListenerP0098, nsISOAPResponseListener)

mozListenerP0098::mozListenerP0098(mozC02gestsea* aComponent, const nsACString & aSearch)
{
  mComponent = aComponent;
  mSearch = aSearch;
}
mozListenerP0098::~mozListenerP0098()
{
}

NS_IMETHODIMP mozListenerP0098::HandleResponse(nsISOAPResponse *aResponse, nsISOAPCall *aCall, PRUint32 aStatus, PRBool aLast, PRBool *aReturn)
{
  nsresult rv;
  nsCOMPtr<nsISOAPFault> pFault;
  rv = aResponse->GetFault(getter_AddRefs(pFault));
  NS_ENSURE_SUCCESS(rv, rv);
  if (pFault) {
    nsAutoString pFaute, pDetail, pTitle;
    nsCOMPtr<nsIDOMElement> pTheDetail;
    nsCOMPtr<nsIDOMNode> pNode;
    rv = pFault->GetDetail(getter_AddRefs(pTheDetail));
    NS_ENSURE_SUCCESS(rv,rv);
    rv = pTheDetail->GetFirstChild(getter_AddRefs(pNode));
    NS_ENSURE_SUCCESS(rv,rv);
    if (pNode) {
      nsCOMPtr<nsIDOMNamedNodeMap> pAttributes;
      nsCOMPtr<nsIDOMNode> pAttribute, pFirstNode;
      nsAutoString pNodeValue;
      rv = pNode->GetFirstChild(getter_AddRefs(pFirstNode));
      NS_ENSURE_SUCCESS(rv,rv);
      if (pFirstNode) {
        pFirstNode->GetNodeValue(pNodeValue);
        NS_ENSURE_SUCCESS(rv,rv);
        pDetail  = pNodeValue;
      }
      pNode->GetAttributes(getter_AddRefs(pAttributes));
      NS_ENSURE_SUCCESS(rv,rv);
      pAttributes->GetNamedItem(NS_LITERAL_STRING("code"), getter_AddRefs(pAttribute));
      NS_ENSURE_SUCCESS(rv,rv);
      if (pAttribute) {
        pAttribute->GetNodeValue(pNodeValue);
        NS_ENSURE_SUCCESS(rv,rv);
        pDetail += NS_LITERAL_STRING("\n(Erreur ");
        pDetail += pNodeValue;
        pDetail += NS_LITERAL_STRING(")");
      }
    } else pDetail = NS_LITERAL_STRING("Erreur sans message.");
    pFaute = pDetail;
    rv = pFault->GetFaultString(pTitle);
    NS_ENSURE_SUCCESS(rv,rv);
    nsCOMPtr<nsIPrompt> pPrompt= do_GetService(NS_DEFAULTPROMPT_CONTRACTID, &rv);
    NS_ENSURE_SUCCESS(rv,rv);
    pPrompt->Alert(ToNewUnicode(pTitle), ToNewUnicode(pFaute));
    return NS_ERROR_FAILURE;
  }

  nsISOAPParameter ** pParameters;
  PRUint32 pTotal;
  rv = aResponse->GetParameters(PR_FALSE, &pTotal, &pParameters);
  NS_ENSURE_SUCCESS(rv,rv);
  if (pTotal!=1) {
    nsCOMPtr<nsIPrompt> pPrompt= do_GetService(NS_DEFAULTPROMPT_CONTRACTID, &rv);
    NS_ENSURE_SUCCESS(rv,rv);
    pPrompt->Alert(ToNewUnicode(NS_LITERAL_CSTRING("Erreur système")), ToNewUnicode(NS_LITERAL_CSTRING("Le nombre total de paramètres reçus est incorrect.")));
    return NS_ERROR_FAILURE;
  }

  nsAutoString pText;
  nsCOMArray<nsIVariant> pArray;
  nsCOMPtr<nsIWritableVariant> pVariant;
  PRUint32 pLsize=0, pCsize=0;
  PRUint32 pLineIndex, pColIndex;
  PRUint16 pNodeType;
  nsCOMPtr<nsIDOMElement> pResult;
  nsCOMPtr<nsIDOMNodeList> pLines, pValues;
  nsCOMPtr<nsIDOMNode> pLine, pValue, pContent;
  rv = pParameters[0]->GetElement(getter_AddRefs(pResult));
  NS_ENSURE_SUCCESS(rv,rv);
  rv = pResult->GetChildNodes(getter_AddRefs(pLines));
  NS_ENSURE_SUCCESS(rv,rv);
  pLines->GetLength(&pLsize);
  for (pLineIndex=0;pLineIndex<pLsize;pLineIndex++) {
    do {
      rv = pLines->Item(pLineIndex, getter_AddRefs(pLine));
      NS_ENSURE_SUCCESS(rv,rv);
      pLine->GetNodeType(&pNodeType);
      if (pNodeType!=nsIDOMNode::ELEMENT_NODE) pLineIndex++;
    } while (pLineIndex<pLsize && pNodeType!=nsIDOMNode::ELEMENT_NODE);
    if (pLineIndex>=pLsize) break;
    rv = pLine->GetChildNodes(getter_AddRefs(pValues));
    NS_ENSURE_SUCCESS(rv,rv);
    pValues->GetLength(&pCsize);
    for (pColIndex=0;pColIndex<pCsize;pColIndex++) {
      do {
        rv = pValues->Item(pColIndex, getter_AddRefs(pValue));
        NS_ENSURE_SUCCESS(rv,rv);
        pValue->GetNodeType(&pNodeType);
        if (pNodeType!=nsIDOMNode::ELEMENT_NODE) pColIndex++;
      } while (pColIndex<pCsize && pNodeType!=nsIDOMNode::ELEMENT_NODE);
      if (pColIndex>=pCsize) break;
      rv = pValue->GetFirstChild(getter_AddRefs(pContent));
      NS_ENSURE_SUCCESS(rv,rv);
      pVariant = do_CreateInstance(NS_VARIANT_CONTRACTID, &rv);
      NS_ENSURE_SUCCESS(rv,rv);
      if (pContent) {
        rv = pContent->GetNodeValue(pText);
        NS_ENSURE_SUCCESS(rv,rv);
        pVariant->SetAsAString(pText);
        printf("%s|",ToNewCString(pText));
      } else {
        pVariant->SetAsAString(NS_LITERAL_STRING(""));
      }
      rv = pArray.AppendObject(pVariant);
    }
  }
  rv = mComponent->TreatP0098(pArray, pLsize, pCsize, mSearch);
  return rv;
}


/* Generated by Pygmalion */


NS_IMPL_ISUPPORTS1(mozListenerP0099, nsISOAPResponseListener)

mozListenerP0099::mozListenerP0099(mozC02gestsea* aComponent, const nsACString & aSearch)
{
  mComponent = aComponent;
  mSearch = aSearch;
}
mozListenerP0099::~mozListenerP0099()
{
}

NS_IMETHODIMP mozListenerP0099::HandleResponse(nsISOAPResponse *aResponse, nsISOAPCall *aCall, PRUint32 aStatus, PRBool aLast, PRBool *aReturn)
{
  nsresult rv;
  nsCOMPtr<nsISOAPFault> pFault;
  rv = aResponse->GetFault(getter_AddRefs(pFault));
  NS_ENSURE_SUCCESS(rv, rv);
  if (pFault) {
    nsAutoString pFaute, pDetail, pTitle;
    nsCOMPtr<nsIDOMElement> pTheDetail;
    nsCOMPtr<nsIDOMNode> pNode;
    rv = pFault->GetDetail(getter_AddRefs(pTheDetail));
    NS_ENSURE_SUCCESS(rv,rv);
    rv = pTheDetail->GetFirstChild(getter_AddRefs(pNode));
    NS_ENSURE_SUCCESS(rv,rv);
    if (pNode) {
      nsCOMPtr<nsIDOMNamedNodeMap> pAttributes;
      nsCOMPtr<nsIDOMNode> pAttribute, pFirstNode;
      nsAutoString pNodeValue;
      rv = pNode->GetFirstChild(getter_AddRefs(pFirstNode));
      NS_ENSURE_SUCCESS(rv,rv);
      if (pFirstNode) {
        pFirstNode->GetNodeValue(pNodeValue);
        NS_ENSURE_SUCCESS(rv,rv);
        pDetail  = pNodeValue;
      }
      pNode->GetAttributes(getter_AddRefs(pAttributes));
      NS_ENSURE_SUCCESS(rv,rv);
      pAttributes->GetNamedItem(NS_LITERAL_STRING("code"), getter_AddRefs(pAttribute));
      NS_ENSURE_SUCCESS(rv,rv);
      if (pAttribute) {
        pAttribute->GetNodeValue(pNodeValue);
        NS_ENSURE_SUCCESS(rv,rv);
        pDetail += NS_LITERAL_STRING("\n(Erreur ");
        pDetail += pNodeValue;
        pDetail += NS_LITERAL_STRING(")");
      }
    } else pDetail = NS_LITERAL_STRING("Erreur sans message.");
    pFaute = pDetail;
    rv = pFault->GetFaultString(pTitle);
    NS_ENSURE_SUCCESS(rv,rv);
    nsCOMPtr<nsIPrompt> pPrompt= do_GetService(NS_DEFAULTPROMPT_CONTRACTID, &rv);
    NS_ENSURE_SUCCESS(rv,rv);
    pPrompt->Alert(ToNewUnicode(pTitle), ToNewUnicode(pFaute));
    return NS_ERROR_FAILURE;
  }

  nsISOAPParameter ** pParameters;
  PRUint32 pTotal;
  rv = aResponse->GetParameters(PR_FALSE, &pTotal, &pParameters);
  NS_ENSURE_SUCCESS(rv,rv);
  if (pTotal!=1) {
    nsCOMPtr<nsIPrompt> pPrompt= do_GetService(NS_DEFAULTPROMPT_CONTRACTID, &rv);
    NS_ENSURE_SUCCESS(rv,rv);
    pPrompt->Alert(ToNewUnicode(NS_LITERAL_CSTRING("Erreur système")), ToNewUnicode(NS_LITERAL_CSTRING("Le nombre total de paramètres reçus est incorrect.")));
    return NS_ERROR_FAILURE;
  }

  nsAutoString pText;
  nsCOMArray<nsIVariant> pArray;
  nsCOMPtr<nsIWritableVariant> pVariant;
  PRUint32 pLsize=0, pCsize=0;
  PRUint32 pLineIndex, pColIndex;
  PRUint16 pNodeType;
  nsCOMPtr<nsIDOMElement> pResult;
  nsCOMPtr<nsIDOMNodeList> pLines, pValues;
  nsCOMPtr<nsIDOMNode> pLine, pValue, pContent;
  rv = pParameters[0]->GetElement(getter_AddRefs(pResult));
  NS_ENSURE_SUCCESS(rv,rv);
  rv = pResult->GetChildNodes(getter_AddRefs(pLines));
  NS_ENSURE_SUCCESS(rv,rv);
  pLines->GetLength(&pLsize);
  for (pLineIndex=0;pLineIndex<pLsize;pLineIndex++) {
    do {
      rv = pLines->Item(pLineIndex, getter_AddRefs(pLine));
      NS_ENSURE_SUCCESS(rv,rv);
      pLine->GetNodeType(&pNodeType);
      if (pNodeType!=nsIDOMNode::ELEMENT_NODE) pLineIndex++;
    } while (pLineIndex<pLsize && pNodeType!=nsIDOMNode::ELEMENT_NODE);
    if (pLineIndex>=pLsize) break;
    rv = pLine->GetChildNodes(getter_AddRefs(pValues));
    NS_ENSURE_SUCCESS(rv,rv);
    pValues->GetLength(&pCsize);
    for (pColIndex=0;pColIndex<pCsize;pColIndex++) {
      do {
        rv = pValues->Item(pColIndex, getter_AddRefs(pValue));
        NS_ENSURE_SUCCESS(rv,rv);
        pValue->GetNodeType(&pNodeType);
        if (pNodeType!=nsIDOMNode::ELEMENT_NODE) pColIndex++;
      } while (pColIndex<pCsize && pNodeType!=nsIDOMNode::ELEMENT_NODE);
      if (pColIndex>=pCsize) break;
      rv = pValue->GetFirstChild(getter_AddRefs(pContent));
      NS_ENSURE_SUCCESS(rv,rv);
      pVariant = do_CreateInstance(NS_VARIANT_CONTRACTID, &rv);
      NS_ENSURE_SUCCESS(rv,rv);
      if (pContent) {
        rv = pContent->GetNodeValue(pText);
        NS_ENSURE_SUCCESS(rv,rv);
        pVariant->SetAsAString(pText);
        printf("%s|",ToNewCString(pText));
      } else {
        pVariant->SetAsAString(NS_LITERAL_STRING(""));
      }
      rv = pArray.AppendObject(pVariant);
    }
  }
  rv = mComponent->TreatP0099(pArray, pLsize, pCsize, mSearch);
  return rv;
}


/* Generated by Pygmalion */


NS_IMPL_ISUPPORTS1(mozListenerP009A, nsISOAPResponseListener)

mozListenerP009A::mozListenerP009A(mozC02gestsea* aComponent, const nsAString & aKey)
{
  mComponent = aComponent;
  mKey = aKey;
}
mozListenerP009A::~mozListenerP009A()
{
}

NS_IMETHODIMP mozListenerP009A::HandleResponse(nsISOAPResponse *aResponse, nsISOAPCall *aCall, PRUint32 aStatus, PRBool aLast, PRBool *aReturn)
{
  nsresult rv;
  nsCOMPtr<nsISOAPFault> pFault;
  rv = aResponse->GetFault(getter_AddRefs(pFault));
  NS_ENSURE_SUCCESS(rv, rv);
  if (pFault) {
    nsAutoString pFaute, pDetail, pTitle;
    nsCOMPtr<nsIDOMElement> pTheDetail;
    nsCOMPtr<nsIDOMNode> pNode;
    rv = pFault->GetDetail(getter_AddRefs(pTheDetail));
    NS_ENSURE_SUCCESS(rv,rv);
    rv = pTheDetail->GetFirstChild(getter_AddRefs(pNode));
    NS_ENSURE_SUCCESS(rv,rv);
    if (pNode) {
      nsCOMPtr<nsIDOMNamedNodeMap> pAttributes;
      nsCOMPtr<nsIDOMNode> pAttribute, pFirstNode;
      nsAutoString pNodeValue;
      rv = pNode->GetFirstChild(getter_AddRefs(pFirstNode));
      NS_ENSURE_SUCCESS(rv,rv);
      if (pFirstNode) {
        pFirstNode->GetNodeValue(pNodeValue);
        NS_ENSURE_SUCCESS(rv,rv);
        pDetail  = pNodeValue;
      }
      pNode->GetAttributes(getter_AddRefs(pAttributes));
      NS_ENSURE_SUCCESS(rv,rv);
      pAttributes->GetNamedItem(NS_LITERAL_STRING("code"), getter_AddRefs(pAttribute));
      NS_ENSURE_SUCCESS(rv,rv);
      if (pAttribute) {
        pAttribute->GetNodeValue(pNodeValue);
        NS_ENSURE_SUCCESS(rv,rv);
        pDetail += NS_LITERAL_STRING("\n(Erreur ");
        pDetail += pNodeValue;
        pDetail += NS_LITERAL_STRING(")");
      }
    } else pDetail = NS_LITERAL_STRING("Erreur sans message.");
    pFaute = pDetail;
    rv = pFault->GetFaultString(pTitle);
    NS_ENSURE_SUCCESS(rv,rv);
    nsCOMPtr<nsIPrompt> pPrompt= do_GetService(NS_DEFAULTPROMPT_CONTRACTID, &rv);
    NS_ENSURE_SUCCESS(rv,rv);
    pPrompt->Alert(ToNewUnicode(pTitle), ToNewUnicode(pFaute));
    return NS_ERROR_FAILURE;
  }

  nsISOAPParameter ** pParameters;
  PRUint32 pTotal;
  rv = aResponse->GetParameters(PR_FALSE, &pTotal, &pParameters);
  NS_ENSURE_SUCCESS(rv,rv);
  if (pTotal!=1) {
    nsCOMPtr<nsIPrompt> pPrompt= do_GetService(NS_DEFAULTPROMPT_CONTRACTID, &rv);
    NS_ENSURE_SUCCESS(rv,rv);
    pPrompt->Alert(ToNewUnicode(NS_LITERAL_CSTRING("Erreur système")), ToNewUnicode(NS_LITERAL_CSTRING("Le nombre total de paramètres reçus est incorrect.")));
    return NS_ERROR_FAILURE;
  }

  nsAutoString pText;
  nsCOMArray<nsIVariant> pArray;
  nsCOMPtr<nsIWritableVariant> pVariant;
  PRUint32 pLsize=0, pCsize=0;
  PRUint32 pLineIndex, pColIndex;
  PRUint16 pNodeType;
  nsCOMPtr<nsIDOMElement> pResult;
  nsCOMPtr<nsIDOMNodeList> pLines, pValues;
  nsCOMPtr<nsIDOMNode> pLine, pValue, pContent;
  rv = pParameters[0]->GetElement(getter_AddRefs(pResult));
  NS_ENSURE_SUCCESS(rv,rv);
  rv = pResult->GetChildNodes(getter_AddRefs(pLines));
  NS_ENSURE_SUCCESS(rv,rv);
  pLines->GetLength(&pLsize);
  for (pLineIndex=0;pLineIndex<pLsize;pLineIndex++) {
    do {
      rv = pLines->Item(pLineIndex, getter_AddRefs(pLine));
      NS_ENSURE_SUCCESS(rv,rv);
      pLine->GetNodeType(&pNodeType);
      if (pNodeType!=nsIDOMNode::ELEMENT_NODE) pLineIndex++;
    } while (pLineIndex<pLsize && pNodeType!=nsIDOMNode::ELEMENT_NODE);
    if (pLineIndex>=pLsize) break;
    rv = pLine->GetChildNodes(getter_AddRefs(pValues));
    NS_ENSURE_SUCCESS(rv,rv);
    pValues->GetLength(&pCsize);
    for (pColIndex=0;pColIndex<pCsize;pColIndex++) {
      do {
        rv = pValues->Item(pColIndex, getter_AddRefs(pValue));
        NS_ENSURE_SUCCESS(rv,rv);
        pValue->GetNodeType(&pNodeType);
        if (pNodeType!=nsIDOMNode::ELEMENT_NODE) pColIndex++;
      } while (pColIndex<pCsize && pNodeType!=nsIDOMNode::ELEMENT_NODE);
      if (pColIndex>=pCsize) break;
      rv = pValue->GetFirstChild(getter_AddRefs(pContent));
      NS_ENSURE_SUCCESS(rv,rv);
      pVariant = do_CreateInstance(NS_VARIANT_CONTRACTID, &rv);
      NS_ENSURE_SUCCESS(rv,rv);
      if (pContent) {
        rv = pContent->GetNodeValue(pText);
        NS_ENSURE_SUCCESS(rv,rv);
        pVariant->SetAsAString(pText);
        printf("%s|",ToNewCString(pText));
      } else {
        pVariant->SetAsAString(NS_LITERAL_STRING(""));
      }
      rv = pArray.AppendObject(pVariant);
    }
  }
  rv = mComponent->TreatP009A(pArray, pLsize, pCsize, mKey);
  return rv;
}


/* Generated by Pygmalion */


NS_IMPL_ISUPPORTS1(mozListenerP009B, nsISOAPResponseListener)

mozListenerP009B::mozListenerP009B(mozC02gestsea* aComponent, const nsACString & aSearch)
{
  mComponent = aComponent;
  mSearch = aSearch;
}
mozListenerP009B::~mozListenerP009B()
{
}

NS_IMETHODIMP mozListenerP009B::HandleResponse(nsISOAPResponse *aResponse, nsISOAPCall *aCall, PRUint32 aStatus, PRBool aLast, PRBool *aReturn)
{
  nsresult rv;
  nsCOMPtr<nsISOAPFault> pFault;
  rv = aResponse->GetFault(getter_AddRefs(pFault));
  NS_ENSURE_SUCCESS(rv, rv);
  if (pFault) {
    nsAutoString pFaute, pDetail, pTitle;
    nsCOMPtr<nsIDOMElement> pTheDetail;
    nsCOMPtr<nsIDOMNode> pNode;
    rv = pFault->GetDetail(getter_AddRefs(pTheDetail));
    NS_ENSURE_SUCCESS(rv,rv);
    rv = pTheDetail->GetFirstChild(getter_AddRefs(pNode));
    NS_ENSURE_SUCCESS(rv,rv);
    if (pNode) {
      nsCOMPtr<nsIDOMNamedNodeMap> pAttributes;
      nsCOMPtr<nsIDOMNode> pAttribute, pFirstNode;
      nsAutoString pNodeValue;
      rv = pNode->GetFirstChild(getter_AddRefs(pFirstNode));
      NS_ENSURE_SUCCESS(rv,rv);
      if (pFirstNode) {
        pFirstNode->GetNodeValue(pNodeValue);
        NS_ENSURE_SUCCESS(rv,rv);
        pDetail  = pNodeValue;
      }
      pNode->GetAttributes(getter_AddRefs(pAttributes));
      NS_ENSURE_SUCCESS(rv,rv);
      pAttributes->GetNamedItem(NS_LITERAL_STRING("code"), getter_AddRefs(pAttribute));
      NS_ENSURE_SUCCESS(rv,rv);
      if (pAttribute) {
        pAttribute->GetNodeValue(pNodeValue);
        NS_ENSURE_SUCCESS(rv,rv);
        pDetail += NS_LITERAL_STRING("\n(Erreur ");
        pDetail += pNodeValue;
        pDetail += NS_LITERAL_STRING(")");
      }
    } else pDetail = NS_LITERAL_STRING("Erreur sans message.");
    pFaute = pDetail;
    rv = pFault->GetFaultString(pTitle);
    NS_ENSURE_SUCCESS(rv,rv);
    nsCOMPtr<nsIPrompt> pPrompt= do_GetService(NS_DEFAULTPROMPT_CONTRACTID, &rv);
    NS_ENSURE_SUCCESS(rv,rv);
    pPrompt->Alert(ToNewUnicode(pTitle), ToNewUnicode(pFaute));
    return NS_ERROR_FAILURE;
  }

  nsISOAPParameter ** pParameters;
  PRUint32 pTotal;
  rv = aResponse->GetParameters(PR_FALSE, &pTotal, &pParameters);
  NS_ENSURE_SUCCESS(rv,rv);
  if (pTotal!=1) {
    nsCOMPtr<nsIPrompt> pPrompt= do_GetService(NS_DEFAULTPROMPT_CONTRACTID, &rv);
    NS_ENSURE_SUCCESS(rv,rv);
    pPrompt->Alert(ToNewUnicode(NS_LITERAL_CSTRING("Erreur système")), ToNewUnicode(NS_LITERAL_CSTRING("Le nombre total de paramètres reçus est incorrect.")));
    return NS_ERROR_FAILURE;
  }

  nsAutoString pText;
  nsCOMArray<nsIVariant> pArray;
  nsCOMPtr<nsIWritableVariant> pVariant;
  PRUint32 pLsize=0, pCsize=0;
  PRUint32 pLineIndex, pColIndex;
  PRUint16 pNodeType;
  nsCOMPtr<nsIDOMElement> pResult;
  nsCOMPtr<nsIDOMNodeList> pLines, pValues;
  nsCOMPtr<nsIDOMNode> pLine, pValue, pContent;
  rv = pParameters[0]->GetElement(getter_AddRefs(pResult));
  NS_ENSURE_SUCCESS(rv,rv);
  rv = pResult->GetChildNodes(getter_AddRefs(pLines));
  NS_ENSURE_SUCCESS(rv,rv);
  pLines->GetLength(&pLsize);
  for (pLineIndex=0;pLineIndex<pLsize;pLineIndex++) {
    do {
      rv = pLines->Item(pLineIndex, getter_AddRefs(pLine));
      NS_ENSURE_SUCCESS(rv,rv);
      pLine->GetNodeType(&pNodeType);
      if (pNodeType!=nsIDOMNode::ELEMENT_NODE) pLineIndex++;
    } while (pLineIndex<pLsize && pNodeType!=nsIDOMNode::ELEMENT_NODE);
    if (pLineIndex>=pLsize) break;
    rv = pLine->GetChildNodes(getter_AddRefs(pValues));
    NS_ENSURE_SUCCESS(rv,rv);
    pValues->GetLength(&pCsize);
    for (pColIndex=0;pColIndex<pCsize;pColIndex++) {
      do {
        rv = pValues->Item(pColIndex, getter_AddRefs(pValue));
        NS_ENSURE_SUCCESS(rv,rv);
        pValue->GetNodeType(&pNodeType);
        if (pNodeType!=nsIDOMNode::ELEMENT_NODE) pColIndex++;
      } while (pColIndex<pCsize && pNodeType!=nsIDOMNode::ELEMENT_NODE);
      if (pColIndex>=pCsize) break;
      rv = pValue->GetFirstChild(getter_AddRefs(pContent));
      NS_ENSURE_SUCCESS(rv,rv);
      pVariant = do_CreateInstance(NS_VARIANT_CONTRACTID, &rv);
      NS_ENSURE_SUCCESS(rv,rv);
      if (pContent) {
        rv = pContent->GetNodeValue(pText);
        NS_ENSURE_SUCCESS(rv,rv);
        pVariant->SetAsAString(pText);
        printf("%s|",ToNewCString(pText));
      } else {
        pVariant->SetAsAString(NS_LITERAL_STRING(""));
      }
      rv = pArray.AppendObject(pVariant);
    }
  }
  rv = mComponent->TreatP009B(pArray, pLsize, pCsize, mSearch);
  return rv;
}


/* Generated by Pygmalion */


NS_IMPL_ISUPPORTS1(mozListenerP009C, nsISOAPResponseListener)

mozListenerP009C::mozListenerP009C(mozC02gestsea* aComponent, const nsACString & aSearch)
{
  mComponent = aComponent;
  mSearch = aSearch;
}
mozListenerP009C::~mozListenerP009C()
{
}

NS_IMETHODIMP mozListenerP009C::HandleResponse(nsISOAPResponse *aResponse, nsISOAPCall *aCall, PRUint32 aStatus, PRBool aLast, PRBool *aReturn)
{
  nsresult rv;
  nsCOMPtr<nsISOAPFault> pFault;
  rv = aResponse->GetFault(getter_AddRefs(pFault));
  NS_ENSURE_SUCCESS(rv, rv);
  if (pFault) {
    nsAutoString pFaute, pDetail, pTitle;
    nsCOMPtr<nsIDOMElement> pTheDetail;
    nsCOMPtr<nsIDOMNode> pNode;
    rv = pFault->GetDetail(getter_AddRefs(pTheDetail));
    NS_ENSURE_SUCCESS(rv,rv);
    rv = pTheDetail->GetFirstChild(getter_AddRefs(pNode));
    NS_ENSURE_SUCCESS(rv,rv);
    if (pNode) {
      nsCOMPtr<nsIDOMNamedNodeMap> pAttributes;
      nsCOMPtr<nsIDOMNode> pAttribute, pFirstNode;
      nsAutoString pNodeValue;
      rv = pNode->GetFirstChild(getter_AddRefs(pFirstNode));
      NS_ENSURE_SUCCESS(rv,rv);
      if (pFirstNode) {
        pFirstNode->GetNodeValue(pNodeValue);
        NS_ENSURE_SUCCESS(rv,rv);
        pDetail  = pNodeValue;
      }
      pNode->GetAttributes(getter_AddRefs(pAttributes));
      NS_ENSURE_SUCCESS(rv,rv);
      pAttributes->GetNamedItem(NS_LITERAL_STRING("code"), getter_AddRefs(pAttribute));
      NS_ENSURE_SUCCESS(rv,rv);
      if (pAttribute) {
        pAttribute->GetNodeValue(pNodeValue);
        NS_ENSURE_SUCCESS(rv,rv);
        pDetail += NS_LITERAL_STRING("\n(Erreur ");
        pDetail += pNodeValue;
        pDetail += NS_LITERAL_STRING(")");
      }
    } else pDetail = NS_LITERAL_STRING("Erreur sans message.");
    pFaute = pDetail;
    rv = pFault->GetFaultString(pTitle);
    NS_ENSURE_SUCCESS(rv,rv);
    nsCOMPtr<nsIPrompt> pPrompt= do_GetService(NS_DEFAULTPROMPT_CONTRACTID, &rv);
    NS_ENSURE_SUCCESS(rv,rv);
    pPrompt->Alert(ToNewUnicode(pTitle), ToNewUnicode(pFaute));
    return NS_ERROR_FAILURE;
  }

  nsISOAPParameter ** pParameters;
  PRUint32 pTotal;
  rv = aResponse->GetParameters(PR_FALSE, &pTotal, &pParameters);
  NS_ENSURE_SUCCESS(rv,rv);
  if (pTotal!=1) {
    nsCOMPtr<nsIPrompt> pPrompt= do_GetService(NS_DEFAULTPROMPT_CONTRACTID, &rv);
    NS_ENSURE_SUCCESS(rv,rv);
    pPrompt->Alert(ToNewUnicode(NS_LITERAL_CSTRING("Erreur système")), ToNewUnicode(NS_LITERAL_CSTRING("Le nombre total de paramètres reçus est incorrect.")));
    return NS_ERROR_FAILURE;
  }

  nsAutoString pText;
  nsCOMArray<nsIVariant> pArray;
  nsCOMPtr<nsIWritableVariant> pVariant;
  PRUint32 pLsize=0, pCsize=0;
  PRUint32 pLineIndex, pColIndex;
  PRUint16 pNodeType;
  nsCOMPtr<nsIDOMElement> pResult;
  nsCOMPtr<nsIDOMNodeList> pLines, pValues;
  nsCOMPtr<nsIDOMNode> pLine, pValue, pContent;
  rv = pParameters[0]->GetElement(getter_AddRefs(pResult));
  NS_ENSURE_SUCCESS(rv,rv);
  rv = pResult->GetChildNodes(getter_AddRefs(pLines));
  NS_ENSURE_SUCCESS(rv,rv);
  pLines->GetLength(&pLsize);
  for (pLineIndex=0;pLineIndex<pLsize;pLineIndex++) {
    do {
      rv = pLines->Item(pLineIndex, getter_AddRefs(pLine));
      NS_ENSURE_SUCCESS(rv,rv);
      pLine->GetNodeType(&pNodeType);
      if (pNodeType!=nsIDOMNode::ELEMENT_NODE) pLineIndex++;
    } while (pLineIndex<pLsize && pNodeType!=nsIDOMNode::ELEMENT_NODE);
    if (pLineIndex>=pLsize) break;
    rv = pLine->GetChildNodes(getter_AddRefs(pValues));
    NS_ENSURE_SUCCESS(rv,rv);
    pValues->GetLength(&pCsize);
    for (pColIndex=0;pColIndex<pCsize;pColIndex++) {
      do {
        rv = pValues->Item(pColIndex, getter_AddRefs(pValue));
        NS_ENSURE_SUCCESS(rv,rv);
        pValue->GetNodeType(&pNodeType);
        if (pNodeType!=nsIDOMNode::ELEMENT_NODE) pColIndex++;
      } while (pColIndex<pCsize && pNodeType!=nsIDOMNode::ELEMENT_NODE);
      if (pColIndex>=pCsize) break;
      rv = pValue->GetFirstChild(getter_AddRefs(pContent));
      NS_ENSURE_SUCCESS(rv,rv);
      pVariant = do_CreateInstance(NS_VARIANT_CONTRACTID, &rv);
      NS_ENSURE_SUCCESS(rv,rv);
      if (pContent) {
        rv = pContent->GetNodeValue(pText);
        NS_ENSURE_SUCCESS(rv,rv);
        pVariant->SetAsAString(pText);
        printf("%s|",ToNewCString(pText));
      } else {
        pVariant->SetAsAString(NS_LITERAL_STRING(""));
      }
      rv = pArray.AppendObject(pVariant);
    }
  }
  rv = mComponent->TreatP009C(pArray, pLsize, pCsize, mSearch);
  return rv;
}


/* Generated by Pygmalion */


NS_IMPL_ISUPPORTS1(mozListenerP009D, nsISOAPResponseListener)

mozListenerP009D::mozListenerP009D(mozC02gestsea* aComponent, const nsAString & aKey)
{
  mComponent = aComponent;
  mKey = aKey;
}
mozListenerP009D::~mozListenerP009D()
{
}

NS_IMETHODIMP mozListenerP009D::HandleResponse(nsISOAPResponse *aResponse, nsISOAPCall *aCall, PRUint32 aStatus, PRBool aLast, PRBool *aReturn)
{
  nsresult rv;
  nsCOMPtr<nsISOAPFault> pFault;
  rv = aResponse->GetFault(getter_AddRefs(pFault));
  NS_ENSURE_SUCCESS(rv, rv);
  if (pFault) {
    nsAutoString pFaute, pDetail, pTitle;
    nsCOMPtr<nsIDOMElement> pTheDetail;
    nsCOMPtr<nsIDOMNode> pNode;
    rv = pFault->GetDetail(getter_AddRefs(pTheDetail));
    NS_ENSURE_SUCCESS(rv,rv);
    rv = pTheDetail->GetFirstChild(getter_AddRefs(pNode));
    NS_ENSURE_SUCCESS(rv,rv);
    if (pNode) {
      nsCOMPtr<nsIDOMNamedNodeMap> pAttributes;
      nsCOMPtr<nsIDOMNode> pAttribute, pFirstNode;
      nsAutoString pNodeValue;
      rv = pNode->GetFirstChild(getter_AddRefs(pFirstNode));
      NS_ENSURE_SUCCESS(rv,rv);
      if (pFirstNode) {
        pFirstNode->GetNodeValue(pNodeValue);
        NS_ENSURE_SUCCESS(rv,rv);
        pDetail  = pNodeValue;
      }
      pNode->GetAttributes(getter_AddRefs(pAttributes));
      NS_ENSURE_SUCCESS(rv,rv);
      pAttributes->GetNamedItem(NS_LITERAL_STRING("code"), getter_AddRefs(pAttribute));
      NS_ENSURE_SUCCESS(rv,rv);
      if (pAttribute) {
        pAttribute->GetNodeValue(pNodeValue);
        NS_ENSURE_SUCCESS(rv,rv);
        pDetail += NS_LITERAL_STRING("\n(Erreur ");
        pDetail += pNodeValue;
        pDetail += NS_LITERAL_STRING(")");
      }
    } else pDetail = NS_LITERAL_STRING("Erreur sans message.");
    pFaute = pDetail;
    rv = pFault->GetFaultString(pTitle);
    NS_ENSURE_SUCCESS(rv,rv);
    nsCOMPtr<nsIPrompt> pPrompt= do_GetService(NS_DEFAULTPROMPT_CONTRACTID, &rv);
    NS_ENSURE_SUCCESS(rv,rv);
    pPrompt->Alert(ToNewUnicode(pTitle), ToNewUnicode(pFaute));
    return NS_ERROR_FAILURE;
  }

  nsISOAPParameter ** pParameters;
  PRUint32 pTotal;
  rv = aResponse->GetParameters(PR_FALSE, &pTotal, &pParameters);
  NS_ENSURE_SUCCESS(rv,rv);
  if (pTotal!=1) {
    nsCOMPtr<nsIPrompt> pPrompt= do_GetService(NS_DEFAULTPROMPT_CONTRACTID, &rv);
    NS_ENSURE_SUCCESS(rv,rv);
    pPrompt->Alert(ToNewUnicode(NS_LITERAL_CSTRING("Erreur système")), ToNewUnicode(NS_LITERAL_CSTRING("Le nombre total de paramètres reçus est incorrect.")));
    return NS_ERROR_FAILURE;
  }

  nsAutoString pText;
  nsCOMArray<nsIVariant> pArray;
  nsCOMPtr<nsIWritableVariant> pVariant;
  PRUint32 pLsize=0, pCsize=0;
  PRUint32 pLineIndex, pColIndex;
  PRUint16 pNodeType;
  nsCOMPtr<nsIDOMElement> pResult;
  nsCOMPtr<nsIDOMNodeList> pLines, pValues;
  nsCOMPtr<nsIDOMNode> pLine, pValue, pContent;
  rv = pParameters[0]->GetElement(getter_AddRefs(pResult));
  NS_ENSURE_SUCCESS(rv,rv);
  rv = pResult->GetChildNodes(getter_AddRefs(pLines));
  NS_ENSURE_SUCCESS(rv,rv);
  pLines->GetLength(&pLsize);
  for (pLineIndex=0;pLineIndex<pLsize;pLineIndex++) {
    do {
      rv = pLines->Item(pLineIndex, getter_AddRefs(pLine));
      NS_ENSURE_SUCCESS(rv,rv);
      pLine->GetNodeType(&pNodeType);
      if (pNodeType!=nsIDOMNode::ELEMENT_NODE) pLineIndex++;
    } while (pLineIndex<pLsize && pNodeType!=nsIDOMNode::ELEMENT_NODE);
    if (pLineIndex>=pLsize) break;
    rv = pLine->GetChildNodes(getter_AddRefs(pValues));
    NS_ENSURE_SUCCESS(rv,rv);
    pValues->GetLength(&pCsize);
    for (pColIndex=0;pColIndex<pCsize;pColIndex++) {
      do {
        rv = pValues->Item(pColIndex, getter_AddRefs(pValue));
        NS_ENSURE_SUCCESS(rv,rv);
        pValue->GetNodeType(&pNodeType);
        if (pNodeType!=nsIDOMNode::ELEMENT_NODE) pColIndex++;
      } while (pColIndex<pCsize && pNodeType!=nsIDOMNode::ELEMENT_NODE);
      if (pColIndex>=pCsize) break;
      rv = pValue->GetFirstChild(getter_AddRefs(pContent));
      NS_ENSURE_SUCCESS(rv,rv);
      pVariant = do_CreateInstance(NS_VARIANT_CONTRACTID, &rv);
      NS_ENSURE_SUCCESS(rv,rv);
      if (pContent) {
        rv = pContent->GetNodeValue(pText);
        NS_ENSURE_SUCCESS(rv,rv);
        pVariant->SetAsAString(pText);
        printf("%s|",ToNewCString(pText));
      } else {
        pVariant->SetAsAString(NS_LITERAL_STRING(""));
      }
      rv = pArray.AppendObject(pVariant);
    }
  }
  rv = mComponent->TreatP009D(pArray, pLsize, pCsize, mKey);
  return rv;
}


/* Generated by Pygmalion */


NS_IMPL_ISUPPORTS1(mozListenerP009E, nsISOAPResponseListener)

mozListenerP009E::mozListenerP009E(mozC02gestsea* aComponent, const nsAString & aKey)
{
  mComponent = aComponent;
  mKey = aKey;
}
mozListenerP009E::~mozListenerP009E()
{
}

NS_IMETHODIMP mozListenerP009E::HandleResponse(nsISOAPResponse *aResponse, nsISOAPCall *aCall, PRUint32 aStatus, PRBool aLast, PRBool *aReturn)
{
  nsresult rv;
  nsCOMPtr<nsISOAPFault> pFault;
  rv = aResponse->GetFault(getter_AddRefs(pFault));
  NS_ENSURE_SUCCESS(rv, rv);
  if (pFault) {
    nsAutoString pFaute, pDetail, pTitle;
    nsCOMPtr<nsIDOMElement> pTheDetail;
    nsCOMPtr<nsIDOMNode> pNode;
    rv = pFault->GetDetail(getter_AddRefs(pTheDetail));
    NS_ENSURE_SUCCESS(rv,rv);
    rv = pTheDetail->GetFirstChild(getter_AddRefs(pNode));
    NS_ENSURE_SUCCESS(rv,rv);
    if (pNode) {
      nsCOMPtr<nsIDOMNamedNodeMap> pAttributes;
      nsCOMPtr<nsIDOMNode> pAttribute, pFirstNode;
      nsAutoString pNodeValue;
      rv = pNode->GetFirstChild(getter_AddRefs(pFirstNode));
      NS_ENSURE_SUCCESS(rv,rv);
      if (pFirstNode) {
        pFirstNode->GetNodeValue(pNodeValue);
        NS_ENSURE_SUCCESS(rv,rv);
        pDetail  = pNodeValue;
      }
      pNode->GetAttributes(getter_AddRefs(pAttributes));
      NS_ENSURE_SUCCESS(rv,rv);
      pAttributes->GetNamedItem(NS_LITERAL_STRING("code"), getter_AddRefs(pAttribute));
      NS_ENSURE_SUCCESS(rv,rv);
      if (pAttribute) {
        pAttribute->GetNodeValue(pNodeValue);
        NS_ENSURE_SUCCESS(rv,rv);
        pDetail += NS_LITERAL_STRING("\n(Erreur ");
        pDetail += pNodeValue;
        pDetail += NS_LITERAL_STRING(")");
      }
    } else pDetail = NS_LITERAL_STRING("Erreur sans message.");
    pFaute = pDetail;
    rv = pFault->GetFaultString(pTitle);
    NS_ENSURE_SUCCESS(rv,rv);
    nsCOMPtr<nsIPrompt> pPrompt= do_GetService(NS_DEFAULTPROMPT_CONTRACTID, &rv);
    NS_ENSURE_SUCCESS(rv,rv);
    pPrompt->Alert(ToNewUnicode(pTitle), ToNewUnicode(pFaute));
    return NS_ERROR_FAILURE;
  }

  nsISOAPParameter ** pParameters;
  PRUint32 pTotal;
  rv = aResponse->GetParameters(PR_FALSE, &pTotal, &pParameters);
  NS_ENSURE_SUCCESS(rv,rv);
  if (pTotal!=1) {
    nsCOMPtr<nsIPrompt> pPrompt= do_GetService(NS_DEFAULTPROMPT_CONTRACTID, &rv);
    NS_ENSURE_SUCCESS(rv,rv);
    pPrompt->Alert(ToNewUnicode(NS_LITERAL_CSTRING("Erreur système")), ToNewUnicode(NS_LITERAL_CSTRING("Le nombre total de paramètres reçus est incorrect.")));
    return NS_ERROR_FAILURE;
  }

  nsAutoString pText;
  nsCOMArray<nsIVariant> pArray;
  nsCOMPtr<nsIWritableVariant> pVariant;
  PRUint32 pLsize=0, pCsize=0;
  PRUint32 pLineIndex, pColIndex;
  PRUint16 pNodeType;
  nsCOMPtr<nsIDOMElement> pResult;
  nsCOMPtr<nsIDOMNodeList> pLines, pValues;
  nsCOMPtr<nsIDOMNode> pLine, pValue, pContent;
  rv = pParameters[0]->GetElement(getter_AddRefs(pResult));
  NS_ENSURE_SUCCESS(rv,rv);
  rv = pResult->GetChildNodes(getter_AddRefs(pLines));
  NS_ENSURE_SUCCESS(rv,rv);
  pLines->GetLength(&pLsize);
  for (pLineIndex=0;pLineIndex<pLsize;pLineIndex++) {
    do {
      rv = pLines->Item(pLineIndex, getter_AddRefs(pLine));
      NS_ENSURE_SUCCESS(rv,rv);
      pLine->GetNodeType(&pNodeType);
      if (pNodeType!=nsIDOMNode::ELEMENT_NODE) pLineIndex++;
    } while (pLineIndex<pLsize && pNodeType!=nsIDOMNode::ELEMENT_NODE);
    if (pLineIndex>=pLsize) break;
    rv = pLine->GetChildNodes(getter_AddRefs(pValues));
    NS_ENSURE_SUCCESS(rv,rv);
    pValues->GetLength(&pCsize);
    for (pColIndex=0;pColIndex<pCsize;pColIndex++) {
      do {
        rv = pValues->Item(pColIndex, getter_AddRefs(pValue));
        NS_ENSURE_SUCCESS(rv,rv);
        pValue->GetNodeType(&pNodeType);
        if (pNodeType!=nsIDOMNode::ELEMENT_NODE) pColIndex++;
      } while (pColIndex<pCsize && pNodeType!=nsIDOMNode::ELEMENT_NODE);
      if (pColIndex>=pCsize) break;
      rv = pValue->GetFirstChild(getter_AddRefs(pContent));
      NS_ENSURE_SUCCESS(rv,rv);
      pVariant = do_CreateInstance(NS_VARIANT_CONTRACTID, &rv);
      NS_ENSURE_SUCCESS(rv,rv);
      if (pContent) {
        rv = pContent->GetNodeValue(pText);
        NS_ENSURE_SUCCESS(rv,rv);
        pVariant->SetAsAString(pText);
        printf("%s|",ToNewCString(pText));
      } else {
        pVariant->SetAsAString(NS_LITERAL_STRING(""));
      }
      rv = pArray.AppendObject(pVariant);
    }
  }
  rv = mComponent->TreatP009E(pArray, pLsize, pCsize, mKey);
  return rv;
}


/* Generated by Pygmalion */


NS_IMPL_ISUPPORTS1(mozListenerP009F, nsISOAPResponseListener)

mozListenerP009F::mozListenerP009F(mozC02gestsea* aComponent, const nsAString & aKey, const nsACString & aField1, const nsACString & aField2, const nsACString & aField3, const nsACString & aField4, const nsACString & aField5, const nsACString & aField6, const nsACString & aField7)
{
  mComponent = aComponent;
  mKey = aKey;
  mField1 = aField1;
  mField2 = aField2;
  mField3 = aField3;
  mField4 = aField4;
  mField5 = aField5;
  mField6 = aField6;
  mField7 = aField7;
}
mozListenerP009F::~mozListenerP009F()
{
}

NS_IMETHODIMP mozListenerP009F::HandleResponse(nsISOAPResponse *aResponse, nsISOAPCall *aCall, PRUint32 aStatus, PRBool aLast, PRBool *aReturn)
{
  nsresult rv;
  nsCOMPtr<nsISOAPFault> pFault;
  rv = aResponse->GetFault(getter_AddRefs(pFault));
  NS_ENSURE_SUCCESS(rv, rv);
  if (pFault) {
    nsAutoString pFaute, pDetail, pTitle;
    nsCOMPtr<nsIDOMElement> pTheDetail;
    nsCOMPtr<nsIDOMNode> pNode;
    rv = pFault->GetDetail(getter_AddRefs(pTheDetail));
    NS_ENSURE_SUCCESS(rv,rv);
    rv = pTheDetail->GetFirstChild(getter_AddRefs(pNode));
    NS_ENSURE_SUCCESS(rv,rv);
    if (pNode) {
      nsCOMPtr<nsIDOMNamedNodeMap> pAttributes;
      nsCOMPtr<nsIDOMNode> pAttribute, pFirstNode;
      nsAutoString pNodeValue;
      rv = pNode->GetFirstChild(getter_AddRefs(pFirstNode));
      NS_ENSURE_SUCCESS(rv,rv);
      if (pFirstNode) {
        pFirstNode->GetNodeValue(pNodeValue);
        NS_ENSURE_SUCCESS(rv,rv);
        pDetail  = pNodeValue;
      }
      pNode->GetAttributes(getter_AddRefs(pAttributes));
      NS_ENSURE_SUCCESS(rv,rv);
      pAttributes->GetNamedItem(NS_LITERAL_STRING("code"), getter_AddRefs(pAttribute));
      NS_ENSURE_SUCCESS(rv,rv);
      if (pAttribute) {
        pAttribute->GetNodeValue(pNodeValue);
        NS_ENSURE_SUCCESS(rv,rv);
        pDetail += NS_LITERAL_STRING("\n(Erreur ");
        pDetail += pNodeValue;
        pDetail += NS_LITERAL_STRING(")");
      }
    } else pDetail = NS_LITERAL_STRING("Erreur sans message.");
    pFaute = pDetail;
    rv = pFault->GetFaultString(pTitle);
    NS_ENSURE_SUCCESS(rv,rv);
    nsCOMPtr<nsIPrompt> pPrompt= do_GetService(NS_DEFAULTPROMPT_CONTRACTID, &rv);
    NS_ENSURE_SUCCESS(rv,rv);
    pPrompt->Alert(ToNewUnicode(pTitle), ToNewUnicode(pFaute));
    return NS_ERROR_FAILURE;
  }

  nsISOAPParameter ** pParameters;
  PRUint32 pTotal;
  rv = aResponse->GetParameters(PR_FALSE, &pTotal, &pParameters);
  NS_ENSURE_SUCCESS(rv,rv);
  if (pTotal!=1) {
    nsCOMPtr<nsIPrompt> pPrompt= do_GetService(NS_DEFAULTPROMPT_CONTRACTID, &rv);
    NS_ENSURE_SUCCESS(rv,rv);
    pPrompt->Alert(ToNewUnicode(NS_LITERAL_CSTRING("Erreur système")), ToNewUnicode(NS_LITERAL_CSTRING("Le nombre total de paramètres reçus est incorrect.")));
    return NS_ERROR_FAILURE;
  }

  nsAutoString pText;
  nsCOMPtr<nsIVariant> pValue;
  rv = pParameters[0]->GetValue(getter_AddRefs(pValue));
  NS_ENSURE_SUCCESS(rv,rv);
  rv = pValue->GetAsAString(pText);
  NS_ENSURE_SUCCESS(rv,rv);
  rv = mComponent->TreatP009F(pText, mKey, mField1, mField2, mField3, mField4, mField5, mField6, mField7);
  return rv;
}


/* Generated by Pygmalion */


NS_IMPL_ISUPPORTS1(mozListenerP00A0, nsISOAPResponseListener)

mozListenerP00A0::mozListenerP00A0(mozC02gestsea* aComponent, const nsACString & aSearch)
{
  mComponent = aComponent;
  mSearch = aSearch;
}
mozListenerP00A0::~mozListenerP00A0()
{
}

NS_IMETHODIMP mozListenerP00A0::HandleResponse(nsISOAPResponse *aResponse, nsISOAPCall *aCall, PRUint32 aStatus, PRBool aLast, PRBool *aReturn)
{
  nsresult rv;
  nsCOMPtr<nsISOAPFault> pFault;
  rv = aResponse->GetFault(getter_AddRefs(pFault));
  NS_ENSURE_SUCCESS(rv, rv);
  if (pFault) {
    nsAutoString pFaute, pDetail, pTitle;
    nsCOMPtr<nsIDOMElement> pTheDetail;
    nsCOMPtr<nsIDOMNode> pNode;
    rv = pFault->GetDetail(getter_AddRefs(pTheDetail));
    NS_ENSURE_SUCCESS(rv,rv);
    rv = pTheDetail->GetFirstChild(getter_AddRefs(pNode));
    NS_ENSURE_SUCCESS(rv,rv);
    if (pNode) {
      nsCOMPtr<nsIDOMNamedNodeMap> pAttributes;
      nsCOMPtr<nsIDOMNode> pAttribute, pFirstNode;
      nsAutoString pNodeValue;
      rv = pNode->GetFirstChild(getter_AddRefs(pFirstNode));
      NS_ENSURE_SUCCESS(rv,rv);
      if (pFirstNode) {
        pFirstNode->GetNodeValue(pNodeValue);
        NS_ENSURE_SUCCESS(rv,rv);
        pDetail  = pNodeValue;
      }
      pNode->GetAttributes(getter_AddRefs(pAttributes));
      NS_ENSURE_SUCCESS(rv,rv);
      pAttributes->GetNamedItem(NS_LITERAL_STRING("code"), getter_AddRefs(pAttribute));
      NS_ENSURE_SUCCESS(rv,rv);
      if (pAttribute) {
        pAttribute->GetNodeValue(pNodeValue);
        NS_ENSURE_SUCCESS(rv,rv);
        pDetail += NS_LITERAL_STRING("\n(Erreur ");
        pDetail += pNodeValue;
        pDetail += NS_LITERAL_STRING(")");
      }
    } else pDetail = NS_LITERAL_STRING("Erreur sans message.");
    pFaute = pDetail;
    rv = pFault->GetFaultString(pTitle);
    NS_ENSURE_SUCCESS(rv,rv);
    nsCOMPtr<nsIPrompt> pPrompt= do_GetService(NS_DEFAULTPROMPT_CONTRACTID, &rv);
    NS_ENSURE_SUCCESS(rv,rv);
    pPrompt->Alert(ToNewUnicode(pTitle), ToNewUnicode(pFaute));
    return NS_ERROR_FAILURE;
  }

  nsISOAPParameter ** pParameters;
  PRUint32 pTotal;
  rv = aResponse->GetParameters(PR_FALSE, &pTotal, &pParameters);
  NS_ENSURE_SUCCESS(rv,rv);
  if (pTotal!=1) {
    nsCOMPtr<nsIPrompt> pPrompt= do_GetService(NS_DEFAULTPROMPT_CONTRACTID, &rv);
    NS_ENSURE_SUCCESS(rv,rv);
    pPrompt->Alert(ToNewUnicode(NS_LITERAL_CSTRING("Erreur système")), ToNewUnicode(NS_LITERAL_CSTRING("Le nombre total de paramètres reçus est incorrect.")));
    return NS_ERROR_FAILURE;
  }

  nsAutoString pText;
  nsCOMArray<nsIVariant> pArray;
  nsCOMPtr<nsIWritableVariant> pVariant;
  PRUint32 pLsize=0, pCsize=0;
  PRUint32 pLineIndex, pColIndex;
  PRUint16 pNodeType;
  nsCOMPtr<nsIDOMElement> pResult;
  nsCOMPtr<nsIDOMNodeList> pLines, pValues;
  nsCOMPtr<nsIDOMNode> pLine, pValue, pContent;
  rv = pParameters[0]->GetElement(getter_AddRefs(pResult));
  NS_ENSURE_SUCCESS(rv,rv);
  rv = pResult->GetChildNodes(getter_AddRefs(pLines));
  NS_ENSURE_SUCCESS(rv,rv);
  pLines->GetLength(&pLsize);
  for (pLineIndex=0;pLineIndex<pLsize;pLineIndex++) {
    do {
      rv = pLines->Item(pLineIndex, getter_AddRefs(pLine));
      NS_ENSURE_SUCCESS(rv,rv);
      pLine->GetNodeType(&pNodeType);
      if (pNodeType!=nsIDOMNode::ELEMENT_NODE) pLineIndex++;
    } while (pLineIndex<pLsize && pNodeType!=nsIDOMNode::ELEMENT_NODE);
    if (pLineIndex>=pLsize) break;
    rv = pLine->GetChildNodes(getter_AddRefs(pValues));
    NS_ENSURE_SUCCESS(rv,rv);
    pValues->GetLength(&pCsize);
    for (pColIndex=0;pColIndex<pCsize;pColIndex++) {
      do {
        rv = pValues->Item(pColIndex, getter_AddRefs(pValue));
        NS_ENSURE_SUCCESS(rv,rv);
        pValue->GetNodeType(&pNodeType);
        if (pNodeType!=nsIDOMNode::ELEMENT_NODE) pColIndex++;
      } while (pColIndex<pCsize && pNodeType!=nsIDOMNode::ELEMENT_NODE);
      if (pColIndex>=pCsize) break;
      rv = pValue->GetFirstChild(getter_AddRefs(pContent));
      NS_ENSURE_SUCCESS(rv,rv);
      pVariant = do_CreateInstance(NS_VARIANT_CONTRACTID, &rv);
      NS_ENSURE_SUCCESS(rv,rv);
      if (pContent) {
        rv = pContent->GetNodeValue(pText);
        NS_ENSURE_SUCCESS(rv,rv);
        pVariant->SetAsAString(pText);
        printf("%s|",ToNewCString(pText));
      } else {
        pVariant->SetAsAString(NS_LITERAL_STRING(""));
      }
      rv = pArray.AppendObject(pVariant);
    }
  }
  rv = mComponent->TreatP00A0(pArray, pLsize, pCsize, mSearch);
  return rv;
}


/* Generated by Pygmalion */


NS_IMPL_ISUPPORTS1(mozListenerP00A1, nsISOAPResponseListener)

mozListenerP00A1::mozListenerP00A1(mozC02gestsea* aComponent, const nsACString & aSearch)
{
  mComponent = aComponent;
  mSearch = aSearch;
}
mozListenerP00A1::~mozListenerP00A1()
{
}

NS_IMETHODIMP mozListenerP00A1::HandleResponse(nsISOAPResponse *aResponse, nsISOAPCall *aCall, PRUint32 aStatus, PRBool aLast, PRBool *aReturn)
{
  nsresult rv;
  nsCOMPtr<nsISOAPFault> pFault;
  rv = aResponse->GetFault(getter_AddRefs(pFault));
  NS_ENSURE_SUCCESS(rv, rv);
  if (pFault) {
    nsAutoString pFaute, pDetail, pTitle;
    nsCOMPtr<nsIDOMElement> pTheDetail;
    nsCOMPtr<nsIDOMNode> pNode;
    rv = pFault->GetDetail(getter_AddRefs(pTheDetail));
    NS_ENSURE_SUCCESS(rv,rv);
    rv = pTheDetail->GetFirstChild(getter_AddRefs(pNode));
    NS_ENSURE_SUCCESS(rv,rv);
    if (pNode) {
      nsCOMPtr<nsIDOMNamedNodeMap> pAttributes;
      nsCOMPtr<nsIDOMNode> pAttribute, pFirstNode;
      nsAutoString pNodeValue;
      rv = pNode->GetFirstChild(getter_AddRefs(pFirstNode));
      NS_ENSURE_SUCCESS(rv,rv);
      if (pFirstNode) {
        pFirstNode->GetNodeValue(pNodeValue);
        NS_ENSURE_SUCCESS(rv,rv);
        pDetail  = pNodeValue;
      }
      pNode->GetAttributes(getter_AddRefs(pAttributes));
      NS_ENSURE_SUCCESS(rv,rv);
      pAttributes->GetNamedItem(NS_LITERAL_STRING("code"), getter_AddRefs(pAttribute));
      NS_ENSURE_SUCCESS(rv,rv);
      if (pAttribute) {
        pAttribute->GetNodeValue(pNodeValue);
        NS_ENSURE_SUCCESS(rv,rv);
        pDetail += NS_LITERAL_STRING("\n(Erreur ");
        pDetail += pNodeValue;
        pDetail += NS_LITERAL_STRING(")");
      }
    } else pDetail = NS_LITERAL_STRING("Erreur sans message.");
    pFaute = pDetail;
    rv = pFault->GetFaultString(pTitle);
    NS_ENSURE_SUCCESS(rv,rv);
    nsCOMPtr<nsIPrompt> pPrompt= do_GetService(NS_DEFAULTPROMPT_CONTRACTID, &rv);
    NS_ENSURE_SUCCESS(rv,rv);
    pPrompt->Alert(ToNewUnicode(pTitle), ToNewUnicode(pFaute));
    return NS_ERROR_FAILURE;
  }

  nsISOAPParameter ** pParameters;
  PRUint32 pTotal;
  rv = aResponse->GetParameters(PR_FALSE, &pTotal, &pParameters);
  NS_ENSURE_SUCCESS(rv,rv);
  if (pTotal!=1) {
    nsCOMPtr<nsIPrompt> pPrompt= do_GetService(NS_DEFAULTPROMPT_CONTRACTID, &rv);
    NS_ENSURE_SUCCESS(rv,rv);
    pPrompt->Alert(ToNewUnicode(NS_LITERAL_CSTRING("Erreur système")), ToNewUnicode(NS_LITERAL_CSTRING("Le nombre total de paramètres reçus est incorrect.")));
    return NS_ERROR_FAILURE;
  }

  nsAutoString pText;
  nsCOMArray<nsIVariant> pArray;
  nsCOMPtr<nsIWritableVariant> pVariant;
  PRUint32 pLsize=0, pCsize=0;
  PRUint32 pLineIndex, pColIndex;
  PRUint16 pNodeType;
  nsCOMPtr<nsIDOMElement> pResult;
  nsCOMPtr<nsIDOMNodeList> pLines, pValues;
  nsCOMPtr<nsIDOMNode> pLine, pValue, pContent;
  rv = pParameters[0]->GetElement(getter_AddRefs(pResult));
  NS_ENSURE_SUCCESS(rv,rv);
  rv = pResult->GetChildNodes(getter_AddRefs(pLines));
  NS_ENSURE_SUCCESS(rv,rv);
  pLines->GetLength(&pLsize);
  for (pLineIndex=0;pLineIndex<pLsize;pLineIndex++) {
    do {
      rv = pLines->Item(pLineIndex, getter_AddRefs(pLine));
      NS_ENSURE_SUCCESS(rv,rv);
      pLine->GetNodeType(&pNodeType);
      if (pNodeType!=nsIDOMNode::ELEMENT_NODE) pLineIndex++;
    } while (pLineIndex<pLsize && pNodeType!=nsIDOMNode::ELEMENT_NODE);
    if (pLineIndex>=pLsize) break;
    rv = pLine->GetChildNodes(getter_AddRefs(pValues));
    NS_ENSURE_SUCCESS(rv,rv);
    pValues->GetLength(&pCsize);
    for (pColIndex=0;pColIndex<pCsize;pColIndex++) {
      do {
        rv = pValues->Item(pColIndex, getter_AddRefs(pValue));
        NS_ENSURE_SUCCESS(rv,rv);
        pValue->GetNodeType(&pNodeType);
        if (pNodeType!=nsIDOMNode::ELEMENT_NODE) pColIndex++;
      } while (pColIndex<pCsize && pNodeType!=nsIDOMNode::ELEMENT_NODE);
      if (pColIndex>=pCsize) break;
      rv = pValue->GetFirstChild(getter_AddRefs(pContent));
      NS_ENSURE_SUCCESS(rv,rv);
      pVariant = do_CreateInstance(NS_VARIANT_CONTRACTID, &rv);
      NS_ENSURE_SUCCESS(rv,rv);
      if (pContent) {
        rv = pContent->GetNodeValue(pText);
        NS_ENSURE_SUCCESS(rv,rv);
        pVariant->SetAsAString(pText);
        printf("%s|",ToNewCString(pText));
      } else {
        pVariant->SetAsAString(NS_LITERAL_STRING(""));
      }
      rv = pArray.AppendObject(pVariant);
    }
  }
  rv = mComponent->TreatP00A1(pArray, pLsize, pCsize, mSearch);
  return rv;
}


/* Generated by Pygmalion */


NS_IMPL_ISUPPORTS1(mozListenerP00A2, nsISOAPResponseListener)

mozListenerP00A2::mozListenerP00A2(mozC02gestsea* aComponent, const nsAString & aKey)
{
  mComponent = aComponent;
  mKey = aKey;
}
mozListenerP00A2::~mozListenerP00A2()
{
}

NS_IMETHODIMP mozListenerP00A2::HandleResponse(nsISOAPResponse *aResponse, nsISOAPCall *aCall, PRUint32 aStatus, PRBool aLast, PRBool *aReturn)
{
  nsresult rv;
  nsCOMPtr<nsISOAPFault> pFault;
  rv = aResponse->GetFault(getter_AddRefs(pFault));
  NS_ENSURE_SUCCESS(rv, rv);
  if (pFault) {
    nsAutoString pFaute, pDetail, pTitle;
    nsCOMPtr<nsIDOMElement> pTheDetail;
    nsCOMPtr<nsIDOMNode> pNode;
    rv = pFault->GetDetail(getter_AddRefs(pTheDetail));
    NS_ENSURE_SUCCESS(rv,rv);
    rv = pTheDetail->GetFirstChild(getter_AddRefs(pNode));
    NS_ENSURE_SUCCESS(rv,rv);
    if (pNode) {
      nsCOMPtr<nsIDOMNamedNodeMap> pAttributes;
      nsCOMPtr<nsIDOMNode> pAttribute, pFirstNode;
      nsAutoString pNodeValue;
      rv = pNode->GetFirstChild(getter_AddRefs(pFirstNode));
      NS_ENSURE_SUCCESS(rv,rv);
      if (pFirstNode) {
        pFirstNode->GetNodeValue(pNodeValue);
        NS_ENSURE_SUCCESS(rv,rv);
        pDetail  = pNodeValue;
      }
      pNode->GetAttributes(getter_AddRefs(pAttributes));
      NS_ENSURE_SUCCESS(rv,rv);
      pAttributes->GetNamedItem(NS_LITERAL_STRING("code"), getter_AddRefs(pAttribute));
      NS_ENSURE_SUCCESS(rv,rv);
      if (pAttribute) {
        pAttribute->GetNodeValue(pNodeValue);
        NS_ENSURE_SUCCESS(rv,rv);
        pDetail += NS_LITERAL_STRING("\n(Erreur ");
        pDetail += pNodeValue;
        pDetail += NS_LITERAL_STRING(")");
      }
    } else pDetail = NS_LITERAL_STRING("Erreur sans message.");
    pFaute = pDetail;
    rv = pFault->GetFaultString(pTitle);
    NS_ENSURE_SUCCESS(rv,rv);
    nsCOMPtr<nsIPrompt> pPrompt= do_GetService(NS_DEFAULTPROMPT_CONTRACTID, &rv);
    NS_ENSURE_SUCCESS(rv,rv);
    pPrompt->Alert(ToNewUnicode(pTitle), ToNewUnicode(pFaute));
    return NS_ERROR_FAILURE;
  }

  nsISOAPParameter ** pParameters;
  PRUint32 pTotal;
  rv = aResponse->GetParameters(PR_FALSE, &pTotal, &pParameters);
  NS_ENSURE_SUCCESS(rv,rv);
  if (pTotal!=1) {
    nsCOMPtr<nsIPrompt> pPrompt= do_GetService(NS_DEFAULTPROMPT_CONTRACTID, &rv);
    NS_ENSURE_SUCCESS(rv,rv);
    pPrompt->Alert(ToNewUnicode(NS_LITERAL_CSTRING("Erreur système")), ToNewUnicode(NS_LITERAL_CSTRING("Le nombre total de paramètres reçus est incorrect.")));
    return NS_ERROR_FAILURE;
  }

  nsAutoString pText;
  nsCOMArray<nsIVariant> pArray;
  nsCOMPtr<nsIWritableVariant> pVariant;
  PRUint32 pLsize=0, pCsize=0;
  PRUint32 pLineIndex, pColIndex;
  PRUint16 pNodeType;
  nsCOMPtr<nsIDOMElement> pResult;
  nsCOMPtr<nsIDOMNodeList> pLines, pValues;
  nsCOMPtr<nsIDOMNode> pLine, pValue, pContent;
  rv = pParameters[0]->GetElement(getter_AddRefs(pResult));
  NS_ENSURE_SUCCESS(rv,rv);
  rv = pResult->GetChildNodes(getter_AddRefs(pLines));
  NS_ENSURE_SUCCESS(rv,rv);
  pLines->GetLength(&pLsize);
  for (pLineIndex=0;pLineIndex<pLsize;pLineIndex++) {
    do {
      rv = pLines->Item(pLineIndex, getter_AddRefs(pLine));
      NS_ENSURE_SUCCESS(rv,rv);
      pLine->GetNodeType(&pNodeType);
      if (pNodeType!=nsIDOMNode::ELEMENT_NODE) pLineIndex++;
    } while (pLineIndex<pLsize && pNodeType!=nsIDOMNode::ELEMENT_NODE);
    if (pLineIndex>=pLsize) break;
    rv = pLine->GetChildNodes(getter_AddRefs(pValues));
    NS_ENSURE_SUCCESS(rv,rv);
    pValues->GetLength(&pCsize);
    for (pColIndex=0;pColIndex<pCsize;pColIndex++) {
      do {
        rv = pValues->Item(pColIndex, getter_AddRefs(pValue));
        NS_ENSURE_SUCCESS(rv,rv);
        pValue->GetNodeType(&pNodeType);
        if (pNodeType!=nsIDOMNode::ELEMENT_NODE) pColIndex++;
      } while (pColIndex<pCsize && pNodeType!=nsIDOMNode::ELEMENT_NODE);
      if (pColIndex>=pCsize) break;
      rv = pValue->GetFirstChild(getter_AddRefs(pContent));
      NS_ENSURE_SUCCESS(rv,rv);
      pVariant = do_CreateInstance(NS_VARIANT_CONTRACTID, &rv);
      NS_ENSURE_SUCCESS(rv,rv);
      if (pContent) {
        rv = pContent->GetNodeValue(pText);
        NS_ENSURE_SUCCESS(rv,rv);
        pVariant->SetAsAString(pText);
        printf("%s|",ToNewCString(pText));
      } else {
        pVariant->SetAsAString(NS_LITERAL_STRING(""));
      }
      rv = pArray.AppendObject(pVariant);
    }
  }
  rv = mComponent->TreatP00A2(pArray, pLsize, pCsize, mKey);
  return rv;
}


/* Generated by Pygmalion */


NS_IMPL_ISUPPORTS1(mozListenerP00A3, nsISOAPResponseListener)

mozListenerP00A3::mozListenerP00A3(mozC02gestsea* aComponent, const nsACString & aSearch)
{
  mComponent = aComponent;
  mSearch = aSearch;
}
mozListenerP00A3::~mozListenerP00A3()
{
}

NS_IMETHODIMP mozListenerP00A3::HandleResponse(nsISOAPResponse *aResponse, nsISOAPCall *aCall, PRUint32 aStatus, PRBool aLast, PRBool *aReturn)
{
  nsresult rv;
  nsCOMPtr<nsISOAPFault> pFault;
  rv = aResponse->GetFault(getter_AddRefs(pFault));
  NS_ENSURE_SUCCESS(rv, rv);
  if (pFault) {
    nsAutoString pFaute, pDetail, pTitle;
    nsCOMPtr<nsIDOMElement> pTheDetail;
    nsCOMPtr<nsIDOMNode> pNode;
    rv = pFault->GetDetail(getter_AddRefs(pTheDetail));
    NS_ENSURE_SUCCESS(rv,rv);
    rv = pTheDetail->GetFirstChild(getter_AddRefs(pNode));
    NS_ENSURE_SUCCESS(rv,rv);
    if (pNode) {
      nsCOMPtr<nsIDOMNamedNodeMap> pAttributes;
      nsCOMPtr<nsIDOMNode> pAttribute, pFirstNode;
      nsAutoString pNodeValue;
      rv = pNode->GetFirstChild(getter_AddRefs(pFirstNode));
      NS_ENSURE_SUCCESS(rv,rv);
      if (pFirstNode) {
        pFirstNode->GetNodeValue(pNodeValue);
        NS_ENSURE_SUCCESS(rv,rv);
        pDetail  = pNodeValue;
      }
      pNode->GetAttributes(getter_AddRefs(pAttributes));
      NS_ENSURE_SUCCESS(rv,rv);
      pAttributes->GetNamedItem(NS_LITERAL_STRING("code"), getter_AddRefs(pAttribute));
      NS_ENSURE_SUCCESS(rv,rv);
      if (pAttribute) {
        pAttribute->GetNodeValue(pNodeValue);
        NS_ENSURE_SUCCESS(rv,rv);
        pDetail += NS_LITERAL_STRING("\n(Erreur ");
        pDetail += pNodeValue;
        pDetail += NS_LITERAL_STRING(")");
      }
    } else pDetail = NS_LITERAL_STRING("Erreur sans message.");
    pFaute = pDetail;
    rv = pFault->GetFaultString(pTitle);
    NS_ENSURE_SUCCESS(rv,rv);
    nsCOMPtr<nsIPrompt> pPrompt= do_GetService(NS_DEFAULTPROMPT_CONTRACTID, &rv);
    NS_ENSURE_SUCCESS(rv,rv);
    pPrompt->Alert(ToNewUnicode(pTitle), ToNewUnicode(pFaute));
    return NS_ERROR_FAILURE;
  }

  nsISOAPParameter ** pParameters;
  PRUint32 pTotal;
  rv = aResponse->GetParameters(PR_FALSE, &pTotal, &pParameters);
  NS_ENSURE_SUCCESS(rv,rv);
  if (pTotal!=1) {
    nsCOMPtr<nsIPrompt> pPrompt= do_GetService(NS_DEFAULTPROMPT_CONTRACTID, &rv);
    NS_ENSURE_SUCCESS(rv,rv);
    pPrompt->Alert(ToNewUnicode(NS_LITERAL_CSTRING("Erreur système")), ToNewUnicode(NS_LITERAL_CSTRING("Le nombre total de paramètres reçus est incorrect.")));
    return NS_ERROR_FAILURE;
  }

  nsAutoString pText;
  nsCOMArray<nsIVariant> pArray;
  nsCOMPtr<nsIWritableVariant> pVariant;
  PRUint32 pLsize=0, pCsize=0;
  PRUint32 pLineIndex, pColIndex;
  PRUint16 pNodeType;
  nsCOMPtr<nsIDOMElement> pResult;
  nsCOMPtr<nsIDOMNodeList> pLines, pValues;
  nsCOMPtr<nsIDOMNode> pLine, pValue, pContent;
  rv = pParameters[0]->GetElement(getter_AddRefs(pResult));
  NS_ENSURE_SUCCESS(rv,rv);
  rv = pResult->GetChildNodes(getter_AddRefs(pLines));
  NS_ENSURE_SUCCESS(rv,rv);
  pLines->GetLength(&pLsize);
  for (pLineIndex=0;pLineIndex<pLsize;pLineIndex++) {
    do {
      rv = pLines->Item(pLineIndex, getter_AddRefs(pLine));
      NS_ENSURE_SUCCESS(rv,rv);
      pLine->GetNodeType(&pNodeType);
      if (pNodeType!=nsIDOMNode::ELEMENT_NODE) pLineIndex++;
    } while (pLineIndex<pLsize && pNodeType!=nsIDOMNode::ELEMENT_NODE);
    if (pLineIndex>=pLsize) break;
    rv = pLine->GetChildNodes(getter_AddRefs(pValues));
    NS_ENSURE_SUCCESS(rv,rv);
    pValues->GetLength(&pCsize);
    for (pColIndex=0;pColIndex<pCsize;pColIndex++) {
      do {
        rv = pValues->Item(pColIndex, getter_AddRefs(pValue));
        NS_ENSURE_SUCCESS(rv,rv);
        pValue->GetNodeType(&pNodeType);
        if (pNodeType!=nsIDOMNode::ELEMENT_NODE) pColIndex++;
      } while (pColIndex<pCsize && pNodeType!=nsIDOMNode::ELEMENT_NODE);
      if (pColIndex>=pCsize) break;
      rv = pValue->GetFirstChild(getter_AddRefs(pContent));
      NS_ENSURE_SUCCESS(rv,rv);
      pVariant = do_CreateInstance(NS_VARIANT_CONTRACTID, &rv);
      NS_ENSURE_SUCCESS(rv,rv);
      if (pContent) {
        rv = pContent->GetNodeValue(pText);
        NS_ENSURE_SUCCESS(rv,rv);
        pVariant->SetAsAString(pText);
        printf("%s|",ToNewCString(pText));
      } else {
        pVariant->SetAsAString(NS_LITERAL_STRING(""));
      }
      rv = pArray.AppendObject(pVariant);
    }
  }
  rv = mComponent->TreatP00A3(pArray, pLsize, pCsize, mSearch);
  return rv;
}


/* Generated by Pygmalion */


NS_IMPL_ISUPPORTS1(mozListenerP00A4, nsISOAPResponseListener)

mozListenerP00A4::mozListenerP00A4(mozC02gestsea* aComponent, const nsACString & aSearch)
{
  mComponent = aComponent;
  mSearch = aSearch;
}
mozListenerP00A4::~mozListenerP00A4()
{
}

NS_IMETHODIMP mozListenerP00A4::HandleResponse(nsISOAPResponse *aResponse, nsISOAPCall *aCall, PRUint32 aStatus, PRBool aLast, PRBool *aReturn)
{
  nsresult rv;
  nsCOMPtr<nsISOAPFault> pFault;
  rv = aResponse->GetFault(getter_AddRefs(pFault));
  NS_ENSURE_SUCCESS(rv, rv);
  if (pFault) {
    nsAutoString pFaute, pDetail, pTitle;
    nsCOMPtr<nsIDOMElement> pTheDetail;
    nsCOMPtr<nsIDOMNode> pNode;
    rv = pFault->GetDetail(getter_AddRefs(pTheDetail));
    NS_ENSURE_SUCCESS(rv,rv);
    rv = pTheDetail->GetFirstChild(getter_AddRefs(pNode));
    NS_ENSURE_SUCCESS(rv,rv);
    if (pNode) {
      nsCOMPtr<nsIDOMNamedNodeMap> pAttributes;
      nsCOMPtr<nsIDOMNode> pAttribute, pFirstNode;
      nsAutoString pNodeValue;
      rv = pNode->GetFirstChild(getter_AddRefs(pFirstNode));
      NS_ENSURE_SUCCESS(rv,rv);
      if (pFirstNode) {
        pFirstNode->GetNodeValue(pNodeValue);
        NS_ENSURE_SUCCESS(rv,rv);
        pDetail  = pNodeValue;
      }
      pNode->GetAttributes(getter_AddRefs(pAttributes));
      NS_ENSURE_SUCCESS(rv,rv);
      pAttributes->GetNamedItem(NS_LITERAL_STRING("code"), getter_AddRefs(pAttribute));
      NS_ENSURE_SUCCESS(rv,rv);
      if (pAttribute) {
        pAttribute->GetNodeValue(pNodeValue);
        NS_ENSURE_SUCCESS(rv,rv);
        pDetail += NS_LITERAL_STRING("\n(Erreur ");
        pDetail += pNodeValue;
        pDetail += NS_LITERAL_STRING(")");
      }
    } else pDetail = NS_LITERAL_STRING("Erreur sans message.");
    pFaute = pDetail;
    rv = pFault->GetFaultString(pTitle);
    NS_ENSURE_SUCCESS(rv,rv);
    nsCOMPtr<nsIPrompt> pPrompt= do_GetService(NS_DEFAULTPROMPT_CONTRACTID, &rv);
    NS_ENSURE_SUCCESS(rv,rv);
    pPrompt->Alert(ToNewUnicode(pTitle), ToNewUnicode(pFaute));
    return NS_ERROR_FAILURE;
  }

  nsISOAPParameter ** pParameters;
  PRUint32 pTotal;
  rv = aResponse->GetParameters(PR_FALSE, &pTotal, &pParameters);
  NS_ENSURE_SUCCESS(rv,rv);
  if (pTotal!=1) {
    nsCOMPtr<nsIPrompt> pPrompt= do_GetService(NS_DEFAULTPROMPT_CONTRACTID, &rv);
    NS_ENSURE_SUCCESS(rv,rv);
    pPrompt->Alert(ToNewUnicode(NS_LITERAL_CSTRING("Erreur système")), ToNewUnicode(NS_LITERAL_CSTRING("Le nombre total de paramètres reçus est incorrect.")));
    return NS_ERROR_FAILURE;
  }

  nsAutoString pText;
  nsCOMArray<nsIVariant> pArray;
  nsCOMPtr<nsIWritableVariant> pVariant;
  PRUint32 pLsize=0, pCsize=0;
  PRUint32 pLineIndex, pColIndex;
  PRUint16 pNodeType;
  nsCOMPtr<nsIDOMElement> pResult;
  nsCOMPtr<nsIDOMNodeList> pLines, pValues;
  nsCOMPtr<nsIDOMNode> pLine, pValue, pContent;
  rv = pParameters[0]->GetElement(getter_AddRefs(pResult));
  NS_ENSURE_SUCCESS(rv,rv);
  rv = pResult->GetChildNodes(getter_AddRefs(pLines));
  NS_ENSURE_SUCCESS(rv,rv);
  pLines->GetLength(&pLsize);
  for (pLineIndex=0;pLineIndex<pLsize;pLineIndex++) {
    do {
      rv = pLines->Item(pLineIndex, getter_AddRefs(pLine));
      NS_ENSURE_SUCCESS(rv,rv);
      pLine->GetNodeType(&pNodeType);
      if (pNodeType!=nsIDOMNode::ELEMENT_NODE) pLineIndex++;
    } while (pLineIndex<pLsize && pNodeType!=nsIDOMNode::ELEMENT_NODE);
    if (pLineIndex>=pLsize) break;
    rv = pLine->GetChildNodes(getter_AddRefs(pValues));
    NS_ENSURE_SUCCESS(rv,rv);
    pValues->GetLength(&pCsize);
    for (pColIndex=0;pColIndex<pCsize;pColIndex++) {
      do {
        rv = pValues->Item(pColIndex, getter_AddRefs(pValue));
        NS_ENSURE_SUCCESS(rv,rv);
        pValue->GetNodeType(&pNodeType);
        if (pNodeType!=nsIDOMNode::ELEMENT_NODE) pColIndex++;
      } while (pColIndex<pCsize && pNodeType!=nsIDOMNode::ELEMENT_NODE);
      if (pColIndex>=pCsize) break;
      rv = pValue->GetFirstChild(getter_AddRefs(pContent));
      NS_ENSURE_SUCCESS(rv,rv);
      pVariant = do_CreateInstance(NS_VARIANT_CONTRACTID, &rv);
      NS_ENSURE_SUCCESS(rv,rv);
      if (pContent) {
        rv = pContent->GetNodeValue(pText);
        NS_ENSURE_SUCCESS(rv,rv);
        pVariant->SetAsAString(pText);
        printf("%s|",ToNewCString(pText));
      } else {
        pVariant->SetAsAString(NS_LITERAL_STRING(""));
      }
      rv = pArray.AppendObject(pVariant);
    }
  }
  rv = mComponent->TreatP00A4(pArray, pLsize, pCsize, mSearch);
  return rv;
}


/* Generated by Pygmalion */


NS_IMPL_ISUPPORTS1(mozListenerP00A5, nsISOAPResponseListener)

mozListenerP00A5::mozListenerP00A5(mozC02gestsea* aComponent, const nsAString & aKey)
{
  mComponent = aComponent;
  mKey = aKey;
}
mozListenerP00A5::~mozListenerP00A5()
{
}

NS_IMETHODIMP mozListenerP00A5::HandleResponse(nsISOAPResponse *aResponse, nsISOAPCall *aCall, PRUint32 aStatus, PRBool aLast, PRBool *aReturn)
{
  nsresult rv;
  nsCOMPtr<nsISOAPFault> pFault;
  rv = aResponse->GetFault(getter_AddRefs(pFault));
  NS_ENSURE_SUCCESS(rv, rv);
  if (pFault) {
    nsAutoString pFaute, pDetail, pTitle;
    nsCOMPtr<nsIDOMElement> pTheDetail;
    nsCOMPtr<nsIDOMNode> pNode;
    rv = pFault->GetDetail(getter_AddRefs(pTheDetail));
    NS_ENSURE_SUCCESS(rv,rv);
    rv = pTheDetail->GetFirstChild(getter_AddRefs(pNode));
    NS_ENSURE_SUCCESS(rv,rv);
    if (pNode) {
      nsCOMPtr<nsIDOMNamedNodeMap> pAttributes;
      nsCOMPtr<nsIDOMNode> pAttribute, pFirstNode;
      nsAutoString pNodeValue;
      rv = pNode->GetFirstChild(getter_AddRefs(pFirstNode));
      NS_ENSURE_SUCCESS(rv,rv);
      if (pFirstNode) {
        pFirstNode->GetNodeValue(pNodeValue);
        NS_ENSURE_SUCCESS(rv,rv);
        pDetail  = pNodeValue;
      }
      pNode->GetAttributes(getter_AddRefs(pAttributes));
      NS_ENSURE_SUCCESS(rv,rv);
      pAttributes->GetNamedItem(NS_LITERAL_STRING("code"), getter_AddRefs(pAttribute));
      NS_ENSURE_SUCCESS(rv,rv);
      if (pAttribute) {
        pAttribute->GetNodeValue(pNodeValue);
        NS_ENSURE_SUCCESS(rv,rv);
        pDetail += NS_LITERAL_STRING("\n(Erreur ");
        pDetail += pNodeValue;
        pDetail += NS_LITERAL_STRING(")");
      }
    } else pDetail = NS_LITERAL_STRING("Erreur sans message.");
    pFaute = pDetail;
    rv = pFault->GetFaultString(pTitle);
    NS_ENSURE_SUCCESS(rv,rv);
    nsCOMPtr<nsIPrompt> pPrompt= do_GetService(NS_DEFAULTPROMPT_CONTRACTID, &rv);
    NS_ENSURE_SUCCESS(rv,rv);
    pPrompt->Alert(ToNewUnicode(pTitle), ToNewUnicode(pFaute));
    return NS_ERROR_FAILURE;
  }

  nsISOAPParameter ** pParameters;
  PRUint32 pTotal;
  rv = aResponse->GetParameters(PR_FALSE, &pTotal, &pParameters);
  NS_ENSURE_SUCCESS(rv,rv);
  if (pTotal!=1) {
    nsCOMPtr<nsIPrompt> pPrompt= do_GetService(NS_DEFAULTPROMPT_CONTRACTID, &rv);
    NS_ENSURE_SUCCESS(rv,rv);
    pPrompt->Alert(ToNewUnicode(NS_LITERAL_CSTRING("Erreur système")), ToNewUnicode(NS_LITERAL_CSTRING("Le nombre total de paramètres reçus est incorrect.")));
    return NS_ERROR_FAILURE;
  }

  nsAutoString pText;
  nsCOMArray<nsIVariant> pArray;
  nsCOMPtr<nsIWritableVariant> pVariant;
  PRUint32 pLsize=0, pCsize=0;
  PRUint32 pLineIndex, pColIndex;
  PRUint16 pNodeType;
  nsCOMPtr<nsIDOMElement> pResult;
  nsCOMPtr<nsIDOMNodeList> pLines, pValues;
  nsCOMPtr<nsIDOMNode> pLine, pValue, pContent;
  rv = pParameters[0]->GetElement(getter_AddRefs(pResult));
  NS_ENSURE_SUCCESS(rv,rv);
  rv = pResult->GetChildNodes(getter_AddRefs(pLines));
  NS_ENSURE_SUCCESS(rv,rv);
  pLines->GetLength(&pLsize);
  for (pLineIndex=0;pLineIndex<pLsize;pLineIndex++) {
    do {
      rv = pLines->Item(pLineIndex, getter_AddRefs(pLine));
      NS_ENSURE_SUCCESS(rv,rv);
      pLine->GetNodeType(&pNodeType);
      if (pNodeType!=nsIDOMNode::ELEMENT_NODE) pLineIndex++;
    } while (pLineIndex<pLsize && pNodeType!=nsIDOMNode::ELEMENT_NODE);
    if (pLineIndex>=pLsize) break;
    rv = pLine->GetChildNodes(getter_AddRefs(pValues));
    NS_ENSURE_SUCCESS(rv,rv);
    pValues->GetLength(&pCsize);
    for (pColIndex=0;pColIndex<pCsize;pColIndex++) {
      do {
        rv = pValues->Item(pColIndex, getter_AddRefs(pValue));
        NS_ENSURE_SUCCESS(rv,rv);
        pValue->GetNodeType(&pNodeType);
        if (pNodeType!=nsIDOMNode::ELEMENT_NODE) pColIndex++;
      } while (pColIndex<pCsize && pNodeType!=nsIDOMNode::ELEMENT_NODE);
      if (pColIndex>=pCsize) break;
      rv = pValue->GetFirstChild(getter_AddRefs(pContent));
      NS_ENSURE_SUCCESS(rv,rv);
      pVariant = do_CreateInstance(NS_VARIANT_CONTRACTID, &rv);
      NS_ENSURE_SUCCESS(rv,rv);
      if (pContent) {
        rv = pContent->GetNodeValue(pText);
        NS_ENSURE_SUCCESS(rv,rv);
        pVariant->SetAsAString(pText);
        printf("%s|",ToNewCString(pText));
      } else {
        pVariant->SetAsAString(NS_LITERAL_STRING(""));
      }
      rv = pArray.AppendObject(pVariant);
    }
  }
  rv = mComponent->TreatP00A5(pArray, pLsize, pCsize, mKey);
  return rv;
}


/* Generated by Pygmalion */


NS_IMPL_ISUPPORTS1(mozListenerP00A6, nsISOAPResponseListener)

mozListenerP00A6::mozListenerP00A6(mozC02gestsea* aComponent, const nsAString & aKey, const nsACString & aField1, const nsACString & aField2, const nsACString & aField3, const nsACString & aField4, const nsACString & aField5, const nsACString & aField6, const nsACString & aField7)
{
  mComponent = aComponent;
  mKey = aKey;
  mField1 = aField1;
  mField2 = aField2;
  mField3 = aField3;
  mField4 = aField4;
  mField5 = aField5;
  mField6 = aField6;
  mField7 = aField7;
}
mozListenerP00A6::~mozListenerP00A6()
{
}

NS_IMETHODIMP mozListenerP00A6::HandleResponse(nsISOAPResponse *aResponse, nsISOAPCall *aCall, PRUint32 aStatus, PRBool aLast, PRBool *aReturn)
{
  nsresult rv;
  nsCOMPtr<nsISOAPFault> pFault;
  rv = aResponse->GetFault(getter_AddRefs(pFault));
  NS_ENSURE_SUCCESS(rv, rv);
  if (pFault) {
    nsAutoString pFaute, pDetail, pTitle;
    nsCOMPtr<nsIDOMElement> pTheDetail;
    nsCOMPtr<nsIDOMNode> pNode;
    rv = pFault->GetDetail(getter_AddRefs(pTheDetail));
    NS_ENSURE_SUCCESS(rv,rv);
    rv = pTheDetail->GetFirstChild(getter_AddRefs(pNode));
    NS_ENSURE_SUCCESS(rv,rv);
    if (pNode) {
      nsCOMPtr<nsIDOMNamedNodeMap> pAttributes;
      nsCOMPtr<nsIDOMNode> pAttribute, pFirstNode;
      nsAutoString pNodeValue;
      rv = pNode->GetFirstChild(getter_AddRefs(pFirstNode));
      NS_ENSURE_SUCCESS(rv,rv);
      if (pFirstNode) {
        pFirstNode->GetNodeValue(pNodeValue);
        NS_ENSURE_SUCCESS(rv,rv);
        pDetail  = pNodeValue;
      }
      pNode->GetAttributes(getter_AddRefs(pAttributes));
      NS_ENSURE_SUCCESS(rv,rv);
      pAttributes->GetNamedItem(NS_LITERAL_STRING("code"), getter_AddRefs(pAttribute));
      NS_ENSURE_SUCCESS(rv,rv);
      if (pAttribute) {
        pAttribute->GetNodeValue(pNodeValue);
        NS_ENSURE_SUCCESS(rv,rv);
        pDetail += NS_LITERAL_STRING("\n(Erreur ");
        pDetail += pNodeValue;
        pDetail += NS_LITERAL_STRING(")");
      }
    } else pDetail = NS_LITERAL_STRING("Erreur sans message.");
    pFaute = pDetail;
    rv = pFault->GetFaultString(pTitle);
    NS_ENSURE_SUCCESS(rv,rv);
    nsCOMPtr<nsIPrompt> pPrompt= do_GetService(NS_DEFAULTPROMPT_CONTRACTID, &rv);
    NS_ENSURE_SUCCESS(rv,rv);
    pPrompt->Alert(ToNewUnicode(pTitle), ToNewUnicode(pFaute));
    return NS_ERROR_FAILURE;
  }

  nsISOAPParameter ** pParameters;
  PRUint32 pTotal;
  rv = aResponse->GetParameters(PR_FALSE, &pTotal, &pParameters);
  NS_ENSURE_SUCCESS(rv,rv);
  if (pTotal!=1) {
    nsCOMPtr<nsIPrompt> pPrompt= do_GetService(NS_DEFAULTPROMPT_CONTRACTID, &rv);
    NS_ENSURE_SUCCESS(rv,rv);
    pPrompt->Alert(ToNewUnicode(NS_LITERAL_CSTRING("Erreur système")), ToNewUnicode(NS_LITERAL_CSTRING("Le nombre total de paramètres reçus est incorrect.")));
    return NS_ERROR_FAILURE;
  }

  nsAutoString pText;
  nsCOMPtr<nsIVariant> pValue;
  rv = pParameters[0]->GetValue(getter_AddRefs(pValue));
  NS_ENSURE_SUCCESS(rv,rv);
  rv = pValue->GetAsAString(pText);
  NS_ENSURE_SUCCESS(rv,rv);
  rv = mComponent->TreatP00A6(pText, mKey, mField1, mField2, mField3, mField4, mField5, mField6, mField7);
  return rv;
}


/* Generated by Pygmalion */


NS_IMPL_ISUPPORTS1(mozListenerP00A7, nsISOAPResponseListener)

mozListenerP00A7::mozListenerP00A7(mozC02gestsea* aComponent)
{
  mComponent = aComponent;
}
mozListenerP00A7::~mozListenerP00A7()
{
}

NS_IMETHODIMP mozListenerP00A7::HandleResponse(nsISOAPResponse *aResponse, nsISOAPCall *aCall, PRUint32 aStatus, PRBool aLast, PRBool *aReturn)
{
  nsresult rv;
  nsCOMPtr<nsISOAPFault> pFault;
  rv = aResponse->GetFault(getter_AddRefs(pFault));
  NS_ENSURE_SUCCESS(rv, rv);
  if (pFault) {
    nsAutoString pFaute, pDetail, pTitle;
    nsCOMPtr<nsIDOMElement> pTheDetail;
    nsCOMPtr<nsIDOMNode> pNode;
    rv = pFault->GetDetail(getter_AddRefs(pTheDetail));
    NS_ENSURE_SUCCESS(rv,rv);
    rv = pTheDetail->GetFirstChild(getter_AddRefs(pNode));
    NS_ENSURE_SUCCESS(rv,rv);
    if (pNode) {
      nsCOMPtr<nsIDOMNamedNodeMap> pAttributes;
      nsCOMPtr<nsIDOMNode> pAttribute, pFirstNode;
      nsAutoString pNodeValue;
      rv = pNode->GetFirstChild(getter_AddRefs(pFirstNode));
      NS_ENSURE_SUCCESS(rv,rv);
      if (pFirstNode) {
        pFirstNode->GetNodeValue(pNodeValue);
        NS_ENSURE_SUCCESS(rv,rv);
        pDetail  = pNodeValue;
      }
      pNode->GetAttributes(getter_AddRefs(pAttributes));
      NS_ENSURE_SUCCESS(rv,rv);
      pAttributes->GetNamedItem(NS_LITERAL_STRING("code"), getter_AddRefs(pAttribute));
      NS_ENSURE_SUCCESS(rv,rv);
      if (pAttribute) {
        pAttribute->GetNodeValue(pNodeValue);
        NS_ENSURE_SUCCESS(rv,rv);
        pDetail += NS_LITERAL_STRING("\n(Erreur ");
        pDetail += pNodeValue;
        pDetail += NS_LITERAL_STRING(")");
      }
    } else pDetail = NS_LITERAL_STRING("Erreur sans message.");
    pFaute = pDetail;
    rv = pFault->GetFaultString(pTitle);
    NS_ENSURE_SUCCESS(rv,rv);
    nsCOMPtr<nsIPrompt> pPrompt= do_GetService(NS_DEFAULTPROMPT_CONTRACTID, &rv);
    NS_ENSURE_SUCCESS(rv,rv);
    pPrompt->Alert(ToNewUnicode(pTitle), ToNewUnicode(pFaute));
    return NS_ERROR_FAILURE;
  }

  nsISOAPParameter ** pParameters;
  PRUint32 pTotal;
  rv = aResponse->GetParameters(PR_FALSE, &pTotal, &pParameters);
  NS_ENSURE_SUCCESS(rv,rv);
  if (pTotal!=1) {
    nsCOMPtr<nsIPrompt> pPrompt= do_GetService(NS_DEFAULTPROMPT_CONTRACTID, &rv);
    NS_ENSURE_SUCCESS(rv,rv);
    pPrompt->Alert(ToNewUnicode(NS_LITERAL_CSTRING("Erreur système")), ToNewUnicode(NS_LITERAL_CSTRING("Le nombre total de paramètres reçus est incorrect.")));
    return NS_ERROR_FAILURE;
  }

  nsAutoString pText;
  nsCOMArray<nsIVariant> pArray;
  nsCOMPtr<nsIWritableVariant> pVariant;
  PRUint32 pLsize=0, pCsize=0;
  PRUint32 pLineIndex, pColIndex;
  PRUint16 pNodeType;
  nsCOMPtr<nsIDOMElement> pResult;
  nsCOMPtr<nsIDOMNodeList> pLines, pValues;
  nsCOMPtr<nsIDOMNode> pLine, pValue, pContent;
  rv = pParameters[0]->GetElement(getter_AddRefs(pResult));
  NS_ENSURE_SUCCESS(rv,rv);
  rv = pResult->GetChildNodes(getter_AddRefs(pLines));
  NS_ENSURE_SUCCESS(rv,rv);
  pLines->GetLength(&pLsize);
  for (pLineIndex=0;pLineIndex<pLsize;pLineIndex++) {
    do {
      rv = pLines->Item(pLineIndex, getter_AddRefs(pLine));
      NS_ENSURE_SUCCESS(rv,rv);
      pLine->GetNodeType(&pNodeType);
      if (pNodeType!=nsIDOMNode::ELEMENT_NODE) pLineIndex++;
    } while (pLineIndex<pLsize && pNodeType!=nsIDOMNode::ELEMENT_NODE);
    if (pLineIndex>=pLsize) break;
    rv = pLine->GetChildNodes(getter_AddRefs(pValues));
    NS_ENSURE_SUCCESS(rv,rv);
    pValues->GetLength(&pCsize);
    for (pColIndex=0;pColIndex<pCsize;pColIndex++) {
      do {
        rv = pValues->Item(pColIndex, getter_AddRefs(pValue));
        NS_ENSURE_SUCCESS(rv,rv);
        pValue->GetNodeType(&pNodeType);
        if (pNodeType!=nsIDOMNode::ELEMENT_NODE) pColIndex++;
      } while (pColIndex<pCsize && pNodeType!=nsIDOMNode::ELEMENT_NODE);
      if (pColIndex>=pCsize) break;
      rv = pValue->GetFirstChild(getter_AddRefs(pContent));
      NS_ENSURE_SUCCESS(rv,rv);
      pVariant = do_CreateInstance(NS_VARIANT_CONTRACTID, &rv);
      NS_ENSURE_SUCCESS(rv,rv);
      if (pContent) {
        rv = pContent->GetNodeValue(pText);
        NS_ENSURE_SUCCESS(rv,rv);
        pVariant->SetAsAString(pText);
        printf("%s|",ToNewCString(pText));
      } else {
        pVariant->SetAsAString(NS_LITERAL_STRING(""));
      }
      rv = pArray.AppendObject(pVariant);
    }
  }
  rv = mComponent->TreatP00A7(pArray, pLsize, pCsize);
  return rv;
}


/* Generated by Pygmalion */


NS_IMPL_ISUPPORTS1(mozListenerP00A8, nsISOAPResponseListener)

mozListenerP00A8::mozListenerP00A8(mozC02gestsea* aComponent, const nsAString & aKey)
{
  mComponent = aComponent;
  mKey = aKey;
}
mozListenerP00A8::~mozListenerP00A8()
{
}

NS_IMETHODIMP mozListenerP00A8::HandleResponse(nsISOAPResponse *aResponse, nsISOAPCall *aCall, PRUint32 aStatus, PRBool aLast, PRBool *aReturn)
{
  nsresult rv;
  nsCOMPtr<nsISOAPFault> pFault;
  rv = aResponse->GetFault(getter_AddRefs(pFault));
  NS_ENSURE_SUCCESS(rv, rv);
  if (pFault) {
    nsAutoString pFaute, pDetail, pTitle;
    nsCOMPtr<nsIDOMElement> pTheDetail;
    nsCOMPtr<nsIDOMNode> pNode;
    rv = pFault->GetDetail(getter_AddRefs(pTheDetail));
    NS_ENSURE_SUCCESS(rv,rv);
    rv = pTheDetail->GetFirstChild(getter_AddRefs(pNode));
    NS_ENSURE_SUCCESS(rv,rv);
    if (pNode) {
      nsCOMPtr<nsIDOMNamedNodeMap> pAttributes;
      nsCOMPtr<nsIDOMNode> pAttribute, pFirstNode;
      nsAutoString pNodeValue;
      rv = pNode->GetFirstChild(getter_AddRefs(pFirstNode));
      NS_ENSURE_SUCCESS(rv,rv);
      if (pFirstNode) {
        pFirstNode->GetNodeValue(pNodeValue);
        NS_ENSURE_SUCCESS(rv,rv);
        pDetail  = pNodeValue;
      }
      pNode->GetAttributes(getter_AddRefs(pAttributes));
      NS_ENSURE_SUCCESS(rv,rv);
      pAttributes->GetNamedItem(NS_LITERAL_STRING("code"), getter_AddRefs(pAttribute));
      NS_ENSURE_SUCCESS(rv,rv);
      if (pAttribute) {
        pAttribute->GetNodeValue(pNodeValue);
        NS_ENSURE_SUCCESS(rv,rv);
        pDetail += NS_LITERAL_STRING("\n(Erreur ");
        pDetail += pNodeValue;
        pDetail += NS_LITERAL_STRING(")");
      }
    } else pDetail = NS_LITERAL_STRING("Erreur sans message.");
    pFaute = pDetail;
    rv = pFault->GetFaultString(pTitle);
    NS_ENSURE_SUCCESS(rv,rv);
    nsCOMPtr<nsIPrompt> pPrompt= do_GetService(NS_DEFAULTPROMPT_CONTRACTID, &rv);
    NS_ENSURE_SUCCESS(rv,rv);
    pPrompt->Alert(ToNewUnicode(pTitle), ToNewUnicode(pFaute));
    return NS_ERROR_FAILURE;
  }

  nsISOAPParameter ** pParameters;
  PRUint32 pTotal;
  rv = aResponse->GetParameters(PR_FALSE, &pTotal, &pParameters);
  NS_ENSURE_SUCCESS(rv,rv);
  if (pTotal!=1) {
    nsCOMPtr<nsIPrompt> pPrompt= do_GetService(NS_DEFAULTPROMPT_CONTRACTID, &rv);
    NS_ENSURE_SUCCESS(rv,rv);
    pPrompt->Alert(ToNewUnicode(NS_LITERAL_CSTRING("Erreur système")), ToNewUnicode(NS_LITERAL_CSTRING("Le nombre total de paramètres reçus est incorrect.")));
    return NS_ERROR_FAILURE;
  }

  nsAutoString pText;
  nsCOMPtr<nsIVariant> pValue;
  rv = pParameters[0]->GetValue(getter_AddRefs(pValue));
  NS_ENSURE_SUCCESS(rv,rv);
  rv = pValue->GetAsAString(pText);
  NS_ENSURE_SUCCESS(rv,rv);
  rv = mComponent->TreatP00A8(pText, mKey);
  return rv;
}


/* Generated by Pygmalion */


NS_IMPL_ISUPPORTS1(mozListenerP00A9, nsISOAPResponseListener)

mozListenerP00A9::mozListenerP00A9(mozC02gestsea* aComponent, const nsAString & aKey)
{
  mComponent = aComponent;
  mKey = aKey;
}
mozListenerP00A9::~mozListenerP00A9()
{
}

NS_IMETHODIMP mozListenerP00A9::HandleResponse(nsISOAPResponse *aResponse, nsISOAPCall *aCall, PRUint32 aStatus, PRBool aLast, PRBool *aReturn)
{
  nsresult rv;
  nsCOMPtr<nsISOAPFault> pFault;
  rv = aResponse->GetFault(getter_AddRefs(pFault));
  NS_ENSURE_SUCCESS(rv, rv);
  if (pFault) {
    nsAutoString pFaute, pDetail, pTitle;
    nsCOMPtr<nsIDOMElement> pTheDetail;
    nsCOMPtr<nsIDOMNode> pNode;
    rv = pFault->GetDetail(getter_AddRefs(pTheDetail));
    NS_ENSURE_SUCCESS(rv,rv);
    rv = pTheDetail->GetFirstChild(getter_AddRefs(pNode));
    NS_ENSURE_SUCCESS(rv,rv);
    if (pNode) {
      nsCOMPtr<nsIDOMNamedNodeMap> pAttributes;
      nsCOMPtr<nsIDOMNode> pAttribute, pFirstNode;
      nsAutoString pNodeValue;
      rv = pNode->GetFirstChild(getter_AddRefs(pFirstNode));
      NS_ENSURE_SUCCESS(rv,rv);
      if (pFirstNode) {
        pFirstNode->GetNodeValue(pNodeValue);
        NS_ENSURE_SUCCESS(rv,rv);
        pDetail  = pNodeValue;
      }
      pNode->GetAttributes(getter_AddRefs(pAttributes));
      NS_ENSURE_SUCCESS(rv,rv);
      pAttributes->GetNamedItem(NS_LITERAL_STRING("code"), getter_AddRefs(pAttribute));
      NS_ENSURE_SUCCESS(rv,rv);
      if (pAttribute) {
        pAttribute->GetNodeValue(pNodeValue);
        NS_ENSURE_SUCCESS(rv,rv);
        pDetail += NS_LITERAL_STRING("\n(Erreur ");
        pDetail += pNodeValue;
        pDetail += NS_LITERAL_STRING(")");
      }
    } else pDetail = NS_LITERAL_STRING("Erreur sans message.");
    pFaute = pDetail;
    rv = pFault->GetFaultString(pTitle);
    NS_ENSURE_SUCCESS(rv,rv);
    nsCOMPtr<nsIPrompt> pPrompt= do_GetService(NS_DEFAULTPROMPT_CONTRACTID, &rv);
    NS_ENSURE_SUCCESS(rv,rv);
    pPrompt->Alert(ToNewUnicode(pTitle), ToNewUnicode(pFaute));
    return NS_ERROR_FAILURE;
  }

  nsISOAPParameter ** pParameters;
  PRUint32 pTotal;
  rv = aResponse->GetParameters(PR_FALSE, &pTotal, &pParameters);
  NS_ENSURE_SUCCESS(rv,rv);
  if (pTotal!=1) {
    nsCOMPtr<nsIPrompt> pPrompt= do_GetService(NS_DEFAULTPROMPT_CONTRACTID, &rv);
    NS_ENSURE_SUCCESS(rv,rv);
    pPrompt->Alert(ToNewUnicode(NS_LITERAL_CSTRING("Erreur système")), ToNewUnicode(NS_LITERAL_CSTRING("Le nombre total de paramètres reçus est incorrect.")));
    return NS_ERROR_FAILURE;
  }

  nsAutoString pText;
  nsCOMArray<nsIVariant> pArray;
  nsCOMPtr<nsIWritableVariant> pVariant;
  PRUint32 pLsize=0, pCsize=0;
  PRUint32 pLineIndex, pColIndex;
  PRUint16 pNodeType;
  nsCOMPtr<nsIDOMElement> pResult;
  nsCOMPtr<nsIDOMNodeList> pLines, pValues;
  nsCOMPtr<nsIDOMNode> pLine, pValue, pContent;
  rv = pParameters[0]->GetElement(getter_AddRefs(pResult));
  NS_ENSURE_SUCCESS(rv,rv);
  rv = pResult->GetChildNodes(getter_AddRefs(pLines));
  NS_ENSURE_SUCCESS(rv,rv);
  pLines->GetLength(&pLsize);
  for (pLineIndex=0;pLineIndex<pLsize;pLineIndex++) {
    do {
      rv = pLines->Item(pLineIndex, getter_AddRefs(pLine));
      NS_ENSURE_SUCCESS(rv,rv);
      pLine->GetNodeType(&pNodeType);
      if (pNodeType!=nsIDOMNode::ELEMENT_NODE) pLineIndex++;
    } while (pLineIndex<pLsize && pNodeType!=nsIDOMNode::ELEMENT_NODE);
    if (pLineIndex>=pLsize) break;
    rv = pLine->GetChildNodes(getter_AddRefs(pValues));
    NS_ENSURE_SUCCESS(rv,rv);
    pValues->GetLength(&pCsize);
    for (pColIndex=0;pColIndex<pCsize;pColIndex++) {
      do {
        rv = pValues->Item(pColIndex, getter_AddRefs(pValue));
        NS_ENSURE_SUCCESS(rv,rv);
        pValue->GetNodeType(&pNodeType);
        if (pNodeType!=nsIDOMNode::ELEMENT_NODE) pColIndex++;
      } while (pColIndex<pCsize && pNodeType!=nsIDOMNode::ELEMENT_NODE);
      if (pColIndex>=pCsize) break;
      rv = pValue->GetFirstChild(getter_AddRefs(pContent));
      NS_ENSURE_SUCCESS(rv,rv);
      pVariant = do_CreateInstance(NS_VARIANT_CONTRACTID, &rv);
      NS_ENSURE_SUCCESS(rv,rv);
      if (pContent) {
        rv = pContent->GetNodeValue(pText);
        NS_ENSURE_SUCCESS(rv,rv);
        pVariant->SetAsAString(pText);
        printf("%s|",ToNewCString(pText));
      } else {
        pVariant->SetAsAString(NS_LITERAL_STRING(""));
      }
      rv = pArray.AppendObject(pVariant);
    }
  }
  rv = mComponent->TreatP00A9(pArray, pLsize, pCsize, mKey);
  return rv;
}


/* Generated by Pygmalion */


NS_IMPL_ISUPPORTS1(mozListenerP00AA, nsISOAPResponseListener)

mozListenerP00AA::mozListenerP00AA(mozC02gestsea* aComponent, const nsAString & aKey)
{
  mComponent = aComponent;
  mKey = aKey;
}
mozListenerP00AA::~mozListenerP00AA()
{
}

NS_IMETHODIMP mozListenerP00AA::HandleResponse(nsISOAPResponse *aResponse, nsISOAPCall *aCall, PRUint32 aStatus, PRBool aLast, PRBool *aReturn)
{
  nsresult rv;
  nsCOMPtr<nsISOAPFault> pFault;
  rv = aResponse->GetFault(getter_AddRefs(pFault));
  NS_ENSURE_SUCCESS(rv, rv);
  if (pFault) {
    nsAutoString pFaute, pDetail, pTitle;
    nsCOMPtr<nsIDOMElement> pTheDetail;
    nsCOMPtr<nsIDOMNode> pNode;
    rv = pFault->GetDetail(getter_AddRefs(pTheDetail));
    NS_ENSURE_SUCCESS(rv,rv);
    rv = pTheDetail->GetFirstChild(getter_AddRefs(pNode));
    NS_ENSURE_SUCCESS(rv,rv);
    if (pNode) {
      nsCOMPtr<nsIDOMNamedNodeMap> pAttributes;
      nsCOMPtr<nsIDOMNode> pAttribute, pFirstNode;
      nsAutoString pNodeValue;
      rv = pNode->GetFirstChild(getter_AddRefs(pFirstNode));
      NS_ENSURE_SUCCESS(rv,rv);
      if (pFirstNode) {
        pFirstNode->GetNodeValue(pNodeValue);
        NS_ENSURE_SUCCESS(rv,rv);
        pDetail  = pNodeValue;
      }
      pNode->GetAttributes(getter_AddRefs(pAttributes));
      NS_ENSURE_SUCCESS(rv,rv);
      pAttributes->GetNamedItem(NS_LITERAL_STRING("code"), getter_AddRefs(pAttribute));
      NS_ENSURE_SUCCESS(rv,rv);
      if (pAttribute) {
        pAttribute->GetNodeValue(pNodeValue);
        NS_ENSURE_SUCCESS(rv,rv);
        pDetail += NS_LITERAL_STRING("\n(Erreur ");
        pDetail += pNodeValue;
        pDetail += NS_LITERAL_STRING(")");
      }
    } else pDetail = NS_LITERAL_STRING("Erreur sans message.");
    pFaute = pDetail;
    rv = pFault->GetFaultString(pTitle);
    NS_ENSURE_SUCCESS(rv,rv);
    nsCOMPtr<nsIPrompt> pPrompt= do_GetService(NS_DEFAULTPROMPT_CONTRACTID, &rv);
    NS_ENSURE_SUCCESS(rv,rv);
    pPrompt->Alert(ToNewUnicode(pTitle), ToNewUnicode(pFaute));
    return NS_ERROR_FAILURE;
  }

  nsISOAPParameter ** pParameters;
  PRUint32 pTotal;
  rv = aResponse->GetParameters(PR_FALSE, &pTotal, &pParameters);
  NS_ENSURE_SUCCESS(rv,rv);
  if (pTotal!=1) {
    nsCOMPtr<nsIPrompt> pPrompt= do_GetService(NS_DEFAULTPROMPT_CONTRACTID, &rv);
    NS_ENSURE_SUCCESS(rv,rv);
    pPrompt->Alert(ToNewUnicode(NS_LITERAL_CSTRING("Erreur système")), ToNewUnicode(NS_LITERAL_CSTRING("Le nombre total de paramètres reçus est incorrect.")));
    return NS_ERROR_FAILURE;
  }

  nsAutoString pText;
  nsCOMArray<nsIVariant> pArray;
  nsCOMPtr<nsIWritableVariant> pVariant;
  PRUint32 pLsize=0, pCsize=0;
  PRUint32 pLineIndex, pColIndex;
  PRUint16 pNodeType;
  nsCOMPtr<nsIDOMElement> pResult;
  nsCOMPtr<nsIDOMNodeList> pLines, pValues;
  nsCOMPtr<nsIDOMNode> pLine, pValue, pContent;
  rv = pParameters[0]->GetElement(getter_AddRefs(pResult));
  NS_ENSURE_SUCCESS(rv,rv);
  rv = pResult->GetChildNodes(getter_AddRefs(pLines));
  NS_ENSURE_SUCCESS(rv,rv);
  pLines->GetLength(&pLsize);
  for (pLineIndex=0;pLineIndex<pLsize;pLineIndex++) {
    do {
      rv = pLines->Item(pLineIndex, getter_AddRefs(pLine));
      NS_ENSURE_SUCCESS(rv,rv);
      pLine->GetNodeType(&pNodeType);
      if (pNodeType!=nsIDOMNode::ELEMENT_NODE) pLineIndex++;
    } while (pLineIndex<pLsize && pNodeType!=nsIDOMNode::ELEMENT_NODE);
    if (pLineIndex>=pLsize) break;
    rv = pLine->GetChildNodes(getter_AddRefs(pValues));
    NS_ENSURE_SUCCESS(rv,rv);
    pValues->GetLength(&pCsize);
    for (pColIndex=0;pColIndex<pCsize;pColIndex++) {
      do {
        rv = pValues->Item(pColIndex, getter_AddRefs(pValue));
        NS_ENSURE_SUCCESS(rv,rv);
        pValue->GetNodeType(&pNodeType);
        if (pNodeType!=nsIDOMNode::ELEMENT_NODE) pColIndex++;
      } while (pColIndex<pCsize && pNodeType!=nsIDOMNode::ELEMENT_NODE);
      if (pColIndex>=pCsize) break;
      rv = pValue->GetFirstChild(getter_AddRefs(pContent));
      NS_ENSURE_SUCCESS(rv,rv);
      pVariant = do_CreateInstance(NS_VARIANT_CONTRACTID, &rv);
      NS_ENSURE_SUCCESS(rv,rv);
      if (pContent) {
        rv = pContent->GetNodeValue(pText);
        NS_ENSURE_SUCCESS(rv,rv);
        pVariant->SetAsAString(pText);
        printf("%s|",ToNewCString(pText));
      } else {
        pVariant->SetAsAString(NS_LITERAL_STRING(""));
      }
      rv = pArray.AppendObject(pVariant);
    }
  }
  rv = mComponent->TreatP00AA(pArray, pLsize, pCsize, mKey);
  return rv;
}


/* Generated by Pygmalion */


NS_IMPL_ISUPPORTS1(mozListenerP00AB, nsISOAPResponseListener)

mozListenerP00AB::mozListenerP00AB(mozC02gestsea* aComponent, const nsAString & aKey)
{
  mComponent = aComponent;
  mKey = aKey;
}
mozListenerP00AB::~mozListenerP00AB()
{
}

NS_IMETHODIMP mozListenerP00AB::HandleResponse(nsISOAPResponse *aResponse, nsISOAPCall *aCall, PRUint32 aStatus, PRBool aLast, PRBool *aReturn)
{
  nsresult rv;
  nsCOMPtr<nsISOAPFault> pFault;
  rv = aResponse->GetFault(getter_AddRefs(pFault));
  NS_ENSURE_SUCCESS(rv, rv);
  if (pFault) {
    nsAutoString pFaute, pDetail, pTitle;
    nsCOMPtr<nsIDOMElement> pTheDetail;
    nsCOMPtr<nsIDOMNode> pNode;
    rv = pFault->GetDetail(getter_AddRefs(pTheDetail));
    NS_ENSURE_SUCCESS(rv,rv);
    rv = pTheDetail->GetFirstChild(getter_AddRefs(pNode));
    NS_ENSURE_SUCCESS(rv,rv);
    if (pNode) {
      nsCOMPtr<nsIDOMNamedNodeMap> pAttributes;
      nsCOMPtr<nsIDOMNode> pAttribute, pFirstNode;
      nsAutoString pNodeValue;
      rv = pNode->GetFirstChild(getter_AddRefs(pFirstNode));
      NS_ENSURE_SUCCESS(rv,rv);
      if (pFirstNode) {
        pFirstNode->GetNodeValue(pNodeValue);
        NS_ENSURE_SUCCESS(rv,rv);
        pDetail  = pNodeValue;
      }
      pNode->GetAttributes(getter_AddRefs(pAttributes));
      NS_ENSURE_SUCCESS(rv,rv);
      pAttributes->GetNamedItem(NS_LITERAL_STRING("code"), getter_AddRefs(pAttribute));
      NS_ENSURE_SUCCESS(rv,rv);
      if (pAttribute) {
        pAttribute->GetNodeValue(pNodeValue);
        NS_ENSURE_SUCCESS(rv,rv);
        pDetail += NS_LITERAL_STRING("\n(Erreur ");
        pDetail += pNodeValue;
        pDetail += NS_LITERAL_STRING(")");
      }
    } else pDetail = NS_LITERAL_STRING("Erreur sans message.");
    pFaute = pDetail;
    rv = pFault->GetFaultString(pTitle);
    NS_ENSURE_SUCCESS(rv,rv);
    nsCOMPtr<nsIPrompt> pPrompt= do_GetService(NS_DEFAULTPROMPT_CONTRACTID, &rv);
    NS_ENSURE_SUCCESS(rv,rv);
    pPrompt->Alert(ToNewUnicode(pTitle), ToNewUnicode(pFaute));
    return NS_ERROR_FAILURE;
  }

  nsISOAPParameter ** pParameters;
  PRUint32 pTotal;
  rv = aResponse->GetParameters(PR_FALSE, &pTotal, &pParameters);
  NS_ENSURE_SUCCESS(rv,rv);
  if (pTotal!=1) {
    nsCOMPtr<nsIPrompt> pPrompt= do_GetService(NS_DEFAULTPROMPT_CONTRACTID, &rv);
    NS_ENSURE_SUCCESS(rv,rv);
    pPrompt->Alert(ToNewUnicode(NS_LITERAL_CSTRING("Erreur système")), ToNewUnicode(NS_LITERAL_CSTRING("Le nombre total de paramètres reçus est incorrect.")));
    return NS_ERROR_FAILURE;
  }

  nsAutoString pText;
  nsCOMArray<nsIVariant> pArray;
  nsCOMPtr<nsIWritableVariant> pVariant;
  PRUint32 pLsize=0, pCsize=0;
  PRUint32 pLineIndex, pColIndex;
  PRUint16 pNodeType;
  nsCOMPtr<nsIDOMElement> pResult;
  nsCOMPtr<nsIDOMNodeList> pLines, pValues;
  nsCOMPtr<nsIDOMNode> pLine, pValue, pContent;
  rv = pParameters[0]->GetElement(getter_AddRefs(pResult));
  NS_ENSURE_SUCCESS(rv,rv);
  rv = pResult->GetChildNodes(getter_AddRefs(pLines));
  NS_ENSURE_SUCCESS(rv,rv);
  pLines->GetLength(&pLsize);
  for (pLineIndex=0;pLineIndex<pLsize;pLineIndex++) {
    do {
      rv = pLines->Item(pLineIndex, getter_AddRefs(pLine));
      NS_ENSURE_SUCCESS(rv,rv);
      pLine->GetNodeType(&pNodeType);
      if (pNodeType!=nsIDOMNode::ELEMENT_NODE) pLineIndex++;
    } while (pLineIndex<pLsize && pNodeType!=nsIDOMNode::ELEMENT_NODE);
    if (pLineIndex>=pLsize) break;
    rv = pLine->GetChildNodes(getter_AddRefs(pValues));
    NS_ENSURE_SUCCESS(rv,rv);
    pValues->GetLength(&pCsize);
    for (pColIndex=0;pColIndex<pCsize;pColIndex++) {
      do {
        rv = pValues->Item(pColIndex, getter_AddRefs(pValue));
        NS_ENSURE_SUCCESS(rv,rv);
        pValue->GetNodeType(&pNodeType);
        if (pNodeType!=nsIDOMNode::ELEMENT_NODE) pColIndex++;
      } while (pColIndex<pCsize && pNodeType!=nsIDOMNode::ELEMENT_NODE);
      if (pColIndex>=pCsize) break;
      rv = pValue->GetFirstChild(getter_AddRefs(pContent));
      NS_ENSURE_SUCCESS(rv,rv);
      pVariant = do_CreateInstance(NS_VARIANT_CONTRACTID, &rv);
      NS_ENSURE_SUCCESS(rv,rv);
      if (pContent) {
        rv = pContent->GetNodeValue(pText);
        NS_ENSURE_SUCCESS(rv,rv);
        pVariant->SetAsAString(pText);
        printf("%s|",ToNewCString(pText));
      } else {
        pVariant->SetAsAString(NS_LITERAL_STRING(""));
      }
      rv = pArray.AppendObject(pVariant);
    }
  }
  rv = mComponent->TreatP00AB(pArray, pLsize, pCsize, mKey);
  return rv;
}


/* Generated by Pygmalion */


NS_IMPL_ISUPPORTS1(mozListenerP00AC, nsISOAPResponseListener)

mozListenerP00AC::mozListenerP00AC(mozC02gestsea* aComponent, const nsAString & aKey)
{
  mComponent = aComponent;
  mKey = aKey;
}
mozListenerP00AC::~mozListenerP00AC()
{
}

NS_IMETHODIMP mozListenerP00AC::HandleResponse(nsISOAPResponse *aResponse, nsISOAPCall *aCall, PRUint32 aStatus, PRBool aLast, PRBool *aReturn)
{
  nsresult rv;
  nsCOMPtr<nsISOAPFault> pFault;
  rv = aResponse->GetFault(getter_AddRefs(pFault));
  NS_ENSURE_SUCCESS(rv, rv);
  if (pFault) {
    nsAutoString pFaute, pDetail, pTitle;
    nsCOMPtr<nsIDOMElement> pTheDetail;
    nsCOMPtr<nsIDOMNode> pNode;
    rv = pFault->GetDetail(getter_AddRefs(pTheDetail));
    NS_ENSURE_SUCCESS(rv,rv);
    rv = pTheDetail->GetFirstChild(getter_AddRefs(pNode));
    NS_ENSURE_SUCCESS(rv,rv);
    if (pNode) {
      nsCOMPtr<nsIDOMNamedNodeMap> pAttributes;
      nsCOMPtr<nsIDOMNode> pAttribute, pFirstNode;
      nsAutoString pNodeValue;
      rv = pNode->GetFirstChild(getter_AddRefs(pFirstNode));
      NS_ENSURE_SUCCESS(rv,rv);
      if (pFirstNode) {
        pFirstNode->GetNodeValue(pNodeValue);
        NS_ENSURE_SUCCESS(rv,rv);
        pDetail  = pNodeValue;
      }
      pNode->GetAttributes(getter_AddRefs(pAttributes));
      NS_ENSURE_SUCCESS(rv,rv);
      pAttributes->GetNamedItem(NS_LITERAL_STRING("code"), getter_AddRefs(pAttribute));
      NS_ENSURE_SUCCESS(rv,rv);
      if (pAttribute) {
        pAttribute->GetNodeValue(pNodeValue);
        NS_ENSURE_SUCCESS(rv,rv);
        pDetail += NS_LITERAL_STRING("\n(Erreur ");
        pDetail += pNodeValue;
        pDetail += NS_LITERAL_STRING(")");
      }
    } else pDetail = NS_LITERAL_STRING("Erreur sans message.");
    pFaute = pDetail;
    rv = pFault->GetFaultString(pTitle);
    NS_ENSURE_SUCCESS(rv,rv);
    nsCOMPtr<nsIPrompt> pPrompt= do_GetService(NS_DEFAULTPROMPT_CONTRACTID, &rv);
    NS_ENSURE_SUCCESS(rv,rv);
    pPrompt->Alert(ToNewUnicode(pTitle), ToNewUnicode(pFaute));
    return NS_ERROR_FAILURE;
  }

  nsISOAPParameter ** pParameters;
  PRUint32 pTotal;
  rv = aResponse->GetParameters(PR_FALSE, &pTotal, &pParameters);
  NS_ENSURE_SUCCESS(rv,rv);
  if (pTotal!=1) {
    nsCOMPtr<nsIPrompt> pPrompt= do_GetService(NS_DEFAULTPROMPT_CONTRACTID, &rv);
    NS_ENSURE_SUCCESS(rv,rv);
    pPrompt->Alert(ToNewUnicode(NS_LITERAL_CSTRING("Erreur système")), ToNewUnicode(NS_LITERAL_CSTRING("Le nombre total de paramètres reçus est incorrect.")));
    return NS_ERROR_FAILURE;
  }

  nsAutoString pText;
  nsCOMArray<nsIVariant> pArray;
  nsCOMPtr<nsIWritableVariant> pVariant;
  PRUint32 pLsize=0, pCsize=0;
  PRUint32 pLineIndex, pColIndex;
  PRUint16 pNodeType;
  nsCOMPtr<nsIDOMElement> pResult;
  nsCOMPtr<nsIDOMNodeList> pLines, pValues;
  nsCOMPtr<nsIDOMNode> pLine, pValue, pContent;
  rv = pParameters[0]->GetElement(getter_AddRefs(pResult));
  NS_ENSURE_SUCCESS(rv,rv);
  rv = pResult->GetChildNodes(getter_AddRefs(pLines));
  NS_ENSURE_SUCCESS(rv,rv);
  pLines->GetLength(&pLsize);
  for (pLineIndex=0;pLineIndex<pLsize;pLineIndex++) {
    do {
      rv = pLines->Item(pLineIndex, getter_AddRefs(pLine));
      NS_ENSURE_SUCCESS(rv,rv);
      pLine->GetNodeType(&pNodeType);
      if (pNodeType!=nsIDOMNode::ELEMENT_NODE) pLineIndex++;
    } while (pLineIndex<pLsize && pNodeType!=nsIDOMNode::ELEMENT_NODE);
    if (pLineIndex>=pLsize) break;
    rv = pLine->GetChildNodes(getter_AddRefs(pValues));
    NS_ENSURE_SUCCESS(rv,rv);
    pValues->GetLength(&pCsize);
    for (pColIndex=0;pColIndex<pCsize;pColIndex++) {
      do {
        rv = pValues->Item(pColIndex, getter_AddRefs(pValue));
        NS_ENSURE_SUCCESS(rv,rv);
        pValue->GetNodeType(&pNodeType);
        if (pNodeType!=nsIDOMNode::ELEMENT_NODE) pColIndex++;
      } while (pColIndex<pCsize && pNodeType!=nsIDOMNode::ELEMENT_NODE);
      if (pColIndex>=pCsize) break;
      rv = pValue->GetFirstChild(getter_AddRefs(pContent));
      NS_ENSURE_SUCCESS(rv,rv);
      pVariant = do_CreateInstance(NS_VARIANT_CONTRACTID, &rv);
      NS_ENSURE_SUCCESS(rv,rv);
      if (pContent) {
        rv = pContent->GetNodeValue(pText);
        NS_ENSURE_SUCCESS(rv,rv);
        pVariant->SetAsAString(pText);
        printf("%s|",ToNewCString(pText));
      } else {
        pVariant->SetAsAString(NS_LITERAL_STRING(""));
      }
      rv = pArray.AppendObject(pVariant);
    }
  }
  rv = mComponent->TreatP00AC(pArray, pLsize, pCsize, mKey);
  return rv;
}


/* Generated by Pygmalion */


NS_IMPL_ISUPPORTS1(mozListenerP00AD, nsISOAPResponseListener)

mozListenerP00AD::mozListenerP00AD(mozC02gestsea* aComponent, const nsAString & aKey)
{
  mComponent = aComponent;
  mKey = aKey;
}
mozListenerP00AD::~mozListenerP00AD()
{
}

NS_IMETHODIMP mozListenerP00AD::HandleResponse(nsISOAPResponse *aResponse, nsISOAPCall *aCall, PRUint32 aStatus, PRBool aLast, PRBool *aReturn)
{
  nsresult rv;
  nsCOMPtr<nsISOAPFault> pFault;
  rv = aResponse->GetFault(getter_AddRefs(pFault));
  NS_ENSURE_SUCCESS(rv, rv);
  if (pFault) {
    nsAutoString pFaute, pDetail, pTitle;
    nsCOMPtr<nsIDOMElement> pTheDetail;
    nsCOMPtr<nsIDOMNode> pNode;
    rv = pFault->GetDetail(getter_AddRefs(pTheDetail));
    NS_ENSURE_SUCCESS(rv,rv);
    rv = pTheDetail->GetFirstChild(getter_AddRefs(pNode));
    NS_ENSURE_SUCCESS(rv,rv);
    if (pNode) {
      nsCOMPtr<nsIDOMNamedNodeMap> pAttributes;
      nsCOMPtr<nsIDOMNode> pAttribute, pFirstNode;
      nsAutoString pNodeValue;
      rv = pNode->GetFirstChild(getter_AddRefs(pFirstNode));
      NS_ENSURE_SUCCESS(rv,rv);
      if (pFirstNode) {
        pFirstNode->GetNodeValue(pNodeValue);
        NS_ENSURE_SUCCESS(rv,rv);
        pDetail  = pNodeValue;
      }
      pNode->GetAttributes(getter_AddRefs(pAttributes));
      NS_ENSURE_SUCCESS(rv,rv);
      pAttributes->GetNamedItem(NS_LITERAL_STRING("code"), getter_AddRefs(pAttribute));
      NS_ENSURE_SUCCESS(rv,rv);
      if (pAttribute) {
        pAttribute->GetNodeValue(pNodeValue);
        NS_ENSURE_SUCCESS(rv,rv);
        pDetail += NS_LITERAL_STRING("\n(Erreur ");
        pDetail += pNodeValue;
        pDetail += NS_LITERAL_STRING(")");
      }
    } else pDetail = NS_LITERAL_STRING("Erreur sans message.");
    pFaute = pDetail;
    rv = pFault->GetFaultString(pTitle);
    NS_ENSURE_SUCCESS(rv,rv);
    nsCOMPtr<nsIPrompt> pPrompt= do_GetService(NS_DEFAULTPROMPT_CONTRACTID, &rv);
    NS_ENSURE_SUCCESS(rv,rv);
    pPrompt->Alert(ToNewUnicode(pTitle), ToNewUnicode(pFaute));
    return NS_ERROR_FAILURE;
  }

  nsISOAPParameter ** pParameters;
  PRUint32 pTotal;
  rv = aResponse->GetParameters(PR_FALSE, &pTotal, &pParameters);
  NS_ENSURE_SUCCESS(rv,rv);
  if (pTotal!=1) {
    nsCOMPtr<nsIPrompt> pPrompt= do_GetService(NS_DEFAULTPROMPT_CONTRACTID, &rv);
    NS_ENSURE_SUCCESS(rv,rv);
    pPrompt->Alert(ToNewUnicode(NS_LITERAL_CSTRING("Erreur système")), ToNewUnicode(NS_LITERAL_CSTRING("Le nombre total de paramètres reçus est incorrect.")));
    return NS_ERROR_FAILURE;
  }

  nsAutoString pText;
  nsCOMArray<nsIVariant> pArray;
  nsCOMPtr<nsIWritableVariant> pVariant;
  PRUint32 pLsize=0, pCsize=0;
  PRUint32 pLineIndex, pColIndex;
  PRUint16 pNodeType;
  nsCOMPtr<nsIDOMElement> pResult;
  nsCOMPtr<nsIDOMNodeList> pLines, pValues;
  nsCOMPtr<nsIDOMNode> pLine, pValue, pContent;
  rv = pParameters[0]->GetElement(getter_AddRefs(pResult));
  NS_ENSURE_SUCCESS(rv,rv);
  rv = pResult->GetChildNodes(getter_AddRefs(pLines));
  NS_ENSURE_SUCCESS(rv,rv);
  pLines->GetLength(&pLsize);
  for (pLineIndex=0;pLineIndex<pLsize;pLineIndex++) {
    do {
      rv = pLines->Item(pLineIndex, getter_AddRefs(pLine));
      NS_ENSURE_SUCCESS(rv,rv);
      pLine->GetNodeType(&pNodeType);
      if (pNodeType!=nsIDOMNode::ELEMENT_NODE) pLineIndex++;
    } while (pLineIndex<pLsize && pNodeType!=nsIDOMNode::ELEMENT_NODE);
    if (pLineIndex>=pLsize) break;
    rv = pLine->GetChildNodes(getter_AddRefs(pValues));
    NS_ENSURE_SUCCESS(rv,rv);
    pValues->GetLength(&pCsize);
    for (pColIndex=0;pColIndex<pCsize;pColIndex++) {
      do {
        rv = pValues->Item(pColIndex, getter_AddRefs(pValue));
        NS_ENSURE_SUCCESS(rv,rv);
        pValue->GetNodeType(&pNodeType);
        if (pNodeType!=nsIDOMNode::ELEMENT_NODE) pColIndex++;
      } while (pColIndex<pCsize && pNodeType!=nsIDOMNode::ELEMENT_NODE);
      if (pColIndex>=pCsize) break;
      rv = pValue->GetFirstChild(getter_AddRefs(pContent));
      NS_ENSURE_SUCCESS(rv,rv);
      pVariant = do_CreateInstance(NS_VARIANT_CONTRACTID, &rv);
      NS_ENSURE_SUCCESS(rv,rv);
      if (pContent) {
        rv = pContent->GetNodeValue(pText);
        NS_ENSURE_SUCCESS(rv,rv);
        pVariant->SetAsAString(pText);
        printf("%s|",ToNewCString(pText));
      } else {
        pVariant->SetAsAString(NS_LITERAL_STRING(""));
      }
      rv = pArray.AppendObject(pVariant);
    }
  }
  rv = mComponent->TreatP00AD(pArray, pLsize, pCsize, mKey);
  return rv;
}


/* Generated by Pygmalion */


NS_IMPL_ISUPPORTS1(mozListenerP00AE, nsISOAPResponseListener)

mozListenerP00AE::mozListenerP00AE(mozC02gestsea* aComponent, const nsAString & aKey)
{
  mComponent = aComponent;
  mKey = aKey;
}
mozListenerP00AE::~mozListenerP00AE()
{
}

NS_IMETHODIMP mozListenerP00AE::HandleResponse(nsISOAPResponse *aResponse, nsISOAPCall *aCall, PRUint32 aStatus, PRBool aLast, PRBool *aReturn)
{
  nsresult rv;
  nsCOMPtr<nsISOAPFault> pFault;
  rv = aResponse->GetFault(getter_AddRefs(pFault));
  NS_ENSURE_SUCCESS(rv, rv);
  if (pFault) {
    nsAutoString pFaute, pDetail, pTitle;
    nsCOMPtr<nsIDOMElement> pTheDetail;
    nsCOMPtr<nsIDOMNode> pNode;
    rv = pFault->GetDetail(getter_AddRefs(pTheDetail));
    NS_ENSURE_SUCCESS(rv,rv);
    rv = pTheDetail->GetFirstChild(getter_AddRefs(pNode));
    NS_ENSURE_SUCCESS(rv,rv);
    if (pNode) {
      nsCOMPtr<nsIDOMNamedNodeMap> pAttributes;
      nsCOMPtr<nsIDOMNode> pAttribute, pFirstNode;
      nsAutoString pNodeValue;
      rv = pNode->GetFirstChild(getter_AddRefs(pFirstNode));
      NS_ENSURE_SUCCESS(rv,rv);
      if (pFirstNode) {
        pFirstNode->GetNodeValue(pNodeValue);
        NS_ENSURE_SUCCESS(rv,rv);
        pDetail  = pNodeValue;
      }
      pNode->GetAttributes(getter_AddRefs(pAttributes));
      NS_ENSURE_SUCCESS(rv,rv);
      pAttributes->GetNamedItem(NS_LITERAL_STRING("code"), getter_AddRefs(pAttribute));
      NS_ENSURE_SUCCESS(rv,rv);
      if (pAttribute) {
        pAttribute->GetNodeValue(pNodeValue);
        NS_ENSURE_SUCCESS(rv,rv);
        pDetail += NS_LITERAL_STRING("\n(Erreur ");
        pDetail += pNodeValue;
        pDetail += NS_LITERAL_STRING(")");
      }
    } else pDetail = NS_LITERAL_STRING("Erreur sans message.");
    pFaute = pDetail;
    rv = pFault->GetFaultString(pTitle);
    NS_ENSURE_SUCCESS(rv,rv);
    nsCOMPtr<nsIPrompt> pPrompt= do_GetService(NS_DEFAULTPROMPT_CONTRACTID, &rv);
    NS_ENSURE_SUCCESS(rv,rv);
    pPrompt->Alert(ToNewUnicode(pTitle), ToNewUnicode(pFaute));
    return NS_ERROR_FAILURE;
  }

  nsISOAPParameter ** pParameters;
  PRUint32 pTotal;
  rv = aResponse->GetParameters(PR_FALSE, &pTotal, &pParameters);
  NS_ENSURE_SUCCESS(rv,rv);
  if (pTotal!=1) {
    nsCOMPtr<nsIPrompt> pPrompt= do_GetService(NS_DEFAULTPROMPT_CONTRACTID, &rv);
    NS_ENSURE_SUCCESS(rv,rv);
    pPrompt->Alert(ToNewUnicode(NS_LITERAL_CSTRING("Erreur système")), ToNewUnicode(NS_LITERAL_CSTRING("Le nombre total de paramètres reçus est incorrect.")));
    return NS_ERROR_FAILURE;
  }

  nsAutoString pText;
  nsCOMArray<nsIVariant> pArray;
  nsCOMPtr<nsIWritableVariant> pVariant;
  PRUint32 pLsize=0, pCsize=0;
  PRUint32 pLineIndex, pColIndex;
  PRUint16 pNodeType;
  nsCOMPtr<nsIDOMElement> pResult;
  nsCOMPtr<nsIDOMNodeList> pLines, pValues;
  nsCOMPtr<nsIDOMNode> pLine, pValue, pContent;
  rv = pParameters[0]->GetElement(getter_AddRefs(pResult));
  NS_ENSURE_SUCCESS(rv,rv);
  rv = pResult->GetChildNodes(getter_AddRefs(pLines));
  NS_ENSURE_SUCCESS(rv,rv);
  pLines->GetLength(&pLsize);
  for (pLineIndex=0;pLineIndex<pLsize;pLineIndex++) {
    do {
      rv = pLines->Item(pLineIndex, getter_AddRefs(pLine));
      NS_ENSURE_SUCCESS(rv,rv);
      pLine->GetNodeType(&pNodeType);
      if (pNodeType!=nsIDOMNode::ELEMENT_NODE) pLineIndex++;
    } while (pLineIndex<pLsize && pNodeType!=nsIDOMNode::ELEMENT_NODE);
    if (pLineIndex>=pLsize) break;
    rv = pLine->GetChildNodes(getter_AddRefs(pValues));
    NS_ENSURE_SUCCESS(rv,rv);
    pValues->GetLength(&pCsize);
    for (pColIndex=0;pColIndex<pCsize;pColIndex++) {
      do {
        rv = pValues->Item(pColIndex, getter_AddRefs(pValue));
        NS_ENSURE_SUCCESS(rv,rv);
        pValue->GetNodeType(&pNodeType);
        if (pNodeType!=nsIDOMNode::ELEMENT_NODE) pColIndex++;
      } while (pColIndex<pCsize && pNodeType!=nsIDOMNode::ELEMENT_NODE);
      if (pColIndex>=pCsize) break;
      rv = pValue->GetFirstChild(getter_AddRefs(pContent));
      NS_ENSURE_SUCCESS(rv,rv);
      pVariant = do_CreateInstance(NS_VARIANT_CONTRACTID, &rv);
      NS_ENSURE_SUCCESS(rv,rv);
      if (pContent) {
        rv = pContent->GetNodeValue(pText);
        NS_ENSURE_SUCCESS(rv,rv);
        pVariant->SetAsAString(pText);
        printf("%s|",ToNewCString(pText));
      } else {
        pVariant->SetAsAString(NS_LITERAL_STRING(""));
      }
      rv = pArray.AppendObject(pVariant);
    }
  }
  rv = mComponent->TreatP00AE(pArray, pLsize, pCsize, mKey);
  return rv;
}


/* Generated by Pygmalion */


NS_IMPL_ISUPPORTS1(mozListenerP00AF, nsISOAPResponseListener)

mozListenerP00AF::mozListenerP00AF(mozC02gestsea* aComponent, const nsAString & aKey)
{
  mComponent = aComponent;
  mKey = aKey;
}
mozListenerP00AF::~mozListenerP00AF()
{
}

NS_IMETHODIMP mozListenerP00AF::HandleResponse(nsISOAPResponse *aResponse, nsISOAPCall *aCall, PRUint32 aStatus, PRBool aLast, PRBool *aReturn)
{
  nsresult rv;
  nsCOMPtr<nsISOAPFault> pFault;
  rv = aResponse->GetFault(getter_AddRefs(pFault));
  NS_ENSURE_SUCCESS(rv, rv);
  if (pFault) {
    nsAutoString pFaute, pDetail, pTitle;
    nsCOMPtr<nsIDOMElement> pTheDetail;
    nsCOMPtr<nsIDOMNode> pNode;
    rv = pFault->GetDetail(getter_AddRefs(pTheDetail));
    NS_ENSURE_SUCCESS(rv,rv);
    rv = pTheDetail->GetFirstChild(getter_AddRefs(pNode));
    NS_ENSURE_SUCCESS(rv,rv);
    if (pNode) {
      nsCOMPtr<nsIDOMNamedNodeMap> pAttributes;
      nsCOMPtr<nsIDOMNode> pAttribute, pFirstNode;
      nsAutoString pNodeValue;
      rv = pNode->GetFirstChild(getter_AddRefs(pFirstNode));
      NS_ENSURE_SUCCESS(rv,rv);
      if (pFirstNode) {
        pFirstNode->GetNodeValue(pNodeValue);
        NS_ENSURE_SUCCESS(rv,rv);
        pDetail  = pNodeValue;
      }
      pNode->GetAttributes(getter_AddRefs(pAttributes));
      NS_ENSURE_SUCCESS(rv,rv);
      pAttributes->GetNamedItem(NS_LITERAL_STRING("code"), getter_AddRefs(pAttribute));
      NS_ENSURE_SUCCESS(rv,rv);
      if (pAttribute) {
        pAttribute->GetNodeValue(pNodeValue);
        NS_ENSURE_SUCCESS(rv,rv);
        pDetail += NS_LITERAL_STRING("\n(Erreur ");
        pDetail += pNodeValue;
        pDetail += NS_LITERAL_STRING(")");
      }
    } else pDetail = NS_LITERAL_STRING("Erreur sans message.");
    pFaute = pDetail;
    rv = pFault->GetFaultString(pTitle);
    NS_ENSURE_SUCCESS(rv,rv);
    nsCOMPtr<nsIPrompt> pPrompt= do_GetService(NS_DEFAULTPROMPT_CONTRACTID, &rv);
    NS_ENSURE_SUCCESS(rv,rv);
    pPrompt->Alert(ToNewUnicode(pTitle), ToNewUnicode(pFaute));
    return NS_ERROR_FAILURE;
  }

  nsISOAPParameter ** pParameters;
  PRUint32 pTotal;
  rv = aResponse->GetParameters(PR_FALSE, &pTotal, &pParameters);
  NS_ENSURE_SUCCESS(rv,rv);
  if (pTotal!=1) {
    nsCOMPtr<nsIPrompt> pPrompt= do_GetService(NS_DEFAULTPROMPT_CONTRACTID, &rv);
    NS_ENSURE_SUCCESS(rv,rv);
    pPrompt->Alert(ToNewUnicode(NS_LITERAL_CSTRING("Erreur système")), ToNewUnicode(NS_LITERAL_CSTRING("Le nombre total de paramètres reçus est incorrect.")));
    return NS_ERROR_FAILURE;
  }

  nsAutoString pText;
  nsCOMArray<nsIVariant> pArray;
  nsCOMPtr<nsIWritableVariant> pVariant;
  PRUint32 pLsize=0, pCsize=0;
  PRUint32 pLineIndex, pColIndex;
  PRUint16 pNodeType;
  nsCOMPtr<nsIDOMElement> pResult;
  nsCOMPtr<nsIDOMNodeList> pLines, pValues;
  nsCOMPtr<nsIDOMNode> pLine, pValue, pContent;
  rv = pParameters[0]->GetElement(getter_AddRefs(pResult));
  NS_ENSURE_SUCCESS(rv,rv);
  rv = pResult->GetChildNodes(getter_AddRefs(pLines));
  NS_ENSURE_SUCCESS(rv,rv);
  pLines->GetLength(&pLsize);
  for (pLineIndex=0;pLineIndex<pLsize;pLineIndex++) {
    do {
      rv = pLines->Item(pLineIndex, getter_AddRefs(pLine));
      NS_ENSURE_SUCCESS(rv,rv);
      pLine->GetNodeType(&pNodeType);
      if (pNodeType!=nsIDOMNode::ELEMENT_NODE) pLineIndex++;
    } while (pLineIndex<pLsize && pNodeType!=nsIDOMNode::ELEMENT_NODE);
    if (pLineIndex>=pLsize) break;
    rv = pLine->GetChildNodes(getter_AddRefs(pValues));
    NS_ENSURE_SUCCESS(rv,rv);
    pValues->GetLength(&pCsize);
    for (pColIndex=0;pColIndex<pCsize;pColIndex++) {
      do {
        rv = pValues->Item(pColIndex, getter_AddRefs(pValue));
        NS_ENSURE_SUCCESS(rv,rv);
        pValue->GetNodeType(&pNodeType);
        if (pNodeType!=nsIDOMNode::ELEMENT_NODE) pColIndex++;
      } while (pColIndex<pCsize && pNodeType!=nsIDOMNode::ELEMENT_NODE);
      if (pColIndex>=pCsize) break;
      rv = pValue->GetFirstChild(getter_AddRefs(pContent));
      NS_ENSURE_SUCCESS(rv,rv);
      pVariant = do_CreateInstance(NS_VARIANT_CONTRACTID, &rv);
      NS_ENSURE_SUCCESS(rv,rv);
      if (pContent) {
        rv = pContent->GetNodeValue(pText);
        NS_ENSURE_SUCCESS(rv,rv);
        pVariant->SetAsAString(pText);
        printf("%s|",ToNewCString(pText));
      } else {
        pVariant->SetAsAString(NS_LITERAL_STRING(""));
      }
      rv = pArray.AppendObject(pVariant);
    }
  }
  rv = mComponent->TreatP00AF(pArray, pLsize, pCsize, mKey);
  return rv;
}


/* Generated by Pygmalion */


NS_IMPL_ISUPPORTS1(mozListenerP00B0, nsISOAPResponseListener)

mozListenerP00B0::mozListenerP00B0(mozC02gestsea* aComponent, const nsAString & aKey)
{
  mComponent = aComponent;
  mKey = aKey;
}
mozListenerP00B0::~mozListenerP00B0()
{
}

NS_IMETHODIMP mozListenerP00B0::HandleResponse(nsISOAPResponse *aResponse, nsISOAPCall *aCall, PRUint32 aStatus, PRBool aLast, PRBool *aReturn)
{
  nsresult rv;
  nsCOMPtr<nsISOAPFault> pFault;
  rv = aResponse->GetFault(getter_AddRefs(pFault));
  NS_ENSURE_SUCCESS(rv, rv);
  if (pFault) {
    nsAutoString pFaute, pDetail, pTitle;
    nsCOMPtr<nsIDOMElement> pTheDetail;
    nsCOMPtr<nsIDOMNode> pNode;
    rv = pFault->GetDetail(getter_AddRefs(pTheDetail));
    NS_ENSURE_SUCCESS(rv,rv);
    rv = pTheDetail->GetFirstChild(getter_AddRefs(pNode));
    NS_ENSURE_SUCCESS(rv,rv);
    if (pNode) {
      nsCOMPtr<nsIDOMNamedNodeMap> pAttributes;
      nsCOMPtr<nsIDOMNode> pAttribute, pFirstNode;
      nsAutoString pNodeValue;
      rv = pNode->GetFirstChild(getter_AddRefs(pFirstNode));
      NS_ENSURE_SUCCESS(rv,rv);
      if (pFirstNode) {
        pFirstNode->GetNodeValue(pNodeValue);
        NS_ENSURE_SUCCESS(rv,rv);
        pDetail  = pNodeValue;
      }
      pNode->GetAttributes(getter_AddRefs(pAttributes));
      NS_ENSURE_SUCCESS(rv,rv);
      pAttributes->GetNamedItem(NS_LITERAL_STRING("code"), getter_AddRefs(pAttribute));
      NS_ENSURE_SUCCESS(rv,rv);
      if (pAttribute) {
        pAttribute->GetNodeValue(pNodeValue);
        NS_ENSURE_SUCCESS(rv,rv);
        pDetail += NS_LITERAL_STRING("\n(Erreur ");
        pDetail += pNodeValue;
        pDetail += NS_LITERAL_STRING(")");
      }
    } else pDetail = NS_LITERAL_STRING("Erreur sans message.");
    pFaute = pDetail;
    rv = pFault->GetFaultString(pTitle);
    NS_ENSURE_SUCCESS(rv,rv);
    nsCOMPtr<nsIPrompt> pPrompt= do_GetService(NS_DEFAULTPROMPT_CONTRACTID, &rv);
    NS_ENSURE_SUCCESS(rv,rv);
    pPrompt->Alert(ToNewUnicode(pTitle), ToNewUnicode(pFaute));
    return NS_ERROR_FAILURE;
  }

  nsISOAPParameter ** pParameters;
  PRUint32 pTotal;
  rv = aResponse->GetParameters(PR_FALSE, &pTotal, &pParameters);
  NS_ENSURE_SUCCESS(rv,rv);
  if (pTotal!=1) {
    nsCOMPtr<nsIPrompt> pPrompt= do_GetService(NS_DEFAULTPROMPT_CONTRACTID, &rv);
    NS_ENSURE_SUCCESS(rv,rv);
    pPrompt->Alert(ToNewUnicode(NS_LITERAL_CSTRING("Erreur système")), ToNewUnicode(NS_LITERAL_CSTRING("Le nombre total de paramètres reçus est incorrect.")));
    return NS_ERROR_FAILURE;
  }

  nsAutoString pText;
  nsCOMArray<nsIVariant> pArray;
  nsCOMPtr<nsIWritableVariant> pVariant;
  PRUint32 pLsize=0, pCsize=0;
  PRUint32 pLineIndex, pColIndex;
  PRUint16 pNodeType;
  nsCOMPtr<nsIDOMElement> pResult;
  nsCOMPtr<nsIDOMNodeList> pLines, pValues;
  nsCOMPtr<nsIDOMNode> pLine, pValue, pContent;
  rv = pParameters[0]->GetElement(getter_AddRefs(pResult));
  NS_ENSURE_SUCCESS(rv,rv);
  rv = pResult->GetChildNodes(getter_AddRefs(pLines));
  NS_ENSURE_SUCCESS(rv,rv);
  pLines->GetLength(&pLsize);
  for (pLineIndex=0;pLineIndex<pLsize;pLineIndex++) {
    do {
      rv = pLines->Item(pLineIndex, getter_AddRefs(pLine));
      NS_ENSURE_SUCCESS(rv,rv);
      pLine->GetNodeType(&pNodeType);
      if (pNodeType!=nsIDOMNode::ELEMENT_NODE) pLineIndex++;
    } while (pLineIndex<pLsize && pNodeType!=nsIDOMNode::ELEMENT_NODE);
    if (pLineIndex>=pLsize) break;
    rv = pLine->GetChildNodes(getter_AddRefs(pValues));
    NS_ENSURE_SUCCESS(rv,rv);
    pValues->GetLength(&pCsize);
    for (pColIndex=0;pColIndex<pCsize;pColIndex++) {
      do {
        rv = pValues->Item(pColIndex, getter_AddRefs(pValue));
        NS_ENSURE_SUCCESS(rv,rv);
        pValue->GetNodeType(&pNodeType);
        if (pNodeType!=nsIDOMNode::ELEMENT_NODE) pColIndex++;
      } while (pColIndex<pCsize && pNodeType!=nsIDOMNode::ELEMENT_NODE);
      if (pColIndex>=pCsize) break;
      rv = pValue->GetFirstChild(getter_AddRefs(pContent));
      NS_ENSURE_SUCCESS(rv,rv);
      pVariant = do_CreateInstance(NS_VARIANT_CONTRACTID, &rv);
      NS_ENSURE_SUCCESS(rv,rv);
      if (pContent) {
        rv = pContent->GetNodeValue(pText);
        NS_ENSURE_SUCCESS(rv,rv);
        pVariant->SetAsAString(pText);
        printf("%s|",ToNewCString(pText));
      } else {
        pVariant->SetAsAString(NS_LITERAL_STRING(""));
      }
      rv = pArray.AppendObject(pVariant);
    }
  }
  rv = mComponent->TreatP00B0(pArray, pLsize, pCsize, mKey);
  return rv;
}


/* Generated by Pygmalion */


NS_IMPL_ISUPPORTS1(mozListenerP00B1, nsISOAPResponseListener)

mozListenerP00B1::mozListenerP00B1(mozC02gestsea* aComponent, const nsAString & aKey)
{
  mComponent = aComponent;
  mKey = aKey;
}
mozListenerP00B1::~mozListenerP00B1()
{
}

NS_IMETHODIMP mozListenerP00B1::HandleResponse(nsISOAPResponse *aResponse, nsISOAPCall *aCall, PRUint32 aStatus, PRBool aLast, PRBool *aReturn)
{
  nsresult rv;
  nsCOMPtr<nsISOAPFault> pFault;
  rv = aResponse->GetFault(getter_AddRefs(pFault));
  NS_ENSURE_SUCCESS(rv, rv);
  if (pFault) {
    nsAutoString pFaute, pDetail, pTitle;
    nsCOMPtr<nsIDOMElement> pTheDetail;
    nsCOMPtr<nsIDOMNode> pNode;
    rv = pFault->GetDetail(getter_AddRefs(pTheDetail));
    NS_ENSURE_SUCCESS(rv,rv);
    rv = pTheDetail->GetFirstChild(getter_AddRefs(pNode));
    NS_ENSURE_SUCCESS(rv,rv);
    if (pNode) {
      nsCOMPtr<nsIDOMNamedNodeMap> pAttributes;
      nsCOMPtr<nsIDOMNode> pAttribute, pFirstNode;
      nsAutoString pNodeValue;
      rv = pNode->GetFirstChild(getter_AddRefs(pFirstNode));
      NS_ENSURE_SUCCESS(rv,rv);
      if (pFirstNode) {
        pFirstNode->GetNodeValue(pNodeValue);
        NS_ENSURE_SUCCESS(rv,rv);
        pDetail  = pNodeValue;
      }
      pNode->GetAttributes(getter_AddRefs(pAttributes));
      NS_ENSURE_SUCCESS(rv,rv);
      pAttributes->GetNamedItem(NS_LITERAL_STRING("code"), getter_AddRefs(pAttribute));
      NS_ENSURE_SUCCESS(rv,rv);
      if (pAttribute) {
        pAttribute->GetNodeValue(pNodeValue);
        NS_ENSURE_SUCCESS(rv,rv);
        pDetail += NS_LITERAL_STRING("\n(Erreur ");
        pDetail += pNodeValue;
        pDetail += NS_LITERAL_STRING(")");
      }
    } else pDetail = NS_LITERAL_STRING("Erreur sans message.");
    pFaute = pDetail;
    rv = pFault->GetFaultString(pTitle);
    NS_ENSURE_SUCCESS(rv,rv);
    nsCOMPtr<nsIPrompt> pPrompt= do_GetService(NS_DEFAULTPROMPT_CONTRACTID, &rv);
    NS_ENSURE_SUCCESS(rv,rv);
    pPrompt->Alert(ToNewUnicode(pTitle), ToNewUnicode(pFaute));
    return NS_ERROR_FAILURE;
  }

  nsISOAPParameter ** pParameters;
  PRUint32 pTotal;
  rv = aResponse->GetParameters(PR_FALSE, &pTotal, &pParameters);
  NS_ENSURE_SUCCESS(rv,rv);
  if (pTotal!=1) {
    nsCOMPtr<nsIPrompt> pPrompt= do_GetService(NS_DEFAULTPROMPT_CONTRACTID, &rv);
    NS_ENSURE_SUCCESS(rv,rv);
    pPrompt->Alert(ToNewUnicode(NS_LITERAL_CSTRING("Erreur système")), ToNewUnicode(NS_LITERAL_CSTRING("Le nombre total de paramètres reçus est incorrect.")));
    return NS_ERROR_FAILURE;
  }

  nsAutoString pText;
  nsCOMArray<nsIVariant> pArray;
  nsCOMPtr<nsIWritableVariant> pVariant;
  PRUint32 pLsize=0, pCsize=0;
  PRUint32 pLineIndex, pColIndex;
  PRUint16 pNodeType;
  nsCOMPtr<nsIDOMElement> pResult;
  nsCOMPtr<nsIDOMNodeList> pLines, pValues;
  nsCOMPtr<nsIDOMNode> pLine, pValue, pContent;
  rv = pParameters[0]->GetElement(getter_AddRefs(pResult));
  NS_ENSURE_SUCCESS(rv,rv);
  rv = pResult->GetChildNodes(getter_AddRefs(pLines));
  NS_ENSURE_SUCCESS(rv,rv);
  pLines->GetLength(&pLsize);
  for (pLineIndex=0;pLineIndex<pLsize;pLineIndex++) {
    do {
      rv = pLines->Item(pLineIndex, getter_AddRefs(pLine));
      NS_ENSURE_SUCCESS(rv,rv);
      pLine->GetNodeType(&pNodeType);
      if (pNodeType!=nsIDOMNode::ELEMENT_NODE) pLineIndex++;
    } while (pLineIndex<pLsize && pNodeType!=nsIDOMNode::ELEMENT_NODE);
    if (pLineIndex>=pLsize) break;
    rv = pLine->GetChildNodes(getter_AddRefs(pValues));
    NS_ENSURE_SUCCESS(rv,rv);
    pValues->GetLength(&pCsize);
    for (pColIndex=0;pColIndex<pCsize;pColIndex++) {
      do {
        rv = pValues->Item(pColIndex, getter_AddRefs(pValue));
        NS_ENSURE_SUCCESS(rv,rv);
        pValue->GetNodeType(&pNodeType);
        if (pNodeType!=nsIDOMNode::ELEMENT_NODE) pColIndex++;
      } while (pColIndex<pCsize && pNodeType!=nsIDOMNode::ELEMENT_NODE);
      if (pColIndex>=pCsize) break;
      rv = pValue->GetFirstChild(getter_AddRefs(pContent));
      NS_ENSURE_SUCCESS(rv,rv);
      pVariant = do_CreateInstance(NS_VARIANT_CONTRACTID, &rv);
      NS_ENSURE_SUCCESS(rv,rv);
      if (pContent) {
        rv = pContent->GetNodeValue(pText);
        NS_ENSURE_SUCCESS(rv,rv);
        pVariant->SetAsAString(pText);
        printf("%s|",ToNewCString(pText));
      } else {
        pVariant->SetAsAString(NS_LITERAL_STRING(""));
      }
      rv = pArray.AppendObject(pVariant);
    }
  }
  rv = mComponent->TreatP00B1(pArray, pLsize, pCsize, mKey);
  return rv;
}


/* Generated by Pygmalion */


NS_IMPL_ISUPPORTS1(mozListenerP00B2, nsISOAPResponseListener)

mozListenerP00B2::mozListenerP00B2(mozC02gestsea* aComponent, const nsAString & aKey)
{
  mComponent = aComponent;
  mKey = aKey;
}
mozListenerP00B2::~mozListenerP00B2()
{
}

NS_IMETHODIMP mozListenerP00B2::HandleResponse(nsISOAPResponse *aResponse, nsISOAPCall *aCall, PRUint32 aStatus, PRBool aLast, PRBool *aReturn)
{
  nsresult rv;
  nsCOMPtr<nsISOAPFault> pFault;
  rv = aResponse->GetFault(getter_AddRefs(pFault));
  NS_ENSURE_SUCCESS(rv, rv);
  if (pFault) {
    nsAutoString pFaute, pDetail, pTitle;
    nsCOMPtr<nsIDOMElement> pTheDetail;
    nsCOMPtr<nsIDOMNode> pNode;
    rv = pFault->GetDetail(getter_AddRefs(pTheDetail));
    NS_ENSURE_SUCCESS(rv,rv);
    rv = pTheDetail->GetFirstChild(getter_AddRefs(pNode));
    NS_ENSURE_SUCCESS(rv,rv);
    if (pNode) {
      nsCOMPtr<nsIDOMNamedNodeMap> pAttributes;
      nsCOMPtr<nsIDOMNode> pAttribute, pFirstNode;
      nsAutoString pNodeValue;
      rv = pNode->GetFirstChild(getter_AddRefs(pFirstNode));
      NS_ENSURE_SUCCESS(rv,rv);
      if (pFirstNode) {
        pFirstNode->GetNodeValue(pNodeValue);
        NS_ENSURE_SUCCESS(rv,rv);
        pDetail  = pNodeValue;
      }
      pNode->GetAttributes(getter_AddRefs(pAttributes));
      NS_ENSURE_SUCCESS(rv,rv);
      pAttributes->GetNamedItem(NS_LITERAL_STRING("code"), getter_AddRefs(pAttribute));
      NS_ENSURE_SUCCESS(rv,rv);
      if (pAttribute) {
        pAttribute->GetNodeValue(pNodeValue);
        NS_ENSURE_SUCCESS(rv,rv);
        pDetail += NS_LITERAL_STRING("\n(Erreur ");
        pDetail += pNodeValue;
        pDetail += NS_LITERAL_STRING(")");
      }
    } else pDetail = NS_LITERAL_STRING("Erreur sans message.");
    pFaute = pDetail;
    rv = pFault->GetFaultString(pTitle);
    NS_ENSURE_SUCCESS(rv,rv);
    nsCOMPtr<nsIPrompt> pPrompt= do_GetService(NS_DEFAULTPROMPT_CONTRACTID, &rv);
    NS_ENSURE_SUCCESS(rv,rv);
    pPrompt->Alert(ToNewUnicode(pTitle), ToNewUnicode(pFaute));
    return NS_ERROR_FAILURE;
  }

  nsISOAPParameter ** pParameters;
  PRUint32 pTotal;
  rv = aResponse->GetParameters(PR_FALSE, &pTotal, &pParameters);
  NS_ENSURE_SUCCESS(rv,rv);
  if (pTotal!=1) {
    nsCOMPtr<nsIPrompt> pPrompt= do_GetService(NS_DEFAULTPROMPT_CONTRACTID, &rv);
    NS_ENSURE_SUCCESS(rv,rv);
    pPrompt->Alert(ToNewUnicode(NS_LITERAL_CSTRING("Erreur système")), ToNewUnicode(NS_LITERAL_CSTRING("Le nombre total de paramètres reçus est incorrect.")));
    return NS_ERROR_FAILURE;
  }

  nsAutoString pText;
  nsCOMArray<nsIVariant> pArray;
  nsCOMPtr<nsIWritableVariant> pVariant;
  PRUint32 pLsize=0, pCsize=0;
  PRUint32 pLineIndex, pColIndex;
  PRUint16 pNodeType;
  nsCOMPtr<nsIDOMElement> pResult;
  nsCOMPtr<nsIDOMNodeList> pLines, pValues;
  nsCOMPtr<nsIDOMNode> pLine, pValue, pContent;
  rv = pParameters[0]->GetElement(getter_AddRefs(pResult));
  NS_ENSURE_SUCCESS(rv,rv);
  rv = pResult->GetChildNodes(getter_AddRefs(pLines));
  NS_ENSURE_SUCCESS(rv,rv);
  pLines->GetLength(&pLsize);
  for (pLineIndex=0;pLineIndex<pLsize;pLineIndex++) {
    do {
      rv = pLines->Item(pLineIndex, getter_AddRefs(pLine));
      NS_ENSURE_SUCCESS(rv,rv);
      pLine->GetNodeType(&pNodeType);
      if (pNodeType!=nsIDOMNode::ELEMENT_NODE) pLineIndex++;
    } while (pLineIndex<pLsize && pNodeType!=nsIDOMNode::ELEMENT_NODE);
    if (pLineIndex>=pLsize) break;
    rv = pLine->GetChildNodes(getter_AddRefs(pValues));
    NS_ENSURE_SUCCESS(rv,rv);
    pValues->GetLength(&pCsize);
    for (pColIndex=0;pColIndex<pCsize;pColIndex++) {
      do {
        rv = pValues->Item(pColIndex, getter_AddRefs(pValue));
        NS_ENSURE_SUCCESS(rv,rv);
        pValue->GetNodeType(&pNodeType);
        if (pNodeType!=nsIDOMNode::ELEMENT_NODE) pColIndex++;
      } while (pColIndex<pCsize && pNodeType!=nsIDOMNode::ELEMENT_NODE);
      if (pColIndex>=pCsize) break;
      rv = pValue->GetFirstChild(getter_AddRefs(pContent));
      NS_ENSURE_SUCCESS(rv,rv);
      pVariant = do_CreateInstance(NS_VARIANT_CONTRACTID, &rv);
      NS_ENSURE_SUCCESS(rv,rv);
      if (pContent) {
        rv = pContent->GetNodeValue(pText);
        NS_ENSURE_SUCCESS(rv,rv);
        pVariant->SetAsAString(pText);
        printf("%s|",ToNewCString(pText));
      } else {
        pVariant->SetAsAString(NS_LITERAL_STRING(""));
      }
      rv = pArray.AppendObject(pVariant);
    }
  }
  rv = mComponent->TreatP00B2(pArray, pLsize, pCsize, mKey);
  return rv;
}


/* Generated by Pygmalion */


NS_IMPL_ISUPPORTS1(mozListenerP00B3, nsISOAPResponseListener)

mozListenerP00B3::mozListenerP00B3(mozC02gestsea* aComponent, const nsAString & aKey)
{
  mComponent = aComponent;
  mKey = aKey;
}
mozListenerP00B3::~mozListenerP00B3()
{
}

NS_IMETHODIMP mozListenerP00B3::HandleResponse(nsISOAPResponse *aResponse, nsISOAPCall *aCall, PRUint32 aStatus, PRBool aLast, PRBool *aReturn)
{
  nsresult rv;
  nsCOMPtr<nsISOAPFault> pFault;
  rv = aResponse->GetFault(getter_AddRefs(pFault));
  NS_ENSURE_SUCCESS(rv, rv);
  if (pFault) {
    nsAutoString pFaute, pDetail, pTitle;
    nsCOMPtr<nsIDOMElement> pTheDetail;
    nsCOMPtr<nsIDOMNode> pNode;
    rv = pFault->GetDetail(getter_AddRefs(pTheDetail));
    NS_ENSURE_SUCCESS(rv,rv);
    rv = pTheDetail->GetFirstChild(getter_AddRefs(pNode));
    NS_ENSURE_SUCCESS(rv,rv);
    if (pNode) {
      nsCOMPtr<nsIDOMNamedNodeMap> pAttributes;
      nsCOMPtr<nsIDOMNode> pAttribute, pFirstNode;
      nsAutoString pNodeValue;
      rv = pNode->GetFirstChild(getter_AddRefs(pFirstNode));
      NS_ENSURE_SUCCESS(rv,rv);
      if (pFirstNode) {
        pFirstNode->GetNodeValue(pNodeValue);
        NS_ENSURE_SUCCESS(rv,rv);
        pDetail  = pNodeValue;
      }
      pNode->GetAttributes(getter_AddRefs(pAttributes));
      NS_ENSURE_SUCCESS(rv,rv);
      pAttributes->GetNamedItem(NS_LITERAL_STRING("code"), getter_AddRefs(pAttribute));
      NS_ENSURE_SUCCESS(rv,rv);
      if (pAttribute) {
        pAttribute->GetNodeValue(pNodeValue);
        NS_ENSURE_SUCCESS(rv,rv);
        pDetail += NS_LITERAL_STRING("\n(Erreur ");
        pDetail += pNodeValue;
        pDetail += NS_LITERAL_STRING(")");
      }
    } else pDetail = NS_LITERAL_STRING("Erreur sans message.");
    pFaute = pDetail;
    rv = pFault->GetFaultString(pTitle);
    NS_ENSURE_SUCCESS(rv,rv);
    nsCOMPtr<nsIPrompt> pPrompt= do_GetService(NS_DEFAULTPROMPT_CONTRACTID, &rv);
    NS_ENSURE_SUCCESS(rv,rv);
    pPrompt->Alert(ToNewUnicode(pTitle), ToNewUnicode(pFaute));
    return NS_ERROR_FAILURE;
  }

  nsISOAPParameter ** pParameters;
  PRUint32 pTotal;
  rv = aResponse->GetParameters(PR_FALSE, &pTotal, &pParameters);
  NS_ENSURE_SUCCESS(rv,rv);
  if (pTotal!=1) {
    nsCOMPtr<nsIPrompt> pPrompt= do_GetService(NS_DEFAULTPROMPT_CONTRACTID, &rv);
    NS_ENSURE_SUCCESS(rv,rv);
    pPrompt->Alert(ToNewUnicode(NS_LITERAL_CSTRING("Erreur système")), ToNewUnicode(NS_LITERAL_CSTRING("Le nombre total de paramètres reçus est incorrect.")));
    return NS_ERROR_FAILURE;
  }

  nsAutoString pText;
  nsCOMArray<nsIVariant> pArray;
  nsCOMPtr<nsIWritableVariant> pVariant;
  PRUint32 pLsize=0, pCsize=0;
  PRUint32 pLineIndex, pColIndex;
  PRUint16 pNodeType;
  nsCOMPtr<nsIDOMElement> pResult;
  nsCOMPtr<nsIDOMNodeList> pLines, pValues;
  nsCOMPtr<nsIDOMNode> pLine, pValue, pContent;
  rv = pParameters[0]->GetElement(getter_AddRefs(pResult));
  NS_ENSURE_SUCCESS(rv,rv);
  rv = pResult->GetChildNodes(getter_AddRefs(pLines));
  NS_ENSURE_SUCCESS(rv,rv);
  pLines->GetLength(&pLsize);
  for (pLineIndex=0;pLineIndex<pLsize;pLineIndex++) {
    do {
      rv = pLines->Item(pLineIndex, getter_AddRefs(pLine));
      NS_ENSURE_SUCCESS(rv,rv);
      pLine->GetNodeType(&pNodeType);
      if (pNodeType!=nsIDOMNode::ELEMENT_NODE) pLineIndex++;
    } while (pLineIndex<pLsize && pNodeType!=nsIDOMNode::ELEMENT_NODE);
    if (pLineIndex>=pLsize) break;
    rv = pLine->GetChildNodes(getter_AddRefs(pValues));
    NS_ENSURE_SUCCESS(rv,rv);
    pValues->GetLength(&pCsize);
    for (pColIndex=0;pColIndex<pCsize;pColIndex++) {
      do {
        rv = pValues->Item(pColIndex, getter_AddRefs(pValue));
        NS_ENSURE_SUCCESS(rv,rv);
        pValue->GetNodeType(&pNodeType);
        if (pNodeType!=nsIDOMNode::ELEMENT_NODE) pColIndex++;
      } while (pColIndex<pCsize && pNodeType!=nsIDOMNode::ELEMENT_NODE);
      if (pColIndex>=pCsize) break;
      rv = pValue->GetFirstChild(getter_AddRefs(pContent));
      NS_ENSURE_SUCCESS(rv,rv);
      pVariant = do_CreateInstance(NS_VARIANT_CONTRACTID, &rv);
      NS_ENSURE_SUCCESS(rv,rv);
      if (pContent) {
        rv = pContent->GetNodeValue(pText);
        NS_ENSURE_SUCCESS(rv,rv);
        pVariant->SetAsAString(pText);
        printf("%s|",ToNewCString(pText));
      } else {
        pVariant->SetAsAString(NS_LITERAL_STRING(""));
      }
      rv = pArray.AppendObject(pVariant);
    }
  }
  rv = mComponent->TreatP00B3(pArray, pLsize, pCsize, mKey);
  return rv;
}


/* Generated by Pygmalion */


NS_IMPL_ISUPPORTS1(mozListenerP00B4, nsISOAPResponseListener)

mozListenerP00B4::mozListenerP00B4(mozC02gestsea* aComponent, const nsAString & aKey)
{
  mComponent = aComponent;
  mKey = aKey;
}
mozListenerP00B4::~mozListenerP00B4()
{
}

NS_IMETHODIMP mozListenerP00B4::HandleResponse(nsISOAPResponse *aResponse, nsISOAPCall *aCall, PRUint32 aStatus, PRBool aLast, PRBool *aReturn)
{
  nsresult rv;
  nsCOMPtr<nsISOAPFault> pFault;
  rv = aResponse->GetFault(getter_AddRefs(pFault));
  NS_ENSURE_SUCCESS(rv, rv);
  if (pFault) {
    nsAutoString pFaute, pDetail, pTitle;
    nsCOMPtr<nsIDOMElement> pTheDetail;
    nsCOMPtr<nsIDOMNode> pNode;
    rv = pFault->GetDetail(getter_AddRefs(pTheDetail));
    NS_ENSURE_SUCCESS(rv,rv);
    rv = pTheDetail->GetFirstChild(getter_AddRefs(pNode));
    NS_ENSURE_SUCCESS(rv,rv);
    if (pNode) {
      nsCOMPtr<nsIDOMNamedNodeMap> pAttributes;
      nsCOMPtr<nsIDOMNode> pAttribute, pFirstNode;
      nsAutoString pNodeValue;
      rv = pNode->GetFirstChild(getter_AddRefs(pFirstNode));
      NS_ENSURE_SUCCESS(rv,rv);
      if (pFirstNode) {
        pFirstNode->GetNodeValue(pNodeValue);
        NS_ENSURE_SUCCESS(rv,rv);
        pDetail  = pNodeValue;
      }
      pNode->GetAttributes(getter_AddRefs(pAttributes));
      NS_ENSURE_SUCCESS(rv,rv);
      pAttributes->GetNamedItem(NS_LITERAL_STRING("code"), getter_AddRefs(pAttribute));
      NS_ENSURE_SUCCESS(rv,rv);
      if (pAttribute) {
        pAttribute->GetNodeValue(pNodeValue);
        NS_ENSURE_SUCCESS(rv,rv);
        pDetail += NS_LITERAL_STRING("\n(Erreur ");
        pDetail += pNodeValue;
        pDetail += NS_LITERAL_STRING(")");
      }
    } else pDetail = NS_LITERAL_STRING("Erreur sans message.");
    pFaute = pDetail;
    rv = pFault->GetFaultString(pTitle);
    NS_ENSURE_SUCCESS(rv,rv);
    nsCOMPtr<nsIPrompt> pPrompt= do_GetService(NS_DEFAULTPROMPT_CONTRACTID, &rv);
    NS_ENSURE_SUCCESS(rv,rv);
    pPrompt->Alert(ToNewUnicode(pTitle), ToNewUnicode(pFaute));
    return NS_ERROR_FAILURE;
  }

  nsISOAPParameter ** pParameters;
  PRUint32 pTotal;
  rv = aResponse->GetParameters(PR_FALSE, &pTotal, &pParameters);
  NS_ENSURE_SUCCESS(rv,rv);
  if (pTotal!=1) {
    nsCOMPtr<nsIPrompt> pPrompt= do_GetService(NS_DEFAULTPROMPT_CONTRACTID, &rv);
    NS_ENSURE_SUCCESS(rv,rv);
    pPrompt->Alert(ToNewUnicode(NS_LITERAL_CSTRING("Erreur système")), ToNewUnicode(NS_LITERAL_CSTRING("Le nombre total de paramètres reçus est incorrect.")));
    return NS_ERROR_FAILURE;
  }

  nsAutoString pText;
  nsCOMArray<nsIVariant> pArray;
  nsCOMPtr<nsIWritableVariant> pVariant;
  PRUint32 pLsize=0, pCsize=0;
  PRUint32 pLineIndex, pColIndex;
  PRUint16 pNodeType;
  nsCOMPtr<nsIDOMElement> pResult;
  nsCOMPtr<nsIDOMNodeList> pLines, pValues;
  nsCOMPtr<nsIDOMNode> pLine, pValue, pContent;
  rv = pParameters[0]->GetElement(getter_AddRefs(pResult));
  NS_ENSURE_SUCCESS(rv,rv);
  rv = pResult->GetChildNodes(getter_AddRefs(pLines));
  NS_ENSURE_SUCCESS(rv,rv);
  pLines->GetLength(&pLsize);
  for (pLineIndex=0;pLineIndex<pLsize;pLineIndex++) {
    do {
      rv = pLines->Item(pLineIndex, getter_AddRefs(pLine));
      NS_ENSURE_SUCCESS(rv,rv);
      pLine->GetNodeType(&pNodeType);
      if (pNodeType!=nsIDOMNode::ELEMENT_NODE) pLineIndex++;
    } while (pLineIndex<pLsize && pNodeType!=nsIDOMNode::ELEMENT_NODE);
    if (pLineIndex>=pLsize) break;
    rv = pLine->GetChildNodes(getter_AddRefs(pValues));
    NS_ENSURE_SUCCESS(rv,rv);
    pValues->GetLength(&pCsize);
    for (pColIndex=0;pColIndex<pCsize;pColIndex++) {
      do {
        rv = pValues->Item(pColIndex, getter_AddRefs(pValue));
        NS_ENSURE_SUCCESS(rv,rv);
        pValue->GetNodeType(&pNodeType);
        if (pNodeType!=nsIDOMNode::ELEMENT_NODE) pColIndex++;
      } while (pColIndex<pCsize && pNodeType!=nsIDOMNode::ELEMENT_NODE);
      if (pColIndex>=pCsize) break;
      rv = pValue->GetFirstChild(getter_AddRefs(pContent));
      NS_ENSURE_SUCCESS(rv,rv);
      pVariant = do_CreateInstance(NS_VARIANT_CONTRACTID, &rv);
      NS_ENSURE_SUCCESS(rv,rv);
      if (pContent) {
        rv = pContent->GetNodeValue(pText);
        NS_ENSURE_SUCCESS(rv,rv);
        pVariant->SetAsAString(pText);
        printf("%s|",ToNewCString(pText));
      } else {
        pVariant->SetAsAString(NS_LITERAL_STRING(""));
      }
      rv = pArray.AppendObject(pVariant);
    }
  }
  rv = mComponent->TreatP00B4(pArray, pLsize, pCsize, mKey);
  return rv;
}


/* Generated by Pygmalion */


NS_IMPL_ISUPPORTS1(mozListenerP00B5, nsISOAPResponseListener)

mozListenerP00B5::mozListenerP00B5(mozC02gestsea* aComponent, const nsAString & aKey)
{
  mComponent = aComponent;
  mKey = aKey;
}
mozListenerP00B5::~mozListenerP00B5()
{
}

NS_IMETHODIMP mozListenerP00B5::HandleResponse(nsISOAPResponse *aResponse, nsISOAPCall *aCall, PRUint32 aStatus, PRBool aLast, PRBool *aReturn)
{
  nsresult rv;
  nsCOMPtr<nsISOAPFault> pFault;
  rv = aResponse->GetFault(getter_AddRefs(pFault));
  NS_ENSURE_SUCCESS(rv, rv);
  if (pFault) {
    nsAutoString pFaute, pDetail, pTitle;
    nsCOMPtr<nsIDOMElement> pTheDetail;
    nsCOMPtr<nsIDOMNode> pNode;
    rv = pFault->GetDetail(getter_AddRefs(pTheDetail));
    NS_ENSURE_SUCCESS(rv,rv);
    rv = pTheDetail->GetFirstChild(getter_AddRefs(pNode));
    NS_ENSURE_SUCCESS(rv,rv);
    if (pNode) {
      nsCOMPtr<nsIDOMNamedNodeMap> pAttributes;
      nsCOMPtr<nsIDOMNode> pAttribute, pFirstNode;
      nsAutoString pNodeValue;
      rv = pNode->GetFirstChild(getter_AddRefs(pFirstNode));
      NS_ENSURE_SUCCESS(rv,rv);
      if (pFirstNode) {
        pFirstNode->GetNodeValue(pNodeValue);
        NS_ENSURE_SUCCESS(rv,rv);
        pDetail  = pNodeValue;
      }
      pNode->GetAttributes(getter_AddRefs(pAttributes));
      NS_ENSURE_SUCCESS(rv,rv);
      pAttributes->GetNamedItem(NS_LITERAL_STRING("code"), getter_AddRefs(pAttribute));
      NS_ENSURE_SUCCESS(rv,rv);
      if (pAttribute) {
        pAttribute->GetNodeValue(pNodeValue);
        NS_ENSURE_SUCCESS(rv,rv);
        pDetail += NS_LITERAL_STRING("\n(Erreur ");
        pDetail += pNodeValue;
        pDetail += NS_LITERAL_STRING(")");
      }
    } else pDetail = NS_LITERAL_STRING("Erreur sans message.");
    pFaute = pDetail;
    rv = pFault->GetFaultString(pTitle);
    NS_ENSURE_SUCCESS(rv,rv);
    nsCOMPtr<nsIPrompt> pPrompt= do_GetService(NS_DEFAULTPROMPT_CONTRACTID, &rv);
    NS_ENSURE_SUCCESS(rv,rv);
    pPrompt->Alert(ToNewUnicode(pTitle), ToNewUnicode(pFaute));
    return NS_ERROR_FAILURE;
  }

  nsISOAPParameter ** pParameters;
  PRUint32 pTotal;
  rv = aResponse->GetParameters(PR_FALSE, &pTotal, &pParameters);
  NS_ENSURE_SUCCESS(rv,rv);
  if (pTotal!=1) {
    nsCOMPtr<nsIPrompt> pPrompt= do_GetService(NS_DEFAULTPROMPT_CONTRACTID, &rv);
    NS_ENSURE_SUCCESS(rv,rv);
    pPrompt->Alert(ToNewUnicode(NS_LITERAL_CSTRING("Erreur système")), ToNewUnicode(NS_LITERAL_CSTRING("Le nombre total de paramètres reçus est incorrect.")));
    return NS_ERROR_FAILURE;
  }

  nsAutoString pText;
  nsCOMArray<nsIVariant> pArray;
  nsCOMPtr<nsIWritableVariant> pVariant;
  PRUint32 pLsize=0, pCsize=0;
  PRUint32 pLineIndex, pColIndex;
  PRUint16 pNodeType;
  nsCOMPtr<nsIDOMElement> pResult;
  nsCOMPtr<nsIDOMNodeList> pLines, pValues;
  nsCOMPtr<nsIDOMNode> pLine, pValue, pContent;
  rv = pParameters[0]->GetElement(getter_AddRefs(pResult));
  NS_ENSURE_SUCCESS(rv,rv);
  rv = pResult->GetChildNodes(getter_AddRefs(pLines));
  NS_ENSURE_SUCCESS(rv,rv);
  pLines->GetLength(&pLsize);
  for (pLineIndex=0;pLineIndex<pLsize;pLineIndex++) {
    do {
      rv = pLines->Item(pLineIndex, getter_AddRefs(pLine));
      NS_ENSURE_SUCCESS(rv,rv);
      pLine->GetNodeType(&pNodeType);
      if (pNodeType!=nsIDOMNode::ELEMENT_NODE) pLineIndex++;
    } while (pLineIndex<pLsize && pNodeType!=nsIDOMNode::ELEMENT_NODE);
    if (pLineIndex>=pLsize) break;
    rv = pLine->GetChildNodes(getter_AddRefs(pValues));
    NS_ENSURE_SUCCESS(rv,rv);
    pValues->GetLength(&pCsize);
    for (pColIndex=0;pColIndex<pCsize;pColIndex++) {
      do {
        rv = pValues->Item(pColIndex, getter_AddRefs(pValue));
        NS_ENSURE_SUCCESS(rv,rv);
        pValue->GetNodeType(&pNodeType);
        if (pNodeType!=nsIDOMNode::ELEMENT_NODE) pColIndex++;
      } while (pColIndex<pCsize && pNodeType!=nsIDOMNode::ELEMENT_NODE);
      if (pColIndex>=pCsize) break;
      rv = pValue->GetFirstChild(getter_AddRefs(pContent));
      NS_ENSURE_SUCCESS(rv,rv);
      pVariant = do_CreateInstance(NS_VARIANT_CONTRACTID, &rv);
      NS_ENSURE_SUCCESS(rv,rv);
      if (pContent) {
        rv = pContent->GetNodeValue(pText);
        NS_ENSURE_SUCCESS(rv,rv);
        pVariant->SetAsAString(pText);
        printf("%s|",ToNewCString(pText));
      } else {
        pVariant->SetAsAString(NS_LITERAL_STRING(""));
      }
      rv = pArray.AppendObject(pVariant);
    }
  }
  rv = mComponent->TreatP00B5(pArray, pLsize, pCsize, mKey);
  return rv;
}


/* Generated by Pygmalion */


NS_IMPL_ISUPPORTS1(mozListenerP00B6, nsISOAPResponseListener)

mozListenerP00B6::mozListenerP00B6(mozC02gestsea* aComponent, const nsAString & aKey)
{
  mComponent = aComponent;
  mKey = aKey;
}
mozListenerP00B6::~mozListenerP00B6()
{
}

NS_IMETHODIMP mozListenerP00B6::HandleResponse(nsISOAPResponse *aResponse, nsISOAPCall *aCall, PRUint32 aStatus, PRBool aLast, PRBool *aReturn)
{
  nsresult rv;
  nsCOMPtr<nsISOAPFault> pFault;
  rv = aResponse->GetFault(getter_AddRefs(pFault));
  NS_ENSURE_SUCCESS(rv, rv);
  if (pFault) {
    nsAutoString pFaute, pDetail, pTitle;
    nsCOMPtr<nsIDOMElement> pTheDetail;
    nsCOMPtr<nsIDOMNode> pNode;
    rv = pFault->GetDetail(getter_AddRefs(pTheDetail));
    NS_ENSURE_SUCCESS(rv,rv);
    rv = pTheDetail->GetFirstChild(getter_AddRefs(pNode));
    NS_ENSURE_SUCCESS(rv,rv);
    if (pNode) {
      nsCOMPtr<nsIDOMNamedNodeMap> pAttributes;
      nsCOMPtr<nsIDOMNode> pAttribute, pFirstNode;
      nsAutoString pNodeValue;
      rv = pNode->GetFirstChild(getter_AddRefs(pFirstNode));
      NS_ENSURE_SUCCESS(rv,rv);
      if (pFirstNode) {
        pFirstNode->GetNodeValue(pNodeValue);
        NS_ENSURE_SUCCESS(rv,rv);
        pDetail  = pNodeValue;
      }
      pNode->GetAttributes(getter_AddRefs(pAttributes));
      NS_ENSURE_SUCCESS(rv,rv);
      pAttributes->GetNamedItem(NS_LITERAL_STRING("code"), getter_AddRefs(pAttribute));
      NS_ENSURE_SUCCESS(rv,rv);
      if (pAttribute) {
        pAttribute->GetNodeValue(pNodeValue);
        NS_ENSURE_SUCCESS(rv,rv);
        pDetail += NS_LITERAL_STRING("\n(Erreur ");
        pDetail += pNodeValue;
        pDetail += NS_LITERAL_STRING(")");
      }
    } else pDetail = NS_LITERAL_STRING("Erreur sans message.");
    pFaute = pDetail;
    rv = pFault->GetFaultString(pTitle);
    NS_ENSURE_SUCCESS(rv,rv);
    nsCOMPtr<nsIPrompt> pPrompt= do_GetService(NS_DEFAULTPROMPT_CONTRACTID, &rv);
    NS_ENSURE_SUCCESS(rv,rv);
    pPrompt->Alert(ToNewUnicode(pTitle), ToNewUnicode(pFaute));
    return NS_ERROR_FAILURE;
  }

  nsISOAPParameter ** pParameters;
  PRUint32 pTotal;
  rv = aResponse->GetParameters(PR_FALSE, &pTotal, &pParameters);
  NS_ENSURE_SUCCESS(rv,rv);
  if (pTotal!=1) {
    nsCOMPtr<nsIPrompt> pPrompt= do_GetService(NS_DEFAULTPROMPT_CONTRACTID, &rv);
    NS_ENSURE_SUCCESS(rv,rv);
    pPrompt->Alert(ToNewUnicode(NS_LITERAL_CSTRING("Erreur système")), ToNewUnicode(NS_LITERAL_CSTRING("Le nombre total de paramètres reçus est incorrect.")));
    return NS_ERROR_FAILURE;
  }

  nsAutoString pText;
  nsCOMArray<nsIVariant> pArray;
  nsCOMPtr<nsIWritableVariant> pVariant;
  PRUint32 pLsize=0, pCsize=0;
  PRUint32 pLineIndex, pColIndex;
  PRUint16 pNodeType;
  nsCOMPtr<nsIDOMElement> pResult;
  nsCOMPtr<nsIDOMNodeList> pLines, pValues;
  nsCOMPtr<nsIDOMNode> pLine, pValue, pContent;
  rv = pParameters[0]->GetElement(getter_AddRefs(pResult));
  NS_ENSURE_SUCCESS(rv,rv);
  rv = pResult->GetChildNodes(getter_AddRefs(pLines));
  NS_ENSURE_SUCCESS(rv,rv);
  pLines->GetLength(&pLsize);
  for (pLineIndex=0;pLineIndex<pLsize;pLineIndex++) {
    do {
      rv = pLines->Item(pLineIndex, getter_AddRefs(pLine));
      NS_ENSURE_SUCCESS(rv,rv);
      pLine->GetNodeType(&pNodeType);
      if (pNodeType!=nsIDOMNode::ELEMENT_NODE) pLineIndex++;
    } while (pLineIndex<pLsize && pNodeType!=nsIDOMNode::ELEMENT_NODE);
    if (pLineIndex>=pLsize) break;
    rv = pLine->GetChildNodes(getter_AddRefs(pValues));
    NS_ENSURE_SUCCESS(rv,rv);
    pValues->GetLength(&pCsize);
    for (pColIndex=0;pColIndex<pCsize;pColIndex++) {
      do {
        rv = pValues->Item(pColIndex, getter_AddRefs(pValue));
        NS_ENSURE_SUCCESS(rv,rv);
        pValue->GetNodeType(&pNodeType);
        if (pNodeType!=nsIDOMNode::ELEMENT_NODE) pColIndex++;
      } while (pColIndex<pCsize && pNodeType!=nsIDOMNode::ELEMENT_NODE);
      if (pColIndex>=pCsize) break;
      rv = pValue->GetFirstChild(getter_AddRefs(pContent));
      NS_ENSURE_SUCCESS(rv,rv);
      pVariant = do_CreateInstance(NS_VARIANT_CONTRACTID, &rv);
      NS_ENSURE_SUCCESS(rv,rv);
      if (pContent) {
        rv = pContent->GetNodeValue(pText);
        NS_ENSURE_SUCCESS(rv,rv);
        pVariant->SetAsAString(pText);
        printf("%s|",ToNewCString(pText));
      } else {
        pVariant->SetAsAString(NS_LITERAL_STRING(""));
      }
      rv = pArray.AppendObject(pVariant);
    }
  }
  rv = mComponent->TreatP00B6(pArray, pLsize, pCsize, mKey);
  return rv;
}


/* Generated by Pygmalion */


NS_IMPL_ISUPPORTS1(mozListenerP00B7, nsISOAPResponseListener)

mozListenerP00B7::mozListenerP00B7(mozC02gestsea* aComponent, const nsAString & aKey)
{
  mComponent = aComponent;
  mKey = aKey;
}
mozListenerP00B7::~mozListenerP00B7()
{
}

NS_IMETHODIMP mozListenerP00B7::HandleResponse(nsISOAPResponse *aResponse, nsISOAPCall *aCall, PRUint32 aStatus, PRBool aLast, PRBool *aReturn)
{
  nsresult rv;
  nsCOMPtr<nsISOAPFault> pFault;
  rv = aResponse->GetFault(getter_AddRefs(pFault));
  NS_ENSURE_SUCCESS(rv, rv);
  if (pFault) {
    nsAutoString pFaute, pDetail, pTitle;
    nsCOMPtr<nsIDOMElement> pTheDetail;
    nsCOMPtr<nsIDOMNode> pNode;
    rv = pFault->GetDetail(getter_AddRefs(pTheDetail));
    NS_ENSURE_SUCCESS(rv,rv);
    rv = pTheDetail->GetFirstChild(getter_AddRefs(pNode));
    NS_ENSURE_SUCCESS(rv,rv);
    if (pNode) {
      nsCOMPtr<nsIDOMNamedNodeMap> pAttributes;
      nsCOMPtr<nsIDOMNode> pAttribute, pFirstNode;
      nsAutoString pNodeValue;
      rv = pNode->GetFirstChild(getter_AddRefs(pFirstNode));
      NS_ENSURE_SUCCESS(rv,rv);
      if (pFirstNode) {
        pFirstNode->GetNodeValue(pNodeValue);
        NS_ENSURE_SUCCESS(rv,rv);
        pDetail  = pNodeValue;
      }
      pNode->GetAttributes(getter_AddRefs(pAttributes));
      NS_ENSURE_SUCCESS(rv,rv);
      pAttributes->GetNamedItem(NS_LITERAL_STRING("code"), getter_AddRefs(pAttribute));
      NS_ENSURE_SUCCESS(rv,rv);
      if (pAttribute) {
        pAttribute->GetNodeValue(pNodeValue);
        NS_ENSURE_SUCCESS(rv,rv);
        pDetail += NS_LITERAL_STRING("\n(Erreur ");
        pDetail += pNodeValue;
        pDetail += NS_LITERAL_STRING(")");
      }
    } else pDetail = NS_LITERAL_STRING("Erreur sans message.");
    pFaute = pDetail;
    rv = pFault->GetFaultString(pTitle);
    NS_ENSURE_SUCCESS(rv,rv);
    nsCOMPtr<nsIPrompt> pPrompt= do_GetService(NS_DEFAULTPROMPT_CONTRACTID, &rv);
    NS_ENSURE_SUCCESS(rv,rv);
    pPrompt->Alert(ToNewUnicode(pTitle), ToNewUnicode(pFaute));
    return NS_ERROR_FAILURE;
  }

  nsISOAPParameter ** pParameters;
  PRUint32 pTotal;
  rv = aResponse->GetParameters(PR_FALSE, &pTotal, &pParameters);
  NS_ENSURE_SUCCESS(rv,rv);
  if (pTotal!=1) {
    nsCOMPtr<nsIPrompt> pPrompt= do_GetService(NS_DEFAULTPROMPT_CONTRACTID, &rv);
    NS_ENSURE_SUCCESS(rv,rv);
    pPrompt->Alert(ToNewUnicode(NS_LITERAL_CSTRING("Erreur système")), ToNewUnicode(NS_LITERAL_CSTRING("Le nombre total de paramètres reçus est incorrect.")));
    return NS_ERROR_FAILURE;
  }

  nsAutoString pText;
  nsCOMArray<nsIVariant> pArray;
  nsCOMPtr<nsIWritableVariant> pVariant;
  PRUint32 pLsize=0, pCsize=0;
  PRUint32 pLineIndex, pColIndex;
  PRUint16 pNodeType;
  nsCOMPtr<nsIDOMElement> pResult;
  nsCOMPtr<nsIDOMNodeList> pLines, pValues;
  nsCOMPtr<nsIDOMNode> pLine, pValue, pContent;
  rv = pParameters[0]->GetElement(getter_AddRefs(pResult));
  NS_ENSURE_SUCCESS(rv,rv);
  rv = pResult->GetChildNodes(getter_AddRefs(pLines));
  NS_ENSURE_SUCCESS(rv,rv);
  pLines->GetLength(&pLsize);
  for (pLineIndex=0;pLineIndex<pLsize;pLineIndex++) {
    do {
      rv = pLines->Item(pLineIndex, getter_AddRefs(pLine));
      NS_ENSURE_SUCCESS(rv,rv);
      pLine->GetNodeType(&pNodeType);
      if (pNodeType!=nsIDOMNode::ELEMENT_NODE) pLineIndex++;
    } while (pLineIndex<pLsize && pNodeType!=nsIDOMNode::ELEMENT_NODE);
    if (pLineIndex>=pLsize) break;
    rv = pLine->GetChildNodes(getter_AddRefs(pValues));
    NS_ENSURE_SUCCESS(rv,rv);
    pValues->GetLength(&pCsize);
    for (pColIndex=0;pColIndex<pCsize;pColIndex++) {
      do {
        rv = pValues->Item(pColIndex, getter_AddRefs(pValue));
        NS_ENSURE_SUCCESS(rv,rv);
        pValue->GetNodeType(&pNodeType);
        if (pNodeType!=nsIDOMNode::ELEMENT_NODE) pColIndex++;
      } while (pColIndex<pCsize && pNodeType!=nsIDOMNode::ELEMENT_NODE);
      if (pColIndex>=pCsize) break;
      rv = pValue->GetFirstChild(getter_AddRefs(pContent));
      NS_ENSURE_SUCCESS(rv,rv);
      pVariant = do_CreateInstance(NS_VARIANT_CONTRACTID, &rv);
      NS_ENSURE_SUCCESS(rv,rv);
      if (pContent) {
        rv = pContent->GetNodeValue(pText);
        NS_ENSURE_SUCCESS(rv,rv);
        pVariant->SetAsAString(pText);
        printf("%s|",ToNewCString(pText));
      } else {
        pVariant->SetAsAString(NS_LITERAL_STRING(""));
      }
      rv = pArray.AppendObject(pVariant);
    }
  }
  rv = mComponent->TreatP00B7(pArray, pLsize, pCsize, mKey);
  return rv;
}


/* Generated by Pygmalion */


NS_IMPL_ISUPPORTS1(mozListenerP00B8, nsISOAPResponseListener)

mozListenerP00B8::mozListenerP00B8(mozC02gestsea* aComponent, const nsAString & aKey)
{
  mComponent = aComponent;
  mKey = aKey;
}
mozListenerP00B8::~mozListenerP00B8()
{
}

NS_IMETHODIMP mozListenerP00B8::HandleResponse(nsISOAPResponse *aResponse, nsISOAPCall *aCall, PRUint32 aStatus, PRBool aLast, PRBool *aReturn)
{
  nsresult rv;
  nsCOMPtr<nsISOAPFault> pFault;
  rv = aResponse->GetFault(getter_AddRefs(pFault));
  NS_ENSURE_SUCCESS(rv, rv);
  if (pFault) {
    nsAutoString pFaute, pDetail, pTitle;
    nsCOMPtr<nsIDOMElement> pTheDetail;
    nsCOMPtr<nsIDOMNode> pNode;
    rv = pFault->GetDetail(getter_AddRefs(pTheDetail));
    NS_ENSURE_SUCCESS(rv,rv);
    rv = pTheDetail->GetFirstChild(getter_AddRefs(pNode));
    NS_ENSURE_SUCCESS(rv,rv);
    if (pNode) {
      nsCOMPtr<nsIDOMNamedNodeMap> pAttributes;
      nsCOMPtr<nsIDOMNode> pAttribute, pFirstNode;
      nsAutoString pNodeValue;
      rv = pNode->GetFirstChild(getter_AddRefs(pFirstNode));
      NS_ENSURE_SUCCESS(rv,rv);
      if (pFirstNode) {
        pFirstNode->GetNodeValue(pNodeValue);
        NS_ENSURE_SUCCESS(rv,rv);
        pDetail  = pNodeValue;
      }
      pNode->GetAttributes(getter_AddRefs(pAttributes));
      NS_ENSURE_SUCCESS(rv,rv);
      pAttributes->GetNamedItem(NS_LITERAL_STRING("code"), getter_AddRefs(pAttribute));
      NS_ENSURE_SUCCESS(rv,rv);
      if (pAttribute) {
        pAttribute->GetNodeValue(pNodeValue);
        NS_ENSURE_SUCCESS(rv,rv);
        pDetail += NS_LITERAL_STRING("\n(Erreur ");
        pDetail += pNodeValue;
        pDetail += NS_LITERAL_STRING(")");
      }
    } else pDetail = NS_LITERAL_STRING("Erreur sans message.");
    pFaute = pDetail;
    rv = pFault->GetFaultString(pTitle);
    NS_ENSURE_SUCCESS(rv,rv);
    nsCOMPtr<nsIPrompt> pPrompt= do_GetService(NS_DEFAULTPROMPT_CONTRACTID, &rv);
    NS_ENSURE_SUCCESS(rv,rv);
    pPrompt->Alert(ToNewUnicode(pTitle), ToNewUnicode(pFaute));
    return NS_ERROR_FAILURE;
  }

  nsISOAPParameter ** pParameters;
  PRUint32 pTotal;
  rv = aResponse->GetParameters(PR_FALSE, &pTotal, &pParameters);
  NS_ENSURE_SUCCESS(rv,rv);
  if (pTotal!=1) {
    nsCOMPtr<nsIPrompt> pPrompt= do_GetService(NS_DEFAULTPROMPT_CONTRACTID, &rv);
    NS_ENSURE_SUCCESS(rv,rv);
    pPrompt->Alert(ToNewUnicode(NS_LITERAL_CSTRING("Erreur système")), ToNewUnicode(NS_LITERAL_CSTRING("Le nombre total de paramètres reçus est incorrect.")));
    return NS_ERROR_FAILURE;
  }

  nsAutoString pText;
  nsCOMArray<nsIVariant> pArray;
  nsCOMPtr<nsIWritableVariant> pVariant;
  PRUint32 pLsize=0, pCsize=0;
  PRUint32 pLineIndex, pColIndex;
  PRUint16 pNodeType;
  nsCOMPtr<nsIDOMElement> pResult;
  nsCOMPtr<nsIDOMNodeList> pLines, pValues;
  nsCOMPtr<nsIDOMNode> pLine, pValue, pContent;
  rv = pParameters[0]->GetElement(getter_AddRefs(pResult));
  NS_ENSURE_SUCCESS(rv,rv);
  rv = pResult->GetChildNodes(getter_AddRefs(pLines));
  NS_ENSURE_SUCCESS(rv,rv);
  pLines->GetLength(&pLsize);
  for (pLineIndex=0;pLineIndex<pLsize;pLineIndex++) {
    do {
      rv = pLines->Item(pLineIndex, getter_AddRefs(pLine));
      NS_ENSURE_SUCCESS(rv,rv);
      pLine->GetNodeType(&pNodeType);
      if (pNodeType!=nsIDOMNode::ELEMENT_NODE) pLineIndex++;
    } while (pLineIndex<pLsize && pNodeType!=nsIDOMNode::ELEMENT_NODE);
    if (pLineIndex>=pLsize) break;
    rv = pLine->GetChildNodes(getter_AddRefs(pValues));
    NS_ENSURE_SUCCESS(rv,rv);
    pValues->GetLength(&pCsize);
    for (pColIndex=0;pColIndex<pCsize;pColIndex++) {
      do {
        rv = pValues->Item(pColIndex, getter_AddRefs(pValue));
        NS_ENSURE_SUCCESS(rv,rv);
        pValue->GetNodeType(&pNodeType);
        if (pNodeType!=nsIDOMNode::ELEMENT_NODE) pColIndex++;
      } while (pColIndex<pCsize && pNodeType!=nsIDOMNode::ELEMENT_NODE);
      if (pColIndex>=pCsize) break;
      rv = pValue->GetFirstChild(getter_AddRefs(pContent));
      NS_ENSURE_SUCCESS(rv,rv);
      pVariant = do_CreateInstance(NS_VARIANT_CONTRACTID, &rv);
      NS_ENSURE_SUCCESS(rv,rv);
      if (pContent) {
        rv = pContent->GetNodeValue(pText);
        NS_ENSURE_SUCCESS(rv,rv);
        pVariant->SetAsAString(pText);
        printf("%s|",ToNewCString(pText));
      } else {
        pVariant->SetAsAString(NS_LITERAL_STRING(""));
      }
      rv = pArray.AppendObject(pVariant);
    }
  }
  rv = mComponent->TreatP00B8(pArray, pLsize, pCsize, mKey);
  return rv;
}


/* Generated by Pygmalion */


NS_IMPL_ISUPPORTS1(mozListenerP00B9, nsISOAPResponseListener)

mozListenerP00B9::mozListenerP00B9(mozC02gestsea* aComponent, const nsACString & aSearch)
{
  mComponent = aComponent;
  mSearch = aSearch;
}
mozListenerP00B9::~mozListenerP00B9()
{
}

NS_IMETHODIMP mozListenerP00B9::HandleResponse(nsISOAPResponse *aResponse, nsISOAPCall *aCall, PRUint32 aStatus, PRBool aLast, PRBool *aReturn)
{
  nsresult rv;
  nsCOMPtr<nsISOAPFault> pFault;
  rv = aResponse->GetFault(getter_AddRefs(pFault));
  NS_ENSURE_SUCCESS(rv, rv);
  if (pFault) {
    nsAutoString pFaute, pDetail, pTitle;
    nsCOMPtr<nsIDOMElement> pTheDetail;
    nsCOMPtr<nsIDOMNode> pNode;
    rv = pFault->GetDetail(getter_AddRefs(pTheDetail));
    NS_ENSURE_SUCCESS(rv,rv);
    rv = pTheDetail->GetFirstChild(getter_AddRefs(pNode));
    NS_ENSURE_SUCCESS(rv,rv);
    if (pNode) {
      nsCOMPtr<nsIDOMNamedNodeMap> pAttributes;
      nsCOMPtr<nsIDOMNode> pAttribute, pFirstNode;
      nsAutoString pNodeValue;
      rv = pNode->GetFirstChild(getter_AddRefs(pFirstNode));
      NS_ENSURE_SUCCESS(rv,rv);
      if (pFirstNode) {
        pFirstNode->GetNodeValue(pNodeValue);
        NS_ENSURE_SUCCESS(rv,rv);
        pDetail  = pNodeValue;
      }
      pNode->GetAttributes(getter_AddRefs(pAttributes));
      NS_ENSURE_SUCCESS(rv,rv);
      pAttributes->GetNamedItem(NS_LITERAL_STRING("code"), getter_AddRefs(pAttribute));
      NS_ENSURE_SUCCESS(rv,rv);
      if (pAttribute) {
        pAttribute->GetNodeValue(pNodeValue);
        NS_ENSURE_SUCCESS(rv,rv);
        pDetail += NS_LITERAL_STRING("\n(Erreur ");
        pDetail += pNodeValue;
        pDetail += NS_LITERAL_STRING(")");
      }
    } else pDetail = NS_LITERAL_STRING("Erreur sans message.");
    pFaute = pDetail;
    rv = pFault->GetFaultString(pTitle);
    NS_ENSURE_SUCCESS(rv,rv);
    nsCOMPtr<nsIPrompt> pPrompt= do_GetService(NS_DEFAULTPROMPT_CONTRACTID, &rv);
    NS_ENSURE_SUCCESS(rv,rv);
    pPrompt->Alert(ToNewUnicode(pTitle), ToNewUnicode(pFaute));
    return NS_ERROR_FAILURE;
  }

  nsISOAPParameter ** pParameters;
  PRUint32 pTotal;
  rv = aResponse->GetParameters(PR_FALSE, &pTotal, &pParameters);
  NS_ENSURE_SUCCESS(rv,rv);
  if (pTotal!=1) {
    nsCOMPtr<nsIPrompt> pPrompt= do_GetService(NS_DEFAULTPROMPT_CONTRACTID, &rv);
    NS_ENSURE_SUCCESS(rv,rv);
    pPrompt->Alert(ToNewUnicode(NS_LITERAL_CSTRING("Erreur système")), ToNewUnicode(NS_LITERAL_CSTRING("Le nombre total de paramètres reçus est incorrect.")));
    return NS_ERROR_FAILURE;
  }

  nsAutoString pText;
  nsCOMArray<nsIVariant> pArray;
  nsCOMPtr<nsIWritableVariant> pVariant;
  PRUint32 pLsize=0, pCsize=0;
  PRUint32 pLineIndex, pColIndex;
  PRUint16 pNodeType;
  nsCOMPtr<nsIDOMElement> pResult;
  nsCOMPtr<nsIDOMNodeList> pLines, pValues;
  nsCOMPtr<nsIDOMNode> pLine, pValue, pContent;
  rv = pParameters[0]->GetElement(getter_AddRefs(pResult));
  NS_ENSURE_SUCCESS(rv,rv);
  rv = pResult->GetChildNodes(getter_AddRefs(pLines));
  NS_ENSURE_SUCCESS(rv,rv);
  pLines->GetLength(&pLsize);
  for (pLineIndex=0;pLineIndex<pLsize;pLineIndex++) {
    do {
      rv = pLines->Item(pLineIndex, getter_AddRefs(pLine));
      NS_ENSURE_SUCCESS(rv,rv);
      pLine->GetNodeType(&pNodeType);
      if (pNodeType!=nsIDOMNode::ELEMENT_NODE) pLineIndex++;
    } while (pLineIndex<pLsize && pNodeType!=nsIDOMNode::ELEMENT_NODE);
    if (pLineIndex>=pLsize) break;
    rv = pLine->GetChildNodes(getter_AddRefs(pValues));
    NS_ENSURE_SUCCESS(rv,rv);
    pValues->GetLength(&pCsize);
    for (pColIndex=0;pColIndex<pCsize;pColIndex++) {
      do {
        rv = pValues->Item(pColIndex, getter_AddRefs(pValue));
        NS_ENSURE_SUCCESS(rv,rv);
        pValue->GetNodeType(&pNodeType);
        if (pNodeType!=nsIDOMNode::ELEMENT_NODE) pColIndex++;
      } while (pColIndex<pCsize && pNodeType!=nsIDOMNode::ELEMENT_NODE);
      if (pColIndex>=pCsize) break;
      rv = pValue->GetFirstChild(getter_AddRefs(pContent));
      NS_ENSURE_SUCCESS(rv,rv);
      pVariant = do_CreateInstance(NS_VARIANT_CONTRACTID, &rv);
      NS_ENSURE_SUCCESS(rv,rv);
      if (pContent) {
        rv = pContent->GetNodeValue(pText);
        NS_ENSURE_SUCCESS(rv,rv);
        pVariant->SetAsAString(pText);
        printf("%s|",ToNewCString(pText));
      } else {
        pVariant->SetAsAString(NS_LITERAL_STRING(""));
      }
      rv = pArray.AppendObject(pVariant);
    }
  }
  rv = mComponent->TreatP00B9(pArray, pLsize, pCsize, mSearch);
  return rv;
}


/* Generated by Pygmalion */


NS_IMPL_ISUPPORTS1(mozListenerP00BA, nsISOAPResponseListener)

mozListenerP00BA::mozListenerP00BA(mozC02gestsea* aComponent, const nsACString & aSearch)
{
  mComponent = aComponent;
  mSearch = aSearch;
}
mozListenerP00BA::~mozListenerP00BA()
{
}

NS_IMETHODIMP mozListenerP00BA::HandleResponse(nsISOAPResponse *aResponse, nsISOAPCall *aCall, PRUint32 aStatus, PRBool aLast, PRBool *aReturn)
{
  nsresult rv;
  nsCOMPtr<nsISOAPFault> pFault;
  rv = aResponse->GetFault(getter_AddRefs(pFault));
  NS_ENSURE_SUCCESS(rv, rv);
  if (pFault) {
    nsAutoString pFaute, pDetail, pTitle;
    nsCOMPtr<nsIDOMElement> pTheDetail;
    nsCOMPtr<nsIDOMNode> pNode;
    rv = pFault->GetDetail(getter_AddRefs(pTheDetail));
    NS_ENSURE_SUCCESS(rv,rv);
    rv = pTheDetail->GetFirstChild(getter_AddRefs(pNode));
    NS_ENSURE_SUCCESS(rv,rv);
    if (pNode) {
      nsCOMPtr<nsIDOMNamedNodeMap> pAttributes;
      nsCOMPtr<nsIDOMNode> pAttribute, pFirstNode;
      nsAutoString pNodeValue;
      rv = pNode->GetFirstChild(getter_AddRefs(pFirstNode));
      NS_ENSURE_SUCCESS(rv,rv);
      if (pFirstNode) {
        pFirstNode->GetNodeValue(pNodeValue);
        NS_ENSURE_SUCCESS(rv,rv);
        pDetail  = pNodeValue;
      }
      pNode->GetAttributes(getter_AddRefs(pAttributes));
      NS_ENSURE_SUCCESS(rv,rv);
      pAttributes->GetNamedItem(NS_LITERAL_STRING("code"), getter_AddRefs(pAttribute));
      NS_ENSURE_SUCCESS(rv,rv);
      if (pAttribute) {
        pAttribute->GetNodeValue(pNodeValue);
        NS_ENSURE_SUCCESS(rv,rv);
        pDetail += NS_LITERAL_STRING("\n(Erreur ");
        pDetail += pNodeValue;
        pDetail += NS_LITERAL_STRING(")");
      }
    } else pDetail = NS_LITERAL_STRING("Erreur sans message.");
    pFaute = pDetail;
    rv = pFault->GetFaultString(pTitle);
    NS_ENSURE_SUCCESS(rv,rv);
    nsCOMPtr<nsIPrompt> pPrompt= do_GetService(NS_DEFAULTPROMPT_CONTRACTID, &rv);
    NS_ENSURE_SUCCESS(rv,rv);
    pPrompt->Alert(ToNewUnicode(pTitle), ToNewUnicode(pFaute));
    return NS_ERROR_FAILURE;
  }

  nsISOAPParameter ** pParameters;
  PRUint32 pTotal;
  rv = aResponse->GetParameters(PR_FALSE, &pTotal, &pParameters);
  NS_ENSURE_SUCCESS(rv,rv);
  if (pTotal!=1) {
    nsCOMPtr<nsIPrompt> pPrompt= do_GetService(NS_DEFAULTPROMPT_CONTRACTID, &rv);
    NS_ENSURE_SUCCESS(rv,rv);
    pPrompt->Alert(ToNewUnicode(NS_LITERAL_CSTRING("Erreur système")), ToNewUnicode(NS_LITERAL_CSTRING("Le nombre total de paramètres reçus est incorrect.")));
    return NS_ERROR_FAILURE;
  }

  nsAutoString pText;
  nsCOMArray<nsIVariant> pArray;
  nsCOMPtr<nsIWritableVariant> pVariant;
  PRUint32 pLsize=0, pCsize=0;
  PRUint32 pLineIndex, pColIndex;
  PRUint16 pNodeType;
  nsCOMPtr<nsIDOMElement> pResult;
  nsCOMPtr<nsIDOMNodeList> pLines, pValues;
  nsCOMPtr<nsIDOMNode> pLine, pValue, pContent;
  rv = pParameters[0]->GetElement(getter_AddRefs(pResult));
  NS_ENSURE_SUCCESS(rv,rv);
  rv = pResult->GetChildNodes(getter_AddRefs(pLines));
  NS_ENSURE_SUCCESS(rv,rv);
  pLines->GetLength(&pLsize);
  for (pLineIndex=0;pLineIndex<pLsize;pLineIndex++) {
    do {
      rv = pLines->Item(pLineIndex, getter_AddRefs(pLine));
      NS_ENSURE_SUCCESS(rv,rv);
      pLine->GetNodeType(&pNodeType);
      if (pNodeType!=nsIDOMNode::ELEMENT_NODE) pLineIndex++;
    } while (pLineIndex<pLsize && pNodeType!=nsIDOMNode::ELEMENT_NODE);
    if (pLineIndex>=pLsize) break;
    rv = pLine->GetChildNodes(getter_AddRefs(pValues));
    NS_ENSURE_SUCCESS(rv,rv);
    pValues->GetLength(&pCsize);
    for (pColIndex=0;pColIndex<pCsize;pColIndex++) {
      do {
        rv = pValues->Item(pColIndex, getter_AddRefs(pValue));
        NS_ENSURE_SUCCESS(rv,rv);
        pValue->GetNodeType(&pNodeType);
        if (pNodeType!=nsIDOMNode::ELEMENT_NODE) pColIndex++;
      } while (pColIndex<pCsize && pNodeType!=nsIDOMNode::ELEMENT_NODE);
      if (pColIndex>=pCsize) break;
      rv = pValue->GetFirstChild(getter_AddRefs(pContent));
      NS_ENSURE_SUCCESS(rv,rv);
      pVariant = do_CreateInstance(NS_VARIANT_CONTRACTID, &rv);
      NS_ENSURE_SUCCESS(rv,rv);
      if (pContent) {
        rv = pContent->GetNodeValue(pText);
        NS_ENSURE_SUCCESS(rv,rv);
        pVariant->SetAsAString(pText);
        printf("%s|",ToNewCString(pText));
      } else {
        pVariant->SetAsAString(NS_LITERAL_STRING(""));
      }
      rv = pArray.AppendObject(pVariant);
    }
  }
  rv = mComponent->TreatP00BA(pArray, pLsize, pCsize, mSearch);
  return rv;
}


/* Generated by Pygmalion */


NS_IMPL_ISUPPORTS1(mozListenerP00BB, nsISOAPResponseListener)

mozListenerP00BB::mozListenerP00BB(mozC02gestsea* aComponent, const nsAString & aKey)
{
  mComponent = aComponent;
  mKey = aKey;
}
mozListenerP00BB::~mozListenerP00BB()
{
}

NS_IMETHODIMP mozListenerP00BB::HandleResponse(nsISOAPResponse *aResponse, nsISOAPCall *aCall, PRUint32 aStatus, PRBool aLast, PRBool *aReturn)
{
  nsresult rv;
  nsCOMPtr<nsISOAPFault> pFault;
  rv = aResponse->GetFault(getter_AddRefs(pFault));
  NS_ENSURE_SUCCESS(rv, rv);
  if (pFault) {
    nsAutoString pFaute, pDetail, pTitle;
    nsCOMPtr<nsIDOMElement> pTheDetail;
    nsCOMPtr<nsIDOMNode> pNode;
    rv = pFault->GetDetail(getter_AddRefs(pTheDetail));
    NS_ENSURE_SUCCESS(rv,rv);
    rv = pTheDetail->GetFirstChild(getter_AddRefs(pNode));
    NS_ENSURE_SUCCESS(rv,rv);
    if (pNode) {
      nsCOMPtr<nsIDOMNamedNodeMap> pAttributes;
      nsCOMPtr<nsIDOMNode> pAttribute, pFirstNode;
      nsAutoString pNodeValue;
      rv = pNode->GetFirstChild(getter_AddRefs(pFirstNode));
      NS_ENSURE_SUCCESS(rv,rv);
      if (pFirstNode) {
        pFirstNode->GetNodeValue(pNodeValue);
        NS_ENSURE_SUCCESS(rv,rv);
        pDetail  = pNodeValue;
      }
      pNode->GetAttributes(getter_AddRefs(pAttributes));
      NS_ENSURE_SUCCESS(rv,rv);
      pAttributes->GetNamedItem(NS_LITERAL_STRING("code"), getter_AddRefs(pAttribute));
      NS_ENSURE_SUCCESS(rv,rv);
      if (pAttribute) {
        pAttribute->GetNodeValue(pNodeValue);
        NS_ENSURE_SUCCESS(rv,rv);
        pDetail += NS_LITERAL_STRING("\n(Erreur ");
        pDetail += pNodeValue;
        pDetail += NS_LITERAL_STRING(")");
      }
    } else pDetail = NS_LITERAL_STRING("Erreur sans message.");
    pFaute = pDetail;
    rv = pFault->GetFaultString(pTitle);
    NS_ENSURE_SUCCESS(rv,rv);
    nsCOMPtr<nsIPrompt> pPrompt= do_GetService(NS_DEFAULTPROMPT_CONTRACTID, &rv);
    NS_ENSURE_SUCCESS(rv,rv);
    pPrompt->Alert(ToNewUnicode(pTitle), ToNewUnicode(pFaute));
    return NS_ERROR_FAILURE;
  }

  nsISOAPParameter ** pParameters;
  PRUint32 pTotal;
  rv = aResponse->GetParameters(PR_FALSE, &pTotal, &pParameters);
  NS_ENSURE_SUCCESS(rv,rv);
  if (pTotal!=1) {
    nsCOMPtr<nsIPrompt> pPrompt= do_GetService(NS_DEFAULTPROMPT_CONTRACTID, &rv);
    NS_ENSURE_SUCCESS(rv,rv);
    pPrompt->Alert(ToNewUnicode(NS_LITERAL_CSTRING("Erreur système")), ToNewUnicode(NS_LITERAL_CSTRING("Le nombre total de paramètres reçus est incorrect.")));
    return NS_ERROR_FAILURE;
  }

  nsAutoString pText;
  nsCOMArray<nsIVariant> pArray;
  nsCOMPtr<nsIWritableVariant> pVariant;
  PRUint32 pLsize=0, pCsize=0;
  PRUint32 pLineIndex, pColIndex;
  PRUint16 pNodeType;
  nsCOMPtr<nsIDOMElement> pResult;
  nsCOMPtr<nsIDOMNodeList> pLines, pValues;
  nsCOMPtr<nsIDOMNode> pLine, pValue, pContent;
  rv = pParameters[0]->GetElement(getter_AddRefs(pResult));
  NS_ENSURE_SUCCESS(rv,rv);
  rv = pResult->GetChildNodes(getter_AddRefs(pLines));
  NS_ENSURE_SUCCESS(rv,rv);
  pLines->GetLength(&pLsize);
  for (pLineIndex=0;pLineIndex<pLsize;pLineIndex++) {
    do {
      rv = pLines->Item(pLineIndex, getter_AddRefs(pLine));
      NS_ENSURE_SUCCESS(rv,rv);
      pLine->GetNodeType(&pNodeType);
      if (pNodeType!=nsIDOMNode::ELEMENT_NODE) pLineIndex++;
    } while (pLineIndex<pLsize && pNodeType!=nsIDOMNode::ELEMENT_NODE);
    if (pLineIndex>=pLsize) break;
    rv = pLine->GetChildNodes(getter_AddRefs(pValues));
    NS_ENSURE_SUCCESS(rv,rv);
    pValues->GetLength(&pCsize);
    for (pColIndex=0;pColIndex<pCsize;pColIndex++) {
      do {
        rv = pValues->Item(pColIndex, getter_AddRefs(pValue));
        NS_ENSURE_SUCCESS(rv,rv);
        pValue->GetNodeType(&pNodeType);
        if (pNodeType!=nsIDOMNode::ELEMENT_NODE) pColIndex++;
      } while (pColIndex<pCsize && pNodeType!=nsIDOMNode::ELEMENT_NODE);
      if (pColIndex>=pCsize) break;
      rv = pValue->GetFirstChild(getter_AddRefs(pContent));
      NS_ENSURE_SUCCESS(rv,rv);
      pVariant = do_CreateInstance(NS_VARIANT_CONTRACTID, &rv);
      NS_ENSURE_SUCCESS(rv,rv);
      if (pContent) {
        rv = pContent->GetNodeValue(pText);
        NS_ENSURE_SUCCESS(rv,rv);
        pVariant->SetAsAString(pText);
        printf("%s|",ToNewCString(pText));
      } else {
        pVariant->SetAsAString(NS_LITERAL_STRING(""));
      }
      rv = pArray.AppendObject(pVariant);
    }
  }
  rv = mComponent->TreatP00BB(pArray, pLsize, pCsize, mKey);
  return rv;
}


/* Generated by Pygmalion */


NS_IMPL_ISUPPORTS1(mozListenerP00BC, nsISOAPResponseListener)

mozListenerP00BC::mozListenerP00BC(mozC02gestsea* aComponent, const nsACString & aSearch)
{
  mComponent = aComponent;
  mSearch = aSearch;
}
mozListenerP00BC::~mozListenerP00BC()
{
}

NS_IMETHODIMP mozListenerP00BC::HandleResponse(nsISOAPResponse *aResponse, nsISOAPCall *aCall, PRUint32 aStatus, PRBool aLast, PRBool *aReturn)
{
  nsresult rv;
  nsCOMPtr<nsISOAPFault> pFault;
  rv = aResponse->GetFault(getter_AddRefs(pFault));
  NS_ENSURE_SUCCESS(rv, rv);
  if (pFault) {
    nsAutoString pFaute, pDetail, pTitle;
    nsCOMPtr<nsIDOMElement> pTheDetail;
    nsCOMPtr<nsIDOMNode> pNode;
    rv = pFault->GetDetail(getter_AddRefs(pTheDetail));
    NS_ENSURE_SUCCESS(rv,rv);
    rv = pTheDetail->GetFirstChild(getter_AddRefs(pNode));
    NS_ENSURE_SUCCESS(rv,rv);
    if (pNode) {
      nsCOMPtr<nsIDOMNamedNodeMap> pAttributes;
      nsCOMPtr<nsIDOMNode> pAttribute, pFirstNode;
      nsAutoString pNodeValue;
      rv = pNode->GetFirstChild(getter_AddRefs(pFirstNode));
      NS_ENSURE_SUCCESS(rv,rv);
      if (pFirstNode) {
        pFirstNode->GetNodeValue(pNodeValue);
        NS_ENSURE_SUCCESS(rv,rv);
        pDetail  = pNodeValue;
      }
      pNode->GetAttributes(getter_AddRefs(pAttributes));
      NS_ENSURE_SUCCESS(rv,rv);
      pAttributes->GetNamedItem(NS_LITERAL_STRING("code"), getter_AddRefs(pAttribute));
      NS_ENSURE_SUCCESS(rv,rv);
      if (pAttribute) {
        pAttribute->GetNodeValue(pNodeValue);
        NS_ENSURE_SUCCESS(rv,rv);
        pDetail += NS_LITERAL_STRING("\n(Erreur ");
        pDetail += pNodeValue;
        pDetail += NS_LITERAL_STRING(")");
      }
    } else pDetail = NS_LITERAL_STRING("Erreur sans message.");
    pFaute = pDetail;
    rv = pFault->GetFaultString(pTitle);
    NS_ENSURE_SUCCESS(rv,rv);
    nsCOMPtr<nsIPrompt> pPrompt= do_GetService(NS_DEFAULTPROMPT_CONTRACTID, &rv);
    NS_ENSURE_SUCCESS(rv,rv);
    pPrompt->Alert(ToNewUnicode(pTitle), ToNewUnicode(pFaute));
    return NS_ERROR_FAILURE;
  }

  nsISOAPParameter ** pParameters;
  PRUint32 pTotal;
  rv = aResponse->GetParameters(PR_FALSE, &pTotal, &pParameters);
  NS_ENSURE_SUCCESS(rv,rv);
  if (pTotal!=1) {
    nsCOMPtr<nsIPrompt> pPrompt= do_GetService(NS_DEFAULTPROMPT_CONTRACTID, &rv);
    NS_ENSURE_SUCCESS(rv,rv);
    pPrompt->Alert(ToNewUnicode(NS_LITERAL_CSTRING("Erreur système")), ToNewUnicode(NS_LITERAL_CSTRING("Le nombre total de paramètres reçus est incorrect.")));
    return NS_ERROR_FAILURE;
  }

  nsAutoString pText;
  nsCOMArray<nsIVariant> pArray;
  nsCOMPtr<nsIWritableVariant> pVariant;
  PRUint32 pLsize=0, pCsize=0;
  PRUint32 pLineIndex, pColIndex;
  PRUint16 pNodeType;
  nsCOMPtr<nsIDOMElement> pResult;
  nsCOMPtr<nsIDOMNodeList> pLines, pValues;
  nsCOMPtr<nsIDOMNode> pLine, pValue, pContent;
  rv = pParameters[0]->GetElement(getter_AddRefs(pResult));
  NS_ENSURE_SUCCESS(rv,rv);
  rv = pResult->GetChildNodes(getter_AddRefs(pLines));
  NS_ENSURE_SUCCESS(rv,rv);
  pLines->GetLength(&pLsize);
  for (pLineIndex=0;pLineIndex<pLsize;pLineIndex++) {
    do {
      rv = pLines->Item(pLineIndex, getter_AddRefs(pLine));
      NS_ENSURE_SUCCESS(rv,rv);
      pLine->GetNodeType(&pNodeType);
      if (pNodeType!=nsIDOMNode::ELEMENT_NODE) pLineIndex++;
    } while (pLineIndex<pLsize && pNodeType!=nsIDOMNode::ELEMENT_NODE);
    if (pLineIndex>=pLsize) break;
    rv = pLine->GetChildNodes(getter_AddRefs(pValues));
    NS_ENSURE_SUCCESS(rv,rv);
    pValues->GetLength(&pCsize);
    for (pColIndex=0;pColIndex<pCsize;pColIndex++) {
      do {
        rv = pValues->Item(pColIndex, getter_AddRefs(pValue));
        NS_ENSURE_SUCCESS(rv,rv);
        pValue->GetNodeType(&pNodeType);
        if (pNodeType!=nsIDOMNode::ELEMENT_NODE) pColIndex++;
      } while (pColIndex<pCsize && pNodeType!=nsIDOMNode::ELEMENT_NODE);
      if (pColIndex>=pCsize) break;
      rv = pValue->GetFirstChild(getter_AddRefs(pContent));
      NS_ENSURE_SUCCESS(rv,rv);
      pVariant = do_CreateInstance(NS_VARIANT_CONTRACTID, &rv);
      NS_ENSURE_SUCCESS(rv,rv);
      if (pContent) {
        rv = pContent->GetNodeValue(pText);
        NS_ENSURE_SUCCESS(rv,rv);
        pVariant->SetAsAString(pText);
        printf("%s|",ToNewCString(pText));
      } else {
        pVariant->SetAsAString(NS_LITERAL_STRING(""));
      }
      rv = pArray.AppendObject(pVariant);
    }
  }
  rv = mComponent->TreatP00BC(pArray, pLsize, pCsize, mSearch);
  return rv;
}


/* Generated by Pygmalion */


NS_IMPL_ISUPPORTS1(mozListenerP00BD, nsISOAPResponseListener)

mozListenerP00BD::mozListenerP00BD(mozC02gestsea* aComponent, const nsACString & aSearch)
{
  mComponent = aComponent;
  mSearch = aSearch;
}
mozListenerP00BD::~mozListenerP00BD()
{
}

NS_IMETHODIMP mozListenerP00BD::HandleResponse(nsISOAPResponse *aResponse, nsISOAPCall *aCall, PRUint32 aStatus, PRBool aLast, PRBool *aReturn)
{
  nsresult rv;
  nsCOMPtr<nsISOAPFault> pFault;
  rv = aResponse->GetFault(getter_AddRefs(pFault));
  NS_ENSURE_SUCCESS(rv, rv);
  if (pFault) {
    nsAutoString pFaute, pDetail, pTitle;
    nsCOMPtr<nsIDOMElement> pTheDetail;
    nsCOMPtr<nsIDOMNode> pNode;
    rv = pFault->GetDetail(getter_AddRefs(pTheDetail));
    NS_ENSURE_SUCCESS(rv,rv);
    rv = pTheDetail->GetFirstChild(getter_AddRefs(pNode));
    NS_ENSURE_SUCCESS(rv,rv);
    if (pNode) {
      nsCOMPtr<nsIDOMNamedNodeMap> pAttributes;
      nsCOMPtr<nsIDOMNode> pAttribute, pFirstNode;
      nsAutoString pNodeValue;
      rv = pNode->GetFirstChild(getter_AddRefs(pFirstNode));
      NS_ENSURE_SUCCESS(rv,rv);
      if (pFirstNode) {
        pFirstNode->GetNodeValue(pNodeValue);
        NS_ENSURE_SUCCESS(rv,rv);
        pDetail  = pNodeValue;
      }
      pNode->GetAttributes(getter_AddRefs(pAttributes));
      NS_ENSURE_SUCCESS(rv,rv);
      pAttributes->GetNamedItem(NS_LITERAL_STRING("code"), getter_AddRefs(pAttribute));
      NS_ENSURE_SUCCESS(rv,rv);
      if (pAttribute) {
        pAttribute->GetNodeValue(pNodeValue);
        NS_ENSURE_SUCCESS(rv,rv);
        pDetail += NS_LITERAL_STRING("\n(Erreur ");
        pDetail += pNodeValue;
        pDetail += NS_LITERAL_STRING(")");
      }
    } else pDetail = NS_LITERAL_STRING("Erreur sans message.");
    pFaute = pDetail;
    rv = pFault->GetFaultString(pTitle);
    NS_ENSURE_SUCCESS(rv,rv);
    nsCOMPtr<nsIPrompt> pPrompt= do_GetService(NS_DEFAULTPROMPT_CONTRACTID, &rv);
    NS_ENSURE_SUCCESS(rv,rv);
    pPrompt->Alert(ToNewUnicode(pTitle), ToNewUnicode(pFaute));
    return NS_ERROR_FAILURE;
  }

  nsISOAPParameter ** pParameters;
  PRUint32 pTotal;
  rv = aResponse->GetParameters(PR_FALSE, &pTotal, &pParameters);
  NS_ENSURE_SUCCESS(rv,rv);
  if (pTotal!=1) {
    nsCOMPtr<nsIPrompt> pPrompt= do_GetService(NS_DEFAULTPROMPT_CONTRACTID, &rv);
    NS_ENSURE_SUCCESS(rv,rv);
    pPrompt->Alert(ToNewUnicode(NS_LITERAL_CSTRING("Erreur système")), ToNewUnicode(NS_LITERAL_CSTRING("Le nombre total de paramètres reçus est incorrect.")));
    return NS_ERROR_FAILURE;
  }

  nsAutoString pText;
  nsCOMArray<nsIVariant> pArray;
  nsCOMPtr<nsIWritableVariant> pVariant;
  PRUint32 pLsize=0, pCsize=0;
  PRUint32 pLineIndex, pColIndex;
  PRUint16 pNodeType;
  nsCOMPtr<nsIDOMElement> pResult;
  nsCOMPtr<nsIDOMNodeList> pLines, pValues;
  nsCOMPtr<nsIDOMNode> pLine, pValue, pContent;
  rv = pParameters[0]->GetElement(getter_AddRefs(pResult));
  NS_ENSURE_SUCCESS(rv,rv);
  rv = pResult->GetChildNodes(getter_AddRefs(pLines));
  NS_ENSURE_SUCCESS(rv,rv);
  pLines->GetLength(&pLsize);
  for (pLineIndex=0;pLineIndex<pLsize;pLineIndex++) {
    do {
      rv = pLines->Item(pLineIndex, getter_AddRefs(pLine));
      NS_ENSURE_SUCCESS(rv,rv);
      pLine->GetNodeType(&pNodeType);
      if (pNodeType!=nsIDOMNode::ELEMENT_NODE) pLineIndex++;
    } while (pLineIndex<pLsize && pNodeType!=nsIDOMNode::ELEMENT_NODE);
    if (pLineIndex>=pLsize) break;
    rv = pLine->GetChildNodes(getter_AddRefs(pValues));
    NS_ENSURE_SUCCESS(rv,rv);
    pValues->GetLength(&pCsize);
    for (pColIndex=0;pColIndex<pCsize;pColIndex++) {
      do {
        rv = pValues->Item(pColIndex, getter_AddRefs(pValue));
        NS_ENSURE_SUCCESS(rv,rv);
        pValue->GetNodeType(&pNodeType);
        if (pNodeType!=nsIDOMNode::ELEMENT_NODE) pColIndex++;
      } while (pColIndex<pCsize && pNodeType!=nsIDOMNode::ELEMENT_NODE);
      if (pColIndex>=pCsize) break;
      rv = pValue->GetFirstChild(getter_AddRefs(pContent));
      NS_ENSURE_SUCCESS(rv,rv);
      pVariant = do_CreateInstance(NS_VARIANT_CONTRACTID, &rv);
      NS_ENSURE_SUCCESS(rv,rv);
      if (pContent) {
        rv = pContent->GetNodeValue(pText);
        NS_ENSURE_SUCCESS(rv,rv);
        pVariant->SetAsAString(pText);
        printf("%s|",ToNewCString(pText));
      } else {
        pVariant->SetAsAString(NS_LITERAL_STRING(""));
      }
      rv = pArray.AppendObject(pVariant);
    }
  }
  rv = mComponent->TreatP00BD(pArray, pLsize, pCsize, mSearch);
  return rv;
}


/* Generated by Pygmalion */


NS_IMPL_ISUPPORTS1(mozListenerP00BE, nsISOAPResponseListener)

mozListenerP00BE::mozListenerP00BE(mozC02gestsea* aComponent, const nsAString & aKey)
{
  mComponent = aComponent;
  mKey = aKey;
}
mozListenerP00BE::~mozListenerP00BE()
{
}

NS_IMETHODIMP mozListenerP00BE::HandleResponse(nsISOAPResponse *aResponse, nsISOAPCall *aCall, PRUint32 aStatus, PRBool aLast, PRBool *aReturn)
{
  nsresult rv;
  nsCOMPtr<nsISOAPFault> pFault;
  rv = aResponse->GetFault(getter_AddRefs(pFault));
  NS_ENSURE_SUCCESS(rv, rv);
  if (pFault) {
    nsAutoString pFaute, pDetail, pTitle;
    nsCOMPtr<nsIDOMElement> pTheDetail;
    nsCOMPtr<nsIDOMNode> pNode;
    rv = pFault->GetDetail(getter_AddRefs(pTheDetail));
    NS_ENSURE_SUCCESS(rv,rv);
    rv = pTheDetail->GetFirstChild(getter_AddRefs(pNode));
    NS_ENSURE_SUCCESS(rv,rv);
    if (pNode) {
      nsCOMPtr<nsIDOMNamedNodeMap> pAttributes;
      nsCOMPtr<nsIDOMNode> pAttribute, pFirstNode;
      nsAutoString pNodeValue;
      rv = pNode->GetFirstChild(getter_AddRefs(pFirstNode));
      NS_ENSURE_SUCCESS(rv,rv);
      if (pFirstNode) {
        pFirstNode->GetNodeValue(pNodeValue);
        NS_ENSURE_SUCCESS(rv,rv);
        pDetail  = pNodeValue;
      }
      pNode->GetAttributes(getter_AddRefs(pAttributes));
      NS_ENSURE_SUCCESS(rv,rv);
      pAttributes->GetNamedItem(NS_LITERAL_STRING("code"), getter_AddRefs(pAttribute));
      NS_ENSURE_SUCCESS(rv,rv);
      if (pAttribute) {
        pAttribute->GetNodeValue(pNodeValue);
        NS_ENSURE_SUCCESS(rv,rv);
        pDetail += NS_LITERAL_STRING("\n(Erreur ");
        pDetail += pNodeValue;
        pDetail += NS_LITERAL_STRING(")");
      }
    } else pDetail = NS_LITERAL_STRING("Erreur sans message.");
    pFaute = pDetail;
    rv = pFault->GetFaultString(pTitle);
    NS_ENSURE_SUCCESS(rv,rv);
    nsCOMPtr<nsIPrompt> pPrompt= do_GetService(NS_DEFAULTPROMPT_CONTRACTID, &rv);
    NS_ENSURE_SUCCESS(rv,rv);
    pPrompt->Alert(ToNewUnicode(pTitle), ToNewUnicode(pFaute));
    return NS_ERROR_FAILURE;
  }

  nsISOAPParameter ** pParameters;
  PRUint32 pTotal;
  rv = aResponse->GetParameters(PR_FALSE, &pTotal, &pParameters);
  NS_ENSURE_SUCCESS(rv,rv);
  if (pTotal!=1) {
    nsCOMPtr<nsIPrompt> pPrompt= do_GetService(NS_DEFAULTPROMPT_CONTRACTID, &rv);
    NS_ENSURE_SUCCESS(rv,rv);
    pPrompt->Alert(ToNewUnicode(NS_LITERAL_CSTRING("Erreur système")), ToNewUnicode(NS_LITERAL_CSTRING("Le nombre total de paramètres reçus est incorrect.")));
    return NS_ERROR_FAILURE;
  }

  nsAutoString pText;
  nsCOMArray<nsIVariant> pArray;
  nsCOMPtr<nsIWritableVariant> pVariant;
  PRUint32 pLsize=0, pCsize=0;
  PRUint32 pLineIndex, pColIndex;
  PRUint16 pNodeType;
  nsCOMPtr<nsIDOMElement> pResult;
  nsCOMPtr<nsIDOMNodeList> pLines, pValues;
  nsCOMPtr<nsIDOMNode> pLine, pValue, pContent;
  rv = pParameters[0]->GetElement(getter_AddRefs(pResult));
  NS_ENSURE_SUCCESS(rv,rv);
  rv = pResult->GetChildNodes(getter_AddRefs(pLines));
  NS_ENSURE_SUCCESS(rv,rv);
  pLines->GetLength(&pLsize);
  for (pLineIndex=0;pLineIndex<pLsize;pLineIndex++) {
    do {
      rv = pLines->Item(pLineIndex, getter_AddRefs(pLine));
      NS_ENSURE_SUCCESS(rv,rv);
      pLine->GetNodeType(&pNodeType);
      if (pNodeType!=nsIDOMNode::ELEMENT_NODE) pLineIndex++;
    } while (pLineIndex<pLsize && pNodeType!=nsIDOMNode::ELEMENT_NODE);
    if (pLineIndex>=pLsize) break;
    rv = pLine->GetChildNodes(getter_AddRefs(pValues));
    NS_ENSURE_SUCCESS(rv,rv);
    pValues->GetLength(&pCsize);
    for (pColIndex=0;pColIndex<pCsize;pColIndex++) {
      do {
        rv = pValues->Item(pColIndex, getter_AddRefs(pValue));
        NS_ENSURE_SUCCESS(rv,rv);
        pValue->GetNodeType(&pNodeType);
        if (pNodeType!=nsIDOMNode::ELEMENT_NODE) pColIndex++;
      } while (pColIndex<pCsize && pNodeType!=nsIDOMNode::ELEMENT_NODE);
      if (pColIndex>=pCsize) break;
      rv = pValue->GetFirstChild(getter_AddRefs(pContent));
      NS_ENSURE_SUCCESS(rv,rv);
      pVariant = do_CreateInstance(NS_VARIANT_CONTRACTID, &rv);
      NS_ENSURE_SUCCESS(rv,rv);
      if (pContent) {
        rv = pContent->GetNodeValue(pText);
        NS_ENSURE_SUCCESS(rv,rv);
        pVariant->SetAsAString(pText);
        printf("%s|",ToNewCString(pText));
      } else {
        pVariant->SetAsAString(NS_LITERAL_STRING(""));
      }
      rv = pArray.AppendObject(pVariant);
    }
  }
  rv = mComponent->TreatP00BE(pArray, pLsize, pCsize, mKey);
  return rv;
}


/* Generated by Pygmalion */


NS_IMPL_ISUPPORTS1(mozListenerP00BF, nsISOAPResponseListener)

mozListenerP00BF::mozListenerP00BF(mozC02gestsea* aComponent, const nsACString & aSearch)
{
  mComponent = aComponent;
  mSearch = aSearch;
}
mozListenerP00BF::~mozListenerP00BF()
{
}

NS_IMETHODIMP mozListenerP00BF::HandleResponse(nsISOAPResponse *aResponse, nsISOAPCall *aCall, PRUint32 aStatus, PRBool aLast, PRBool *aReturn)
{
  nsresult rv;
  nsCOMPtr<nsISOAPFault> pFault;
  rv = aResponse->GetFault(getter_AddRefs(pFault));
  NS_ENSURE_SUCCESS(rv, rv);
  if (pFault) {
    nsAutoString pFaute, pDetail, pTitle;
    nsCOMPtr<nsIDOMElement> pTheDetail;
    nsCOMPtr<nsIDOMNode> pNode;
    rv = pFault->GetDetail(getter_AddRefs(pTheDetail));
    NS_ENSURE_SUCCESS(rv,rv);
    rv = pTheDetail->GetFirstChild(getter_AddRefs(pNode));
    NS_ENSURE_SUCCESS(rv,rv);
    if (pNode) {
      nsCOMPtr<nsIDOMNamedNodeMap> pAttributes;
      nsCOMPtr<nsIDOMNode> pAttribute, pFirstNode;
      nsAutoString pNodeValue;
      rv = pNode->GetFirstChild(getter_AddRefs(pFirstNode));
      NS_ENSURE_SUCCESS(rv,rv);
      if (pFirstNode) {
        pFirstNode->GetNodeValue(pNodeValue);
        NS_ENSURE_SUCCESS(rv,rv);
        pDetail  = pNodeValue;
      }
      pNode->GetAttributes(getter_AddRefs(pAttributes));
      NS_ENSURE_SUCCESS(rv,rv);
      pAttributes->GetNamedItem(NS_LITERAL_STRING("code"), getter_AddRefs(pAttribute));
      NS_ENSURE_SUCCESS(rv,rv);
      if (pAttribute) {
        pAttribute->GetNodeValue(pNodeValue);
        NS_ENSURE_SUCCESS(rv,rv);
        pDetail += NS_LITERAL_STRING("\n(Erreur ");
        pDetail += pNodeValue;
        pDetail += NS_LITERAL_STRING(")");
      }
    } else pDetail = NS_LITERAL_STRING("Erreur sans message.");
    pFaute = pDetail;
    rv = pFault->GetFaultString(pTitle);
    NS_ENSURE_SUCCESS(rv,rv);
    nsCOMPtr<nsIPrompt> pPrompt= do_GetService(NS_DEFAULTPROMPT_CONTRACTID, &rv);
    NS_ENSURE_SUCCESS(rv,rv);
    pPrompt->Alert(ToNewUnicode(pTitle), ToNewUnicode(pFaute));
    return NS_ERROR_FAILURE;
  }

  nsISOAPParameter ** pParameters;
  PRUint32 pTotal;
  rv = aResponse->GetParameters(PR_FALSE, &pTotal, &pParameters);
  NS_ENSURE_SUCCESS(rv,rv);
  if (pTotal!=1) {
    nsCOMPtr<nsIPrompt> pPrompt= do_GetService(NS_DEFAULTPROMPT_CONTRACTID, &rv);
    NS_ENSURE_SUCCESS(rv,rv);
    pPrompt->Alert(ToNewUnicode(NS_LITERAL_CSTRING("Erreur système")), ToNewUnicode(NS_LITERAL_CSTRING("Le nombre total de paramètres reçus est incorrect.")));
    return NS_ERROR_FAILURE;
  }

  nsAutoString pText;
  nsCOMArray<nsIVariant> pArray;
  nsCOMPtr<nsIWritableVariant> pVariant;
  PRUint32 pLsize=0, pCsize=0;
  PRUint32 pLineIndex, pColIndex;
  PRUint16 pNodeType;
  nsCOMPtr<nsIDOMElement> pResult;
  nsCOMPtr<nsIDOMNodeList> pLines, pValues;
  nsCOMPtr<nsIDOMNode> pLine, pValue, pContent;
  rv = pParameters[0]->GetElement(getter_AddRefs(pResult));
  NS_ENSURE_SUCCESS(rv,rv);
  rv = pResult->GetChildNodes(getter_AddRefs(pLines));
  NS_ENSURE_SUCCESS(rv,rv);
  pLines->GetLength(&pLsize);
  for (pLineIndex=0;pLineIndex<pLsize;pLineIndex++) {
    do {
      rv = pLines->Item(pLineIndex, getter_AddRefs(pLine));
      NS_ENSURE_SUCCESS(rv,rv);
      pLine->GetNodeType(&pNodeType);
      if (pNodeType!=nsIDOMNode::ELEMENT_NODE) pLineIndex++;
    } while (pLineIndex<pLsize && pNodeType!=nsIDOMNode::ELEMENT_NODE);
    if (pLineIndex>=pLsize) break;
    rv = pLine->GetChildNodes(getter_AddRefs(pValues));
    NS_ENSURE_SUCCESS(rv,rv);
    pValues->GetLength(&pCsize);
    for (pColIndex=0;pColIndex<pCsize;pColIndex++) {
      do {
        rv = pValues->Item(pColIndex, getter_AddRefs(pValue));
        NS_ENSURE_SUCCESS(rv,rv);
        pValue->GetNodeType(&pNodeType);
        if (pNodeType!=nsIDOMNode::ELEMENT_NODE) pColIndex++;
      } while (pColIndex<pCsize && pNodeType!=nsIDOMNode::ELEMENT_NODE);
      if (pColIndex>=pCsize) break;
      rv = pValue->GetFirstChild(getter_AddRefs(pContent));
      NS_ENSURE_SUCCESS(rv,rv);
      pVariant = do_CreateInstance(NS_VARIANT_CONTRACTID, &rv);
      NS_ENSURE_SUCCESS(rv,rv);
      if (pContent) {
        rv = pContent->GetNodeValue(pText);
        NS_ENSURE_SUCCESS(rv,rv);
        pVariant->SetAsAString(pText);
        printf("%s|",ToNewCString(pText));
      } else {
        pVariant->SetAsAString(NS_LITERAL_STRING(""));
      }
      rv = pArray.AppendObject(pVariant);
    }
  }
  rv = mComponent->TreatP00BF(pArray, pLsize, pCsize, mSearch);
  return rv;
}


/* Generated by Pygmalion */


NS_IMPL_ISUPPORTS1(mozListenerP00C0, nsISOAPResponseListener)

mozListenerP00C0::mozListenerP00C0(mozC02gestsea* aComponent, const nsACString & aSearch)
{
  mComponent = aComponent;
  mSearch = aSearch;
}
mozListenerP00C0::~mozListenerP00C0()
{
}

NS_IMETHODIMP mozListenerP00C0::HandleResponse(nsISOAPResponse *aResponse, nsISOAPCall *aCall, PRUint32 aStatus, PRBool aLast, PRBool *aReturn)
{
  nsresult rv;
  nsCOMPtr<nsISOAPFault> pFault;
  rv = aResponse->GetFault(getter_AddRefs(pFault));
  NS_ENSURE_SUCCESS(rv, rv);
  if (pFault) {
    nsAutoString pFaute, pDetail, pTitle;
    nsCOMPtr<nsIDOMElement> pTheDetail;
    nsCOMPtr<nsIDOMNode> pNode;
    rv = pFault->GetDetail(getter_AddRefs(pTheDetail));
    NS_ENSURE_SUCCESS(rv,rv);
    rv = pTheDetail->GetFirstChild(getter_AddRefs(pNode));
    NS_ENSURE_SUCCESS(rv,rv);
    if (pNode) {
      nsCOMPtr<nsIDOMNamedNodeMap> pAttributes;
      nsCOMPtr<nsIDOMNode> pAttribute, pFirstNode;
      nsAutoString pNodeValue;
      rv = pNode->GetFirstChild(getter_AddRefs(pFirstNode));
      NS_ENSURE_SUCCESS(rv,rv);
      if (pFirstNode) {
        pFirstNode->GetNodeValue(pNodeValue);
        NS_ENSURE_SUCCESS(rv,rv);
        pDetail  = pNodeValue;
      }
      pNode->GetAttributes(getter_AddRefs(pAttributes));
      NS_ENSURE_SUCCESS(rv,rv);
      pAttributes->GetNamedItem(NS_LITERAL_STRING("code"), getter_AddRefs(pAttribute));
      NS_ENSURE_SUCCESS(rv,rv);
      if (pAttribute) {
        pAttribute->GetNodeValue(pNodeValue);
        NS_ENSURE_SUCCESS(rv,rv);
        pDetail += NS_LITERAL_STRING("\n(Erreur ");
        pDetail += pNodeValue;
        pDetail += NS_LITERAL_STRING(")");
      }
    } else pDetail = NS_LITERAL_STRING("Erreur sans message.");
    pFaute = pDetail;
    rv = pFault->GetFaultString(pTitle);
    NS_ENSURE_SUCCESS(rv,rv);
    nsCOMPtr<nsIPrompt> pPrompt= do_GetService(NS_DEFAULTPROMPT_CONTRACTID, &rv);
    NS_ENSURE_SUCCESS(rv,rv);
    pPrompt->Alert(ToNewUnicode(pTitle), ToNewUnicode(pFaute));
    return NS_ERROR_FAILURE;
  }

  nsISOAPParameter ** pParameters;
  PRUint32 pTotal;
  rv = aResponse->GetParameters(PR_FALSE, &pTotal, &pParameters);
  NS_ENSURE_SUCCESS(rv,rv);
  if (pTotal!=1) {
    nsCOMPtr<nsIPrompt> pPrompt= do_GetService(NS_DEFAULTPROMPT_CONTRACTID, &rv);
    NS_ENSURE_SUCCESS(rv,rv);
    pPrompt->Alert(ToNewUnicode(NS_LITERAL_CSTRING("Erreur système")), ToNewUnicode(NS_LITERAL_CSTRING("Le nombre total de paramètres reçus est incorrect.")));
    return NS_ERROR_FAILURE;
  }

  nsAutoString pText;
  nsCOMArray<nsIVariant> pArray;
  nsCOMPtr<nsIWritableVariant> pVariant;
  PRUint32 pLsize=0, pCsize=0;
  PRUint32 pLineIndex, pColIndex;
  PRUint16 pNodeType;
  nsCOMPtr<nsIDOMElement> pResult;
  nsCOMPtr<nsIDOMNodeList> pLines, pValues;
  nsCOMPtr<nsIDOMNode> pLine, pValue, pContent;
  rv = pParameters[0]->GetElement(getter_AddRefs(pResult));
  NS_ENSURE_SUCCESS(rv,rv);
  rv = pResult->GetChildNodes(getter_AddRefs(pLines));
  NS_ENSURE_SUCCESS(rv,rv);
  pLines->GetLength(&pLsize);
  for (pLineIndex=0;pLineIndex<pLsize;pLineIndex++) {
    do {
      rv = pLines->Item(pLineIndex, getter_AddRefs(pLine));
      NS_ENSURE_SUCCESS(rv,rv);
      pLine->GetNodeType(&pNodeType);
      if (pNodeType!=nsIDOMNode::ELEMENT_NODE) pLineIndex++;
    } while (pLineIndex<pLsize && pNodeType!=nsIDOMNode::ELEMENT_NODE);
    if (pLineIndex>=pLsize) break;
    rv = pLine->GetChildNodes(getter_AddRefs(pValues));
    NS_ENSURE_SUCCESS(rv,rv);
    pValues->GetLength(&pCsize);
    for (pColIndex=0;pColIndex<pCsize;pColIndex++) {
      do {
        rv = pValues->Item(pColIndex, getter_AddRefs(pValue));
        NS_ENSURE_SUCCESS(rv,rv);
        pValue->GetNodeType(&pNodeType);
        if (pNodeType!=nsIDOMNode::ELEMENT_NODE) pColIndex++;
      } while (pColIndex<pCsize && pNodeType!=nsIDOMNode::ELEMENT_NODE);
      if (pColIndex>=pCsize) break;
      rv = pValue->GetFirstChild(getter_AddRefs(pContent));
      NS_ENSURE_SUCCESS(rv,rv);
      pVariant = do_CreateInstance(NS_VARIANT_CONTRACTID, &rv);
      NS_ENSURE_SUCCESS(rv,rv);
      if (pContent) {
        rv = pContent->GetNodeValue(pText);
        NS_ENSURE_SUCCESS(rv,rv);
        pVariant->SetAsAString(pText);
        printf("%s|",ToNewCString(pText));
      } else {
        pVariant->SetAsAString(NS_LITERAL_STRING(""));
      }
      rv = pArray.AppendObject(pVariant);
    }
  }
  rv = mComponent->TreatP00C0(pArray, pLsize, pCsize, mSearch);
  return rv;
}


/* Generated by Pygmalion */


NS_IMPL_ISUPPORTS1(mozListenerP00C1, nsISOAPResponseListener)

mozListenerP00C1::mozListenerP00C1(mozC02gestsea* aComponent, const nsAString & aKey)
{
  mComponent = aComponent;
  mKey = aKey;
}
mozListenerP00C1::~mozListenerP00C1()
{
}

NS_IMETHODIMP mozListenerP00C1::HandleResponse(nsISOAPResponse *aResponse, nsISOAPCall *aCall, PRUint32 aStatus, PRBool aLast, PRBool *aReturn)
{
  nsresult rv;
  nsCOMPtr<nsISOAPFault> pFault;
  rv = aResponse->GetFault(getter_AddRefs(pFault));
  NS_ENSURE_SUCCESS(rv, rv);
  if (pFault) {
    nsAutoString pFaute, pDetail, pTitle;
    nsCOMPtr<nsIDOMElement> pTheDetail;
    nsCOMPtr<nsIDOMNode> pNode;
    rv = pFault->GetDetail(getter_AddRefs(pTheDetail));
    NS_ENSURE_SUCCESS(rv,rv);
    rv = pTheDetail->GetFirstChild(getter_AddRefs(pNode));
    NS_ENSURE_SUCCESS(rv,rv);
    if (pNode) {
      nsCOMPtr<nsIDOMNamedNodeMap> pAttributes;
      nsCOMPtr<nsIDOMNode> pAttribute, pFirstNode;
      nsAutoString pNodeValue;
      rv = pNode->GetFirstChild(getter_AddRefs(pFirstNode));
      NS_ENSURE_SUCCESS(rv,rv);
      if (pFirstNode) {
        pFirstNode->GetNodeValue(pNodeValue);
        NS_ENSURE_SUCCESS(rv,rv);
        pDetail  = pNodeValue;
      }
      pNode->GetAttributes(getter_AddRefs(pAttributes));
      NS_ENSURE_SUCCESS(rv,rv);
      pAttributes->GetNamedItem(NS_LITERAL_STRING("code"), getter_AddRefs(pAttribute));
      NS_ENSURE_SUCCESS(rv,rv);
      if (pAttribute) {
        pAttribute->GetNodeValue(pNodeValue);
        NS_ENSURE_SUCCESS(rv,rv);
        pDetail += NS_LITERAL_STRING("\n(Erreur ");
        pDetail += pNodeValue;
        pDetail += NS_LITERAL_STRING(")");
      }
    } else pDetail = NS_LITERAL_STRING("Erreur sans message.");
    pFaute = pDetail;
    rv = pFault->GetFaultString(pTitle);
    NS_ENSURE_SUCCESS(rv,rv);
    nsCOMPtr<nsIPrompt> pPrompt= do_GetService(NS_DEFAULTPROMPT_CONTRACTID, &rv);
    NS_ENSURE_SUCCESS(rv,rv);
    pPrompt->Alert(ToNewUnicode(pTitle), ToNewUnicode(pFaute));
    return NS_ERROR_FAILURE;
  }

  nsISOAPParameter ** pParameters;
  PRUint32 pTotal;
  rv = aResponse->GetParameters(PR_FALSE, &pTotal, &pParameters);
  NS_ENSURE_SUCCESS(rv,rv);
  if (pTotal!=1) {
    nsCOMPtr<nsIPrompt> pPrompt= do_GetService(NS_DEFAULTPROMPT_CONTRACTID, &rv);
    NS_ENSURE_SUCCESS(rv,rv);
    pPrompt->Alert(ToNewUnicode(NS_LITERAL_CSTRING("Erreur système")), ToNewUnicode(NS_LITERAL_CSTRING("Le nombre total de paramètres reçus est incorrect.")));
    return NS_ERROR_FAILURE;
  }

  nsAutoString pText;
  nsCOMArray<nsIVariant> pArray;
  nsCOMPtr<nsIWritableVariant> pVariant;
  PRUint32 pLsize=0, pCsize=0;
  PRUint32 pLineIndex, pColIndex;
  PRUint16 pNodeType;
  nsCOMPtr<nsIDOMElement> pResult;
  nsCOMPtr<nsIDOMNodeList> pLines, pValues;
  nsCOMPtr<nsIDOMNode> pLine, pValue, pContent;
  rv = pParameters[0]->GetElement(getter_AddRefs(pResult));
  NS_ENSURE_SUCCESS(rv,rv);
  rv = pResult->GetChildNodes(getter_AddRefs(pLines));
  NS_ENSURE_SUCCESS(rv,rv);
  pLines->GetLength(&pLsize);
  for (pLineIndex=0;pLineIndex<pLsize;pLineIndex++) {
    do {
      rv = pLines->Item(pLineIndex, getter_AddRefs(pLine));
      NS_ENSURE_SUCCESS(rv,rv);
      pLine->GetNodeType(&pNodeType);
      if (pNodeType!=nsIDOMNode::ELEMENT_NODE) pLineIndex++;
    } while (pLineIndex<pLsize && pNodeType!=nsIDOMNode::ELEMENT_NODE);
    if (pLineIndex>=pLsize) break;
    rv = pLine->GetChildNodes(getter_AddRefs(pValues));
    NS_ENSURE_SUCCESS(rv,rv);
    pValues->GetLength(&pCsize);
    for (pColIndex=0;pColIndex<pCsize;pColIndex++) {
      do {
        rv = pValues->Item(pColIndex, getter_AddRefs(pValue));
        NS_ENSURE_SUCCESS(rv,rv);
        pValue->GetNodeType(&pNodeType);
        if (pNodeType!=nsIDOMNode::ELEMENT_NODE) pColIndex++;
      } while (pColIndex<pCsize && pNodeType!=nsIDOMNode::ELEMENT_NODE);
      if (pColIndex>=pCsize) break;
      rv = pValue->GetFirstChild(getter_AddRefs(pContent));
      NS_ENSURE_SUCCESS(rv,rv);
      pVariant = do_CreateInstance(NS_VARIANT_CONTRACTID, &rv);
      NS_ENSURE_SUCCESS(rv,rv);
      if (pContent) {
        rv = pContent->GetNodeValue(pText);
        NS_ENSURE_SUCCESS(rv,rv);
        pVariant->SetAsAString(pText);
        printf("%s|",ToNewCString(pText));
      } else {
        pVariant->SetAsAString(NS_LITERAL_STRING(""));
      }
      rv = pArray.AppendObject(pVariant);
    }
  }
  rv = mComponent->TreatP00C1(pArray, pLsize, pCsize, mKey);
  return rv;
}


/* Generated by Pygmalion */


NS_IMPL_ISUPPORTS1(mozListenerP00C2, nsISOAPResponseListener)

mozListenerP00C2::mozListenerP00C2(mozC02gestsea* aComponent, const nsACString & aSearch)
{
  mComponent = aComponent;
  mSearch = aSearch;
}
mozListenerP00C2::~mozListenerP00C2()
{
}

NS_IMETHODIMP mozListenerP00C2::HandleResponse(nsISOAPResponse *aResponse, nsISOAPCall *aCall, PRUint32 aStatus, PRBool aLast, PRBool *aReturn)
{
  nsresult rv;
  nsCOMPtr<nsISOAPFault> pFault;
  rv = aResponse->GetFault(getter_AddRefs(pFault));
  NS_ENSURE_SUCCESS(rv, rv);
  if (pFault) {
    nsAutoString pFaute, pDetail, pTitle;
    nsCOMPtr<nsIDOMElement> pTheDetail;
    nsCOMPtr<nsIDOMNode> pNode;
    rv = pFault->GetDetail(getter_AddRefs(pTheDetail));
    NS_ENSURE_SUCCESS(rv,rv);
    rv = pTheDetail->GetFirstChild(getter_AddRefs(pNode));
    NS_ENSURE_SUCCESS(rv,rv);
    if (pNode) {
      nsCOMPtr<nsIDOMNamedNodeMap> pAttributes;
      nsCOMPtr<nsIDOMNode> pAttribute, pFirstNode;
      nsAutoString pNodeValue;
      rv = pNode->GetFirstChild(getter_AddRefs(pFirstNode));
      NS_ENSURE_SUCCESS(rv,rv);
      if (pFirstNode) {
        pFirstNode->GetNodeValue(pNodeValue);
        NS_ENSURE_SUCCESS(rv,rv);
        pDetail  = pNodeValue;
      }
      pNode->GetAttributes(getter_AddRefs(pAttributes));
      NS_ENSURE_SUCCESS(rv,rv);
      pAttributes->GetNamedItem(NS_LITERAL_STRING("code"), getter_AddRefs(pAttribute));
      NS_ENSURE_SUCCESS(rv,rv);
      if (pAttribute) {
        pAttribute->GetNodeValue(pNodeValue);
        NS_ENSURE_SUCCESS(rv,rv);
        pDetail += NS_LITERAL_STRING("\n(Erreur ");
        pDetail += pNodeValue;
        pDetail += NS_LITERAL_STRING(")");
      }
    } else pDetail = NS_LITERAL_STRING("Erreur sans message.");
    pFaute = pDetail;
    rv = pFault->GetFaultString(pTitle);
    NS_ENSURE_SUCCESS(rv,rv);
    nsCOMPtr<nsIPrompt> pPrompt= do_GetService(NS_DEFAULTPROMPT_CONTRACTID, &rv);
    NS_ENSURE_SUCCESS(rv,rv);
    pPrompt->Alert(ToNewUnicode(pTitle), ToNewUnicode(pFaute));
    return NS_ERROR_FAILURE;
  }

  nsISOAPParameter ** pParameters;
  PRUint32 pTotal;
  rv = aResponse->GetParameters(PR_FALSE, &pTotal, &pParameters);
  NS_ENSURE_SUCCESS(rv,rv);
  if (pTotal!=1) {
    nsCOMPtr<nsIPrompt> pPrompt= do_GetService(NS_DEFAULTPROMPT_CONTRACTID, &rv);
    NS_ENSURE_SUCCESS(rv,rv);
    pPrompt->Alert(ToNewUnicode(NS_LITERAL_CSTRING("Erreur système")), ToNewUnicode(NS_LITERAL_CSTRING("Le nombre total de paramètres reçus est incorrect.")));
    return NS_ERROR_FAILURE;
  }

  nsAutoString pText;
  nsCOMArray<nsIVariant> pArray;
  nsCOMPtr<nsIWritableVariant> pVariant;
  PRUint32 pLsize=0, pCsize=0;
  PRUint32 pLineIndex, pColIndex;
  PRUint16 pNodeType;
  nsCOMPtr<nsIDOMElement> pResult;
  nsCOMPtr<nsIDOMNodeList> pLines, pValues;
  nsCOMPtr<nsIDOMNode> pLine, pValue, pContent;
  rv = pParameters[0]->GetElement(getter_AddRefs(pResult));
  NS_ENSURE_SUCCESS(rv,rv);
  rv = pResult->GetChildNodes(getter_AddRefs(pLines));
  NS_ENSURE_SUCCESS(rv,rv);
  pLines->GetLength(&pLsize);
  for (pLineIndex=0;pLineIndex<pLsize;pLineIndex++) {
    do {
      rv = pLines->Item(pLineIndex, getter_AddRefs(pLine));
      NS_ENSURE_SUCCESS(rv,rv);
      pLine->GetNodeType(&pNodeType);
      if (pNodeType!=nsIDOMNode::ELEMENT_NODE) pLineIndex++;
    } while (pLineIndex<pLsize && pNodeType!=nsIDOMNode::ELEMENT_NODE);
    if (pLineIndex>=pLsize) break;
    rv = pLine->GetChildNodes(getter_AddRefs(pValues));
    NS_ENSURE_SUCCESS(rv,rv);
    pValues->GetLength(&pCsize);
    for (pColIndex=0;pColIndex<pCsize;pColIndex++) {
      do {
        rv = pValues->Item(pColIndex, getter_AddRefs(pValue));
        NS_ENSURE_SUCCESS(rv,rv);
        pValue->GetNodeType(&pNodeType);
        if (pNodeType!=nsIDOMNode::ELEMENT_NODE) pColIndex++;
      } while (pColIndex<pCsize && pNodeType!=nsIDOMNode::ELEMENT_NODE);
      if (pColIndex>=pCsize) break;
      rv = pValue->GetFirstChild(getter_AddRefs(pContent));
      NS_ENSURE_SUCCESS(rv,rv);
      pVariant = do_CreateInstance(NS_VARIANT_CONTRACTID, &rv);
      NS_ENSURE_SUCCESS(rv,rv);
      if (pContent) {
        rv = pContent->GetNodeValue(pText);
        NS_ENSURE_SUCCESS(rv,rv);
        pVariant->SetAsAString(pText);
        printf("%s|",ToNewCString(pText));
      } else {
        pVariant->SetAsAString(NS_LITERAL_STRING(""));
      }
      rv = pArray.AppendObject(pVariant);
    }
  }
  rv = mComponent->TreatP00C2(pArray, pLsize, pCsize, mSearch);
  return rv;
}


/* Generated by Pygmalion */


NS_IMPL_ISUPPORTS1(mozListenerP00C3, nsISOAPResponseListener)

mozListenerP00C3::mozListenerP00C3(mozC02gestsea* aComponent, const nsACString & aSearch)
{
  mComponent = aComponent;
  mSearch = aSearch;
}
mozListenerP00C3::~mozListenerP00C3()
{
}

NS_IMETHODIMP mozListenerP00C3::HandleResponse(nsISOAPResponse *aResponse, nsISOAPCall *aCall, PRUint32 aStatus, PRBool aLast, PRBool *aReturn)
{
  nsresult rv;
  nsCOMPtr<nsISOAPFault> pFault;
  rv = aResponse->GetFault(getter_AddRefs(pFault));
  NS_ENSURE_SUCCESS(rv, rv);
  if (pFault) {
    nsAutoString pFaute, pDetail, pTitle;
    nsCOMPtr<nsIDOMElement> pTheDetail;
    nsCOMPtr<nsIDOMNode> pNode;
    rv = pFault->GetDetail(getter_AddRefs(pTheDetail));
    NS_ENSURE_SUCCESS(rv,rv);
    rv = pTheDetail->GetFirstChild(getter_AddRefs(pNode));
    NS_ENSURE_SUCCESS(rv,rv);
    if (pNode) {
      nsCOMPtr<nsIDOMNamedNodeMap> pAttributes;
      nsCOMPtr<nsIDOMNode> pAttribute, pFirstNode;
      nsAutoString pNodeValue;
      rv = pNode->GetFirstChild(getter_AddRefs(pFirstNode));
      NS_ENSURE_SUCCESS(rv,rv);
      if (pFirstNode) {
        pFirstNode->GetNodeValue(pNodeValue);
        NS_ENSURE_SUCCESS(rv,rv);
        pDetail  = pNodeValue;
      }
      pNode->GetAttributes(getter_AddRefs(pAttributes));
      NS_ENSURE_SUCCESS(rv,rv);
      pAttributes->GetNamedItem(NS_LITERAL_STRING("code"), getter_AddRefs(pAttribute));
      NS_ENSURE_SUCCESS(rv,rv);
      if (pAttribute) {
        pAttribute->GetNodeValue(pNodeValue);
        NS_ENSURE_SUCCESS(rv,rv);
        pDetail += NS_LITERAL_STRING("\n(Erreur ");
        pDetail += pNodeValue;
        pDetail += NS_LITERAL_STRING(")");
      }
    } else pDetail = NS_LITERAL_STRING("Erreur sans message.");
    pFaute = pDetail;
    rv = pFault->GetFaultString(pTitle);
    NS_ENSURE_SUCCESS(rv,rv);
    nsCOMPtr<nsIPrompt> pPrompt= do_GetService(NS_DEFAULTPROMPT_CONTRACTID, &rv);
    NS_ENSURE_SUCCESS(rv,rv);
    pPrompt->Alert(ToNewUnicode(pTitle), ToNewUnicode(pFaute));
    return NS_ERROR_FAILURE;
  }

  nsISOAPParameter ** pParameters;
  PRUint32 pTotal;
  rv = aResponse->GetParameters(PR_FALSE, &pTotal, &pParameters);
  NS_ENSURE_SUCCESS(rv,rv);
  if (pTotal!=1) {
    nsCOMPtr<nsIPrompt> pPrompt= do_GetService(NS_DEFAULTPROMPT_CONTRACTID, &rv);
    NS_ENSURE_SUCCESS(rv,rv);
    pPrompt->Alert(ToNewUnicode(NS_LITERAL_CSTRING("Erreur système")), ToNewUnicode(NS_LITERAL_CSTRING("Le nombre total de paramètres reçus est incorrect.")));
    return NS_ERROR_FAILURE;
  }

  nsAutoString pText;
  nsCOMArray<nsIVariant> pArray;
  nsCOMPtr<nsIWritableVariant> pVariant;
  PRUint32 pLsize=0, pCsize=0;
  PRUint32 pLineIndex, pColIndex;
  PRUint16 pNodeType;
  nsCOMPtr<nsIDOMElement> pResult;
  nsCOMPtr<nsIDOMNodeList> pLines, pValues;
  nsCOMPtr<nsIDOMNode> pLine, pValue, pContent;
  rv = pParameters[0]->GetElement(getter_AddRefs(pResult));
  NS_ENSURE_SUCCESS(rv,rv);
  rv = pResult->GetChildNodes(getter_AddRefs(pLines));
  NS_ENSURE_SUCCESS(rv,rv);
  pLines->GetLength(&pLsize);
  for (pLineIndex=0;pLineIndex<pLsize;pLineIndex++) {
    do {
      rv = pLines->Item(pLineIndex, getter_AddRefs(pLine));
      NS_ENSURE_SUCCESS(rv,rv);
      pLine->GetNodeType(&pNodeType);
      if (pNodeType!=nsIDOMNode::ELEMENT_NODE) pLineIndex++;
    } while (pLineIndex<pLsize && pNodeType!=nsIDOMNode::ELEMENT_NODE);
    if (pLineIndex>=pLsize) break;
    rv = pLine->GetChildNodes(getter_AddRefs(pValues));
    NS_ENSURE_SUCCESS(rv,rv);
    pValues->GetLength(&pCsize);
    for (pColIndex=0;pColIndex<pCsize;pColIndex++) {
      do {
        rv = pValues->Item(pColIndex, getter_AddRefs(pValue));
        NS_ENSURE_SUCCESS(rv,rv);
        pValue->GetNodeType(&pNodeType);
        if (pNodeType!=nsIDOMNode::ELEMENT_NODE) pColIndex++;
      } while (pColIndex<pCsize && pNodeType!=nsIDOMNode::ELEMENT_NODE);
      if (pColIndex>=pCsize) break;
      rv = pValue->GetFirstChild(getter_AddRefs(pContent));
      NS_ENSURE_SUCCESS(rv,rv);
      pVariant = do_CreateInstance(NS_VARIANT_CONTRACTID, &rv);
      NS_ENSURE_SUCCESS(rv,rv);
      if (pContent) {
        rv = pContent->GetNodeValue(pText);
        NS_ENSURE_SUCCESS(rv,rv);
        pVariant->SetAsAString(pText);
        printf("%s|",ToNewCString(pText));
      } else {
        pVariant->SetAsAString(NS_LITERAL_STRING(""));
      }
      rv = pArray.AppendObject(pVariant);
    }
  }
  rv = mComponent->TreatP00C3(pArray, pLsize, pCsize, mSearch);
  return rv;
}


/* Generated by Pygmalion */


NS_IMPL_ISUPPORTS1(mozListenerP00C4, nsISOAPResponseListener)

mozListenerP00C4::mozListenerP00C4(mozC02gestsea* aComponent, const nsAString & aKey)
{
  mComponent = aComponent;
  mKey = aKey;
}
mozListenerP00C4::~mozListenerP00C4()
{
}

NS_IMETHODIMP mozListenerP00C4::HandleResponse(nsISOAPResponse *aResponse, nsISOAPCall *aCall, PRUint32 aStatus, PRBool aLast, PRBool *aReturn)
{
  nsresult rv;
  nsCOMPtr<nsISOAPFault> pFault;
  rv = aResponse->GetFault(getter_AddRefs(pFault));
  NS_ENSURE_SUCCESS(rv, rv);
  if (pFault) {
    nsAutoString pFaute, pDetail, pTitle;
    nsCOMPtr<nsIDOMElement> pTheDetail;
    nsCOMPtr<nsIDOMNode> pNode;
    rv = pFault->GetDetail(getter_AddRefs(pTheDetail));
    NS_ENSURE_SUCCESS(rv,rv);
    rv = pTheDetail->GetFirstChild(getter_AddRefs(pNode));
    NS_ENSURE_SUCCESS(rv,rv);
    if (pNode) {
      nsCOMPtr<nsIDOMNamedNodeMap> pAttributes;
      nsCOMPtr<nsIDOMNode> pAttribute, pFirstNode;
      nsAutoString pNodeValue;
      rv = pNode->GetFirstChild(getter_AddRefs(pFirstNode));
      NS_ENSURE_SUCCESS(rv,rv);
      if (pFirstNode) {
        pFirstNode->GetNodeValue(pNodeValue);
        NS_ENSURE_SUCCESS(rv,rv);
        pDetail  = pNodeValue;
      }
      pNode->GetAttributes(getter_AddRefs(pAttributes));
      NS_ENSURE_SUCCESS(rv,rv);
      pAttributes->GetNamedItem(NS_LITERAL_STRING("code"), getter_AddRefs(pAttribute));
      NS_ENSURE_SUCCESS(rv,rv);
      if (pAttribute) {
        pAttribute->GetNodeValue(pNodeValue);
        NS_ENSURE_SUCCESS(rv,rv);
        pDetail += NS_LITERAL_STRING("\n(Erreur ");
        pDetail += pNodeValue;
        pDetail += NS_LITERAL_STRING(")");
      }
    } else pDetail = NS_LITERAL_STRING("Erreur sans message.");
    pFaute = pDetail;
    rv = pFault->GetFaultString(pTitle);
    NS_ENSURE_SUCCESS(rv,rv);
    nsCOMPtr<nsIPrompt> pPrompt= do_GetService(NS_DEFAULTPROMPT_CONTRACTID, &rv);
    NS_ENSURE_SUCCESS(rv,rv);
    pPrompt->Alert(ToNewUnicode(pTitle), ToNewUnicode(pFaute));
    return NS_ERROR_FAILURE;
  }

  nsISOAPParameter ** pParameters;
  PRUint32 pTotal;
  rv = aResponse->GetParameters(PR_FALSE, &pTotal, &pParameters);
  NS_ENSURE_SUCCESS(rv,rv);
  if (pTotal!=1) {
    nsCOMPtr<nsIPrompt> pPrompt= do_GetService(NS_DEFAULTPROMPT_CONTRACTID, &rv);
    NS_ENSURE_SUCCESS(rv,rv);
    pPrompt->Alert(ToNewUnicode(NS_LITERAL_CSTRING("Erreur système")), ToNewUnicode(NS_LITERAL_CSTRING("Le nombre total de paramètres reçus est incorrect.")));
    return NS_ERROR_FAILURE;
  }

  nsAutoString pText;
  nsCOMArray<nsIVariant> pArray;
  nsCOMPtr<nsIWritableVariant> pVariant;
  PRUint32 pLsize=0, pCsize=0;
  PRUint32 pLineIndex, pColIndex;
  PRUint16 pNodeType;
  nsCOMPtr<nsIDOMElement> pResult;
  nsCOMPtr<nsIDOMNodeList> pLines, pValues;
  nsCOMPtr<nsIDOMNode> pLine, pValue, pContent;
  rv = pParameters[0]->GetElement(getter_AddRefs(pResult));
  NS_ENSURE_SUCCESS(rv,rv);
  rv = pResult->GetChildNodes(getter_AddRefs(pLines));
  NS_ENSURE_SUCCESS(rv,rv);
  pLines->GetLength(&pLsize);
  for (pLineIndex=0;pLineIndex<pLsize;pLineIndex++) {
    do {
      rv = pLines->Item(pLineIndex, getter_AddRefs(pLine));
      NS_ENSURE_SUCCESS(rv,rv);
      pLine->GetNodeType(&pNodeType);
      if (pNodeType!=nsIDOMNode::ELEMENT_NODE) pLineIndex++;
    } while (pLineIndex<pLsize && pNodeType!=nsIDOMNode::ELEMENT_NODE);
    if (pLineIndex>=pLsize) break;
    rv = pLine->GetChildNodes(getter_AddRefs(pValues));
    NS_ENSURE_SUCCESS(rv,rv);
    pValues->GetLength(&pCsize);
    for (pColIndex=0;pColIndex<pCsize;pColIndex++) {
      do {
        rv = pValues->Item(pColIndex, getter_AddRefs(pValue));
        NS_ENSURE_SUCCESS(rv,rv);
        pValue->GetNodeType(&pNodeType);
        if (pNodeType!=nsIDOMNode::ELEMENT_NODE) pColIndex++;
      } while (pColIndex<pCsize && pNodeType!=nsIDOMNode::ELEMENT_NODE);
      if (pColIndex>=pCsize) break;
      rv = pValue->GetFirstChild(getter_AddRefs(pContent));
      NS_ENSURE_SUCCESS(rv,rv);
      pVariant = do_CreateInstance(NS_VARIANT_CONTRACTID, &rv);
      NS_ENSURE_SUCCESS(rv,rv);
      if (pContent) {
        rv = pContent->GetNodeValue(pText);
        NS_ENSURE_SUCCESS(rv,rv);
        pVariant->SetAsAString(pText);
        printf("%s|",ToNewCString(pText));
      } else {
        pVariant->SetAsAString(NS_LITERAL_STRING(""));
      }
      rv = pArray.AppendObject(pVariant);
    }
  }
  rv = mComponent->TreatP00C4(pArray, pLsize, pCsize, mKey);
  return rv;
}


/* Generated by Pygmalion */


NS_IMPL_ISUPPORTS1(mozListenerP00C5, nsISOAPResponseListener)

mozListenerP00C5::mozListenerP00C5(mozC02gestsea* aComponent, const nsAString & aKey)
{
  mComponent = aComponent;
  mKey = aKey;
}
mozListenerP00C5::~mozListenerP00C5()
{
}

NS_IMETHODIMP mozListenerP00C5::HandleResponse(nsISOAPResponse *aResponse, nsISOAPCall *aCall, PRUint32 aStatus, PRBool aLast, PRBool *aReturn)
{
  nsresult rv;
  nsCOMPtr<nsISOAPFault> pFault;
  rv = aResponse->GetFault(getter_AddRefs(pFault));
  NS_ENSURE_SUCCESS(rv, rv);
  if (pFault) {
    nsAutoString pFaute, pDetail, pTitle;
    nsCOMPtr<nsIDOMElement> pTheDetail;
    nsCOMPtr<nsIDOMNode> pNode;
    rv = pFault->GetDetail(getter_AddRefs(pTheDetail));
    NS_ENSURE_SUCCESS(rv,rv);
    rv = pTheDetail->GetFirstChild(getter_AddRefs(pNode));
    NS_ENSURE_SUCCESS(rv,rv);
    if (pNode) {
      nsCOMPtr<nsIDOMNamedNodeMap> pAttributes;
      nsCOMPtr<nsIDOMNode> pAttribute, pFirstNode;
      nsAutoString pNodeValue;
      rv = pNode->GetFirstChild(getter_AddRefs(pFirstNode));
      NS_ENSURE_SUCCESS(rv,rv);
      if (pFirstNode) {
        pFirstNode->GetNodeValue(pNodeValue);
        NS_ENSURE_SUCCESS(rv,rv);
        pDetail  = pNodeValue;
      }
      pNode->GetAttributes(getter_AddRefs(pAttributes));
      NS_ENSURE_SUCCESS(rv,rv);
      pAttributes->GetNamedItem(NS_LITERAL_STRING("code"), getter_AddRefs(pAttribute));
      NS_ENSURE_SUCCESS(rv,rv);
      if (pAttribute) {
        pAttribute->GetNodeValue(pNodeValue);
        NS_ENSURE_SUCCESS(rv,rv);
        pDetail += NS_LITERAL_STRING("\n(Erreur ");
        pDetail += pNodeValue;
        pDetail += NS_LITERAL_STRING(")");
      }
    } else pDetail = NS_LITERAL_STRING("Erreur sans message.");
    pFaute = pDetail;
    rv = pFault->GetFaultString(pTitle);
    NS_ENSURE_SUCCESS(rv,rv);
    nsCOMPtr<nsIPrompt> pPrompt= do_GetService(NS_DEFAULTPROMPT_CONTRACTID, &rv);
    NS_ENSURE_SUCCESS(rv,rv);
    pPrompt->Alert(ToNewUnicode(pTitle), ToNewUnicode(pFaute));
    return NS_ERROR_FAILURE;
  }

  nsISOAPParameter ** pParameters;
  PRUint32 pTotal;
  rv = aResponse->GetParameters(PR_FALSE, &pTotal, &pParameters);
  NS_ENSURE_SUCCESS(rv,rv);
  if (pTotal!=1) {
    nsCOMPtr<nsIPrompt> pPrompt= do_GetService(NS_DEFAULTPROMPT_CONTRACTID, &rv);
    NS_ENSURE_SUCCESS(rv,rv);
    pPrompt->Alert(ToNewUnicode(NS_LITERAL_CSTRING("Erreur système")), ToNewUnicode(NS_LITERAL_CSTRING("Le nombre total de paramètres reçus est incorrect.")));
    return NS_ERROR_FAILURE;
  }

  nsAutoString pText;
  nsCOMArray<nsIVariant> pArray;
  nsCOMPtr<nsIWritableVariant> pVariant;
  PRUint32 pLsize=0, pCsize=0;
  PRUint32 pLineIndex, pColIndex;
  PRUint16 pNodeType;
  nsCOMPtr<nsIDOMElement> pResult;
  nsCOMPtr<nsIDOMNodeList> pLines, pValues;
  nsCOMPtr<nsIDOMNode> pLine, pValue, pContent;
  rv = pParameters[0]->GetElement(getter_AddRefs(pResult));
  NS_ENSURE_SUCCESS(rv,rv);
  rv = pResult->GetChildNodes(getter_AddRefs(pLines));
  NS_ENSURE_SUCCESS(rv,rv);
  pLines->GetLength(&pLsize);
  for (pLineIndex=0;pLineIndex<pLsize;pLineIndex++) {
    do {
      rv = pLines->Item(pLineIndex, getter_AddRefs(pLine));
      NS_ENSURE_SUCCESS(rv,rv);
      pLine->GetNodeType(&pNodeType);
      if (pNodeType!=nsIDOMNode::ELEMENT_NODE) pLineIndex++;
    } while (pLineIndex<pLsize && pNodeType!=nsIDOMNode::ELEMENT_NODE);
    if (pLineIndex>=pLsize) break;
    rv = pLine->GetChildNodes(getter_AddRefs(pValues));
    NS_ENSURE_SUCCESS(rv,rv);
    pValues->GetLength(&pCsize);
    for (pColIndex=0;pColIndex<pCsize;pColIndex++) {
      do {
        rv = pValues->Item(pColIndex, getter_AddRefs(pValue));
        NS_ENSURE_SUCCESS(rv,rv);
        pValue->GetNodeType(&pNodeType);
        if (pNodeType!=nsIDOMNode::ELEMENT_NODE) pColIndex++;
      } while (pColIndex<pCsize && pNodeType!=nsIDOMNode::ELEMENT_NODE);
      if (pColIndex>=pCsize) break;
      rv = pValue->GetFirstChild(getter_AddRefs(pContent));
      NS_ENSURE_SUCCESS(rv,rv);
      pVariant = do_CreateInstance(NS_VARIANT_CONTRACTID, &rv);
      NS_ENSURE_SUCCESS(rv,rv);
      if (pContent) {
        rv = pContent->GetNodeValue(pText);
        NS_ENSURE_SUCCESS(rv,rv);
        pVariant->SetAsAString(pText);
        printf("%s|",ToNewCString(pText));
      } else {
        pVariant->SetAsAString(NS_LITERAL_STRING(""));
      }
      rv = pArray.AppendObject(pVariant);
    }
  }
  rv = mComponent->TreatP00C5(pArray, pLsize, pCsize, mKey);
  return rv;
}


/* Generated by Pygmalion */


NS_IMPL_ISUPPORTS1(mozListenerP00C6, nsISOAPResponseListener)

mozListenerP00C6::mozListenerP00C6(mozC02gestsea* aComponent, const nsAString & aKey, const nsACString & aField1, const nsACString & aField2, const nsACString & aField3, const nsACString & aField4, const nsACString & aField5, const nsACString & aField6, const nsACString & aField7, const nsACString & aField8, const nsACString & aField9, const nsACString & aField10, const nsACString & aField11, const nsACString & aField12, const nsACString & aField13)
{
  mComponent = aComponent;
  mKey = aKey;
  mField1 = aField1;
  mField2 = aField2;
  mField3 = aField3;
  mField4 = aField4;
  mField5 = aField5;
  mField6 = aField6;
  mField7 = aField7;
  mField8 = aField8;
  mField9 = aField9;
  mField10 = aField10;
  mField11 = aField11;
  mField12 = aField12;
  mField13 = aField13;
}
mozListenerP00C6::~mozListenerP00C6()
{
}

NS_IMETHODIMP mozListenerP00C6::HandleResponse(nsISOAPResponse *aResponse, nsISOAPCall *aCall, PRUint32 aStatus, PRBool aLast, PRBool *aReturn)
{
  nsresult rv;
  nsCOMPtr<nsISOAPFault> pFault;
  rv = aResponse->GetFault(getter_AddRefs(pFault));
  NS_ENSURE_SUCCESS(rv, rv);
  if (pFault) {
    nsAutoString pFaute, pDetail, pTitle;
    nsCOMPtr<nsIDOMElement> pTheDetail;
    nsCOMPtr<nsIDOMNode> pNode;
    rv = pFault->GetDetail(getter_AddRefs(pTheDetail));
    NS_ENSURE_SUCCESS(rv,rv);
    rv = pTheDetail->GetFirstChild(getter_AddRefs(pNode));
    NS_ENSURE_SUCCESS(rv,rv);
    if (pNode) {
      nsCOMPtr<nsIDOMNamedNodeMap> pAttributes;
      nsCOMPtr<nsIDOMNode> pAttribute, pFirstNode;
      nsAutoString pNodeValue;
      rv = pNode->GetFirstChild(getter_AddRefs(pFirstNode));
      NS_ENSURE_SUCCESS(rv,rv);
      if (pFirstNode) {
        pFirstNode->GetNodeValue(pNodeValue);
        NS_ENSURE_SUCCESS(rv,rv);
        pDetail  = pNodeValue;
      }
      pNode->GetAttributes(getter_AddRefs(pAttributes));
      NS_ENSURE_SUCCESS(rv,rv);
      pAttributes->GetNamedItem(NS_LITERAL_STRING("code"), getter_AddRefs(pAttribute));
      NS_ENSURE_SUCCESS(rv,rv);
      if (pAttribute) {
        pAttribute->GetNodeValue(pNodeValue);
        NS_ENSURE_SUCCESS(rv,rv);
        pDetail += NS_LITERAL_STRING("\n(Erreur ");
        pDetail += pNodeValue;
        pDetail += NS_LITERAL_STRING(")");
      }
    } else pDetail = NS_LITERAL_STRING("Erreur sans message.");
    pFaute = pDetail;
    rv = pFault->GetFaultString(pTitle);
    NS_ENSURE_SUCCESS(rv,rv);
    nsCOMPtr<nsIPrompt> pPrompt= do_GetService(NS_DEFAULTPROMPT_CONTRACTID, &rv);
    NS_ENSURE_SUCCESS(rv,rv);
    pPrompt->Alert(ToNewUnicode(pTitle), ToNewUnicode(pFaute));
    return NS_ERROR_FAILURE;
  }

  nsISOAPParameter ** pParameters;
  PRUint32 pTotal;
  rv = aResponse->GetParameters(PR_FALSE, &pTotal, &pParameters);
  NS_ENSURE_SUCCESS(rv,rv);
  if (pTotal!=1) {
    nsCOMPtr<nsIPrompt> pPrompt= do_GetService(NS_DEFAULTPROMPT_CONTRACTID, &rv);
    NS_ENSURE_SUCCESS(rv,rv);
    pPrompt->Alert(ToNewUnicode(NS_LITERAL_CSTRING("Erreur système")), ToNewUnicode(NS_LITERAL_CSTRING("Le nombre total de paramètres reçus est incorrect.")));
    return NS_ERROR_FAILURE;
  }

  nsAutoString pText;
  nsCOMPtr<nsIVariant> pValue;
  rv = pParameters[0]->GetValue(getter_AddRefs(pValue));
  NS_ENSURE_SUCCESS(rv,rv);
  rv = pValue->GetAsAString(pText);
  NS_ENSURE_SUCCESS(rv,rv);
  rv = mComponent->TreatP00C6(pText, mKey, mField1, mField2, mField3, mField4, mField5, mField6, mField7, mField8, mField9, mField10, mField11, mField12, mField13);
  return rv;
}


/* Generated by Pygmalion */


NS_IMPL_ISUPPORTS1(mozListenerP00C7, nsISOAPResponseListener)

mozListenerP00C7::mozListenerP00C7(mozC02gestsea* aComponent, const nsACString & aSearch)
{
  mComponent = aComponent;
  mSearch = aSearch;
}
mozListenerP00C7::~mozListenerP00C7()
{
}

NS_IMETHODIMP mozListenerP00C7::HandleResponse(nsISOAPResponse *aResponse, nsISOAPCall *aCall, PRUint32 aStatus, PRBool aLast, PRBool *aReturn)
{
  nsresult rv;
  nsCOMPtr<nsISOAPFault> pFault;
  rv = aResponse->GetFault(getter_AddRefs(pFault));
  NS_ENSURE_SUCCESS(rv, rv);
  if (pFault) {
    nsAutoString pFaute, pDetail, pTitle;
    nsCOMPtr<nsIDOMElement> pTheDetail;
    nsCOMPtr<nsIDOMNode> pNode;
    rv = pFault->GetDetail(getter_AddRefs(pTheDetail));
    NS_ENSURE_SUCCESS(rv,rv);
    rv = pTheDetail->GetFirstChild(getter_AddRefs(pNode));
    NS_ENSURE_SUCCESS(rv,rv);
    if (pNode) {
      nsCOMPtr<nsIDOMNamedNodeMap> pAttributes;
      nsCOMPtr<nsIDOMNode> pAttribute, pFirstNode;
      nsAutoString pNodeValue;
      rv = pNode->GetFirstChild(getter_AddRefs(pFirstNode));
      NS_ENSURE_SUCCESS(rv,rv);
      if (pFirstNode) {
        pFirstNode->GetNodeValue(pNodeValue);
        NS_ENSURE_SUCCESS(rv,rv);
        pDetail  = pNodeValue;
      }
      pNode->GetAttributes(getter_AddRefs(pAttributes));
      NS_ENSURE_SUCCESS(rv,rv);
      pAttributes->GetNamedItem(NS_LITERAL_STRING("code"), getter_AddRefs(pAttribute));
      NS_ENSURE_SUCCESS(rv,rv);
      if (pAttribute) {
        pAttribute->GetNodeValue(pNodeValue);
        NS_ENSURE_SUCCESS(rv,rv);
        pDetail += NS_LITERAL_STRING("\n(Erreur ");
        pDetail += pNodeValue;
        pDetail += NS_LITERAL_STRING(")");
      }
    } else pDetail = NS_LITERAL_STRING("Erreur sans message.");
    pFaute = pDetail;
    rv = pFault->GetFaultString(pTitle);
    NS_ENSURE_SUCCESS(rv,rv);
    nsCOMPtr<nsIPrompt> pPrompt= do_GetService(NS_DEFAULTPROMPT_CONTRACTID, &rv);
    NS_ENSURE_SUCCESS(rv,rv);
    pPrompt->Alert(ToNewUnicode(pTitle), ToNewUnicode(pFaute));
    return NS_ERROR_FAILURE;
  }

  nsISOAPParameter ** pParameters;
  PRUint32 pTotal;
  rv = aResponse->GetParameters(PR_FALSE, &pTotal, &pParameters);
  NS_ENSURE_SUCCESS(rv,rv);
  if (pTotal!=1) {
    nsCOMPtr<nsIPrompt> pPrompt= do_GetService(NS_DEFAULTPROMPT_CONTRACTID, &rv);
    NS_ENSURE_SUCCESS(rv,rv);
    pPrompt->Alert(ToNewUnicode(NS_LITERAL_CSTRING("Erreur système")), ToNewUnicode(NS_LITERAL_CSTRING("Le nombre total de paramètres reçus est incorrect.")));
    return NS_ERROR_FAILURE;
  }

  nsAutoString pText;
  nsCOMArray<nsIVariant> pArray;
  nsCOMPtr<nsIWritableVariant> pVariant;
  PRUint32 pLsize=0, pCsize=0;
  PRUint32 pLineIndex, pColIndex;
  PRUint16 pNodeType;
  nsCOMPtr<nsIDOMElement> pResult;
  nsCOMPtr<nsIDOMNodeList> pLines, pValues;
  nsCOMPtr<nsIDOMNode> pLine, pValue, pContent;
  rv = pParameters[0]->GetElement(getter_AddRefs(pResult));
  NS_ENSURE_SUCCESS(rv,rv);
  rv = pResult->GetChildNodes(getter_AddRefs(pLines));
  NS_ENSURE_SUCCESS(rv,rv);
  pLines->GetLength(&pLsize);
  for (pLineIndex=0;pLineIndex<pLsize;pLineIndex++) {
    do {
      rv = pLines->Item(pLineIndex, getter_AddRefs(pLine));
      NS_ENSURE_SUCCESS(rv,rv);
      pLine->GetNodeType(&pNodeType);
      if (pNodeType!=nsIDOMNode::ELEMENT_NODE) pLineIndex++;
    } while (pLineIndex<pLsize && pNodeType!=nsIDOMNode::ELEMENT_NODE);
    if (pLineIndex>=pLsize) break;
    rv = pLine->GetChildNodes(getter_AddRefs(pValues));
    NS_ENSURE_SUCCESS(rv,rv);
    pValues->GetLength(&pCsize);
    for (pColIndex=0;pColIndex<pCsize;pColIndex++) {
      do {
        rv = pValues->Item(pColIndex, getter_AddRefs(pValue));
        NS_ENSURE_SUCCESS(rv,rv);
        pValue->GetNodeType(&pNodeType);
        if (pNodeType!=nsIDOMNode::ELEMENT_NODE) pColIndex++;
      } while (pColIndex<pCsize && pNodeType!=nsIDOMNode::ELEMENT_NODE);
      if (pColIndex>=pCsize) break;
      rv = pValue->GetFirstChild(getter_AddRefs(pContent));
      NS_ENSURE_SUCCESS(rv,rv);
      pVariant = do_CreateInstance(NS_VARIANT_CONTRACTID, &rv);
      NS_ENSURE_SUCCESS(rv,rv);
      if (pContent) {
        rv = pContent->GetNodeValue(pText);
        NS_ENSURE_SUCCESS(rv,rv);
        pVariant->SetAsAString(pText);
        printf("%s|",ToNewCString(pText));
      } else {
        pVariant->SetAsAString(NS_LITERAL_STRING(""));
      }
      rv = pArray.AppendObject(pVariant);
    }
  }
  rv = mComponent->TreatP00C7(pArray, pLsize, pCsize, mSearch);
  return rv;
}


/* Generated by Pygmalion */


NS_IMPL_ISUPPORTS1(mozListenerP00C8, nsISOAPResponseListener)

mozListenerP00C8::mozListenerP00C8(mozC02gestsea* aComponent, const nsACString & aSearch)
{
  mComponent = aComponent;
  mSearch = aSearch;
}
mozListenerP00C8::~mozListenerP00C8()
{
}

NS_IMETHODIMP mozListenerP00C8::HandleResponse(nsISOAPResponse *aResponse, nsISOAPCall *aCall, PRUint32 aStatus, PRBool aLast, PRBool *aReturn)
{
  nsresult rv;
  nsCOMPtr<nsISOAPFault> pFault;
  rv = aResponse->GetFault(getter_AddRefs(pFault));
  NS_ENSURE_SUCCESS(rv, rv);
  if (pFault) {
    nsAutoString pFaute, pDetail, pTitle;
    nsCOMPtr<nsIDOMElement> pTheDetail;
    nsCOMPtr<nsIDOMNode> pNode;
    rv = pFault->GetDetail(getter_AddRefs(pTheDetail));
    NS_ENSURE_SUCCESS(rv,rv);
    rv = pTheDetail->GetFirstChild(getter_AddRefs(pNode));
    NS_ENSURE_SUCCESS(rv,rv);
    if (pNode) {
      nsCOMPtr<nsIDOMNamedNodeMap> pAttributes;
      nsCOMPtr<nsIDOMNode> pAttribute, pFirstNode;
      nsAutoString pNodeValue;
      rv = pNode->GetFirstChild(getter_AddRefs(pFirstNode));
      NS_ENSURE_SUCCESS(rv,rv);
      if (pFirstNode) {
        pFirstNode->GetNodeValue(pNodeValue);
        NS_ENSURE_SUCCESS(rv,rv);
        pDetail  = pNodeValue;
      }
      pNode->GetAttributes(getter_AddRefs(pAttributes));
      NS_ENSURE_SUCCESS(rv,rv);
      pAttributes->GetNamedItem(NS_LITERAL_STRING("code"), getter_AddRefs(pAttribute));
      NS_ENSURE_SUCCESS(rv,rv);
      if (pAttribute) {
        pAttribute->GetNodeValue(pNodeValue);
        NS_ENSURE_SUCCESS(rv,rv);
        pDetail += NS_LITERAL_STRING("\n(Erreur ");
        pDetail += pNodeValue;
        pDetail += NS_LITERAL_STRING(")");
      }
    } else pDetail = NS_LITERAL_STRING("Erreur sans message.");
    pFaute = pDetail;
    rv = pFault->GetFaultString(pTitle);
    NS_ENSURE_SUCCESS(rv,rv);
    nsCOMPtr<nsIPrompt> pPrompt= do_GetService(NS_DEFAULTPROMPT_CONTRACTID, &rv);
    NS_ENSURE_SUCCESS(rv,rv);
    pPrompt->Alert(ToNewUnicode(pTitle), ToNewUnicode(pFaute));
    return NS_ERROR_FAILURE;
  }

  nsISOAPParameter ** pParameters;
  PRUint32 pTotal;
  rv = aResponse->GetParameters(PR_FALSE, &pTotal, &pParameters);
  NS_ENSURE_SUCCESS(rv,rv);
  if (pTotal!=1) {
    nsCOMPtr<nsIPrompt> pPrompt= do_GetService(NS_DEFAULTPROMPT_CONTRACTID, &rv);
    NS_ENSURE_SUCCESS(rv,rv);
    pPrompt->Alert(ToNewUnicode(NS_LITERAL_CSTRING("Erreur système")), ToNewUnicode(NS_LITERAL_CSTRING("Le nombre total de paramètres reçus est incorrect.")));
    return NS_ERROR_FAILURE;
  }

  nsAutoString pText;
  nsCOMArray<nsIVariant> pArray;
  nsCOMPtr<nsIWritableVariant> pVariant;
  PRUint32 pLsize=0, pCsize=0;
  PRUint32 pLineIndex, pColIndex;
  PRUint16 pNodeType;
  nsCOMPtr<nsIDOMElement> pResult;
  nsCOMPtr<nsIDOMNodeList> pLines, pValues;
  nsCOMPtr<nsIDOMNode> pLine, pValue, pContent;
  rv = pParameters[0]->GetElement(getter_AddRefs(pResult));
  NS_ENSURE_SUCCESS(rv,rv);
  rv = pResult->GetChildNodes(getter_AddRefs(pLines));
  NS_ENSURE_SUCCESS(rv,rv);
  pLines->GetLength(&pLsize);
  for (pLineIndex=0;pLineIndex<pLsize;pLineIndex++) {
    do {
      rv = pLines->Item(pLineIndex, getter_AddRefs(pLine));
      NS_ENSURE_SUCCESS(rv,rv);
      pLine->GetNodeType(&pNodeType);
      if (pNodeType!=nsIDOMNode::ELEMENT_NODE) pLineIndex++;
    } while (pLineIndex<pLsize && pNodeType!=nsIDOMNode::ELEMENT_NODE);
    if (pLineIndex>=pLsize) break;
    rv = pLine->GetChildNodes(getter_AddRefs(pValues));
    NS_ENSURE_SUCCESS(rv,rv);
    pValues->GetLength(&pCsize);
    for (pColIndex=0;pColIndex<pCsize;pColIndex++) {
      do {
        rv = pValues->Item(pColIndex, getter_AddRefs(pValue));
        NS_ENSURE_SUCCESS(rv,rv);
        pValue->GetNodeType(&pNodeType);
        if (pNodeType!=nsIDOMNode::ELEMENT_NODE) pColIndex++;
      } while (pColIndex<pCsize && pNodeType!=nsIDOMNode::ELEMENT_NODE);
      if (pColIndex>=pCsize) break;
      rv = pValue->GetFirstChild(getter_AddRefs(pContent));
      NS_ENSURE_SUCCESS(rv,rv);
      pVariant = do_CreateInstance(NS_VARIANT_CONTRACTID, &rv);
      NS_ENSURE_SUCCESS(rv,rv);
      if (pContent) {
        rv = pContent->GetNodeValue(pText);
        NS_ENSURE_SUCCESS(rv,rv);
        pVariant->SetAsAString(pText);
        printf("%s|",ToNewCString(pText));
      } else {
        pVariant->SetAsAString(NS_LITERAL_STRING(""));
      }
      rv = pArray.AppendObject(pVariant);
    }
  }
  rv = mComponent->TreatP00C8(pArray, pLsize, pCsize, mSearch);
  return rv;
}


/* Generated by Pygmalion */


NS_IMPL_ISUPPORTS1(mozListenerP00C9, nsISOAPResponseListener)

mozListenerP00C9::mozListenerP00C9(mozC02gestsea* aComponent, const nsAString & aKey)
{
  mComponent = aComponent;
  mKey = aKey;
}
mozListenerP00C9::~mozListenerP00C9()
{
}

NS_IMETHODIMP mozListenerP00C9::HandleResponse(nsISOAPResponse *aResponse, nsISOAPCall *aCall, PRUint32 aStatus, PRBool aLast, PRBool *aReturn)
{
  nsresult rv;
  nsCOMPtr<nsISOAPFault> pFault;
  rv = aResponse->GetFault(getter_AddRefs(pFault));
  NS_ENSURE_SUCCESS(rv, rv);
  if (pFault) {
    nsAutoString pFaute, pDetail, pTitle;
    nsCOMPtr<nsIDOMElement> pTheDetail;
    nsCOMPtr<nsIDOMNode> pNode;
    rv = pFault->GetDetail(getter_AddRefs(pTheDetail));
    NS_ENSURE_SUCCESS(rv,rv);
    rv = pTheDetail->GetFirstChild(getter_AddRefs(pNode));
    NS_ENSURE_SUCCESS(rv,rv);
    if (pNode) {
      nsCOMPtr<nsIDOMNamedNodeMap> pAttributes;
      nsCOMPtr<nsIDOMNode> pAttribute, pFirstNode;
      nsAutoString pNodeValue;
      rv = pNode->GetFirstChild(getter_AddRefs(pFirstNode));
      NS_ENSURE_SUCCESS(rv,rv);
      if (pFirstNode) {
        pFirstNode->GetNodeValue(pNodeValue);
        NS_ENSURE_SUCCESS(rv,rv);
        pDetail  = pNodeValue;
      }
      pNode->GetAttributes(getter_AddRefs(pAttributes));
      NS_ENSURE_SUCCESS(rv,rv);
      pAttributes->GetNamedItem(NS_LITERAL_STRING("code"), getter_AddRefs(pAttribute));
      NS_ENSURE_SUCCESS(rv,rv);
      if (pAttribute) {
        pAttribute->GetNodeValue(pNodeValue);
        NS_ENSURE_SUCCESS(rv,rv);
        pDetail += NS_LITERAL_STRING("\n(Erreur ");
        pDetail += pNodeValue;
        pDetail += NS_LITERAL_STRING(")");
      }
    } else pDetail = NS_LITERAL_STRING("Erreur sans message.");
    pFaute = pDetail;
    rv = pFault->GetFaultString(pTitle);
    NS_ENSURE_SUCCESS(rv,rv);
    nsCOMPtr<nsIPrompt> pPrompt= do_GetService(NS_DEFAULTPROMPT_CONTRACTID, &rv);
    NS_ENSURE_SUCCESS(rv,rv);
    pPrompt->Alert(ToNewUnicode(pTitle), ToNewUnicode(pFaute));
    return NS_ERROR_FAILURE;
  }

  nsISOAPParameter ** pParameters;
  PRUint32 pTotal;
  rv = aResponse->GetParameters(PR_FALSE, &pTotal, &pParameters);
  NS_ENSURE_SUCCESS(rv,rv);
  if (pTotal!=1) {
    nsCOMPtr<nsIPrompt> pPrompt= do_GetService(NS_DEFAULTPROMPT_CONTRACTID, &rv);
    NS_ENSURE_SUCCESS(rv,rv);
    pPrompt->Alert(ToNewUnicode(NS_LITERAL_CSTRING("Erreur système")), ToNewUnicode(NS_LITERAL_CSTRING("Le nombre total de paramètres reçus est incorrect.")));
    return NS_ERROR_FAILURE;
  }

  nsAutoString pText;
  nsCOMArray<nsIVariant> pArray;
  nsCOMPtr<nsIWritableVariant> pVariant;
  PRUint32 pLsize=0, pCsize=0;
  PRUint32 pLineIndex, pColIndex;
  PRUint16 pNodeType;
  nsCOMPtr<nsIDOMElement> pResult;
  nsCOMPtr<nsIDOMNodeList> pLines, pValues;
  nsCOMPtr<nsIDOMNode> pLine, pValue, pContent;
  rv = pParameters[0]->GetElement(getter_AddRefs(pResult));
  NS_ENSURE_SUCCESS(rv,rv);
  rv = pResult->GetChildNodes(getter_AddRefs(pLines));
  NS_ENSURE_SUCCESS(rv,rv);
  pLines->GetLength(&pLsize);
  for (pLineIndex=0;pLineIndex<pLsize;pLineIndex++) {
    do {
      rv = pLines->Item(pLineIndex, getter_AddRefs(pLine));
      NS_ENSURE_SUCCESS(rv,rv);
      pLine->GetNodeType(&pNodeType);
      if (pNodeType!=nsIDOMNode::ELEMENT_NODE) pLineIndex++;
    } while (pLineIndex<pLsize && pNodeType!=nsIDOMNode::ELEMENT_NODE);
    if (pLineIndex>=pLsize) break;
    rv = pLine->GetChildNodes(getter_AddRefs(pValues));
    NS_ENSURE_SUCCESS(rv,rv);
    pValues->GetLength(&pCsize);
    for (pColIndex=0;pColIndex<pCsize;pColIndex++) {
      do {
        rv = pValues->Item(pColIndex, getter_AddRefs(pValue));
        NS_ENSURE_SUCCESS(rv,rv);
        pValue->GetNodeType(&pNodeType);
        if (pNodeType!=nsIDOMNode::ELEMENT_NODE) pColIndex++;
      } while (pColIndex<pCsize && pNodeType!=nsIDOMNode::ELEMENT_NODE);
      if (pColIndex>=pCsize) break;
      rv = pValue->GetFirstChild(getter_AddRefs(pContent));
      NS_ENSURE_SUCCESS(rv,rv);
      pVariant = do_CreateInstance(NS_VARIANT_CONTRACTID, &rv);
      NS_ENSURE_SUCCESS(rv,rv);
      if (pContent) {
        rv = pContent->GetNodeValue(pText);
        NS_ENSURE_SUCCESS(rv,rv);
        pVariant->SetAsAString(pText);
        printf("%s|",ToNewCString(pText));
      } else {
        pVariant->SetAsAString(NS_LITERAL_STRING(""));
      }
      rv = pArray.AppendObject(pVariant);
    }
  }
  rv = mComponent->TreatP00C9(pArray, pLsize, pCsize, mKey);
  return rv;
}


/* Generated by Pygmalion */


NS_IMPL_ISUPPORTS1(mozListenerP00CA, nsISOAPResponseListener)

mozListenerP00CA::mozListenerP00CA(mozC02gestsea* aComponent, const nsACString & aSearch)
{
  mComponent = aComponent;
  mSearch = aSearch;
}
mozListenerP00CA::~mozListenerP00CA()
{
}

NS_IMETHODIMP mozListenerP00CA::HandleResponse(nsISOAPResponse *aResponse, nsISOAPCall *aCall, PRUint32 aStatus, PRBool aLast, PRBool *aReturn)
{
  nsresult rv;
  nsCOMPtr<nsISOAPFault> pFault;
  rv = aResponse->GetFault(getter_AddRefs(pFault));
  NS_ENSURE_SUCCESS(rv, rv);
  if (pFault) {
    nsAutoString pFaute, pDetail, pTitle;
    nsCOMPtr<nsIDOMElement> pTheDetail;
    nsCOMPtr<nsIDOMNode> pNode;
    rv = pFault->GetDetail(getter_AddRefs(pTheDetail));
    NS_ENSURE_SUCCESS(rv,rv);
    rv = pTheDetail->GetFirstChild(getter_AddRefs(pNode));
    NS_ENSURE_SUCCESS(rv,rv);
    if (pNode) {
      nsCOMPtr<nsIDOMNamedNodeMap> pAttributes;
      nsCOMPtr<nsIDOMNode> pAttribute, pFirstNode;
      nsAutoString pNodeValue;
      rv = pNode->GetFirstChild(getter_AddRefs(pFirstNode));
      NS_ENSURE_SUCCESS(rv,rv);
      if (pFirstNode) {
        pFirstNode->GetNodeValue(pNodeValue);
        NS_ENSURE_SUCCESS(rv,rv);
        pDetail  = pNodeValue;
      }
      pNode->GetAttributes(getter_AddRefs(pAttributes));
      NS_ENSURE_SUCCESS(rv,rv);
      pAttributes->GetNamedItem(NS_LITERAL_STRING("code"), getter_AddRefs(pAttribute));
      NS_ENSURE_SUCCESS(rv,rv);
      if (pAttribute) {
        pAttribute->GetNodeValue(pNodeValue);
        NS_ENSURE_SUCCESS(rv,rv);
        pDetail += NS_LITERAL_STRING("\n(Erreur ");
        pDetail += pNodeValue;
        pDetail += NS_LITERAL_STRING(")");
      }
    } else pDetail = NS_LITERAL_STRING("Erreur sans message.");
    pFaute = pDetail;
    rv = pFault->GetFaultString(pTitle);
    NS_ENSURE_SUCCESS(rv,rv);
    nsCOMPtr<nsIPrompt> pPrompt= do_GetService(NS_DEFAULTPROMPT_CONTRACTID, &rv);
    NS_ENSURE_SUCCESS(rv,rv);
    pPrompt->Alert(ToNewUnicode(pTitle), ToNewUnicode(pFaute));
    return NS_ERROR_FAILURE;
  }

  nsISOAPParameter ** pParameters;
  PRUint32 pTotal;
  rv = aResponse->GetParameters(PR_FALSE, &pTotal, &pParameters);
  NS_ENSURE_SUCCESS(rv,rv);
  if (pTotal!=1) {
    nsCOMPtr<nsIPrompt> pPrompt= do_GetService(NS_DEFAULTPROMPT_CONTRACTID, &rv);
    NS_ENSURE_SUCCESS(rv,rv);
    pPrompt->Alert(ToNewUnicode(NS_LITERAL_CSTRING("Erreur système")), ToNewUnicode(NS_LITERAL_CSTRING("Le nombre total de paramètres reçus est incorrect.")));
    return NS_ERROR_FAILURE;
  }

  nsAutoString pText;
  nsCOMArray<nsIVariant> pArray;
  nsCOMPtr<nsIWritableVariant> pVariant;
  PRUint32 pLsize=0, pCsize=0;
  PRUint32 pLineIndex, pColIndex;
  PRUint16 pNodeType;
  nsCOMPtr<nsIDOMElement> pResult;
  nsCOMPtr<nsIDOMNodeList> pLines, pValues;
  nsCOMPtr<nsIDOMNode> pLine, pValue, pContent;
  rv = pParameters[0]->GetElement(getter_AddRefs(pResult));
  NS_ENSURE_SUCCESS(rv,rv);
  rv = pResult->GetChildNodes(getter_AddRefs(pLines));
  NS_ENSURE_SUCCESS(rv,rv);
  pLines->GetLength(&pLsize);
  for (pLineIndex=0;pLineIndex<pLsize;pLineIndex++) {
    do {
      rv = pLines->Item(pLineIndex, getter_AddRefs(pLine));
      NS_ENSURE_SUCCESS(rv,rv);
      pLine->GetNodeType(&pNodeType);
      if (pNodeType!=nsIDOMNode::ELEMENT_NODE) pLineIndex++;
    } while (pLineIndex<pLsize && pNodeType!=nsIDOMNode::ELEMENT_NODE);
    if (pLineIndex>=pLsize) break;
    rv = pLine->GetChildNodes(getter_AddRefs(pValues));
    NS_ENSURE_SUCCESS(rv,rv);
    pValues->GetLength(&pCsize);
    for (pColIndex=0;pColIndex<pCsize;pColIndex++) {
      do {
        rv = pValues->Item(pColIndex, getter_AddRefs(pValue));
        NS_ENSURE_SUCCESS(rv,rv);
        pValue->GetNodeType(&pNodeType);
        if (pNodeType!=nsIDOMNode::ELEMENT_NODE) pColIndex++;
      } while (pColIndex<pCsize && pNodeType!=nsIDOMNode::ELEMENT_NODE);
      if (pColIndex>=pCsize) break;
      rv = pValue->GetFirstChild(getter_AddRefs(pContent));
      NS_ENSURE_SUCCESS(rv,rv);
      pVariant = do_CreateInstance(NS_VARIANT_CONTRACTID, &rv);
      NS_ENSURE_SUCCESS(rv,rv);
      if (pContent) {
        rv = pContent->GetNodeValue(pText);
        NS_ENSURE_SUCCESS(rv,rv);
        pVariant->SetAsAString(pText);
        printf("%s|",ToNewCString(pText));
      } else {
        pVariant->SetAsAString(NS_LITERAL_STRING(""));
      }
      rv = pArray.AppendObject(pVariant);
    }
  }
  rv = mComponent->TreatP00CA(pArray, pLsize, pCsize, mSearch);
  return rv;
}


/* Generated by Pygmalion */


NS_IMPL_ISUPPORTS1(mozListenerP00CB, nsISOAPResponseListener)

mozListenerP00CB::mozListenerP00CB(mozC02gestsea* aComponent, const nsACString & aSearch)
{
  mComponent = aComponent;
  mSearch = aSearch;
}
mozListenerP00CB::~mozListenerP00CB()
{
}

NS_IMETHODIMP mozListenerP00CB::HandleResponse(nsISOAPResponse *aResponse, nsISOAPCall *aCall, PRUint32 aStatus, PRBool aLast, PRBool *aReturn)
{
  nsresult rv;
  nsCOMPtr<nsISOAPFault> pFault;
  rv = aResponse->GetFault(getter_AddRefs(pFault));
  NS_ENSURE_SUCCESS(rv, rv);
  if (pFault) {
    nsAutoString pFaute, pDetail, pTitle;
    nsCOMPtr<nsIDOMElement> pTheDetail;
    nsCOMPtr<nsIDOMNode> pNode;
    rv = pFault->GetDetail(getter_AddRefs(pTheDetail));
    NS_ENSURE_SUCCESS(rv,rv);
    rv = pTheDetail->GetFirstChild(getter_AddRefs(pNode));
    NS_ENSURE_SUCCESS(rv,rv);
    if (pNode) {
      nsCOMPtr<nsIDOMNamedNodeMap> pAttributes;
      nsCOMPtr<nsIDOMNode> pAttribute, pFirstNode;
      nsAutoString pNodeValue;
      rv = pNode->GetFirstChild(getter_AddRefs(pFirstNode));
      NS_ENSURE_SUCCESS(rv,rv);
      if (pFirstNode) {
        pFirstNode->GetNodeValue(pNodeValue);
        NS_ENSURE_SUCCESS(rv,rv);
        pDetail  = pNodeValue;
      }
      pNode->GetAttributes(getter_AddRefs(pAttributes));
      NS_ENSURE_SUCCESS(rv,rv);
      pAttributes->GetNamedItem(NS_LITERAL_STRING("code"), getter_AddRefs(pAttribute));
      NS_ENSURE_SUCCESS(rv,rv);
      if (pAttribute) {
        pAttribute->GetNodeValue(pNodeValue);
        NS_ENSURE_SUCCESS(rv,rv);
        pDetail += NS_LITERAL_STRING("\n(Erreur ");
        pDetail += pNodeValue;
        pDetail += NS_LITERAL_STRING(")");
      }
    } else pDetail = NS_LITERAL_STRING("Erreur sans message.");
    pFaute = pDetail;
    rv = pFault->GetFaultString(pTitle);
    NS_ENSURE_SUCCESS(rv,rv);
    nsCOMPtr<nsIPrompt> pPrompt= do_GetService(NS_DEFAULTPROMPT_CONTRACTID, &rv);
    NS_ENSURE_SUCCESS(rv,rv);
    pPrompt->Alert(ToNewUnicode(pTitle), ToNewUnicode(pFaute));
    return NS_ERROR_FAILURE;
  }

  nsISOAPParameter ** pParameters;
  PRUint32 pTotal;
  rv = aResponse->GetParameters(PR_FALSE, &pTotal, &pParameters);
  NS_ENSURE_SUCCESS(rv,rv);
  if (pTotal!=1) {
    nsCOMPtr<nsIPrompt> pPrompt= do_GetService(NS_DEFAULTPROMPT_CONTRACTID, &rv);
    NS_ENSURE_SUCCESS(rv,rv);
    pPrompt->Alert(ToNewUnicode(NS_LITERAL_CSTRING("Erreur système")), ToNewUnicode(NS_LITERAL_CSTRING("Le nombre total de paramètres reçus est incorrect.")));
    return NS_ERROR_FAILURE;
  }

  nsAutoString pText;
  nsCOMArray<nsIVariant> pArray;
  nsCOMPtr<nsIWritableVariant> pVariant;
  PRUint32 pLsize=0, pCsize=0;
  PRUint32 pLineIndex, pColIndex;
  PRUint16 pNodeType;
  nsCOMPtr<nsIDOMElement> pResult;
  nsCOMPtr<nsIDOMNodeList> pLines, pValues;
  nsCOMPtr<nsIDOMNode> pLine, pValue, pContent;
  rv = pParameters[0]->GetElement(getter_AddRefs(pResult));
  NS_ENSURE_SUCCESS(rv,rv);
  rv = pResult->GetChildNodes(getter_AddRefs(pLines));
  NS_ENSURE_SUCCESS(rv,rv);
  pLines->GetLength(&pLsize);
  for (pLineIndex=0;pLineIndex<pLsize;pLineIndex++) {
    do {
      rv = pLines->Item(pLineIndex, getter_AddRefs(pLine));
      NS_ENSURE_SUCCESS(rv,rv);
      pLine->GetNodeType(&pNodeType);
      if (pNodeType!=nsIDOMNode::ELEMENT_NODE) pLineIndex++;
    } while (pLineIndex<pLsize && pNodeType!=nsIDOMNode::ELEMENT_NODE);
    if (pLineIndex>=pLsize) break;
    rv = pLine->GetChildNodes(getter_AddRefs(pValues));
    NS_ENSURE_SUCCESS(rv,rv);
    pValues->GetLength(&pCsize);
    for (pColIndex=0;pColIndex<pCsize;pColIndex++) {
      do {
        rv = pValues->Item(pColIndex, getter_AddRefs(pValue));
        NS_ENSURE_SUCCESS(rv,rv);
        pValue->GetNodeType(&pNodeType);
        if (pNodeType!=nsIDOMNode::ELEMENT_NODE) pColIndex++;
      } while (pColIndex<pCsize && pNodeType!=nsIDOMNode::ELEMENT_NODE);
      if (pColIndex>=pCsize) break;
      rv = pValue->GetFirstChild(getter_AddRefs(pContent));
      NS_ENSURE_SUCCESS(rv,rv);
      pVariant = do_CreateInstance(NS_VARIANT_CONTRACTID, &rv);
      NS_ENSURE_SUCCESS(rv,rv);
      if (pContent) {
        rv = pContent->GetNodeValue(pText);
        NS_ENSURE_SUCCESS(rv,rv);
        pVariant->SetAsAString(pText);
        printf("%s|",ToNewCString(pText));
      } else {
        pVariant->SetAsAString(NS_LITERAL_STRING(""));
      }
      rv = pArray.AppendObject(pVariant);
    }
  }
  rv = mComponent->TreatP00CB(pArray, pLsize, pCsize, mSearch);
  return rv;
}


/* Generated by Pygmalion */


NS_IMPL_ISUPPORTS1(mozListenerP00CC, nsISOAPResponseListener)

mozListenerP00CC::mozListenerP00CC(mozC02gestsea* aComponent, const nsAString & aKey)
{
  mComponent = aComponent;
  mKey = aKey;
}
mozListenerP00CC::~mozListenerP00CC()
{
}

NS_IMETHODIMP mozListenerP00CC::HandleResponse(nsISOAPResponse *aResponse, nsISOAPCall *aCall, PRUint32 aStatus, PRBool aLast, PRBool *aReturn)
{
  nsresult rv;
  nsCOMPtr<nsISOAPFault> pFault;
  rv = aResponse->GetFault(getter_AddRefs(pFault));
  NS_ENSURE_SUCCESS(rv, rv);
  if (pFault) {
    nsAutoString pFaute, pDetail, pTitle;
    nsCOMPtr<nsIDOMElement> pTheDetail;
    nsCOMPtr<nsIDOMNode> pNode;
    rv = pFault->GetDetail(getter_AddRefs(pTheDetail));
    NS_ENSURE_SUCCESS(rv,rv);
    rv = pTheDetail->GetFirstChild(getter_AddRefs(pNode));
    NS_ENSURE_SUCCESS(rv,rv);
    if (pNode) {
      nsCOMPtr<nsIDOMNamedNodeMap> pAttributes;
      nsCOMPtr<nsIDOMNode> pAttribute, pFirstNode;
      nsAutoString pNodeValue;
      rv = pNode->GetFirstChild(getter_AddRefs(pFirstNode));
      NS_ENSURE_SUCCESS(rv,rv);
      if (pFirstNode) {
        pFirstNode->GetNodeValue(pNodeValue);
        NS_ENSURE_SUCCESS(rv,rv);
        pDetail  = pNodeValue;
      }
      pNode->GetAttributes(getter_AddRefs(pAttributes));
      NS_ENSURE_SUCCESS(rv,rv);
      pAttributes->GetNamedItem(NS_LITERAL_STRING("code"), getter_AddRefs(pAttribute));
      NS_ENSURE_SUCCESS(rv,rv);
      if (pAttribute) {
        pAttribute->GetNodeValue(pNodeValue);
        NS_ENSURE_SUCCESS(rv,rv);
        pDetail += NS_LITERAL_STRING("\n(Erreur ");
        pDetail += pNodeValue;
        pDetail += NS_LITERAL_STRING(")");
      }
    } else pDetail = NS_LITERAL_STRING("Erreur sans message.");
    pFaute = pDetail;
    rv = pFault->GetFaultString(pTitle);
    NS_ENSURE_SUCCESS(rv,rv);
    nsCOMPtr<nsIPrompt> pPrompt= do_GetService(NS_DEFAULTPROMPT_CONTRACTID, &rv);
    NS_ENSURE_SUCCESS(rv,rv);
    pPrompt->Alert(ToNewUnicode(pTitle), ToNewUnicode(pFaute));
    return NS_ERROR_FAILURE;
  }

  nsISOAPParameter ** pParameters;
  PRUint32 pTotal;
  rv = aResponse->GetParameters(PR_FALSE, &pTotal, &pParameters);
  NS_ENSURE_SUCCESS(rv,rv);
  if (pTotal!=1) {
    nsCOMPtr<nsIPrompt> pPrompt= do_GetService(NS_DEFAULTPROMPT_CONTRACTID, &rv);
    NS_ENSURE_SUCCESS(rv,rv);
    pPrompt->Alert(ToNewUnicode(NS_LITERAL_CSTRING("Erreur système")), ToNewUnicode(NS_LITERAL_CSTRING("Le nombre total de paramètres reçus est incorrect.")));
    return NS_ERROR_FAILURE;
  }

  nsAutoString pText;
  nsCOMArray<nsIVariant> pArray;
  nsCOMPtr<nsIWritableVariant> pVariant;
  PRUint32 pLsize=0, pCsize=0;
  PRUint32 pLineIndex, pColIndex;
  PRUint16 pNodeType;
  nsCOMPtr<nsIDOMElement> pResult;
  nsCOMPtr<nsIDOMNodeList> pLines, pValues;
  nsCOMPtr<nsIDOMNode> pLine, pValue, pContent;
  rv = pParameters[0]->GetElement(getter_AddRefs(pResult));
  NS_ENSURE_SUCCESS(rv,rv);
  rv = pResult->GetChildNodes(getter_AddRefs(pLines));
  NS_ENSURE_SUCCESS(rv,rv);
  pLines->GetLength(&pLsize);
  for (pLineIndex=0;pLineIndex<pLsize;pLineIndex++) {
    do {
      rv = pLines->Item(pLineIndex, getter_AddRefs(pLine));
      NS_ENSURE_SUCCESS(rv,rv);
      pLine->GetNodeType(&pNodeType);
      if (pNodeType!=nsIDOMNode::ELEMENT_NODE) pLineIndex++;
    } while (pLineIndex<pLsize && pNodeType!=nsIDOMNode::ELEMENT_NODE);
    if (pLineIndex>=pLsize) break;
    rv = pLine->GetChildNodes(getter_AddRefs(pValues));
    NS_ENSURE_SUCCESS(rv,rv);
    pValues->GetLength(&pCsize);
    for (pColIndex=0;pColIndex<pCsize;pColIndex++) {
      do {
        rv = pValues->Item(pColIndex, getter_AddRefs(pValue));
        NS_ENSURE_SUCCESS(rv,rv);
        pValue->GetNodeType(&pNodeType);
        if (pNodeType!=nsIDOMNode::ELEMENT_NODE) pColIndex++;
      } while (pColIndex<pCsize && pNodeType!=nsIDOMNode::ELEMENT_NODE);
      if (pColIndex>=pCsize) break;
      rv = pValue->GetFirstChild(getter_AddRefs(pContent));
      NS_ENSURE_SUCCESS(rv,rv);
      pVariant = do_CreateInstance(NS_VARIANT_CONTRACTID, &rv);
      NS_ENSURE_SUCCESS(rv,rv);
      if (pContent) {
        rv = pContent->GetNodeValue(pText);
        NS_ENSURE_SUCCESS(rv,rv);
        pVariant->SetAsAString(pText);
        printf("%s|",ToNewCString(pText));
      } else {
        pVariant->SetAsAString(NS_LITERAL_STRING(""));
      }
      rv = pArray.AppendObject(pVariant);
    }
  }
  rv = mComponent->TreatP00CC(pArray, pLsize, pCsize, mKey);
  return rv;
}


/* Generated by Pygmalion */


NS_IMPL_ISUPPORTS1(mozListenerP00CD, nsISOAPResponseListener)

mozListenerP00CD::mozListenerP00CD(mozC02gestsea* aComponent, const nsACString & aSearch)
{
  mComponent = aComponent;
  mSearch = aSearch;
}
mozListenerP00CD::~mozListenerP00CD()
{
}

NS_IMETHODIMP mozListenerP00CD::HandleResponse(nsISOAPResponse *aResponse, nsISOAPCall *aCall, PRUint32 aStatus, PRBool aLast, PRBool *aReturn)
{
  nsresult rv;
  nsCOMPtr<nsISOAPFault> pFault;
  rv = aResponse->GetFault(getter_AddRefs(pFault));
  NS_ENSURE_SUCCESS(rv, rv);
  if (pFault) {
    nsAutoString pFaute, pDetail, pTitle;
    nsCOMPtr<nsIDOMElement> pTheDetail;
    nsCOMPtr<nsIDOMNode> pNode;
    rv = pFault->GetDetail(getter_AddRefs(pTheDetail));
    NS_ENSURE_SUCCESS(rv,rv);
    rv = pTheDetail->GetFirstChild(getter_AddRefs(pNode));
    NS_ENSURE_SUCCESS(rv,rv);
    if (pNode) {
      nsCOMPtr<nsIDOMNamedNodeMap> pAttributes;
      nsCOMPtr<nsIDOMNode> pAttribute, pFirstNode;
      nsAutoString pNodeValue;
      rv = pNode->GetFirstChild(getter_AddRefs(pFirstNode));
      NS_ENSURE_SUCCESS(rv,rv);
      if (pFirstNode) {
        pFirstNode->GetNodeValue(pNodeValue);
        NS_ENSURE_SUCCESS(rv,rv);
        pDetail  = pNodeValue;
      }
      pNode->GetAttributes(getter_AddRefs(pAttributes));
      NS_ENSURE_SUCCESS(rv,rv);
      pAttributes->GetNamedItem(NS_LITERAL_STRING("code"), getter_AddRefs(pAttribute));
      NS_ENSURE_SUCCESS(rv,rv);
      if (pAttribute) {
        pAttribute->GetNodeValue(pNodeValue);
        NS_ENSURE_SUCCESS(rv,rv);
        pDetail += NS_LITERAL_STRING("\n(Erreur ");
        pDetail += pNodeValue;
        pDetail += NS_LITERAL_STRING(")");
      }
    } else pDetail = NS_LITERAL_STRING("Erreur sans message.");
    pFaute = pDetail;
    rv = pFault->GetFaultString(pTitle);
    NS_ENSURE_SUCCESS(rv,rv);
    nsCOMPtr<nsIPrompt> pPrompt= do_GetService(NS_DEFAULTPROMPT_CONTRACTID, &rv);
    NS_ENSURE_SUCCESS(rv,rv);
    pPrompt->Alert(ToNewUnicode(pTitle), ToNewUnicode(pFaute));
    return NS_ERROR_FAILURE;
  }

  nsISOAPParameter ** pParameters;
  PRUint32 pTotal;
  rv = aResponse->GetParameters(PR_FALSE, &pTotal, &pParameters);
  NS_ENSURE_SUCCESS(rv,rv);
  if (pTotal!=1) {
    nsCOMPtr<nsIPrompt> pPrompt= do_GetService(NS_DEFAULTPROMPT_CONTRACTID, &rv);
    NS_ENSURE_SUCCESS(rv,rv);
    pPrompt->Alert(ToNewUnicode(NS_LITERAL_CSTRING("Erreur système")), ToNewUnicode(NS_LITERAL_CSTRING("Le nombre total de paramètres reçus est incorrect.")));
    return NS_ERROR_FAILURE;
  }

  nsAutoString pText;
  nsCOMArray<nsIVariant> pArray;
  nsCOMPtr<nsIWritableVariant> pVariant;
  PRUint32 pLsize=0, pCsize=0;
  PRUint32 pLineIndex, pColIndex;
  PRUint16 pNodeType;
  nsCOMPtr<nsIDOMElement> pResult;
  nsCOMPtr<nsIDOMNodeList> pLines, pValues;
  nsCOMPtr<nsIDOMNode> pLine, pValue, pContent;
  rv = pParameters[0]->GetElement(getter_AddRefs(pResult));
  NS_ENSURE_SUCCESS(rv,rv);
  rv = pResult->GetChildNodes(getter_AddRefs(pLines));
  NS_ENSURE_SUCCESS(rv,rv);
  pLines->GetLength(&pLsize);
  for (pLineIndex=0;pLineIndex<pLsize;pLineIndex++) {
    do {
      rv = pLines->Item(pLineIndex, getter_AddRefs(pLine));
      NS_ENSURE_SUCCESS(rv,rv);
      pLine->GetNodeType(&pNodeType);
      if (pNodeType!=nsIDOMNode::ELEMENT_NODE) pLineIndex++;
    } while (pLineIndex<pLsize && pNodeType!=nsIDOMNode::ELEMENT_NODE);
    if (pLineIndex>=pLsize) break;
    rv = pLine->GetChildNodes(getter_AddRefs(pValues));
    NS_ENSURE_SUCCESS(rv,rv);
    pValues->GetLength(&pCsize);
    for (pColIndex=0;pColIndex<pCsize;pColIndex++) {
      do {
        rv = pValues->Item(pColIndex, getter_AddRefs(pValue));
        NS_ENSURE_SUCCESS(rv,rv);
        pValue->GetNodeType(&pNodeType);
        if (pNodeType!=nsIDOMNode::ELEMENT_NODE) pColIndex++;
      } while (pColIndex<pCsize && pNodeType!=nsIDOMNode::ELEMENT_NODE);
      if (pColIndex>=pCsize) break;
      rv = pValue->GetFirstChild(getter_AddRefs(pContent));
      NS_ENSURE_SUCCESS(rv,rv);
      pVariant = do_CreateInstance(NS_VARIANT_CONTRACTID, &rv);
      NS_ENSURE_SUCCESS(rv,rv);
      if (pContent) {
        rv = pContent->GetNodeValue(pText);
        NS_ENSURE_SUCCESS(rv,rv);
        pVariant->SetAsAString(pText);
        printf("%s|",ToNewCString(pText));
      } else {
        pVariant->SetAsAString(NS_LITERAL_STRING(""));
      }
      rv = pArray.AppendObject(pVariant);
    }
  }
  rv = mComponent->TreatP00CD(pArray, pLsize, pCsize, mSearch);
  return rv;
}


/* Generated by Pygmalion */


NS_IMPL_ISUPPORTS1(mozListenerP00CE, nsISOAPResponseListener)

mozListenerP00CE::mozListenerP00CE(mozC02gestsea* aComponent, const nsACString & aSearch)
{
  mComponent = aComponent;
  mSearch = aSearch;
}
mozListenerP00CE::~mozListenerP00CE()
{
}

NS_IMETHODIMP mozListenerP00CE::HandleResponse(nsISOAPResponse *aResponse, nsISOAPCall *aCall, PRUint32 aStatus, PRBool aLast, PRBool *aReturn)
{
  nsresult rv;
  nsCOMPtr<nsISOAPFault> pFault;
  rv = aResponse->GetFault(getter_AddRefs(pFault));
  NS_ENSURE_SUCCESS(rv, rv);
  if (pFault) {
    nsAutoString pFaute, pDetail, pTitle;
    nsCOMPtr<nsIDOMElement> pTheDetail;
    nsCOMPtr<nsIDOMNode> pNode;
    rv = pFault->GetDetail(getter_AddRefs(pTheDetail));
    NS_ENSURE_SUCCESS(rv,rv);
    rv = pTheDetail->GetFirstChild(getter_AddRefs(pNode));
    NS_ENSURE_SUCCESS(rv,rv);
    if (pNode) {
      nsCOMPtr<nsIDOMNamedNodeMap> pAttributes;
      nsCOMPtr<nsIDOMNode> pAttribute, pFirstNode;
      nsAutoString pNodeValue;
      rv = pNode->GetFirstChild(getter_AddRefs(pFirstNode));
      NS_ENSURE_SUCCESS(rv,rv);
      if (pFirstNode) {
        pFirstNode->GetNodeValue(pNodeValue);
        NS_ENSURE_SUCCESS(rv,rv);
        pDetail  = pNodeValue;
      }
      pNode->GetAttributes(getter_AddRefs(pAttributes));
      NS_ENSURE_SUCCESS(rv,rv);
      pAttributes->GetNamedItem(NS_LITERAL_STRING("code"), getter_AddRefs(pAttribute));
      NS_ENSURE_SUCCESS(rv,rv);
      if (pAttribute) {
        pAttribute->GetNodeValue(pNodeValue);
        NS_ENSURE_SUCCESS(rv,rv);
        pDetail += NS_LITERAL_STRING("\n(Erreur ");
        pDetail += pNodeValue;
        pDetail += NS_LITERAL_STRING(")");
      }
    } else pDetail = NS_LITERAL_STRING("Erreur sans message.");
    pFaute = pDetail;
    rv = pFault->GetFaultString(pTitle);
    NS_ENSURE_SUCCESS(rv,rv);
    nsCOMPtr<nsIPrompt> pPrompt= do_GetService(NS_DEFAULTPROMPT_CONTRACTID, &rv);
    NS_ENSURE_SUCCESS(rv,rv);
    pPrompt->Alert(ToNewUnicode(pTitle), ToNewUnicode(pFaute));
    return NS_ERROR_FAILURE;
  }

  nsISOAPParameter ** pParameters;
  PRUint32 pTotal;
  rv = aResponse->GetParameters(PR_FALSE, &pTotal, &pParameters);
  NS_ENSURE_SUCCESS(rv,rv);
  if (pTotal!=1) {
    nsCOMPtr<nsIPrompt> pPrompt= do_GetService(NS_DEFAULTPROMPT_CONTRACTID, &rv);
    NS_ENSURE_SUCCESS(rv,rv);
    pPrompt->Alert(ToNewUnicode(NS_LITERAL_CSTRING("Erreur système")), ToNewUnicode(NS_LITERAL_CSTRING("Le nombre total de paramètres reçus est incorrect.")));
    return NS_ERROR_FAILURE;
  }

  nsAutoString pText;
  nsCOMArray<nsIVariant> pArray;
  nsCOMPtr<nsIWritableVariant> pVariant;
  PRUint32 pLsize=0, pCsize=0;
  PRUint32 pLineIndex, pColIndex;
  PRUint16 pNodeType;
  nsCOMPtr<nsIDOMElement> pResult;
  nsCOMPtr<nsIDOMNodeList> pLines, pValues;
  nsCOMPtr<nsIDOMNode> pLine, pValue, pContent;
  rv = pParameters[0]->GetElement(getter_AddRefs(pResult));
  NS_ENSURE_SUCCESS(rv,rv);
  rv = pResult->GetChildNodes(getter_AddRefs(pLines));
  NS_ENSURE_SUCCESS(rv,rv);
  pLines->GetLength(&pLsize);
  for (pLineIndex=0;pLineIndex<pLsize;pLineIndex++) {
    do {
      rv = pLines->Item(pLineIndex, getter_AddRefs(pLine));
      NS_ENSURE_SUCCESS(rv,rv);
      pLine->GetNodeType(&pNodeType);
      if (pNodeType!=nsIDOMNode::ELEMENT_NODE) pLineIndex++;
    } while (pLineIndex<pLsize && pNodeType!=nsIDOMNode::ELEMENT_NODE);
    if (pLineIndex>=pLsize) break;
    rv = pLine->GetChildNodes(getter_AddRefs(pValues));
    NS_ENSURE_SUCCESS(rv,rv);
    pValues->GetLength(&pCsize);
    for (pColIndex=0;pColIndex<pCsize;pColIndex++) {
      do {
        rv = pValues->Item(pColIndex, getter_AddRefs(pValue));
        NS_ENSURE_SUCCESS(rv,rv);
        pValue->GetNodeType(&pNodeType);
        if (pNodeType!=nsIDOMNode::ELEMENT_NODE) pColIndex++;
      } while (pColIndex<pCsize && pNodeType!=nsIDOMNode::ELEMENT_NODE);
      if (pColIndex>=pCsize) break;
      rv = pValue->GetFirstChild(getter_AddRefs(pContent));
      NS_ENSURE_SUCCESS(rv,rv);
      pVariant = do_CreateInstance(NS_VARIANT_CONTRACTID, &rv);
      NS_ENSURE_SUCCESS(rv,rv);
      if (pContent) {
        rv = pContent->GetNodeValue(pText);
        NS_ENSURE_SUCCESS(rv,rv);
        pVariant->SetAsAString(pText);
        printf("%s|",ToNewCString(pText));
      } else {
        pVariant->SetAsAString(NS_LITERAL_STRING(""));
      }
      rv = pArray.AppendObject(pVariant);
    }
  }
  rv = mComponent->TreatP00CE(pArray, pLsize, pCsize, mSearch);
  return rv;
}


/* Generated by Pygmalion */


NS_IMPL_ISUPPORTS1(mozListenerP00CF, nsISOAPResponseListener)

mozListenerP00CF::mozListenerP00CF(mozC02gestsea* aComponent, const nsAString & aKey)
{
  mComponent = aComponent;
  mKey = aKey;
}
mozListenerP00CF::~mozListenerP00CF()
{
}

NS_IMETHODIMP mozListenerP00CF::HandleResponse(nsISOAPResponse *aResponse, nsISOAPCall *aCall, PRUint32 aStatus, PRBool aLast, PRBool *aReturn)
{
  nsresult rv;
  nsCOMPtr<nsISOAPFault> pFault;
  rv = aResponse->GetFault(getter_AddRefs(pFault));
  NS_ENSURE_SUCCESS(rv, rv);
  if (pFault) {
    nsAutoString pFaute, pDetail, pTitle;
    nsCOMPtr<nsIDOMElement> pTheDetail;
    nsCOMPtr<nsIDOMNode> pNode;
    rv = pFault->GetDetail(getter_AddRefs(pTheDetail));
    NS_ENSURE_SUCCESS(rv,rv);
    rv = pTheDetail->GetFirstChild(getter_AddRefs(pNode));
    NS_ENSURE_SUCCESS(rv,rv);
    if (pNode) {
      nsCOMPtr<nsIDOMNamedNodeMap> pAttributes;
      nsCOMPtr<nsIDOMNode> pAttribute, pFirstNode;
      nsAutoString pNodeValue;
      rv = pNode->GetFirstChild(getter_AddRefs(pFirstNode));
      NS_ENSURE_SUCCESS(rv,rv);
      if (pFirstNode) {
        pFirstNode->GetNodeValue(pNodeValue);
        NS_ENSURE_SUCCESS(rv,rv);
        pDetail  = pNodeValue;
      }
      pNode->GetAttributes(getter_AddRefs(pAttributes));
      NS_ENSURE_SUCCESS(rv,rv);
      pAttributes->GetNamedItem(NS_LITERAL_STRING("code"), getter_AddRefs(pAttribute));
      NS_ENSURE_SUCCESS(rv,rv);
      if (pAttribute) {
        pAttribute->GetNodeValue(pNodeValue);
        NS_ENSURE_SUCCESS(rv,rv);
        pDetail += NS_LITERAL_STRING("\n(Erreur ");
        pDetail += pNodeValue;
        pDetail += NS_LITERAL_STRING(")");
      }
    } else pDetail = NS_LITERAL_STRING("Erreur sans message.");
    pFaute = pDetail;
    rv = pFault->GetFaultString(pTitle);
    NS_ENSURE_SUCCESS(rv,rv);
    nsCOMPtr<nsIPrompt> pPrompt= do_GetService(NS_DEFAULTPROMPT_CONTRACTID, &rv);
    NS_ENSURE_SUCCESS(rv,rv);
    pPrompt->Alert(ToNewUnicode(pTitle), ToNewUnicode(pFaute));
    return NS_ERROR_FAILURE;
  }

  nsISOAPParameter ** pParameters;
  PRUint32 pTotal;
  rv = aResponse->GetParameters(PR_FALSE, &pTotal, &pParameters);
  NS_ENSURE_SUCCESS(rv,rv);
  if (pTotal!=1) {
    nsCOMPtr<nsIPrompt> pPrompt= do_GetService(NS_DEFAULTPROMPT_CONTRACTID, &rv);
    NS_ENSURE_SUCCESS(rv,rv);
    pPrompt->Alert(ToNewUnicode(NS_LITERAL_CSTRING("Erreur système")), ToNewUnicode(NS_LITERAL_CSTRING("Le nombre total de paramètres reçus est incorrect.")));
    return NS_ERROR_FAILURE;
  }

  nsAutoString pText;
  nsCOMArray<nsIVariant> pArray;
  nsCOMPtr<nsIWritableVariant> pVariant;
  PRUint32 pLsize=0, pCsize=0;
  PRUint32 pLineIndex, pColIndex;
  PRUint16 pNodeType;
  nsCOMPtr<nsIDOMElement> pResult;
  nsCOMPtr<nsIDOMNodeList> pLines, pValues;
  nsCOMPtr<nsIDOMNode> pLine, pValue, pContent;
  rv = pParameters[0]->GetElement(getter_AddRefs(pResult));
  NS_ENSURE_SUCCESS(rv,rv);
  rv = pResult->GetChildNodes(getter_AddRefs(pLines));
  NS_ENSURE_SUCCESS(rv,rv);
  pLines->GetLength(&pLsize);
  for (pLineIndex=0;pLineIndex<pLsize;pLineIndex++) {
    do {
      rv = pLines->Item(pLineIndex, getter_AddRefs(pLine));
      NS_ENSURE_SUCCESS(rv,rv);
      pLine->GetNodeType(&pNodeType);
      if (pNodeType!=nsIDOMNode::ELEMENT_NODE) pLineIndex++;
    } while (pLineIndex<pLsize && pNodeType!=nsIDOMNode::ELEMENT_NODE);
    if (pLineIndex>=pLsize) break;
    rv = pLine->GetChildNodes(getter_AddRefs(pValues));
    NS_ENSURE_SUCCESS(rv,rv);
    pValues->GetLength(&pCsize);
    for (pColIndex=0;pColIndex<pCsize;pColIndex++) {
      do {
        rv = pValues->Item(pColIndex, getter_AddRefs(pValue));
        NS_ENSURE_SUCCESS(rv,rv);
        pValue->GetNodeType(&pNodeType);
        if (pNodeType!=nsIDOMNode::ELEMENT_NODE) pColIndex++;
      } while (pColIndex<pCsize && pNodeType!=nsIDOMNode::ELEMENT_NODE);
      if (pColIndex>=pCsize) break;
      rv = pValue->GetFirstChild(getter_AddRefs(pContent));
      NS_ENSURE_SUCCESS(rv,rv);
      pVariant = do_CreateInstance(NS_VARIANT_CONTRACTID, &rv);
      NS_ENSURE_SUCCESS(rv,rv);
      if (pContent) {
        rv = pContent->GetNodeValue(pText);
        NS_ENSURE_SUCCESS(rv,rv);
        pVariant->SetAsAString(pText);
        printf("%s|",ToNewCString(pText));
      } else {
        pVariant->SetAsAString(NS_LITERAL_STRING(""));
      }
      rv = pArray.AppendObject(pVariant);
    }
  }
  rv = mComponent->TreatP00CF(pArray, pLsize, pCsize, mKey);
  return rv;
}


/* Generated by Pygmalion */


NS_IMPL_ISUPPORTS1(mozListenerP00D0, nsISOAPResponseListener)

mozListenerP00D0::mozListenerP00D0(mozC02gestsea* aComponent, const nsACString & aSearch)
{
  mComponent = aComponent;
  mSearch = aSearch;
}
mozListenerP00D0::~mozListenerP00D0()
{
}

NS_IMETHODIMP mozListenerP00D0::HandleResponse(nsISOAPResponse *aResponse, nsISOAPCall *aCall, PRUint32 aStatus, PRBool aLast, PRBool *aReturn)
{
  nsresult rv;
  nsCOMPtr<nsISOAPFault> pFault;
  rv = aResponse->GetFault(getter_AddRefs(pFault));
  NS_ENSURE_SUCCESS(rv, rv);
  if (pFault) {
    nsAutoString pFaute, pDetail, pTitle;
    nsCOMPtr<nsIDOMElement> pTheDetail;
    nsCOMPtr<nsIDOMNode> pNode;
    rv = pFault->GetDetail(getter_AddRefs(pTheDetail));
    NS_ENSURE_SUCCESS(rv,rv);
    rv = pTheDetail->GetFirstChild(getter_AddRefs(pNode));
    NS_ENSURE_SUCCESS(rv,rv);
    if (pNode) {
      nsCOMPtr<nsIDOMNamedNodeMap> pAttributes;
      nsCOMPtr<nsIDOMNode> pAttribute, pFirstNode;
      nsAutoString pNodeValue;
      rv = pNode->GetFirstChild(getter_AddRefs(pFirstNode));
      NS_ENSURE_SUCCESS(rv,rv);
      if (pFirstNode) {
        pFirstNode->GetNodeValue(pNodeValue);
        NS_ENSURE_SUCCESS(rv,rv);
        pDetail  = pNodeValue;
      }
      pNode->GetAttributes(getter_AddRefs(pAttributes));
      NS_ENSURE_SUCCESS(rv,rv);
      pAttributes->GetNamedItem(NS_LITERAL_STRING("code"), getter_AddRefs(pAttribute));
      NS_ENSURE_SUCCESS(rv,rv);
      if (pAttribute) {
        pAttribute->GetNodeValue(pNodeValue);
        NS_ENSURE_SUCCESS(rv,rv);
        pDetail += NS_LITERAL_STRING("\n(Erreur ");
        pDetail += pNodeValue;
        pDetail += NS_LITERAL_STRING(")");
      }
    } else pDetail = NS_LITERAL_STRING("Erreur sans message.");
    pFaute = pDetail;
    rv = pFault->GetFaultString(pTitle);
    NS_ENSURE_SUCCESS(rv,rv);
    nsCOMPtr<nsIPrompt> pPrompt= do_GetService(NS_DEFAULTPROMPT_CONTRACTID, &rv);
    NS_ENSURE_SUCCESS(rv,rv);
    pPrompt->Alert(ToNewUnicode(pTitle), ToNewUnicode(pFaute));
    return NS_ERROR_FAILURE;
  }

  nsISOAPParameter ** pParameters;
  PRUint32 pTotal;
  rv = aResponse->GetParameters(PR_FALSE, &pTotal, &pParameters);
  NS_ENSURE_SUCCESS(rv,rv);
  if (pTotal!=1) {
    nsCOMPtr<nsIPrompt> pPrompt= do_GetService(NS_DEFAULTPROMPT_CONTRACTID, &rv);
    NS_ENSURE_SUCCESS(rv,rv);
    pPrompt->Alert(ToNewUnicode(NS_LITERAL_CSTRING("Erreur système")), ToNewUnicode(NS_LITERAL_CSTRING("Le nombre total de paramètres reçus est incorrect.")));
    return NS_ERROR_FAILURE;
  }

  nsAutoString pText;
  nsCOMArray<nsIVariant> pArray;
  nsCOMPtr<nsIWritableVariant> pVariant;
  PRUint32 pLsize=0, pCsize=0;
  PRUint32 pLineIndex, pColIndex;
  PRUint16 pNodeType;
  nsCOMPtr<nsIDOMElement> pResult;
  nsCOMPtr<nsIDOMNodeList> pLines, pValues;
  nsCOMPtr<nsIDOMNode> pLine, pValue, pContent;
  rv = pParameters[0]->GetElement(getter_AddRefs(pResult));
  NS_ENSURE_SUCCESS(rv,rv);
  rv = pResult->GetChildNodes(getter_AddRefs(pLines));
  NS_ENSURE_SUCCESS(rv,rv);
  pLines->GetLength(&pLsize);
  for (pLineIndex=0;pLineIndex<pLsize;pLineIndex++) {
    do {
      rv = pLines->Item(pLineIndex, getter_AddRefs(pLine));
      NS_ENSURE_SUCCESS(rv,rv);
      pLine->GetNodeType(&pNodeType);
      if (pNodeType!=nsIDOMNode::ELEMENT_NODE) pLineIndex++;
    } while (pLineIndex<pLsize && pNodeType!=nsIDOMNode::ELEMENT_NODE);
    if (pLineIndex>=pLsize) break;
    rv = pLine->GetChildNodes(getter_AddRefs(pValues));
    NS_ENSURE_SUCCESS(rv,rv);
    pValues->GetLength(&pCsize);
    for (pColIndex=0;pColIndex<pCsize;pColIndex++) {
      do {
        rv = pValues->Item(pColIndex, getter_AddRefs(pValue));
        NS_ENSURE_SUCCESS(rv,rv);
        pValue->GetNodeType(&pNodeType);
        if (pNodeType!=nsIDOMNode::ELEMENT_NODE) pColIndex++;
      } while (pColIndex<pCsize && pNodeType!=nsIDOMNode::ELEMENT_NODE);
      if (pColIndex>=pCsize) break;
      rv = pValue->GetFirstChild(getter_AddRefs(pContent));
      NS_ENSURE_SUCCESS(rv,rv);
      pVariant = do_CreateInstance(NS_VARIANT_CONTRACTID, &rv);
      NS_ENSURE_SUCCESS(rv,rv);
      if (pContent) {
        rv = pContent->GetNodeValue(pText);
        NS_ENSURE_SUCCESS(rv,rv);
        pVariant->SetAsAString(pText);
        printf("%s|",ToNewCString(pText));
      } else {
        pVariant->SetAsAString(NS_LITERAL_STRING(""));
      }
      rv = pArray.AppendObject(pVariant);
    }
  }
  rv = mComponent->TreatP00D0(pArray, pLsize, pCsize, mSearch);
  return rv;
}


/* Generated by Pygmalion */


NS_IMPL_ISUPPORTS1(mozListenerP00D1, nsISOAPResponseListener)

mozListenerP00D1::mozListenerP00D1(mozC02gestsea* aComponent, const nsACString & aSearch)
{
  mComponent = aComponent;
  mSearch = aSearch;
}
mozListenerP00D1::~mozListenerP00D1()
{
}

NS_IMETHODIMP mozListenerP00D1::HandleResponse(nsISOAPResponse *aResponse, nsISOAPCall *aCall, PRUint32 aStatus, PRBool aLast, PRBool *aReturn)
{
  nsresult rv;
  nsCOMPtr<nsISOAPFault> pFault;
  rv = aResponse->GetFault(getter_AddRefs(pFault));
  NS_ENSURE_SUCCESS(rv, rv);
  if (pFault) {
    nsAutoString pFaute, pDetail, pTitle;
    nsCOMPtr<nsIDOMElement> pTheDetail;
    nsCOMPtr<nsIDOMNode> pNode;
    rv = pFault->GetDetail(getter_AddRefs(pTheDetail));
    NS_ENSURE_SUCCESS(rv,rv);
    rv = pTheDetail->GetFirstChild(getter_AddRefs(pNode));
    NS_ENSURE_SUCCESS(rv,rv);
    if (pNode) {
      nsCOMPtr<nsIDOMNamedNodeMap> pAttributes;
      nsCOMPtr<nsIDOMNode> pAttribute, pFirstNode;
      nsAutoString pNodeValue;
      rv = pNode->GetFirstChild(getter_AddRefs(pFirstNode));
      NS_ENSURE_SUCCESS(rv,rv);
      if (pFirstNode) {
        pFirstNode->GetNodeValue(pNodeValue);
        NS_ENSURE_SUCCESS(rv,rv);
        pDetail  = pNodeValue;
      }
      pNode->GetAttributes(getter_AddRefs(pAttributes));
      NS_ENSURE_SUCCESS(rv,rv);
      pAttributes->GetNamedItem(NS_LITERAL_STRING("code"), getter_AddRefs(pAttribute));
      NS_ENSURE_SUCCESS(rv,rv);
      if (pAttribute) {
        pAttribute->GetNodeValue(pNodeValue);
        NS_ENSURE_SUCCESS(rv,rv);
        pDetail += NS_LITERAL_STRING("\n(Erreur ");
        pDetail += pNodeValue;
        pDetail += NS_LITERAL_STRING(")");
      }
    } else pDetail = NS_LITERAL_STRING("Erreur sans message.");
    pFaute = pDetail;
    rv = pFault->GetFaultString(pTitle);
    NS_ENSURE_SUCCESS(rv,rv);
    nsCOMPtr<nsIPrompt> pPrompt= do_GetService(NS_DEFAULTPROMPT_CONTRACTID, &rv);
    NS_ENSURE_SUCCESS(rv,rv);
    pPrompt->Alert(ToNewUnicode(pTitle), ToNewUnicode(pFaute));
    return NS_ERROR_FAILURE;
  }

  nsISOAPParameter ** pParameters;
  PRUint32 pTotal;
  rv = aResponse->GetParameters(PR_FALSE, &pTotal, &pParameters);
  NS_ENSURE_SUCCESS(rv,rv);
  if (pTotal!=1) {
    nsCOMPtr<nsIPrompt> pPrompt= do_GetService(NS_DEFAULTPROMPT_CONTRACTID, &rv);
    NS_ENSURE_SUCCESS(rv,rv);
    pPrompt->Alert(ToNewUnicode(NS_LITERAL_CSTRING("Erreur système")), ToNewUnicode(NS_LITERAL_CSTRING("Le nombre total de paramètres reçus est incorrect.")));
    return NS_ERROR_FAILURE;
  }

  nsAutoString pText;
  nsCOMArray<nsIVariant> pArray;
  nsCOMPtr<nsIWritableVariant> pVariant;
  PRUint32 pLsize=0, pCsize=0;
  PRUint32 pLineIndex, pColIndex;
  PRUint16 pNodeType;
  nsCOMPtr<nsIDOMElement> pResult;
  nsCOMPtr<nsIDOMNodeList> pLines, pValues;
  nsCOMPtr<nsIDOMNode> pLine, pValue, pContent;
  rv = pParameters[0]->GetElement(getter_AddRefs(pResult));
  NS_ENSURE_SUCCESS(rv,rv);
  rv = pResult->GetChildNodes(getter_AddRefs(pLines));
  NS_ENSURE_SUCCESS(rv,rv);
  pLines->GetLength(&pLsize);
  for (pLineIndex=0;pLineIndex<pLsize;pLineIndex++) {
    do {
      rv = pLines->Item(pLineIndex, getter_AddRefs(pLine));
      NS_ENSURE_SUCCESS(rv,rv);
      pLine->GetNodeType(&pNodeType);
      if (pNodeType!=nsIDOMNode::ELEMENT_NODE) pLineIndex++;
    } while (pLineIndex<pLsize && pNodeType!=nsIDOMNode::ELEMENT_NODE);
    if (pLineIndex>=pLsize) break;
    rv = pLine->GetChildNodes(getter_AddRefs(pValues));
    NS_ENSURE_SUCCESS(rv,rv);
    pValues->GetLength(&pCsize);
    for (pColIndex=0;pColIndex<pCsize;pColIndex++) {
      do {
        rv = pValues->Item(pColIndex, getter_AddRefs(pValue));
        NS_ENSURE_SUCCESS(rv,rv);
        pValue->GetNodeType(&pNodeType);
        if (pNodeType!=nsIDOMNode::ELEMENT_NODE) pColIndex++;
      } while (pColIndex<pCsize && pNodeType!=nsIDOMNode::ELEMENT_NODE);
      if (pColIndex>=pCsize) break;
      rv = pValue->GetFirstChild(getter_AddRefs(pContent));
      NS_ENSURE_SUCCESS(rv,rv);
      pVariant = do_CreateInstance(NS_VARIANT_CONTRACTID, &rv);
      NS_ENSURE_SUCCESS(rv,rv);
      if (pContent) {
        rv = pContent->GetNodeValue(pText);
        NS_ENSURE_SUCCESS(rv,rv);
        pVariant->SetAsAString(pText);
        printf("%s|",ToNewCString(pText));
      } else {
        pVariant->SetAsAString(NS_LITERAL_STRING(""));
      }
      rv = pArray.AppendObject(pVariant);
    }
  }
  rv = mComponent->TreatP00D1(pArray, pLsize, pCsize, mSearch);
  return rv;
}


/* Generated by Pygmalion */


NS_IMPL_ISUPPORTS1(mozListenerP00D2, nsISOAPResponseListener)

mozListenerP00D2::mozListenerP00D2(mozC02gestsea* aComponent, const nsAString & aKey)
{
  mComponent = aComponent;
  mKey = aKey;
}
mozListenerP00D2::~mozListenerP00D2()
{
}

NS_IMETHODIMP mozListenerP00D2::HandleResponse(nsISOAPResponse *aResponse, nsISOAPCall *aCall, PRUint32 aStatus, PRBool aLast, PRBool *aReturn)
{
  nsresult rv;
  nsCOMPtr<nsISOAPFault> pFault;
  rv = aResponse->GetFault(getter_AddRefs(pFault));
  NS_ENSURE_SUCCESS(rv, rv);
  if (pFault) {
    nsAutoString pFaute, pDetail, pTitle;
    nsCOMPtr<nsIDOMElement> pTheDetail;
    nsCOMPtr<nsIDOMNode> pNode;
    rv = pFault->GetDetail(getter_AddRefs(pTheDetail));
    NS_ENSURE_SUCCESS(rv,rv);
    rv = pTheDetail->GetFirstChild(getter_AddRefs(pNode));
    NS_ENSURE_SUCCESS(rv,rv);
    if (pNode) {
      nsCOMPtr<nsIDOMNamedNodeMap> pAttributes;
      nsCOMPtr<nsIDOMNode> pAttribute, pFirstNode;
      nsAutoString pNodeValue;
      rv = pNode->GetFirstChild(getter_AddRefs(pFirstNode));
      NS_ENSURE_SUCCESS(rv,rv);
      if (pFirstNode) {
        pFirstNode->GetNodeValue(pNodeValue);
        NS_ENSURE_SUCCESS(rv,rv);
        pDetail  = pNodeValue;
      }
      pNode->GetAttributes(getter_AddRefs(pAttributes));
      NS_ENSURE_SUCCESS(rv,rv);
      pAttributes->GetNamedItem(NS_LITERAL_STRING("code"), getter_AddRefs(pAttribute));
      NS_ENSURE_SUCCESS(rv,rv);
      if (pAttribute) {
        pAttribute->GetNodeValue(pNodeValue);
        NS_ENSURE_SUCCESS(rv,rv);
        pDetail += NS_LITERAL_STRING("\n(Erreur ");
        pDetail += pNodeValue;
        pDetail += NS_LITERAL_STRING(")");
      }
    } else pDetail = NS_LITERAL_STRING("Erreur sans message.");
    pFaute = pDetail;
    rv = pFault->GetFaultString(pTitle);
    NS_ENSURE_SUCCESS(rv,rv);
    nsCOMPtr<nsIPrompt> pPrompt= do_GetService(NS_DEFAULTPROMPT_CONTRACTID, &rv);
    NS_ENSURE_SUCCESS(rv,rv);
    pPrompt->Alert(ToNewUnicode(pTitle), ToNewUnicode(pFaute));
    return NS_ERROR_FAILURE;
  }

  nsISOAPParameter ** pParameters;
  PRUint32 pTotal;
  rv = aResponse->GetParameters(PR_FALSE, &pTotal, &pParameters);
  NS_ENSURE_SUCCESS(rv,rv);
  if (pTotal!=1) {
    nsCOMPtr<nsIPrompt> pPrompt= do_GetService(NS_DEFAULTPROMPT_CONTRACTID, &rv);
    NS_ENSURE_SUCCESS(rv,rv);
    pPrompt->Alert(ToNewUnicode(NS_LITERAL_CSTRING("Erreur système")), ToNewUnicode(NS_LITERAL_CSTRING("Le nombre total de paramètres reçus est incorrect.")));
    return NS_ERROR_FAILURE;
  }

  nsAutoString pText;
  nsCOMArray<nsIVariant> pArray;
  nsCOMPtr<nsIWritableVariant> pVariant;
  PRUint32 pLsize=0, pCsize=0;
  PRUint32 pLineIndex, pColIndex;
  PRUint16 pNodeType;
  nsCOMPtr<nsIDOMElement> pResult;
  nsCOMPtr<nsIDOMNodeList> pLines, pValues;
  nsCOMPtr<nsIDOMNode> pLine, pValue, pContent;
  rv = pParameters[0]->GetElement(getter_AddRefs(pResult));
  NS_ENSURE_SUCCESS(rv,rv);
  rv = pResult->GetChildNodes(getter_AddRefs(pLines));
  NS_ENSURE_SUCCESS(rv,rv);
  pLines->GetLength(&pLsize);
  for (pLineIndex=0;pLineIndex<pLsize;pLineIndex++) {
    do {
      rv = pLines->Item(pLineIndex, getter_AddRefs(pLine));
      NS_ENSURE_SUCCESS(rv,rv);
      pLine->GetNodeType(&pNodeType);
      if (pNodeType!=nsIDOMNode::ELEMENT_NODE) pLineIndex++;
    } while (pLineIndex<pLsize && pNodeType!=nsIDOMNode::ELEMENT_NODE);
    if (pLineIndex>=pLsize) break;
    rv = pLine->GetChildNodes(getter_AddRefs(pValues));
    NS_ENSURE_SUCCESS(rv,rv);
    pValues->GetLength(&pCsize);
    for (pColIndex=0;pColIndex<pCsize;pColIndex++) {
      do {
        rv = pValues->Item(pColIndex, getter_AddRefs(pValue));
        NS_ENSURE_SUCCESS(rv,rv);
        pValue->GetNodeType(&pNodeType);
        if (pNodeType!=nsIDOMNode::ELEMENT_NODE) pColIndex++;
      } while (pColIndex<pCsize && pNodeType!=nsIDOMNode::ELEMENT_NODE);
      if (pColIndex>=pCsize) break;
      rv = pValue->GetFirstChild(getter_AddRefs(pContent));
      NS_ENSURE_SUCCESS(rv,rv);
      pVariant = do_CreateInstance(NS_VARIANT_CONTRACTID, &rv);
      NS_ENSURE_SUCCESS(rv,rv);
      if (pContent) {
        rv = pContent->GetNodeValue(pText);
        NS_ENSURE_SUCCESS(rv,rv);
        pVariant->SetAsAString(pText);
        printf("%s|",ToNewCString(pText));
      } else {
        pVariant->SetAsAString(NS_LITERAL_STRING(""));
      }
      rv = pArray.AppendObject(pVariant);
    }
  }
  rv = mComponent->TreatP00D2(pArray, pLsize, pCsize, mKey);
  return rv;
}


/* Generated by Pygmalion */


NS_IMPL_ISUPPORTS1(mozListenerP00D3, nsISOAPResponseListener)

mozListenerP00D3::mozListenerP00D3(mozC02gestsea* aComponent, const nsAString & aKey, const nsACString & aField1, const nsACString & aField2, const nsACString & aField3, const nsACString & aField4, const nsACString & aField5, const nsACString & aField6, const nsACString & aField7, const nsACString & aField8, const nsACString & aField9, const nsACString & aField10, const nsACString & aField11, const nsACString & aField12, const nsACString & aField13)
{
  mComponent = aComponent;
  mKey = aKey;
  mField1 = aField1;
  mField2 = aField2;
  mField3 = aField3;
  mField4 = aField4;
  mField5 = aField5;
  mField6 = aField6;
  mField7 = aField7;
  mField8 = aField8;
  mField9 = aField9;
  mField10 = aField10;
  mField11 = aField11;
  mField12 = aField12;
  mField13 = aField13;
}
mozListenerP00D3::~mozListenerP00D3()
{
}

NS_IMETHODIMP mozListenerP00D3::HandleResponse(nsISOAPResponse *aResponse, nsISOAPCall *aCall, PRUint32 aStatus, PRBool aLast, PRBool *aReturn)
{
  nsresult rv;
  nsCOMPtr<nsISOAPFault> pFault;
  rv = aResponse->GetFault(getter_AddRefs(pFault));
  NS_ENSURE_SUCCESS(rv, rv);
  if (pFault) {
    nsAutoString pFaute, pDetail, pTitle;
    nsCOMPtr<nsIDOMElement> pTheDetail;
    nsCOMPtr<nsIDOMNode> pNode;
    rv = pFault->GetDetail(getter_AddRefs(pTheDetail));
    NS_ENSURE_SUCCESS(rv,rv);
    rv = pTheDetail->GetFirstChild(getter_AddRefs(pNode));
    NS_ENSURE_SUCCESS(rv,rv);
    if (pNode) {
      nsCOMPtr<nsIDOMNamedNodeMap> pAttributes;
      nsCOMPtr<nsIDOMNode> pAttribute, pFirstNode;
      nsAutoString pNodeValue;
      rv = pNode->GetFirstChild(getter_AddRefs(pFirstNode));
      NS_ENSURE_SUCCESS(rv,rv);
      if (pFirstNode) {
        pFirstNode->GetNodeValue(pNodeValue);
        NS_ENSURE_SUCCESS(rv,rv);
        pDetail  = pNodeValue;
      }
      pNode->GetAttributes(getter_AddRefs(pAttributes));
      NS_ENSURE_SUCCESS(rv,rv);
      pAttributes->GetNamedItem(NS_LITERAL_STRING("code"), getter_AddRefs(pAttribute));
      NS_ENSURE_SUCCESS(rv,rv);
      if (pAttribute) {
        pAttribute->GetNodeValue(pNodeValue);
        NS_ENSURE_SUCCESS(rv,rv);
        pDetail += NS_LITERAL_STRING("\n(Erreur ");
        pDetail += pNodeValue;
        pDetail += NS_LITERAL_STRING(")");
      }
    } else pDetail = NS_LITERAL_STRING("Erreur sans message.");
    pFaute = pDetail;
    rv = pFault->GetFaultString(pTitle);
    NS_ENSURE_SUCCESS(rv,rv);
    nsCOMPtr<nsIPrompt> pPrompt= do_GetService(NS_DEFAULTPROMPT_CONTRACTID, &rv);
    NS_ENSURE_SUCCESS(rv,rv);
    pPrompt->Alert(ToNewUnicode(pTitle), ToNewUnicode(pFaute));
    return NS_ERROR_FAILURE;
  }

  nsISOAPParameter ** pParameters;
  PRUint32 pTotal;
  rv = aResponse->GetParameters(PR_FALSE, &pTotal, &pParameters);
  NS_ENSURE_SUCCESS(rv,rv);
  if (pTotal!=1) {
    nsCOMPtr<nsIPrompt> pPrompt= do_GetService(NS_DEFAULTPROMPT_CONTRACTID, &rv);
    NS_ENSURE_SUCCESS(rv,rv);
    pPrompt->Alert(ToNewUnicode(NS_LITERAL_CSTRING("Erreur système")), ToNewUnicode(NS_LITERAL_CSTRING("Le nombre total de paramètres reçus est incorrect.")));
    return NS_ERROR_FAILURE;
  }

  nsAutoString pText;
  nsCOMPtr<nsIVariant> pValue;
  rv = pParameters[0]->GetValue(getter_AddRefs(pValue));
  NS_ENSURE_SUCCESS(rv,rv);
  rv = pValue->GetAsAString(pText);
  NS_ENSURE_SUCCESS(rv,rv);
  rv = mComponent->TreatP00D3(pText, mKey, mField1, mField2, mField3, mField4, mField5, mField6, mField7, mField8, mField9, mField10, mField11, mField12, mField13);
  return rv;
}


/* Generated by Pygmalion */


NS_IMPL_ISUPPORTS1(mozListenerP00D4, nsISOAPResponseListener)

mozListenerP00D4::mozListenerP00D4(mozC02gestsea* aComponent)
{
  mComponent = aComponent;
}
mozListenerP00D4::~mozListenerP00D4()
{
}

NS_IMETHODIMP mozListenerP00D4::HandleResponse(nsISOAPResponse *aResponse, nsISOAPCall *aCall, PRUint32 aStatus, PRBool aLast, PRBool *aReturn)
{
  nsresult rv;
  nsCOMPtr<nsISOAPFault> pFault;
  rv = aResponse->GetFault(getter_AddRefs(pFault));
  NS_ENSURE_SUCCESS(rv, rv);
  if (pFault) {
    nsAutoString pFaute, pDetail, pTitle;
    nsCOMPtr<nsIDOMElement> pTheDetail;
    nsCOMPtr<nsIDOMNode> pNode;
    rv = pFault->GetDetail(getter_AddRefs(pTheDetail));
    NS_ENSURE_SUCCESS(rv,rv);
    rv = pTheDetail->GetFirstChild(getter_AddRefs(pNode));
    NS_ENSURE_SUCCESS(rv,rv);
    if (pNode) {
      nsCOMPtr<nsIDOMNamedNodeMap> pAttributes;
      nsCOMPtr<nsIDOMNode> pAttribute, pFirstNode;
      nsAutoString pNodeValue;
      rv = pNode->GetFirstChild(getter_AddRefs(pFirstNode));
      NS_ENSURE_SUCCESS(rv,rv);
      if (pFirstNode) {
        pFirstNode->GetNodeValue(pNodeValue);
        NS_ENSURE_SUCCESS(rv,rv);
        pDetail  = pNodeValue;
      }
      pNode->GetAttributes(getter_AddRefs(pAttributes));
      NS_ENSURE_SUCCESS(rv,rv);
      pAttributes->GetNamedItem(NS_LITERAL_STRING("code"), getter_AddRefs(pAttribute));
      NS_ENSURE_SUCCESS(rv,rv);
      if (pAttribute) {
        pAttribute->GetNodeValue(pNodeValue);
        NS_ENSURE_SUCCESS(rv,rv);
        pDetail += NS_LITERAL_STRING("\n(Erreur ");
        pDetail += pNodeValue;
        pDetail += NS_LITERAL_STRING(")");
      }
    } else pDetail = NS_LITERAL_STRING("Erreur sans message.");
    pFaute = pDetail;
    rv = pFault->GetFaultString(pTitle);
    NS_ENSURE_SUCCESS(rv,rv);
    nsCOMPtr<nsIPrompt> pPrompt= do_GetService(NS_DEFAULTPROMPT_CONTRACTID, &rv);
    NS_ENSURE_SUCCESS(rv,rv);
    pPrompt->Alert(ToNewUnicode(pTitle), ToNewUnicode(pFaute));
    return NS_ERROR_FAILURE;
  }

  nsISOAPParameter ** pParameters;
  PRUint32 pTotal;
  rv = aResponse->GetParameters(PR_FALSE, &pTotal, &pParameters);
  NS_ENSURE_SUCCESS(rv,rv);
  if (pTotal!=1) {
    nsCOMPtr<nsIPrompt> pPrompt= do_GetService(NS_DEFAULTPROMPT_CONTRACTID, &rv);
    NS_ENSURE_SUCCESS(rv,rv);
    pPrompt->Alert(ToNewUnicode(NS_LITERAL_CSTRING("Erreur système")), ToNewUnicode(NS_LITERAL_CSTRING("Le nombre total de paramètres reçus est incorrect.")));
    return NS_ERROR_FAILURE;
  }

  nsAutoString pText;
  nsCOMArray<nsIVariant> pArray;
  nsCOMPtr<nsIWritableVariant> pVariant;
  PRUint32 pLsize=0, pCsize=0;
  PRUint32 pLineIndex, pColIndex;
  PRUint16 pNodeType;
  nsCOMPtr<nsIDOMElement> pResult;
  nsCOMPtr<nsIDOMNodeList> pLines, pValues;
  nsCOMPtr<nsIDOMNode> pLine, pValue, pContent;
  rv = pParameters[0]->GetElement(getter_AddRefs(pResult));
  NS_ENSURE_SUCCESS(rv,rv);
  rv = pResult->GetChildNodes(getter_AddRefs(pLines));
  NS_ENSURE_SUCCESS(rv,rv);
  pLines->GetLength(&pLsize);
  for (pLineIndex=0;pLineIndex<pLsize;pLineIndex++) {
    do {
      rv = pLines->Item(pLineIndex, getter_AddRefs(pLine));
      NS_ENSURE_SUCCESS(rv,rv);
      pLine->GetNodeType(&pNodeType);
      if (pNodeType!=nsIDOMNode::ELEMENT_NODE) pLineIndex++;
    } while (pLineIndex<pLsize && pNodeType!=nsIDOMNode::ELEMENT_NODE);
    if (pLineIndex>=pLsize) break;
    rv = pLine->GetChildNodes(getter_AddRefs(pValues));
    NS_ENSURE_SUCCESS(rv,rv);
    pValues->GetLength(&pCsize);
    for (pColIndex=0;pColIndex<pCsize;pColIndex++) {
      do {
        rv = pValues->Item(pColIndex, getter_AddRefs(pValue));
        NS_ENSURE_SUCCESS(rv,rv);
        pValue->GetNodeType(&pNodeType);
        if (pNodeType!=nsIDOMNode::ELEMENT_NODE) pColIndex++;
      } while (pColIndex<pCsize && pNodeType!=nsIDOMNode::ELEMENT_NODE);
      if (pColIndex>=pCsize) break;
      rv = pValue->GetFirstChild(getter_AddRefs(pContent));
      NS_ENSURE_SUCCESS(rv,rv);
      pVariant = do_CreateInstance(NS_VARIANT_CONTRACTID, &rv);
      NS_ENSURE_SUCCESS(rv,rv);
      if (pContent) {
        rv = pContent->GetNodeValue(pText);
        NS_ENSURE_SUCCESS(rv,rv);
        pVariant->SetAsAString(pText);
        printf("%s|",ToNewCString(pText));
      } else {
        pVariant->SetAsAString(NS_LITERAL_STRING(""));
      }
      rv = pArray.AppendObject(pVariant);
    }
  }
  rv = mComponent->TreatP00D4(pArray, pLsize, pCsize);
  return rv;
}


/* Generated by Pygmalion */


NS_IMPL_ISUPPORTS1(mozListenerP00D5, nsISOAPResponseListener)

mozListenerP00D5::mozListenerP00D5(mozC02gestsea* aComponent, const nsAString & aKey)
{
  mComponent = aComponent;
  mKey = aKey;
}
mozListenerP00D5::~mozListenerP00D5()
{
}

NS_IMETHODIMP mozListenerP00D5::HandleResponse(nsISOAPResponse *aResponse, nsISOAPCall *aCall, PRUint32 aStatus, PRBool aLast, PRBool *aReturn)
{
  nsresult rv;
  nsCOMPtr<nsISOAPFault> pFault;
  rv = aResponse->GetFault(getter_AddRefs(pFault));
  NS_ENSURE_SUCCESS(rv, rv);
  if (pFault) {
    nsAutoString pFaute, pDetail, pTitle;
    nsCOMPtr<nsIDOMElement> pTheDetail;
    nsCOMPtr<nsIDOMNode> pNode;
    rv = pFault->GetDetail(getter_AddRefs(pTheDetail));
    NS_ENSURE_SUCCESS(rv,rv);
    rv = pTheDetail->GetFirstChild(getter_AddRefs(pNode));
    NS_ENSURE_SUCCESS(rv,rv);
    if (pNode) {
      nsCOMPtr<nsIDOMNamedNodeMap> pAttributes;
      nsCOMPtr<nsIDOMNode> pAttribute, pFirstNode;
      nsAutoString pNodeValue;
      rv = pNode->GetFirstChild(getter_AddRefs(pFirstNode));
      NS_ENSURE_SUCCESS(rv,rv);
      if (pFirstNode) {
        pFirstNode->GetNodeValue(pNodeValue);
        NS_ENSURE_SUCCESS(rv,rv);
        pDetail  = pNodeValue;
      }
      pNode->GetAttributes(getter_AddRefs(pAttributes));
      NS_ENSURE_SUCCESS(rv,rv);
      pAttributes->GetNamedItem(NS_LITERAL_STRING("code"), getter_AddRefs(pAttribute));
      NS_ENSURE_SUCCESS(rv,rv);
      if (pAttribute) {
        pAttribute->GetNodeValue(pNodeValue);
        NS_ENSURE_SUCCESS(rv,rv);
        pDetail += NS_LITERAL_STRING("\n(Erreur ");
        pDetail += pNodeValue;
        pDetail += NS_LITERAL_STRING(")");
      }
    } else pDetail = NS_LITERAL_STRING("Erreur sans message.");
    pFaute = pDetail;
    rv = pFault->GetFaultString(pTitle);
    NS_ENSURE_SUCCESS(rv,rv);
    nsCOMPtr<nsIPrompt> pPrompt= do_GetService(NS_DEFAULTPROMPT_CONTRACTID, &rv);
    NS_ENSURE_SUCCESS(rv,rv);
    pPrompt->Alert(ToNewUnicode(pTitle), ToNewUnicode(pFaute));
    return NS_ERROR_FAILURE;
  }

  nsISOAPParameter ** pParameters;
  PRUint32 pTotal;
  rv = aResponse->GetParameters(PR_FALSE, &pTotal, &pParameters);
  NS_ENSURE_SUCCESS(rv,rv);
  if (pTotal!=1) {
    nsCOMPtr<nsIPrompt> pPrompt= do_GetService(NS_DEFAULTPROMPT_CONTRACTID, &rv);
    NS_ENSURE_SUCCESS(rv,rv);
    pPrompt->Alert(ToNewUnicode(NS_LITERAL_CSTRING("Erreur système")), ToNewUnicode(NS_LITERAL_CSTRING("Le nombre total de paramètres reçus est incorrect.")));
    return NS_ERROR_FAILURE;
  }

  nsAutoString pText;
  nsCOMPtr<nsIVariant> pValue;
  rv = pParameters[0]->GetValue(getter_AddRefs(pValue));
  NS_ENSURE_SUCCESS(rv,rv);
  rv = pValue->GetAsAString(pText);
  NS_ENSURE_SUCCESS(rv,rv);
  rv = mComponent->TreatP00D5(pText, mKey);
  return rv;
}


/* Generated by Pygmalion */


NS_IMPL_ISUPPORTS1(mozListenerP00D6, nsISOAPResponseListener)

mozListenerP00D6::mozListenerP00D6(mozC02gestsea* aComponent, const nsAString & aTarget)
{
  mComponent = aComponent;
  mTarget = aTarget;
}
mozListenerP00D6::~mozListenerP00D6()
{
}

NS_IMETHODIMP mozListenerP00D6::HandleResponse(nsISOAPResponse *aResponse, nsISOAPCall *aCall, PRUint32 aStatus, PRBool aLast, PRBool *aReturn)
{
  nsresult rv;
  nsCOMPtr<nsISOAPFault> pFault;
  rv = aResponse->GetFault(getter_AddRefs(pFault));
  NS_ENSURE_SUCCESS(rv, rv);
  if (pFault) {
    nsAutoString pFaute, pDetail, pTitle;
    nsCOMPtr<nsIDOMElement> pTheDetail;
    nsCOMPtr<nsIDOMNode> pNode;
    rv = pFault->GetDetail(getter_AddRefs(pTheDetail));
    NS_ENSURE_SUCCESS(rv,rv);
    rv = pTheDetail->GetFirstChild(getter_AddRefs(pNode));
    NS_ENSURE_SUCCESS(rv,rv);
    if (pNode) {
      nsCOMPtr<nsIDOMNamedNodeMap> pAttributes;
      nsCOMPtr<nsIDOMNode> pAttribute, pFirstNode;
      nsAutoString pNodeValue;
      rv = pNode->GetFirstChild(getter_AddRefs(pFirstNode));
      NS_ENSURE_SUCCESS(rv,rv);
      if (pFirstNode) {
        pFirstNode->GetNodeValue(pNodeValue);
        NS_ENSURE_SUCCESS(rv,rv);
        pDetail  = pNodeValue;
      }
      pNode->GetAttributes(getter_AddRefs(pAttributes));
      NS_ENSURE_SUCCESS(rv,rv);
      pAttributes->GetNamedItem(NS_LITERAL_STRING("code"), getter_AddRefs(pAttribute));
      NS_ENSURE_SUCCESS(rv,rv);
      if (pAttribute) {
        pAttribute->GetNodeValue(pNodeValue);
        NS_ENSURE_SUCCESS(rv,rv);
        pDetail += NS_LITERAL_STRING("\n(Erreur ");
        pDetail += pNodeValue;
        pDetail += NS_LITERAL_STRING(")");
      }
    } else pDetail = NS_LITERAL_STRING("Erreur sans message.");
    pFaute = pDetail;
    rv = pFault->GetFaultString(pTitle);
    NS_ENSURE_SUCCESS(rv,rv);
    nsCOMPtr<nsIPrompt> pPrompt= do_GetService(NS_DEFAULTPROMPT_CONTRACTID, &rv);
    NS_ENSURE_SUCCESS(rv,rv);
    pPrompt->Alert(ToNewUnicode(pTitle), ToNewUnicode(pFaute));
    return NS_ERROR_FAILURE;
  }

  nsISOAPParameter ** pParameters;
  PRUint32 pTotal;
  rv = aResponse->GetParameters(PR_FALSE, &pTotal, &pParameters);
  NS_ENSURE_SUCCESS(rv,rv);
  if (pTotal!=1) {
    nsCOMPtr<nsIPrompt> pPrompt= do_GetService(NS_DEFAULTPROMPT_CONTRACTID, &rv);
    NS_ENSURE_SUCCESS(rv,rv);
    pPrompt->Alert(ToNewUnicode(NS_LITERAL_CSTRING("Erreur système")), ToNewUnicode(NS_LITERAL_CSTRING("Le nombre total de paramètres reçus est incorrect.")));
    return NS_ERROR_FAILURE;
  }

  nsAutoString pText;
  nsCOMArray<nsIVariant> pArray;
  nsCOMPtr<nsIWritableVariant> pVariant;
  PRUint32 pLsize=0, pCsize=0;
  PRUint32 pLineIndex, pColIndex;
  PRUint16 pNodeType;
  nsCOMPtr<nsIDOMElement> pResult;
  nsCOMPtr<nsIDOMNodeList> pLines, pValues;
  nsCOMPtr<nsIDOMNode> pLine, pValue, pContent;
  rv = pParameters[0]->GetElement(getter_AddRefs(pResult));
  NS_ENSURE_SUCCESS(rv,rv);
  rv = pResult->GetChildNodes(getter_AddRefs(pLines));
  NS_ENSURE_SUCCESS(rv,rv);
  pLines->GetLength(&pLsize);
  for (pLineIndex=0;pLineIndex<pLsize;pLineIndex++) {
    do {
      rv = pLines->Item(pLineIndex, getter_AddRefs(pLine));
      NS_ENSURE_SUCCESS(rv,rv);
      pLine->GetNodeType(&pNodeType);
      if (pNodeType!=nsIDOMNode::ELEMENT_NODE) pLineIndex++;
    } while (pLineIndex<pLsize && pNodeType!=nsIDOMNode::ELEMENT_NODE);
    if (pLineIndex>=pLsize) break;
    rv = pLine->GetChildNodes(getter_AddRefs(pValues));
    NS_ENSURE_SUCCESS(rv,rv);
    pValues->GetLength(&pCsize);
    for (pColIndex=0;pColIndex<pCsize;pColIndex++) {
      do {
        rv = pValues->Item(pColIndex, getter_AddRefs(pValue));
        NS_ENSURE_SUCCESS(rv,rv);
        pValue->GetNodeType(&pNodeType);
        if (pNodeType!=nsIDOMNode::ELEMENT_NODE) pColIndex++;
      } while (pColIndex<pCsize && pNodeType!=nsIDOMNode::ELEMENT_NODE);
      if (pColIndex>=pCsize) break;
      rv = pValue->GetFirstChild(getter_AddRefs(pContent));
      NS_ENSURE_SUCCESS(rv,rv);
      pVariant = do_CreateInstance(NS_VARIANT_CONTRACTID, &rv);
      NS_ENSURE_SUCCESS(rv,rv);
      if (pContent) {
        rv = pContent->GetNodeValue(pText);
        NS_ENSURE_SUCCESS(rv,rv);
        pVariant->SetAsAString(pText);
        printf("%s|",ToNewCString(pText));
      } else {
        pVariant->SetAsAString(NS_LITERAL_STRING(""));
      }
      rv = pArray.AppendObject(pVariant);
    }
  }
  rv = mComponent->TreatP00D6(pArray, pLsize, pCsize, mTarget);
  return rv;
}


/* Generated by Pygmalion */


NS_IMPL_ISUPPORTS1(mozListenerP00D7, nsISOAPResponseListener)

mozListenerP00D7::mozListenerP00D7(mozC02gestsea* aComponent, const nsAString & aTarget)
{
  mComponent = aComponent;
  mTarget = aTarget;
}
mozListenerP00D7::~mozListenerP00D7()
{
}

NS_IMETHODIMP mozListenerP00D7::HandleResponse(nsISOAPResponse *aResponse, nsISOAPCall *aCall, PRUint32 aStatus, PRBool aLast, PRBool *aReturn)
{
  nsresult rv;
  nsCOMPtr<nsISOAPFault> pFault;
  rv = aResponse->GetFault(getter_AddRefs(pFault));
  NS_ENSURE_SUCCESS(rv, rv);
  if (pFault) {
    nsAutoString pFaute, pDetail, pTitle;
    nsCOMPtr<nsIDOMElement> pTheDetail;
    nsCOMPtr<nsIDOMNode> pNode;
    rv = pFault->GetDetail(getter_AddRefs(pTheDetail));
    NS_ENSURE_SUCCESS(rv,rv);
    rv = pTheDetail->GetFirstChild(getter_AddRefs(pNode));
    NS_ENSURE_SUCCESS(rv,rv);
    if (pNode) {
      nsCOMPtr<nsIDOMNamedNodeMap> pAttributes;
      nsCOMPtr<nsIDOMNode> pAttribute, pFirstNode;
      nsAutoString pNodeValue;
      rv = pNode->GetFirstChild(getter_AddRefs(pFirstNode));
      NS_ENSURE_SUCCESS(rv,rv);
      if (pFirstNode) {
        pFirstNode->GetNodeValue(pNodeValue);
        NS_ENSURE_SUCCESS(rv,rv);
        pDetail  = pNodeValue;
      }
      pNode->GetAttributes(getter_AddRefs(pAttributes));
      NS_ENSURE_SUCCESS(rv,rv);
      pAttributes->GetNamedItem(NS_LITERAL_STRING("code"), getter_AddRefs(pAttribute));
      NS_ENSURE_SUCCESS(rv,rv);
      if (pAttribute) {
        pAttribute->GetNodeValue(pNodeValue);
        NS_ENSURE_SUCCESS(rv,rv);
        pDetail += NS_LITERAL_STRING("\n(Erreur ");
        pDetail += pNodeValue;
        pDetail += NS_LITERAL_STRING(")");
      }
    } else pDetail = NS_LITERAL_STRING("Erreur sans message.");
    pFaute = pDetail;
    rv = pFault->GetFaultString(pTitle);
    NS_ENSURE_SUCCESS(rv,rv);
    nsCOMPtr<nsIPrompt> pPrompt= do_GetService(NS_DEFAULTPROMPT_CONTRACTID, &rv);
    NS_ENSURE_SUCCESS(rv,rv);
    pPrompt->Alert(ToNewUnicode(pTitle), ToNewUnicode(pFaute));
    return NS_ERROR_FAILURE;
  }

  nsISOAPParameter ** pParameters;
  PRUint32 pTotal;
  rv = aResponse->GetParameters(PR_FALSE, &pTotal, &pParameters);
  NS_ENSURE_SUCCESS(rv,rv);
  if (pTotal!=1) {
    nsCOMPtr<nsIPrompt> pPrompt= do_GetService(NS_DEFAULTPROMPT_CONTRACTID, &rv);
    NS_ENSURE_SUCCESS(rv,rv);
    pPrompt->Alert(ToNewUnicode(NS_LITERAL_CSTRING("Erreur système")), ToNewUnicode(NS_LITERAL_CSTRING("Le nombre total de paramètres reçus est incorrect.")));
    return NS_ERROR_FAILURE;
  }

  nsAutoString pText;
  nsCOMArray<nsIVariant> pArray;
  nsCOMPtr<nsIWritableVariant> pVariant;
  PRUint32 pLsize=0, pCsize=0;
  PRUint32 pLineIndex, pColIndex;
  PRUint16 pNodeType;
  nsCOMPtr<nsIDOMElement> pResult;
  nsCOMPtr<nsIDOMNodeList> pLines, pValues;
  nsCOMPtr<nsIDOMNode> pLine, pValue, pContent;
  rv = pParameters[0]->GetElement(getter_AddRefs(pResult));
  NS_ENSURE_SUCCESS(rv,rv);
  rv = pResult->GetChildNodes(getter_AddRefs(pLines));
  NS_ENSURE_SUCCESS(rv,rv);
  pLines->GetLength(&pLsize);
  for (pLineIndex=0;pLineIndex<pLsize;pLineIndex++) {
    do {
      rv = pLines->Item(pLineIndex, getter_AddRefs(pLine));
      NS_ENSURE_SUCCESS(rv,rv);
      pLine->GetNodeType(&pNodeType);
      if (pNodeType!=nsIDOMNode::ELEMENT_NODE) pLineIndex++;
    } while (pLineIndex<pLsize && pNodeType!=nsIDOMNode::ELEMENT_NODE);
    if (pLineIndex>=pLsize) break;
    rv = pLine->GetChildNodes(getter_AddRefs(pValues));
    NS_ENSURE_SUCCESS(rv,rv);
    pValues->GetLength(&pCsize);
    for (pColIndex=0;pColIndex<pCsize;pColIndex++) {
      do {
        rv = pValues->Item(pColIndex, getter_AddRefs(pValue));
        NS_ENSURE_SUCCESS(rv,rv);
        pValue->GetNodeType(&pNodeType);
        if (pNodeType!=nsIDOMNode::ELEMENT_NODE) pColIndex++;
      } while (pColIndex<pCsize && pNodeType!=nsIDOMNode::ELEMENT_NODE);
      if (pColIndex>=pCsize) break;
      rv = pValue->GetFirstChild(getter_AddRefs(pContent));
      NS_ENSURE_SUCCESS(rv,rv);
      pVariant = do_CreateInstance(NS_VARIANT_CONTRACTID, &rv);
      NS_ENSURE_SUCCESS(rv,rv);
      if (pContent) {
        rv = pContent->GetNodeValue(pText);
        NS_ENSURE_SUCCESS(rv,rv);
        pVariant->SetAsAString(pText);
        printf("%s|",ToNewCString(pText));
      } else {
        pVariant->SetAsAString(NS_LITERAL_STRING(""));
      }
      rv = pArray.AppendObject(pVariant);
    }
  }
  rv = mComponent->TreatP00D7(pArray, pLsize, pCsize, mTarget);
  return rv;
}


/* Generated by Pygmalion */


NS_IMPL_ISUPPORTS1(mozListenerP00D8, nsISOAPResponseListener)

mozListenerP00D8::mozListenerP00D8(mozC02gestsea* aComponent, const nsAString & aTarget)
{
  mComponent = aComponent;
  mTarget = aTarget;
}
mozListenerP00D8::~mozListenerP00D8()
{
}

NS_IMETHODIMP mozListenerP00D8::HandleResponse(nsISOAPResponse *aResponse, nsISOAPCall *aCall, PRUint32 aStatus, PRBool aLast, PRBool *aReturn)
{
  nsresult rv;
  nsCOMPtr<nsISOAPFault> pFault;
  rv = aResponse->GetFault(getter_AddRefs(pFault));
  NS_ENSURE_SUCCESS(rv, rv);
  if (pFault) {
    nsAutoString pFaute, pDetail, pTitle;
    nsCOMPtr<nsIDOMElement> pTheDetail;
    nsCOMPtr<nsIDOMNode> pNode;
    rv = pFault->GetDetail(getter_AddRefs(pTheDetail));
    NS_ENSURE_SUCCESS(rv,rv);
    rv = pTheDetail->GetFirstChild(getter_AddRefs(pNode));
    NS_ENSURE_SUCCESS(rv,rv);
    if (pNode) {
      nsCOMPtr<nsIDOMNamedNodeMap> pAttributes;
      nsCOMPtr<nsIDOMNode> pAttribute, pFirstNode;
      nsAutoString pNodeValue;
      rv = pNode->GetFirstChild(getter_AddRefs(pFirstNode));
      NS_ENSURE_SUCCESS(rv,rv);
      if (pFirstNode) {
        pFirstNode->GetNodeValue(pNodeValue);
        NS_ENSURE_SUCCESS(rv,rv);
        pDetail  = pNodeValue;
      }
      pNode->GetAttributes(getter_AddRefs(pAttributes));
      NS_ENSURE_SUCCESS(rv,rv);
      pAttributes->GetNamedItem(NS_LITERAL_STRING("code"), getter_AddRefs(pAttribute));
      NS_ENSURE_SUCCESS(rv,rv);
      if (pAttribute) {
        pAttribute->GetNodeValue(pNodeValue);
        NS_ENSURE_SUCCESS(rv,rv);
        pDetail += NS_LITERAL_STRING("\n(Erreur ");
        pDetail += pNodeValue;
        pDetail += NS_LITERAL_STRING(")");
      }
    } else pDetail = NS_LITERAL_STRING("Erreur sans message.");
    pFaute = pDetail;
    rv = pFault->GetFaultString(pTitle);
    NS_ENSURE_SUCCESS(rv,rv);
    nsCOMPtr<nsIPrompt> pPrompt= do_GetService(NS_DEFAULTPROMPT_CONTRACTID, &rv);
    NS_ENSURE_SUCCESS(rv,rv);
    pPrompt->Alert(ToNewUnicode(pTitle), ToNewUnicode(pFaute));
    return NS_ERROR_FAILURE;
  }

  nsISOAPParameter ** pParameters;
  PRUint32 pTotal;
  rv = aResponse->GetParameters(PR_FALSE, &pTotal, &pParameters);
  NS_ENSURE_SUCCESS(rv,rv);
  if (pTotal!=1) {
    nsCOMPtr<nsIPrompt> pPrompt= do_GetService(NS_DEFAULTPROMPT_CONTRACTID, &rv);
    NS_ENSURE_SUCCESS(rv,rv);
    pPrompt->Alert(ToNewUnicode(NS_LITERAL_CSTRING("Erreur système")), ToNewUnicode(NS_LITERAL_CSTRING("Le nombre total de paramètres reçus est incorrect.")));
    return NS_ERROR_FAILURE;
  }

  nsAutoString pText;
  nsCOMArray<nsIVariant> pArray;
  nsCOMPtr<nsIWritableVariant> pVariant;
  PRUint32 pLsize=0, pCsize=0;
  PRUint32 pLineIndex, pColIndex;
  PRUint16 pNodeType;
  nsCOMPtr<nsIDOMElement> pResult;
  nsCOMPtr<nsIDOMNodeList> pLines, pValues;
  nsCOMPtr<nsIDOMNode> pLine, pValue, pContent;
  rv = pParameters[0]->GetElement(getter_AddRefs(pResult));
  NS_ENSURE_SUCCESS(rv,rv);
  rv = pResult->GetChildNodes(getter_AddRefs(pLines));
  NS_ENSURE_SUCCESS(rv,rv);
  pLines->GetLength(&pLsize);
  for (pLineIndex=0;pLineIndex<pLsize;pLineIndex++) {
    do {
      rv = pLines->Item(pLineIndex, getter_AddRefs(pLine));
      NS_ENSURE_SUCCESS(rv,rv);
      pLine->GetNodeType(&pNodeType);
      if (pNodeType!=nsIDOMNode::ELEMENT_NODE) pLineIndex++;
    } while (pLineIndex<pLsize && pNodeType!=nsIDOMNode::ELEMENT_NODE);
    if (pLineIndex>=pLsize) break;
    rv = pLine->GetChildNodes(getter_AddRefs(pValues));
    NS_ENSURE_SUCCESS(rv,rv);
    pValues->GetLength(&pCsize);
    for (pColIndex=0;pColIndex<pCsize;pColIndex++) {
      do {
        rv = pValues->Item(pColIndex, getter_AddRefs(pValue));
        NS_ENSURE_SUCCESS(rv,rv);
        pValue->GetNodeType(&pNodeType);
        if (pNodeType!=nsIDOMNode::ELEMENT_NODE) pColIndex++;
      } while (pColIndex<pCsize && pNodeType!=nsIDOMNode::ELEMENT_NODE);
      if (pColIndex>=pCsize) break;
      rv = pValue->GetFirstChild(getter_AddRefs(pContent));
      NS_ENSURE_SUCCESS(rv,rv);
      pVariant = do_CreateInstance(NS_VARIANT_CONTRACTID, &rv);
      NS_ENSURE_SUCCESS(rv,rv);
      if (pContent) {
        rv = pContent->GetNodeValue(pText);
        NS_ENSURE_SUCCESS(rv,rv);
        pVariant->SetAsAString(pText);
        printf("%s|",ToNewCString(pText));
      } else {
        pVariant->SetAsAString(NS_LITERAL_STRING(""));
      }
      rv = pArray.AppendObject(pVariant);
    }
  }
  rv = mComponent->TreatP00D8(pArray, pLsize, pCsize, mTarget);
  return rv;
}


/* Generated by Pygmalion */


NS_IMPL_ISUPPORTS1(mozListenerP00D9, nsISOAPResponseListener)

mozListenerP00D9::mozListenerP00D9(mozC02gestsea* aComponent, const nsAString & aTarget)
{
  mComponent = aComponent;
  mTarget = aTarget;
}
mozListenerP00D9::~mozListenerP00D9()
{
}

NS_IMETHODIMP mozListenerP00D9::HandleResponse(nsISOAPResponse *aResponse, nsISOAPCall *aCall, PRUint32 aStatus, PRBool aLast, PRBool *aReturn)
{
  nsresult rv;
  nsCOMPtr<nsISOAPFault> pFault;
  rv = aResponse->GetFault(getter_AddRefs(pFault));
  NS_ENSURE_SUCCESS(rv, rv);
  if (pFault) {
    nsAutoString pFaute, pDetail, pTitle;
    nsCOMPtr<nsIDOMElement> pTheDetail;
    nsCOMPtr<nsIDOMNode> pNode;
    rv = pFault->GetDetail(getter_AddRefs(pTheDetail));
    NS_ENSURE_SUCCESS(rv,rv);
    rv = pTheDetail->GetFirstChild(getter_AddRefs(pNode));
    NS_ENSURE_SUCCESS(rv,rv);
    if (pNode) {
      nsCOMPtr<nsIDOMNamedNodeMap> pAttributes;
      nsCOMPtr<nsIDOMNode> pAttribute, pFirstNode;
      nsAutoString pNodeValue;
      rv = pNode->GetFirstChild(getter_AddRefs(pFirstNode));
      NS_ENSURE_SUCCESS(rv,rv);
      if (pFirstNode) {
        pFirstNode->GetNodeValue(pNodeValue);
        NS_ENSURE_SUCCESS(rv,rv);
        pDetail  = pNodeValue;
      }
      pNode->GetAttributes(getter_AddRefs(pAttributes));
      NS_ENSURE_SUCCESS(rv,rv);
      pAttributes->GetNamedItem(NS_LITERAL_STRING("code"), getter_AddRefs(pAttribute));
      NS_ENSURE_SUCCESS(rv,rv);
      if (pAttribute) {
        pAttribute->GetNodeValue(pNodeValue);
        NS_ENSURE_SUCCESS(rv,rv);
        pDetail += NS_LITERAL_STRING("\n(Erreur ");
        pDetail += pNodeValue;
        pDetail += NS_LITERAL_STRING(")");
      }
    } else pDetail = NS_LITERAL_STRING("Erreur sans message.");
    pFaute = pDetail;
    rv = pFault->GetFaultString(pTitle);
    NS_ENSURE_SUCCESS(rv,rv);
    nsCOMPtr<nsIPrompt> pPrompt= do_GetService(NS_DEFAULTPROMPT_CONTRACTID, &rv);
    NS_ENSURE_SUCCESS(rv,rv);
    pPrompt->Alert(ToNewUnicode(pTitle), ToNewUnicode(pFaute));
    return NS_ERROR_FAILURE;
  }

  nsISOAPParameter ** pParameters;
  PRUint32 pTotal;
  rv = aResponse->GetParameters(PR_FALSE, &pTotal, &pParameters);
  NS_ENSURE_SUCCESS(rv,rv);
  if (pTotal!=1) {
    nsCOMPtr<nsIPrompt> pPrompt= do_GetService(NS_DEFAULTPROMPT_CONTRACTID, &rv);
    NS_ENSURE_SUCCESS(rv,rv);
    pPrompt->Alert(ToNewUnicode(NS_LITERAL_CSTRING("Erreur système")), ToNewUnicode(NS_LITERAL_CSTRING("Le nombre total de paramètres reçus est incorrect.")));
    return NS_ERROR_FAILURE;
  }

  nsAutoString pText;
  nsCOMArray<nsIVariant> pArray;
  nsCOMPtr<nsIWritableVariant> pVariant;
  PRUint32 pLsize=0, pCsize=0;
  PRUint32 pLineIndex, pColIndex;
  PRUint16 pNodeType;
  nsCOMPtr<nsIDOMElement> pResult;
  nsCOMPtr<nsIDOMNodeList> pLines, pValues;
  nsCOMPtr<nsIDOMNode> pLine, pValue, pContent;
  rv = pParameters[0]->GetElement(getter_AddRefs(pResult));
  NS_ENSURE_SUCCESS(rv,rv);
  rv = pResult->GetChildNodes(getter_AddRefs(pLines));
  NS_ENSURE_SUCCESS(rv,rv);
  pLines->GetLength(&pLsize);
  for (pLineIndex=0;pLineIndex<pLsize;pLineIndex++) {
    do {
      rv = pLines->Item(pLineIndex, getter_AddRefs(pLine));
      NS_ENSURE_SUCCESS(rv,rv);
      pLine->GetNodeType(&pNodeType);
      if (pNodeType!=nsIDOMNode::ELEMENT_NODE) pLineIndex++;
    } while (pLineIndex<pLsize && pNodeType!=nsIDOMNode::ELEMENT_NODE);
    if (pLineIndex>=pLsize) break;
    rv = pLine->GetChildNodes(getter_AddRefs(pValues));
    NS_ENSURE_SUCCESS(rv,rv);
    pValues->GetLength(&pCsize);
    for (pColIndex=0;pColIndex<pCsize;pColIndex++) {
      do {
        rv = pValues->Item(pColIndex, getter_AddRefs(pValue));
        NS_ENSURE_SUCCESS(rv,rv);
        pValue->GetNodeType(&pNodeType);
        if (pNodeType!=nsIDOMNode::ELEMENT_NODE) pColIndex++;
      } while (pColIndex<pCsize && pNodeType!=nsIDOMNode::ELEMENT_NODE);
      if (pColIndex>=pCsize) break;
      rv = pValue->GetFirstChild(getter_AddRefs(pContent));
      NS_ENSURE_SUCCESS(rv,rv);
      pVariant = do_CreateInstance(NS_VARIANT_CONTRACTID, &rv);
      NS_ENSURE_SUCCESS(rv,rv);
      if (pContent) {
        rv = pContent->GetNodeValue(pText);
        NS_ENSURE_SUCCESS(rv,rv);
        pVariant->SetAsAString(pText);
        printf("%s|",ToNewCString(pText));
      } else {
        pVariant->SetAsAString(NS_LITERAL_STRING(""));
      }
      rv = pArray.AppendObject(pVariant);
    }
  }
  rv = mComponent->TreatP00D9(pArray, pLsize, pCsize, mTarget);
  return rv;
}


/* Generated by Pygmalion */


NS_IMPL_ISUPPORTS1(mozListenerP00DA, nsISOAPResponseListener)

mozListenerP00DA::mozListenerP00DA(mozC02gestsea* aComponent, const nsAString & aTarget)
{
  mComponent = aComponent;
  mTarget = aTarget;
}
mozListenerP00DA::~mozListenerP00DA()
{
}

NS_IMETHODIMP mozListenerP00DA::HandleResponse(nsISOAPResponse *aResponse, nsISOAPCall *aCall, PRUint32 aStatus, PRBool aLast, PRBool *aReturn)
{
  nsresult rv;
  nsCOMPtr<nsISOAPFault> pFault;
  rv = aResponse->GetFault(getter_AddRefs(pFault));
  NS_ENSURE_SUCCESS(rv, rv);
  if (pFault) {
    nsAutoString pFaute, pDetail, pTitle;
    nsCOMPtr<nsIDOMElement> pTheDetail;
    nsCOMPtr<nsIDOMNode> pNode;
    rv = pFault->GetDetail(getter_AddRefs(pTheDetail));
    NS_ENSURE_SUCCESS(rv,rv);
    rv = pTheDetail->GetFirstChild(getter_AddRefs(pNode));
    NS_ENSURE_SUCCESS(rv,rv);
    if (pNode) {
      nsCOMPtr<nsIDOMNamedNodeMap> pAttributes;
      nsCOMPtr<nsIDOMNode> pAttribute, pFirstNode;
      nsAutoString pNodeValue;
      rv = pNode->GetFirstChild(getter_AddRefs(pFirstNode));
      NS_ENSURE_SUCCESS(rv,rv);
      if (pFirstNode) {
        pFirstNode->GetNodeValue(pNodeValue);
        NS_ENSURE_SUCCESS(rv,rv);
        pDetail  = pNodeValue;
      }
      pNode->GetAttributes(getter_AddRefs(pAttributes));
      NS_ENSURE_SUCCESS(rv,rv);
      pAttributes->GetNamedItem(NS_LITERAL_STRING("code"), getter_AddRefs(pAttribute));
      NS_ENSURE_SUCCESS(rv,rv);
      if (pAttribute) {
        pAttribute->GetNodeValue(pNodeValue);
        NS_ENSURE_SUCCESS(rv,rv);
        pDetail += NS_LITERAL_STRING("\n(Erreur ");
        pDetail += pNodeValue;
        pDetail += NS_LITERAL_STRING(")");
      }
    } else pDetail = NS_LITERAL_STRING("Erreur sans message.");
    pFaute = pDetail;
    rv = pFault->GetFaultString(pTitle);
    NS_ENSURE_SUCCESS(rv,rv);
    nsCOMPtr<nsIPrompt> pPrompt= do_GetService(NS_DEFAULTPROMPT_CONTRACTID, &rv);
    NS_ENSURE_SUCCESS(rv,rv);
    pPrompt->Alert(ToNewUnicode(pTitle), ToNewUnicode(pFaute));
    return NS_ERROR_FAILURE;
  }

  nsISOAPParameter ** pParameters;
  PRUint32 pTotal;
  rv = aResponse->GetParameters(PR_FALSE, &pTotal, &pParameters);
  NS_ENSURE_SUCCESS(rv,rv);
  if (pTotal!=1) {
    nsCOMPtr<nsIPrompt> pPrompt= do_GetService(NS_DEFAULTPROMPT_CONTRACTID, &rv);
    NS_ENSURE_SUCCESS(rv,rv);
    pPrompt->Alert(ToNewUnicode(NS_LITERAL_CSTRING("Erreur système")), ToNewUnicode(NS_LITERAL_CSTRING("Le nombre total de paramètres reçus est incorrect.")));
    return NS_ERROR_FAILURE;
  }

  nsAutoString pText;
  nsCOMArray<nsIVariant> pArray;
  nsCOMPtr<nsIWritableVariant> pVariant;
  PRUint32 pLsize=0, pCsize=0;
  PRUint32 pLineIndex, pColIndex;
  PRUint16 pNodeType;
  nsCOMPtr<nsIDOMElement> pResult;
  nsCOMPtr<nsIDOMNodeList> pLines, pValues;
  nsCOMPtr<nsIDOMNode> pLine, pValue, pContent;
  rv = pParameters[0]->GetElement(getter_AddRefs(pResult));
  NS_ENSURE_SUCCESS(rv,rv);
  rv = pResult->GetChildNodes(getter_AddRefs(pLines));
  NS_ENSURE_SUCCESS(rv,rv);
  pLines->GetLength(&pLsize);
  for (pLineIndex=0;pLineIndex<pLsize;pLineIndex++) {
    do {
      rv = pLines->Item(pLineIndex, getter_AddRefs(pLine));
      NS_ENSURE_SUCCESS(rv,rv);
      pLine->GetNodeType(&pNodeType);
      if (pNodeType!=nsIDOMNode::ELEMENT_NODE) pLineIndex++;
    } while (pLineIndex<pLsize && pNodeType!=nsIDOMNode::ELEMENT_NODE);
    if (pLineIndex>=pLsize) break;
    rv = pLine->GetChildNodes(getter_AddRefs(pValues));
    NS_ENSURE_SUCCESS(rv,rv);
    pValues->GetLength(&pCsize);
    for (pColIndex=0;pColIndex<pCsize;pColIndex++) {
      do {
        rv = pValues->Item(pColIndex, getter_AddRefs(pValue));
        NS_ENSURE_SUCCESS(rv,rv);
        pValue->GetNodeType(&pNodeType);
        if (pNodeType!=nsIDOMNode::ELEMENT_NODE) pColIndex++;
      } while (pColIndex<pCsize && pNodeType!=nsIDOMNode::ELEMENT_NODE);
      if (pColIndex>=pCsize) break;
      rv = pValue->GetFirstChild(getter_AddRefs(pContent));
      NS_ENSURE_SUCCESS(rv,rv);
      pVariant = do_CreateInstance(NS_VARIANT_CONTRACTID, &rv);
      NS_ENSURE_SUCCESS(rv,rv);
      if (pContent) {
        rv = pContent->GetNodeValue(pText);
        NS_ENSURE_SUCCESS(rv,rv);
        pVariant->SetAsAString(pText);
        printf("%s|",ToNewCString(pText));
      } else {
        pVariant->SetAsAString(NS_LITERAL_STRING(""));
      }
      rv = pArray.AppendObject(pVariant);
    }
  }
  rv = mComponent->TreatP00DA(pArray, pLsize, pCsize, mTarget);
  return rv;
}


/* Generated by Pygmalion */


NS_IMPL_ISUPPORTS1(mozListenerP00DB, nsISOAPResponseListener)

mozListenerP00DB::mozListenerP00DB(mozC02gestsea* aComponent, const nsAString & aTarget)
{
  mComponent = aComponent;
  mTarget = aTarget;
}
mozListenerP00DB::~mozListenerP00DB()
{
}

NS_IMETHODIMP mozListenerP00DB::HandleResponse(nsISOAPResponse *aResponse, nsISOAPCall *aCall, PRUint32 aStatus, PRBool aLast, PRBool *aReturn)
{
  nsresult rv;
  nsCOMPtr<nsISOAPFault> pFault;
  rv = aResponse->GetFault(getter_AddRefs(pFault));
  NS_ENSURE_SUCCESS(rv, rv);
  if (pFault) {
    nsAutoString pFaute, pDetail, pTitle;
    nsCOMPtr<nsIDOMElement> pTheDetail;
    nsCOMPtr<nsIDOMNode> pNode;
    rv = pFault->GetDetail(getter_AddRefs(pTheDetail));
    NS_ENSURE_SUCCESS(rv,rv);
    rv = pTheDetail->GetFirstChild(getter_AddRefs(pNode));
    NS_ENSURE_SUCCESS(rv,rv);
    if (pNode) {
      nsCOMPtr<nsIDOMNamedNodeMap> pAttributes;
      nsCOMPtr<nsIDOMNode> pAttribute, pFirstNode;
      nsAutoString pNodeValue;
      rv = pNode->GetFirstChild(getter_AddRefs(pFirstNode));
      NS_ENSURE_SUCCESS(rv,rv);
      if (pFirstNode) {
        pFirstNode->GetNodeValue(pNodeValue);
        NS_ENSURE_SUCCESS(rv,rv);
        pDetail  = pNodeValue;
      }
      pNode->GetAttributes(getter_AddRefs(pAttributes));
      NS_ENSURE_SUCCESS(rv,rv);
      pAttributes->GetNamedItem(NS_LITERAL_STRING("code"), getter_AddRefs(pAttribute));
      NS_ENSURE_SUCCESS(rv,rv);
      if (pAttribute) {
        pAttribute->GetNodeValue(pNodeValue);
        NS_ENSURE_SUCCESS(rv,rv);
        pDetail += NS_LITERAL_STRING("\n(Erreur ");
        pDetail += pNodeValue;
        pDetail += NS_LITERAL_STRING(")");
      }
    } else pDetail = NS_LITERAL_STRING("Erreur sans message.");
    pFaute = pDetail;
    rv = pFault->GetFaultString(pTitle);
    NS_ENSURE_SUCCESS(rv,rv);
    nsCOMPtr<nsIPrompt> pPrompt= do_GetService(NS_DEFAULTPROMPT_CONTRACTID, &rv);
    NS_ENSURE_SUCCESS(rv,rv);
    pPrompt->Alert(ToNewUnicode(pTitle), ToNewUnicode(pFaute));
    return NS_ERROR_FAILURE;
  }

  nsISOAPParameter ** pParameters;
  PRUint32 pTotal;
  rv = aResponse->GetParameters(PR_FALSE, &pTotal, &pParameters);
  NS_ENSURE_SUCCESS(rv,rv);
  if (pTotal!=1) {
    nsCOMPtr<nsIPrompt> pPrompt= do_GetService(NS_DEFAULTPROMPT_CONTRACTID, &rv);
    NS_ENSURE_SUCCESS(rv,rv);
    pPrompt->Alert(ToNewUnicode(NS_LITERAL_CSTRING("Erreur système")), ToNewUnicode(NS_LITERAL_CSTRING("Le nombre total de paramètres reçus est incorrect.")));
    return NS_ERROR_FAILURE;
  }

  nsAutoString pText;
  nsCOMArray<nsIVariant> pArray;
  nsCOMPtr<nsIWritableVariant> pVariant;
  PRUint32 pLsize=0, pCsize=0;
  PRUint32 pLineIndex, pColIndex;
  PRUint16 pNodeType;
  nsCOMPtr<nsIDOMElement> pResult;
  nsCOMPtr<nsIDOMNodeList> pLines, pValues;
  nsCOMPtr<nsIDOMNode> pLine, pValue, pContent;
  rv = pParameters[0]->GetElement(getter_AddRefs(pResult));
  NS_ENSURE_SUCCESS(rv,rv);
  rv = pResult->GetChildNodes(getter_AddRefs(pLines));
  NS_ENSURE_SUCCESS(rv,rv);
  pLines->GetLength(&pLsize);
  for (pLineIndex=0;pLineIndex<pLsize;pLineIndex++) {
    do {
      rv = pLines->Item(pLineIndex, getter_AddRefs(pLine));
      NS_ENSURE_SUCCESS(rv,rv);
      pLine->GetNodeType(&pNodeType);
      if (pNodeType!=nsIDOMNode::ELEMENT_NODE) pLineIndex++;
    } while (pLineIndex<pLsize && pNodeType!=nsIDOMNode::ELEMENT_NODE);
    if (pLineIndex>=pLsize) break;
    rv = pLine->GetChildNodes(getter_AddRefs(pValues));
    NS_ENSURE_SUCCESS(rv,rv);
    pValues->GetLength(&pCsize);
    for (pColIndex=0;pColIndex<pCsize;pColIndex++) {
      do {
        rv = pValues->Item(pColIndex, getter_AddRefs(pValue));
        NS_ENSURE_SUCCESS(rv,rv);
        pValue->GetNodeType(&pNodeType);
        if (pNodeType!=nsIDOMNode::ELEMENT_NODE) pColIndex++;
      } while (pColIndex<pCsize && pNodeType!=nsIDOMNode::ELEMENT_NODE);
      if (pColIndex>=pCsize) break;
      rv = pValue->GetFirstChild(getter_AddRefs(pContent));
      NS_ENSURE_SUCCESS(rv,rv);
      pVariant = do_CreateInstance(NS_VARIANT_CONTRACTID, &rv);
      NS_ENSURE_SUCCESS(rv,rv);
      if (pContent) {
        rv = pContent->GetNodeValue(pText);
        NS_ENSURE_SUCCESS(rv,rv);
        pVariant->SetAsAString(pText);
        printf("%s|",ToNewCString(pText));
      } else {
        pVariant->SetAsAString(NS_LITERAL_STRING(""));
      }
      rv = pArray.AppendObject(pVariant);
    }
  }
  rv = mComponent->TreatP00DB(pArray, pLsize, pCsize, mTarget);
  return rv;
}


/* Generated by Pygmalion */


NS_IMPL_ISUPPORTS1(mozListenerP00DC, nsISOAPResponseListener)

mozListenerP00DC::mozListenerP00DC(mozC02gestsea* aComponent, const nsAString & aTarget)
{
  mComponent = aComponent;
  mTarget = aTarget;
}
mozListenerP00DC::~mozListenerP00DC()
{
}

NS_IMETHODIMP mozListenerP00DC::HandleResponse(nsISOAPResponse *aResponse, nsISOAPCall *aCall, PRUint32 aStatus, PRBool aLast, PRBool *aReturn)
{
  nsresult rv;
  nsCOMPtr<nsISOAPFault> pFault;
  rv = aResponse->GetFault(getter_AddRefs(pFault));
  NS_ENSURE_SUCCESS(rv, rv);
  if (pFault) {
    nsAutoString pFaute, pDetail, pTitle;
    nsCOMPtr<nsIDOMElement> pTheDetail;
    nsCOMPtr<nsIDOMNode> pNode;
    rv = pFault->GetDetail(getter_AddRefs(pTheDetail));
    NS_ENSURE_SUCCESS(rv,rv);
    rv = pTheDetail->GetFirstChild(getter_AddRefs(pNode));
    NS_ENSURE_SUCCESS(rv,rv);
    if (pNode) {
      nsCOMPtr<nsIDOMNamedNodeMap> pAttributes;
      nsCOMPtr<nsIDOMNode> pAttribute, pFirstNode;
      nsAutoString pNodeValue;
      rv = pNode->GetFirstChild(getter_AddRefs(pFirstNode));
      NS_ENSURE_SUCCESS(rv,rv);
      if (pFirstNode) {
        pFirstNode->GetNodeValue(pNodeValue);
        NS_ENSURE_SUCCESS(rv,rv);
        pDetail  = pNodeValue;
      }
      pNode->GetAttributes(getter_AddRefs(pAttributes));
      NS_ENSURE_SUCCESS(rv,rv);
      pAttributes->GetNamedItem(NS_LITERAL_STRING("code"), getter_AddRefs(pAttribute));
      NS_ENSURE_SUCCESS(rv,rv);
      if (pAttribute) {
        pAttribute->GetNodeValue(pNodeValue);
        NS_ENSURE_SUCCESS(rv,rv);
        pDetail += NS_LITERAL_STRING("\n(Erreur ");
        pDetail += pNodeValue;
        pDetail += NS_LITERAL_STRING(")");
      }
    } else pDetail = NS_LITERAL_STRING("Erreur sans message.");
    pFaute = pDetail;
    rv = pFault->GetFaultString(pTitle);
    NS_ENSURE_SUCCESS(rv,rv);
    nsCOMPtr<nsIPrompt> pPrompt= do_GetService(NS_DEFAULTPROMPT_CONTRACTID, &rv);
    NS_ENSURE_SUCCESS(rv,rv);
    pPrompt->Alert(ToNewUnicode(pTitle), ToNewUnicode(pFaute));
    return NS_ERROR_FAILURE;
  }

  nsISOAPParameter ** pParameters;
  PRUint32 pTotal;
  rv = aResponse->GetParameters(PR_FALSE, &pTotal, &pParameters);
  NS_ENSURE_SUCCESS(rv,rv);
  if (pTotal!=1) {
    nsCOMPtr<nsIPrompt> pPrompt= do_GetService(NS_DEFAULTPROMPT_CONTRACTID, &rv);
    NS_ENSURE_SUCCESS(rv,rv);
    pPrompt->Alert(ToNewUnicode(NS_LITERAL_CSTRING("Erreur système")), ToNewUnicode(NS_LITERAL_CSTRING("Le nombre total de paramètres reçus est incorrect.")));
    return NS_ERROR_FAILURE;
  }

  nsAutoString pText;
  nsCOMArray<nsIVariant> pArray;
  nsCOMPtr<nsIWritableVariant> pVariant;
  PRUint32 pLsize=0, pCsize=0;
  PRUint32 pLineIndex, pColIndex;
  PRUint16 pNodeType;
  nsCOMPtr<nsIDOMElement> pResult;
  nsCOMPtr<nsIDOMNodeList> pLines, pValues;
  nsCOMPtr<nsIDOMNode> pLine, pValue, pContent;
  rv = pParameters[0]->GetElement(getter_AddRefs(pResult));
  NS_ENSURE_SUCCESS(rv,rv);
  rv = pResult->GetChildNodes(getter_AddRefs(pLines));
  NS_ENSURE_SUCCESS(rv,rv);
  pLines->GetLength(&pLsize);
  for (pLineIndex=0;pLineIndex<pLsize;pLineIndex++) {
    do {
      rv = pLines->Item(pLineIndex, getter_AddRefs(pLine));
      NS_ENSURE_SUCCESS(rv,rv);
      pLine->GetNodeType(&pNodeType);
      if (pNodeType!=nsIDOMNode::ELEMENT_NODE) pLineIndex++;
    } while (pLineIndex<pLsize && pNodeType!=nsIDOMNode::ELEMENT_NODE);
    if (pLineIndex>=pLsize) break;
    rv = pLine->GetChildNodes(getter_AddRefs(pValues));
    NS_ENSURE_SUCCESS(rv,rv);
    pValues->GetLength(&pCsize);
    for (pColIndex=0;pColIndex<pCsize;pColIndex++) {
      do {
        rv = pValues->Item(pColIndex, getter_AddRefs(pValue));
        NS_ENSURE_SUCCESS(rv,rv);
        pValue->GetNodeType(&pNodeType);
        if (pNodeType!=nsIDOMNode::ELEMENT_NODE) pColIndex++;
      } while (pColIndex<pCsize && pNodeType!=nsIDOMNode::ELEMENT_NODE);
      if (pColIndex>=pCsize) break;
      rv = pValue->GetFirstChild(getter_AddRefs(pContent));
      NS_ENSURE_SUCCESS(rv,rv);
      pVariant = do_CreateInstance(NS_VARIANT_CONTRACTID, &rv);
      NS_ENSURE_SUCCESS(rv,rv);
      if (pContent) {
        rv = pContent->GetNodeValue(pText);
        NS_ENSURE_SUCCESS(rv,rv);
        pVariant->SetAsAString(pText);
        printf("%s|",ToNewCString(pText));
      } else {
        pVariant->SetAsAString(NS_LITERAL_STRING(""));
      }
      rv = pArray.AppendObject(pVariant);
    }
  }
  rv = mComponent->TreatP00DC(pArray, pLsize, pCsize, mTarget);
  return rv;
}


/* Generated by Pygmalion */


NS_IMPL_ISUPPORTS1(mozListenerP00DD, nsISOAPResponseListener)

mozListenerP00DD::mozListenerP00DD(mozC02gestsea* aComponent, const nsAString & aTarget)
{
  mComponent = aComponent;
  mTarget = aTarget;
}
mozListenerP00DD::~mozListenerP00DD()
{
}

NS_IMETHODIMP mozListenerP00DD::HandleResponse(nsISOAPResponse *aResponse, nsISOAPCall *aCall, PRUint32 aStatus, PRBool aLast, PRBool *aReturn)
{
  nsresult rv;
  nsCOMPtr<nsISOAPFault> pFault;
  rv = aResponse->GetFault(getter_AddRefs(pFault));
  NS_ENSURE_SUCCESS(rv, rv);
  if (pFault) {
    nsAutoString pFaute, pDetail, pTitle;
    nsCOMPtr<nsIDOMElement> pTheDetail;
    nsCOMPtr<nsIDOMNode> pNode;
    rv = pFault->GetDetail(getter_AddRefs(pTheDetail));
    NS_ENSURE_SUCCESS(rv,rv);
    rv = pTheDetail->GetFirstChild(getter_AddRefs(pNode));
    NS_ENSURE_SUCCESS(rv,rv);
    if (pNode) {
      nsCOMPtr<nsIDOMNamedNodeMap> pAttributes;
      nsCOMPtr<nsIDOMNode> pAttribute, pFirstNode;
      nsAutoString pNodeValue;
      rv = pNode->GetFirstChild(getter_AddRefs(pFirstNode));
      NS_ENSURE_SUCCESS(rv,rv);
      if (pFirstNode) {
        pFirstNode->GetNodeValue(pNodeValue);
        NS_ENSURE_SUCCESS(rv,rv);
        pDetail  = pNodeValue;
      }
      pNode->GetAttributes(getter_AddRefs(pAttributes));
      NS_ENSURE_SUCCESS(rv,rv);
      pAttributes->GetNamedItem(NS_LITERAL_STRING("code"), getter_AddRefs(pAttribute));
      NS_ENSURE_SUCCESS(rv,rv);
      if (pAttribute) {
        pAttribute->GetNodeValue(pNodeValue);
        NS_ENSURE_SUCCESS(rv,rv);
        pDetail += NS_LITERAL_STRING("\n(Erreur ");
        pDetail += pNodeValue;
        pDetail += NS_LITERAL_STRING(")");
      }
    } else pDetail = NS_LITERAL_STRING("Erreur sans message.");
    pFaute = pDetail;
    rv = pFault->GetFaultString(pTitle);
    NS_ENSURE_SUCCESS(rv,rv);
    nsCOMPtr<nsIPrompt> pPrompt= do_GetService(NS_DEFAULTPROMPT_CONTRACTID, &rv);
    NS_ENSURE_SUCCESS(rv,rv);
    pPrompt->Alert(ToNewUnicode(pTitle), ToNewUnicode(pFaute));
    return NS_ERROR_FAILURE;
  }

  nsISOAPParameter ** pParameters;
  PRUint32 pTotal;
  rv = aResponse->GetParameters(PR_FALSE, &pTotal, &pParameters);
  NS_ENSURE_SUCCESS(rv,rv);
  if (pTotal!=1) {
    nsCOMPtr<nsIPrompt> pPrompt= do_GetService(NS_DEFAULTPROMPT_CONTRACTID, &rv);
    NS_ENSURE_SUCCESS(rv,rv);
    pPrompt->Alert(ToNewUnicode(NS_LITERAL_CSTRING("Erreur système")), ToNewUnicode(NS_LITERAL_CSTRING("Le nombre total de paramètres reçus est incorrect.")));
    return NS_ERROR_FAILURE;
  }

  nsAutoString pText;
  nsCOMArray<nsIVariant> pArray;
  nsCOMPtr<nsIWritableVariant> pVariant;
  PRUint32 pLsize=0, pCsize=0;
  PRUint32 pLineIndex, pColIndex;
  PRUint16 pNodeType;
  nsCOMPtr<nsIDOMElement> pResult;
  nsCOMPtr<nsIDOMNodeList> pLines, pValues;
  nsCOMPtr<nsIDOMNode> pLine, pValue, pContent;
  rv = pParameters[0]->GetElement(getter_AddRefs(pResult));
  NS_ENSURE_SUCCESS(rv,rv);
  rv = pResult->GetChildNodes(getter_AddRefs(pLines));
  NS_ENSURE_SUCCESS(rv,rv);
  pLines->GetLength(&pLsize);
  for (pLineIndex=0;pLineIndex<pLsize;pLineIndex++) {
    do {
      rv = pLines->Item(pLineIndex, getter_AddRefs(pLine));
      NS_ENSURE_SUCCESS(rv,rv);
      pLine->GetNodeType(&pNodeType);
      if (pNodeType!=nsIDOMNode::ELEMENT_NODE) pLineIndex++;
    } while (pLineIndex<pLsize && pNodeType!=nsIDOMNode::ELEMENT_NODE);
    if (pLineIndex>=pLsize) break;
    rv = pLine->GetChildNodes(getter_AddRefs(pValues));
    NS_ENSURE_SUCCESS(rv,rv);
    pValues->GetLength(&pCsize);
    for (pColIndex=0;pColIndex<pCsize;pColIndex++) {
      do {
        rv = pValues->Item(pColIndex, getter_AddRefs(pValue));
        NS_ENSURE_SUCCESS(rv,rv);
        pValue->GetNodeType(&pNodeType);
        if (pNodeType!=nsIDOMNode::ELEMENT_NODE) pColIndex++;
      } while (pColIndex<pCsize && pNodeType!=nsIDOMNode::ELEMENT_NODE);
      if (pColIndex>=pCsize) break;
      rv = pValue->GetFirstChild(getter_AddRefs(pContent));
      NS_ENSURE_SUCCESS(rv,rv);
      pVariant = do_CreateInstance(NS_VARIANT_CONTRACTID, &rv);
      NS_ENSURE_SUCCESS(rv,rv);
      if (pContent) {
        rv = pContent->GetNodeValue(pText);
        NS_ENSURE_SUCCESS(rv,rv);
        pVariant->SetAsAString(pText);
        printf("%s|",ToNewCString(pText));
      } else {
        pVariant->SetAsAString(NS_LITERAL_STRING(""));
      }
      rv = pArray.AppendObject(pVariant);
    }
  }
  rv = mComponent->TreatP00DD(pArray, pLsize, pCsize, mTarget);
  return rv;
}


/* Generated by Pygmalion */


